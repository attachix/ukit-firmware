// Copyright JS Foundation and other contributors, http://js.foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

(function() { // IIFE ends in post.js
var Module;
var ENVIRONMENT_IS_NODE;

(function() {
  var prototype = {};

  function isArrayOrNodeBuffer(b) {
    if (typeof b !== 'object') {
      return false;
    }
    if (b instanceof Array) {
      return true;
    }
    // Check in case this code is not running in Node.js
    if (typeof Buffer !== 'function') {
      return false;
    }
    return (b instanceof Buffer);
  }

  function writeToFile(outputPath, outputArray) {
    if (!outputPath) {
      return;
    }
    if (!ENVIRONMENT_IS_NODE) {
      throw new Error(
        'Writing to file is only available when running with Node.js');
    }
    var fs = require('fs');
    fs.writeFileSync(outputPath, outputArray);
  }

  function compileBuffer(inBuffer, inBufferSize, isForGlobal, isStrict, outputPath) {
    isForGlobal = (isForGlobal === undefined) ? true : Boolean(isForGlobal);
    isStrict = Boolean(isStrict);

    var snapshotOutputBufferSize = 512 * 1024;
    var snapshotOutputBuffer = Module._malloc(snapshotOutputBufferSize);
    var inBufferType;
    if (typeof inBuffer === 'number') {
      inBufferType = 'number';
    } else if (isArrayOrNodeBuffer(inBuffer)) {
      inBufferType = 'array';
    } else {
      throw new Error('Unexpected inBuffer type: ' + inBuffer);
    }
    var bytesWritten = Module.ccall(
      'emscripten_snapshot_compiler_compile', 'number',
      [inBufferType, 'number', 'number', 'number', 'number', 'number'],
      [inBuffer, inBufferSize, isForGlobal, isStrict,
        snapshotOutputBuffer, snapshotOutputBufferSize]);
    if (0 === bytesWritten) {
      throw new Error('No snapshot bytes written');
    }
    var rv = Module.HEAPU8.subarray(
      snapshotOutputBuffer, snapshotOutputBuffer + bytesWritten);
    Module._free(snapshotOutputBuffer);
    writeToFile(outputPath, rv);
    return rv;
  }

  prototype.compileString = function(sourceString, isForGlobal, isStrict, outputPath) {
    var sourceBufferSize = Module.lengthBytesUTF8(sourceString) + 1;
    var sourceUTF8Buffer = Module._malloc(sourceBufferSize);
    var writtenUTF8Size = Module.stringToUTF8(sourceString, sourceUTF8Buffer, sourceBufferSize);
    if (sourceBufferSize < writtenUTF8Size) {
      throw new Error('Error decoding sourceString');
    }
    var rv = compileBuffer(
      sourceUTF8Buffer, sourceBufferSize - 1, isForGlobal, isStrict, outputPath);
    Module._free(sourceUTF8Buffer);
    return rv;
  };

  prototype.compileFile = function(inputPath, isForGlobal, isStrict, outputPath) {
    if (!ENVIRONMENT_IS_NODE) {
      throw new Error(
        'compileFile() is only available when running with Node.js');
    }
    var fs = require('fs');
    var sourceInputBuffer = fs.readFileSync(inputPath);
    return compileBuffer(
      sourceInputBuffer, sourceInputBuffer.length, isForGlobal, isStrict, outputPath);
  };

  prototype.inspect = prototype.toString = function() {
    return '[JerryScriptSnapshotCompiler v' + prototype.snapshotVersion + ']';
  };

  var ctor = function() {};
  ctor.prototype = prototype;
  Module = ctor;
})();
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    if (!func) return; // on null pointer, return undefined
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;


function getSafeHeapType(bytes, isFloat) {
  switch (bytes) {
    case 1: return 'i8';
    case 2: return 'i16';
    case 4: return isFloat ? 'float' : 'i32';
    case 8: return 'double';
    default: assert(0);
  }
}


function SAFE_HEAP_STORE(dest, value, bytes, isFloat) {
  if (dest <= 0) abort('segmentation fault storing ' + bytes + ' bytes to address ' + dest);
  if (dest % bytes !== 0) abort('alignment error storing to address ' + dest + ', which was expected to be aligned to a multiple of ' + bytes);
  if (staticSealed) {
    if (dest + bytes > HEAP32[DYNAMICTOP_PTR>>2]) abort('segmentation fault, exceeded the top of the available dynamic heap when storing ' + bytes + ' bytes to address ' + dest + '. STATICTOP=' + STATICTOP + ', DYNAMICTOP=' + HEAP32[DYNAMICTOP_PTR>>2]);
    assert(DYNAMICTOP_PTR);
    assert(HEAP32[DYNAMICTOP_PTR>>2] <= TOTAL_MEMORY);
  } else {
    if (dest + bytes > STATICTOP) abort('segmentation fault, exceeded the top of the available static heap when storing ' + bytes + ' bytes to address ' + dest + '. STATICTOP=' + STATICTOP);
  }
  setValue(dest, value, getSafeHeapType(bytes, isFloat), 1);
}
function SAFE_HEAP_STORE_D(dest, value, bytes) {
  SAFE_HEAP_STORE(dest, value, bytes, true);
}

function SAFE_HEAP_LOAD(dest, bytes, unsigned, isFloat) {
  if (dest <= 0) abort('segmentation fault loading ' + bytes + ' bytes from address ' + dest);
  if (dest % bytes !== 0) abort('alignment error loading from address ' + dest + ', which was expected to be aligned to a multiple of ' + bytes);
  if (staticSealed) {
    if (dest + bytes > HEAP32[DYNAMICTOP_PTR>>2]) abort('segmentation fault, exceeded the top of the available dynamic heap when loading ' + bytes + ' bytes from address ' + dest + '. STATICTOP=' + STATICTOP + ', DYNAMICTOP=' + HEAP32[DYNAMICTOP_PTR>>2]);
    assert(DYNAMICTOP_PTR);
    assert(HEAP32[DYNAMICTOP_PTR>>2] <= TOTAL_MEMORY);
  } else {
    if (dest + bytes > STATICTOP) abort('segmentation fault, exceeded the top of the available static heap when loading ' + bytes + ' bytes from address ' + dest + '. STATICTOP=' + STATICTOP);
  }
  var type = getSafeHeapType(bytes, isFloat);
  var ret = getValue(dest, type, 1);
  if (unsigned) ret = unSign(ret, parseInt(type.substr(1)), 1);
  return ret;
}
function SAFE_HEAP_LOAD_D(dest, bytes, unsigned) {
  return SAFE_HEAP_LOAD(dest, bytes, unsigned, true);
}

function SAFE_FT_MASK(value, mask) {
  var ret = value & mask;
  if (ret !== value) {
    abort('Function table mask error: function pointer is ' + value + ' which is masked by ' + mask + ', the likely cause of this is that the function pointer is being called by the wrong type.');
  }
  return ret;
}

function segfault() {
  abort('segmentation fault');
}
function alignfault() {
  abort('alignment fault');
}
function ftfault() {
  abort('Function table mask error');
}

//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
  if (noSafe) {
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
  } else {
    switch(type) {
      case 'i1': SAFE_HEAP_STORE(((ptr)|0), ((value)|0), 1); break;
      case 'i8': SAFE_HEAP_STORE(((ptr)|0), ((value)|0), 1); break;
      case 'i16': SAFE_HEAP_STORE(((ptr)|0), ((value)|0), 2); break;
      case 'i32': SAFE_HEAP_STORE(((ptr)|0), ((value)|0), 4); break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],SAFE_HEAP_STORE(((ptr)|0), ((tempI64[0])|0), 4),SAFE_HEAP_STORE((((ptr)+(4))|0), ((tempI64[1])|0), 4)); break;
      case 'float': SAFE_HEAP_STORE_D(((ptr)|0), (+(value)), 4); break;
      case 'double': SAFE_HEAP_STORE_D(((ptr)|0), (+(value)), 8); break;
      default: abort('invalid type for setValue: ' + type);
    }
  }
}
Module["setValue"] = setValue;

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
  if (noSafe) {
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  } else {
    switch(type) {
      case 'i1': return ((SAFE_HEAP_LOAD(((ptr)|0), 1, 0))|0);
      case 'i8': return ((SAFE_HEAP_LOAD(((ptr)|0), 1, 0))|0);
      case 'i16': return ((SAFE_HEAP_LOAD(((ptr)|0), 2, 0))|0);
      case 'i32': return ((SAFE_HEAP_LOAD(((ptr)|0), 4, 0))|0);
      case 'i64': return ((SAFE_HEAP_LOAD(((ptr)|0), 8, 0))|0);
      case 'float': return (+(SAFE_HEAP_LOAD_D(((ptr)|0), 4, 0)));
      case 'double': return (+(SAFE_HEAP_LOAD_D(((ptr)|0), 8, 0)));
      default: abort('invalid type for setValue: ' + type);
    }
  }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = ((SAFE_HEAP_LOAD((((ptr)+(i))|0), 1, 1))|0);
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = ((SAFE_HEAP_LOAD(((ptr++)|0), 1, 0))|0);
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = ((SAFE_HEAP_LOAD((((ptr)+(i*2))|0), 2, 0))|0);
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    SAFE_HEAP_STORE(((outPtr)|0), ((codeUnit)|0), 2);
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  SAFE_HEAP_STORE(((outPtr)|0), ((0)|0), 2);
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = ((SAFE_HEAP_LOAD((((ptr)+(i*4))|0), 4, 0))|0);
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    SAFE_HEAP_STORE(((outPtr)|0), ((codeUnit)|0), 4);
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  SAFE_HEAP_STORE(((outPtr)|0), ((0)|0), 4);
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;



function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    SAFE_HEAP_STORE(((buffer++)|0), ((str.charCodeAt(i))|0), 1);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) SAFE_HEAP_STORE(((buffer)|0), ((0)|0), 1);
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [function() { throw new Error ('Input must be valid UTF-8') },
 function($0) { throw new Error (UTF8ToString ($0)) }];

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}



STATIC_BASE = Runtime.GLOBAL_BASE;

STATICTOP = STATIC_BASE + 540224;
/* global initializers */  __ATINIT__.push();


/* memory initializer */ allocate([255,255,255,255,255,255,239,127,1,0,0,0,0,0,0,0,105,87,20,139,10,191,5,64,24,45,68,84,251,33,9,64,22,85,181,187,177,107,2,64,239,57,250,254,66,46,230,63,254,130,43,101,71,21,247,63,14,229,38,21,123,203,219,63,205,59,127,102,158,160,246,63,205,59,127,102,158,160,230,63,2,14,0,0,50,14,0,0,102,13,0,0,144,13,0,0,84,13,0,0,54,13,0,0,146,14,0,0,162,13,0,0,36,58,8,0,129,20,0,0,131,20,0,0,133,20,0,0,135,20,0,0,137,20,0,0,139,20,0,0,251,27,0,0,247,27,0,0,143,20,0,0,148,20,0,0,153,20,0,0,158,20,0,0,163,20,0,0,168,20,0,0,173,20,0,0,185,27,0,0,178,20,0,0,195,27,0,0,183,20,0,0,189,20,0,0,195,20,0,0,140,27,0,0,201,20,0,0,207,20,0,0,213,20,0,0,220,20,0,0,227,20,0,0,234,20,0,0,241,20,0,0,248,20,0,0,255,20,0,0,6,21,0,0,13,21,0,0,20,21,0,0,27,21,0,0,34,21,0,0,41,21,0,0,49,21,0,0,57,21,0,0,65,21,0,0,73,21,0,0,82,21,0,0,11,27,0,0,91,21,0,0,100,21,0,0,109,21,0,0,118,21,0,0,127,21,0,0,136,21,0,0,145,21,0,0,155,21,0,0,165,21,0,0,175,21,0,0,185,21,0,0,195,21,0,0,205,21,0,0,215,21,0,0,225,21,0,0,236,21,0,0,247,21,0,0,3,22,0,0,16,22,0,0,29,22,0,0,43,22,0,0,58,22,0,0,73,22,0,0,88,22,0,0,103,22,0,0,120,22,0,0,138,22,0,0,157,22,0,0,176,22,0,0,196,22,0,0,217,22,0,0,242,22,0,0,0,0,0,0,1,0,0,0,6,0,0,0,6,0,0,0,9,0,0,0,19,0,0,0,25,0,0,0,37,0,0,0,41,0,0,0,50,0,0,0,58,0,0,0,60,0,0,0,61,0,0,0,63,0,0,0,64,0,0,0,68,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,74,0,0,0,74,0,0,0,74,0,0,0,75,0,0,0,75,0,0,0,75,0,0,0,75,0,0,0,76,0,0,0,68,2,0,0,100,2,0,0,148,2,0,0,220,2,0,0,44,3,0,0,116,3,0,0,164,3,0,0,196,3,0,0,220,3,0,0,230,27,0,0,62,0,0,0,233,27,0,0,78,0,0,0,236,27,0,0,41,0,0,0,0,0,0,0,0,0,0,0,210,27,0,0,71,0,0,0,214,27,0,0,94,0,0,0,218,27,0,0,65,0,0,0,222,27,0,0,80,0,0,0,226,27,0,0,66,0,0,0,0,0,0,0,0,0,0,0,170,27,0,0,63,0,0,0,175,27,0,0,64,0,0,0,180,27,0,0,87,0,0,0,185,27,0,0,5,0,0,0,190,27,0,0,2,0,0,0,195,27,0,0,3,0,0,0,200,27,0,0,10,0,0,0,205,27,0,0,76,0,0,0,0,0,0,0,0,0,0,0,116,27,0,0,61,0,0,0,122,27,0,0,67,0,0,0,128,27,0,0,86,0,0,0,134,27,0,0,90,0,0,0,140,27,0,0,4,0,0,0,146,27,0,0,89,0,0,0,152,27,0,0,79,0,0,0,158,27,0,0,73,0,0,0,164,27,0,0,97,0,0,0,0,0,0,0,0,0,0,0,60,27,0,0,12,0,0,0,67,27,0,0,91,0,0,0,74,27,0,0,92,0,0,0,81,27,0,0,96,0,0,0,88,27,0,0,69,0,0,0,95,27,0,0,101,0,0,0,102,27,0,0,72,0,0,0,109,27,0,0,11,0,0,0,0,0,0,0,0,0,0,0,20,27,0,0,77,0,0,0,28,27,0,0,88,0,0,0,36,27,0,0,68,0,0,0,44,27,0,0,99,0,0,0,52,27,0,0,95,0,0,0,0,0,0,0,0,0,0,0,249,26,0,0,70,0,0,0,2,27,0,0,74,0,0,0,11,27,0,0,75,0,0,0,0,0,0,0,0,0,0,0,229,26,0,0,98,0,0,0,239,26,0,0,100,0,0,0,0,0,0,0,0,0,0,0,207,26,0,0,93,0,0,0,218,26,0,0,42,0,0,0,0,0,0,0,0,0,0,0,251,27,0,0,3,0,0,0,247,27,0,0,3,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,46,58,8,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,124,5,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,54,62,8,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,22,14,24,47,32,95,32,0,48,192,0,216,0,248,0,248,1,198,2,224,2,112,3,118,3,122,3,136,3,142,3,163,3,247,3,138,4,49,5,97,5,208,5,240,5,32,6,110,6,113,6,229,6,238,6,250,6,18,7,77,7,202,7,244,7,0,8,64,8,160,8,182,8,4,9,88,9,113,9,133,9,143,9,147,9,170,9,182,9,220,9,223,9,240,9,5,10,15,10,19,10,42,10,50,10,53,10,56,10,89,10,114,10,133,10,143,10,147,10,170,10,178,10,181,10,224,10,5,11,15,11,19,11,42,11,50,11,53,11,92,11,95,11,133,11,142,11,146,11,153,11,158,11,163,11,168,11,174,11,5,12,14,12,18,12,42,12,88,12,96,12,133,12,142,12,146,12,170,12,181,12,224,12,241,12,5,13,14,13,18,13,84,13,95,13,122,13,133,13,154,13,179,13,192,13,1,14,50,14,64,14,129,14,135,14,148,14,153,14,161,14,170,14,173,14,178,14,192,14,220,14,64,15,73,15,136,15,0,16,80,16,90,16,101,16,110,16,117,16,160,16,208,16,252,16,252,17,74,18,80,18,90,18,96,18,138,18,144,18,178,18,184,18,194,18,200,18,216,18,18,19,24,19,128,19,160,19,248,19,1,20,1,21,1,22,111,22,129,22,160,22,238,22,0,23,14,23,32,23,64,23,96,23,110,23,128,23,32,24,128,24,135,24,176,24,0,25,80,25,112,25,128,25,176,25,0,26,32,26,5,27,69,27,131,27,174,27,186,27,0,28,77,28,90,28,128,28,233,28,238,28,245,28,0,29,0,30,0,31,24,31,32,31,72,31,80,31,95,31,128,31,182,31,194,31,198,31,208,31,214,31,224,31,242,31,246,31,144,32,10,33,25,33,42,33,47,33,60,33,69,33,96,33,0,44,48,44,96,44,235,44,242,44,0,45,48,45,128,45,160,45,168,45,176,45,184,45,192,45,200,45,208,45,216,45,5,48,33,48,49,48,56,48,65,48,157,48,161,48,252,48,5,49,49,49,160,49,240,49,0,160,0,161,0,162,0,163,0,164,208,164,0,165,0,166,16,166,42,166,64,166,127,166,160,166,23,167,34,167,139,167,176,167,247,167,3,168,7,168,12,168,64,168,130,168,242,168,10,169,48,169,96,169,132,169,224,169,230,169,250,169,0,170,64,170,68,170,96,170,126,170,181,170,185,170,219,170,224,170,242,170,1,171,9,171,17,171,32,171,40,171,48,171,92,171,112,171,176,215,203,215,0,249,0,250,112,250,0,251,19,251,31,251,42,251,56,251,64,251,67,251,70,251,211,251,211,252,80,253,146,253,240,253,112,254,118,254,33,255,65,255,102,255,194,255,202,255,210,255,218,255,170,0,181,0,186,0,236,2,238,2,127,3,134,3,140,3,89,5,213,6,255,6,16,7,177,7,250,7,26,8,36,8,40,8,61,9,80,9,178,9,189,9,206,9,94,10,189,10,208,10,249,10,61,11,113,11,131,11,156,11,208,11,61,12,128,12,189,12,222,12,61,13,78,13,189,13,132,14,138,14,141,14,165,14,167,14,189,14,198,14,0,15,63,16,97,16,142,16,199,16,205,16,88,18,192,18,215,23,220,23,170,24,167,26,89,31,91,31,93,31,190,31,113,32,127,32,2,33,7,33,21,33,36,33,38,33,40,33,78,33,39,45,45,45,111,45,47,46,0,52,181,77,0,78,213,159,251,168,253,168,207,169,122,170,177,170,192,170,194,170,0,172,163,215,29,251,62,251,0,3,131,4,145,5,193,5,196,5,16,6,75,6,214,6,223,6,231,6,234,6,240,6,48,7,166,7,192,7,235,7,22,8,27,8,37,8,41,8,89,8,212,8,227,8,58,9,62,9,81,9,98,9,102,9,129,9,190,9,199,9,203,9,226,9,230,9,1,10,62,10,71,10,75,10,102,10,129,10,190,10,199,10,203,10,226,10,230,10,1,11,62,11,71,11,75,11,86,11,98,11,102,11,190,11,198,11,202,11,230,11,0,12,62,12,70,12,74,12,85,12,98,12,102,12,129,12,190,12,198,12,202,12,213,12,226,12,230,12,1,13,62,13,70,13,74,13,98,13,102,13,130,13,207,13,216,13,230,13,242,13,52,14,71,14,80,14,180,14,187,14,200,14,208,14,24,15,32,15,62,15,113,15,134,15,141,15,153,15,43,16,64,16,86,16,94,16,98,16,103,16,113,16,130,16,143,16,93,19,18,23,50,23,82,23,114,23,180,23,224,23,11,24,16,24,133,24,32,25,48,25,70,25,208,25,23,26,85,26,96,26,127,26,144,26,176,26,0,27,52,27,80,27,107,27,128,27,161,27,176,27,230,27,36,28,64,28,80,28,208,28,212,28,242,28,248,28,192,29,251,29,63,32,208,32,229,32,239,44,224,45,42,48,153,48,32,166,116,166,158,166,240,166,35,168,128,168,180,168,208,168,224,168,0,169,38,169,71,169,128,169,179,169,208,169,240,169,41,170,76,170,80,170,123,170,178,170,183,170,190,170,235,170,245,170,227,171,236,171,240,171,0,254,32,254,51,254,77,254,16,255,191,5,199,5,112,6,17,7,188,9,215,9,60,10,81,10,117,10,188,10,60,11,130,11,215,11,188,12,87,13,202,13,214,13,49,14,177,14,53,15,55,15,57,15,198,15,221,23,169,24,237,28,84,32,225,32,127,45,111,166,2,168,6,168,11,168,229,169,67,170,176,170,193,170,30,251,63,255,0,0,172,0,172,0,172,0,1,0,172,64,172,64,172,64,2,32,174,0,174,0,174,0,39,1,174,64,174,64,174,64,85,0,175,0,175,0,175,0,14,16,175,64,175,64,175,64,15,3,214,0,214,0,214,0,19,16,176,0,176,0,176,0,21,0,177,0,177,0,177,0,20,16,173,0,173,0,173,0,3,2,132,2,133,2,6,16,7,16,8,16,9,16,10,16,132,3,11,16,12,16,13,16,152,17,24,19,152,18,152,19,22,16,23,16,23,18,151,18,151,19,43,16,43,16,43,16,41,0,0,0,0,0,0,0,0,0,38,1,38,0,38,2,87,0,88,0,50,17,50,18,51,17,51,18,52,17,52,18,53,17,53,18,54,17,54,18,56,17,55,16,200,17,72,19,200,18,201,17,73,19,201,18,202,17,74,19,202,18,190,17,62,19,190,18,191,17,63,19,191,18,192,17,64,19,192,18,193,17,65,19,193,18,194,17,66,19,194,18,195,17,67,19,195,18,196,17,68,19,196,18,197,17,69,19,197,18,198,17,70,19,198,18,199,17,71,19,199,18,203,17,75,19,203,18,204,17,76,19,204,18,205,17,77,19,205,18,185,17,57,19,185,18,186,17,58,19,186,18,187,17,59,19,187,18,188,17,60,19,188,18,189,17,61,19,189,18,161,17,34,16,153,9,153,25,153,41,29,6,29,22,29,38,154,9,154,25,154,41,30,6,30,22,30,38,155,9,155,25,155,41,31,6,31,22,31,38,156,9,156,25,156,41,32,6,32,22,32,38,42,0,42,16,42,32,42,0,42,16,42,32,42,0,42,16,42,32,42,0,42,16,42,32,42,0,42,16,42,32,42,0,42,16,42,32,42,0,42,16,42,32,42,0,42,16,42,32,35,9,35,25,35,41,35,5,35,21,35,37,35,6,35,22,35,38,36,10,36,26,36,42,37,10,37,26,37,42,185,9,57,11,186,9,58,11,187,9,59,11,188,9,60,11,189,9,61,11,203,9,75,11,204,9,76,11,205,9,77,11,202,9,74,11,200,9,72,11,201,9,73,11,0,0,0,0,206,0,206,0,206,0,80,16,207,0,207,0,207,0,144,2,209,64,209,64,209,64,145,2,210,0,210,0,210,0,40,0,211,0,211,0,211,0,18,16,212,0,212,0,212,0,0,0,185,25,57,27,186,25,58,27,187,25,59,27,188,25,60,27,189,25,61,27,203,25,75,27,204,25,76,27,205,25,77,27,202,25,74,27,200,25,72,27,201,25,73,27,185,41,57,43,186,41,58,43,187,41,59,43,188,41,60,43,189,41,61,43,203,41,75,43,204,41,76,43,205,41,77,43,202,41,74,43,200,41,72,43,201,41,73,43,0,0,60,0,3,20,4,0,15,0,2,20,20,0,39,0,2,20,0,0,48,0,4,20,128,0,82,0,7,0,0,0,33,0,1,0,1,0,56,0,3,0,5,0,82,0,7,0,0,0,60,0,3,20,3,0,33,0,1,0,0,0,48,0,4,20,128,0,21,0,4,20,146,0,12,0,4,20,161,0,11,0,4,20,177,0,82,0,7,0,0,0,56,0,3,0,2,0,33,0,1,0,1,0,82,0,7,0,0,0,57,0,0,0,72,0,6,0,1,0,10,1,42,0,1,0,11,1,26,0,3,20,1,0,41,0,3,20,3,0,20,0,3,20,4,0,13,0,4,20,129,0,59,0,4,20,145,0,23,0,4,20,161,0,44,0,4,20,177,0,54,0,4,20,193,0,70,0,4,20,209,0,55,0,4,20,225,0,71,0,4,20,241,0,47,0,4,20,2,1,82,0,7,0,0,0,60,0,3,20,1,0,48,0,4,20,128,0,40,0,4,20,144,0,67,0,4,20,160,0,66,0,4,20,177,0,63,0,4,20,193,0,73,0,4,20,209,0,82,0,7,0,0,0,33,0,1,0,1,0,56,0,3,0,0,0,65,0,4,20,129,0,72,0,4,20,145,0,17,0,4,20,161,0,32,0,4,20,177,0,69,0,4,20,193,0,46,0,4,20,209,0,45,0,4,20,225,0,62,0,4,20,241,0,14,0,4,20,1,1,74,0,4,20,18,1,31,0,4,20,34,1,68,0,4,20,50,1,64,0,4,20,67,1,82,0,7,0,0,0,33,0,1,0,0,0,82,0,7,0,0,0,123,32,116,104,114,111,119,32,110,101,119,32,69,114,114,111,114,32,40,39,73,110,112,117,116,32,109,117,115,116,32,98,101,32,118,97,108,105,100,32,85,84,70,45,56,39,41,32,125,0,123,32,116,104,114,111,119,32,110,101,119,32,69,114,114,111,114,32,40,85,84,70,56,84,111,83,116,114,105,110,103,32,40,36,48,41,41,32,125,0,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,104,97,118,101,32,97,110,32,101,114,114,111,114,32,102,108,97,103,0,3,5,7,11,13,17,19,23,73,110,118,97,108,105,100,32,97,114,114,97,121,32,108,101,110,103,116,104,46,0,65,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,99,111,110,118,101,114,116,101,100,32,116,111,32,97,110,32,111,98,106,101,99,116,46,0,69,120,112,101,99,116,101,100,32,97,110,32,111,98,106,101,99,116,46,0,65,99,99,101,115,115,111,114,115,32,99,97,110,110,111,116,32,98,101,32,119,114,105,116,97,98,108,101,46,0,79,98,106,101,99,116,32,101,120,112,101,99,116,101,100,46,0,66,105,110,100,105,110,103,32,99,97,110,110,111,116,32,98,101,32,115,101,116,46,0,66,105,110,100,105,110,103,32,100,111,101,115,32,110,111,116,32,101,120,105,115,116,32,111,114,32,105,115,32,117,110,105,110,105,116,105,97,108,105,115,101,100,46,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,32,116,121,112,101,46,0,69,120,112,101,99,116,101,100,32,97,32,99,111,110,102,105,103,117,114,97,98,108,101,32,112,114,111,112,101,114,116,121,46,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,32,116,121,112,101,32,105,110,32,91,91,68,101,102,97,117,108,116,86,97,108,117,101,93,93,46,0,69,120,112,101,99,116,101,100,32,97,32,102,117,110,99,116,105,111,110,32,111,98,106,101,99,116,46,0,72,101,97,112,32,115,116,97,116,115,58,10,32,32,72,101,97,112,32,115,105,122,101,32,61,32,37,122,117,32,98,121,116,101,115,10,32,32,65,108,108,111,99,97,116,101,100,32,61,32,37,122,117,32,98,121,116,101,115,10,32,32,80,101,97,107,32,97,108,108,111,99,97,116,101,100,32,61,32,37,122,117,32,98,121,116,101,115,10,32,32,87,97,115,116,101,32,61,32,37,122,117,32,98,121,116,101,115,10,32,32,80,101,97,107,32,119,97,115,116,101,32,61,32,37,122,117,32,98,121,116,101,115,10,32,32,65,108,108,111,99,97,116,101,100,32,98,121,116,101,32,99,111,100,101,32,100,97,116,97,32,61,32,37,122,117,32,98,121,116,101,115,10,32,32,80,101,97,107,32,97,108,108,111,99,97,116,101,100,32,98,121,116,101,32,99,111,100,101,32,100,97,116,97,32,61,32,37,122,117,32,98,121,116,101,115,10,32,32,65,108,108,111,99,97,116,101,100,32,115,116,114,105,110,103,32,100,97,116,97,32,61,32,37,122,117,32,98,121,116,101,115,10,32,32,80,101,97,107,32,97,108,108,111,99,97,116,101,100,32,115,116,114,105,110,103,32,100,97,116,97,32,61,32,37,122,117,32,98,121,116,101,115,10,32,32,65,108,108,111,99,97,116,101,100,32,111,98,106,101,99,116,32,100,97,116,97,32,61,32,37,122,117,32,98,121,116,101,115,10,32,32,80,101,97,107,32,97,108,108,111,99,97,116,101,100,32,111,98,106,101,99,116,32,100,97,116,97,32,61,32,37,122,117,32,98,121,116,101,115,10,32,32,65,108,108,111,99,97,116,101,100,32,112,114,111,112,101,114,116,121,32,100,97,116,97,32,61,32,37,122,117,32,98,121,116,101,115,10,32,32,80,101,97,107,32,97,108,108,111,99,97,116,101,100,32,112,114,111,112,101,114,116,121,32,100,97,116,97,32,61,32,37,122,117,32,98,121,116,101,115,10,0,32,32,83,107,105,112,45,97,104,101,97,100,32,114,97,116,105,111,32,61,32,37,122,117,46,37,48,52,122,117,10,32,32,65,118,101,114,97,103,101,32,97,108,108,111,99,32,105,116,101,114,97,116,105,111,110,32,61,32,37,122,117,46,37,48,52,122,117,10,32,32,65,118,101,114,97,103,101,32,102,114,101,101,32,105,116,101,114,97,116,105,111,110,32,61,32,37,122,117,46,37,48,52,122,117,10,0,22,30,255,201,11,4,4,1,3,2,19,82,138,165,37,38,26,2,42,1,98,1,1,2,29,88,32,1,21,24,20,7,53,9,15,7,1,21,6,3,1,2,1,5,1,21,6,1,1,1,3,2,8,2,21,6,1,4,1,7,1,21,6,1,4,1,2,5,2,3,1,1,1,2,11,7,2,22,15,2,1,7,2,22,9,4,1,1,7,2,40,2,2,5,17,23,8,6,47,1,6,1,1,3,6,2,1,3,1,4,3,7,35,4,42,5,3,1,2,12,37,42,255,76,3,6,3,40,3,32,3,6,3,14,56,3,66,15,85,5,255,255,107,16,25,74,10,12,3,17,17,12,2,51,87,4,33,69,30,29,4,43,25,22,52,46,6,29,1,43,35,2,35,8,3,3,1,191,255,21,5,37,5,7,30,52,6,2,6,3,5,12,2,6,12,9,4,3,10,3,4,40,46,46,132,3,1,37,55,22,6,6,6,6,6,6,6,6,2,8,4,4,85,2,89,3,40,93,26,15,255,255,255,255,140,45,255,12,15,1,46,30,79,8,102,35,7,10,2,3,22,51,49,5,27,22,28,46,4,9,4,40,2,7,22,49,1,4,2,10,2,5,5,5,6,6,42,9,114,22,48,255,109,105,6,4,9,12,4,1,1,107,255,106,63,53,11,4,134,25,25,88,5,5,5,2,111,4,44,1,1,10,30,6,5,1,3,9,26,10,9,8,3,8,2,4,2,13,32,2,17,6,1,9,2,6,1,2,1,9,2,4,1,2,11,2,7,2,2,1,9,2,6,1,2,1,1,9,4,2,3,9,3,6,2,3,1,1,9,2,6,2,3,1,1,9,2,6,2,3,1,9,1,5,7,9,1,6,7,9,5,1,5,9,1,9,1,19,1,10,35,19,9,3,2,2,6,3,11,14,2,2,2,1,1,31,9,2,9,1,11,11,9,9,4,9,28,10,9,13,4,16,9,8,2,12,9,13,19,9,9,2,20,2,1,53,4,1,12,11,2,31,5,1,9,9,1,1,4,1,17,9,17,9,7,12,3,13,9,9,13,1,9,2,2,1,1,4,1,7,1,9,15,15,1,2,9,32,0,44,0,58,0,91,0,93,0,78,97,78,0,68,97,116,101,0,78,117,108,108,0,98,105,110,100,0,99,97,108,108,0,101,118,97,108,0,107,101,121,115,0,110,97,109,101,0,115,101,97,108,0,65,114,114,97,121,0,69,114,114,111,114,0,97,112,112,108,121,0,105,115,78,97,78,0,118,97,108,117,101,0,78,117,109,98,101,114,0,79,98,106,101,99,116,0,82,101,103,69,120,112,0,83,116,114,105,110,103,0,99,97,108,108,101,101,0,99,97,108,108,101,114,0,99,114,101,97,116,101,0,102,114,101,101,122,101,0,108,101,110,103,116,104,0,110,117,109,98,101,114,0,111,98,106,101,99,116,0,115,116,114,105,110,103,0,66,111,111,108,101,97,110,0,98,111,111,108,101,97,110,0,109,101,115,115,97,103,101,0,118,97,108,117,101,79,102,0,70,117,110,99,116,105,111,110,0,73,110,102,105,110,105,116,121,0,105,115,70,105,110,105,116,101,0,105,115,70,114,111,122,101,110,0,105,115,83,101,97,108,101,100,0,112,97,114,115,101,73,110,116,0,116,111,83,116,114,105,110,103,0,119,114,105,116,97,98,108,101,0,45,73,110,102,105,110,105,116,121,0,65,114,103,117,109,101,110,116,115,0,85,110,100,101,102,105,110,101,100,0,97,114,103,117,109,101,110,116,115,0,100,101,99,111,100,101,85,82,73,0,101,110,99,111,100,101,85,82,73,0,112,114,111,116,111,116,121,112,101,0,117,110,100,101,102,105,110,101,100,0,101,110,117,109,101,114,97,98,108,101,0,112,97,114,115,101,70,108,111,97,116,0,99,111,110,115,116,114,117,99,116,111,114,0,99,111,110,102,105,103,117,114,97,98,108,101,0,105,115,69,120,116,101,110,115,105,98,108,101,0,105,115,80,114,111,116,111,116,121,112,101,79,102,0,100,101,102,105,110,101,80,114,111,112,101,114,116,121,0,103,101,116,80,114,111,116,111,116,121,112,101,79,102,0,104,97,115,79,119,110,80,114,111,112,101,114,116,121,0,116,111,76,111,99,97,108,101,83,116,114,105,110,103,0,100,101,102,105,110,101,80,114,111,112,101,114,116,105,101,115,0,112,114,101,118,101,110,116,69,120,116,101,110,115,105,111,110,115,0,100,101,99,111,100,101,85,82,73,67,111,109,112,111,110,101,110,116,0,101,110,99,111,100,101,85,82,73,67,111,109,112,111,110,101,110,116,0,103,101,116,79,119,110,80,114,111,112,101,114,116,121,78,97,109,101,115,0,112,114,111,112,101,114,116,121,73,115,69,110,117,109,101,114,97,98,108,101,0,103,101,116,79,119,110,80,114,111,112,101,114,116,121,68,101,115,99,114,105,112,116,111,114,0,102,117,110,99,116,105,111,110,40,41,123,47,42,32,101,99,109,97,115,99,114,105,112,116,32,42,47,125,0,0,1,1,1,1,1,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,11,12,12,13,14,14,14,14,16,17,18,18,19,20,24,28,37,32,91,108,105,110,101,58,32,37,44,32,99,111,108,117,109,110,58,32,37,93,0,69,120,112,101,99,116,101,100,32,97,32,99,111,110,115,116,114,117,99,116,111,114,46,0,69,120,112,101,99,116,101,100,32,97,32,102,117,110,99,116,105,111,110,46,0,85,110,100,101,102,105,110,101,100,32,114,101,102,101,114,101,110,99,101,46,0,67,97,110,110,111,116,32,115,101,116,32,112,114,111,112,101,114,116,121,32,39,37,39,32,111,102,32,37,0,67,97,110,110,111,116,32,114,101,97,100,32,112,114,111,112,101,114,116,121,32,39,37,39,32,111,102,32,37,0,65,114,103,117,109,101,110,116,32,39,116,104,105,115,39,32,105,115,32,110,111,116,32,97,110,32,111,98,106,101,99,116,46,0,65,114,103,117,109,101,110,116,32,39,116,104,105,115,39,32,105,115,32,110,111,116,32,97,32,102,117,110,99,116,105,111,110,46,0,84,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,32,100,101,99,108,97,114,101,100,32,102,111,114,32,70,117,110,99,116,105,111,110,46,97,112,112,108,121,40,41,46,0,39,70,117,110,99,116,105,111,110,46,112,114,111,116,111,116,121,112,101,39,32,105,115,32,110,111,116,32,97,32,99,111,110,115,116,114,117,99,116,111,114,46,0,0,0,0,0,130,103,255,3,254,255,255,135,254,255,255,71,85,110,105,99,111,100,101,32,115,117,114,114,111,103,97,116,101,32,112,97,105,114,32,109,105,115,115,105,110,103,46,0,0,0,0,0,218,255,255,175,255,255,255,135,254,255,255,71,73,110,118,97,108,105,100,32,104,101,120,97,100,101,99,105,109,97,108,32,118,97,108,117,101,46,0,73,110,118,97,108,105,100,32,85,84,70,56,32,99,104,97,114,97,99,116,101,114,46,0,73,110,118,97,108,105,100,32,85,84,70,56,32,115,116,114,105,110,103,46,0,73,110,118,97,108,105,100,32,85,84,70,56,32,99,111,100,101,112,111,105,110,116,46,0,73,110,118,97,108,105,100,32,67,69,83,85,56,32,115,116,114,105,110,103,46,0,39,116,111,83,116,114,105,110,103,32,105,115,32,109,105,115,115,105,110,103,32,111,114,32,110,111,116,32,97,32,102,117,110,99,116,105,111,110,46,39,0,65,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,110,32,111,98,106,101,99,116,46,0,37,32,105,115,32,110,111,116,32,100,101,102,105,110,101,100,0,128,152,152,152,96,136,136,136,96,120,120,120,96,104,104,104,128,120,120,120,160,104,104,104,97,152,152,152,160,120,120,120,148,120,120,120,160,120,120,120,161,195,226,160,160,160,160,160,193,160,164,164,96,129,163,161,225,160,193,227,225,148,128,96,128,129,131,131,128,96,128,129,128,128,128,161,128,161,128,161,128,161,128,161,128,161,96,129,163,96,129,163,96,129,163,96,129,163,96,129,163,96,129,163,96,129,163,96,129,163,96,129,163,96,129,163,96,129,163,96,129,163,96,129,163,96,129,163,96,129,163,96,129,163,96,129,163,96,129,163,96,129,163,96,129,163,96,129,163,96,161,64,96,64,129,161,129,64,96,64,129,161,129,64,96,64,129,161,129,64,96,64,129,161,129,116,148,116,52,84,52,96,128,96,32,64,32,64,96,64,0,32,0,32,64,32,0,32,0,32,64,32,97,129,97,131,163,131,65,97,65,97,129,97,0,33,0,33,0,33,0,33,0,33,0,33,0,33,0,33,0,33,0,33,0,33,128,128,184,184,184,160,248,248,248,131,136,136,136,131,216,216,216,160,184,184,184,160,152,152,152,128,32,65,32,65,32,65,32,65,32,65,32,65,32,65,32,65,32,65,32,65,32,65,0,33,0,33,0,33,0,33,0,33,0,33,0,33,0,33,0,33,0,33,0,33,128,105,109,112,108,101,109,101,110,116,115,0,105,110,115,116,97,110,99,101,111,102,0,105,110,116,101,114,102,97,99,101,0,112,114,111,116,101,99,116,101,100,0,99,111,110,116,105,110,117,101,0,100,101,98,117,103,103,101,114,0,102,117,110,99,116,105,111,110,0,100,101,102,97,117,108,116,0,101,120,116,101,110,100,115,0,102,105,110,97,108,108,121,0,112,97,99,107,97,103,101,0,112,114,105,118,97,116,101,0,100,101,108,101,116,101,0,101,120,112,111,114,116,0,105,109,112,111,114,116,0,112,117,98,108,105,99,0,114,101,116,117,114,110,0,115,116,97,116,105,99,0,115,119,105,116,99,104,0,116,121,112,101,111,102,0,98,114,101,97,107,0,99,97,116,99,104,0,99,108,97,115,115,0,99,111,110,115,116,0,102,97,108,115,101,0,115,117,112,101,114,0,116,104,114,111,119,0,119,104,105,108,101,0,121,105,101,108,100,0,99,97,115,101,0,101,108,115,101,0,101,110,117,109,0,110,117,108,108,0,116,104,105,115,0,116,114,117,101,0,118,111,105,100,0,119,105,116,104,0,102,111,114,0,108,101,116,0,110,101,119,0,116,114,121,0,118,97,114,0,100,111,0,105,102,0,105,110,0,114,103,117,109,101,110,116,0,115,101,116,0,103,101,116,0,117,115,101,32,115,116,114,105,99,116,0,1,13,9,9,17,17,9,33,49,17,9,13,78,111,32,101,114,114,111,114,46,0,78,111,110,45,115,116,114,105,99,116,32,97,114,103,117,109,101,110,116,32,100,101,102,105,110,105,116,105,111,110,46,0,80,114,111,112,101,114,116,121,32,111,102,32,111,98,106,101,99,116,32,108,105,116,101,114,97,108,32,114,101,100,101,102,105,110,101,100,46,0,68,117,112,108,105,99,97,116,101,100,32,108,97,98,101,108,46,0,85,110,101,120,112,101,99,116,101,100,32,39,125,39,32,116,111,107,101,110,46,0,82,101,116,117,114,110,32,115,116,97,116,101,109,101,110,116,32,109,117,115,116,32,98,101,32,105,110,115,105,100,101,32,97,32,102,117,110,99,116,105,111,110,32,98,111,100,121,46,0,76,97,98,101,108,101,100,32,115,116,97,116,101,109,101,110,116,32,116,97,114,103,101,116,101,100,32,98,121,32,97,32,99,111,110,116,105,110,117,101,32,110,111,116,32,102,111,117,110,100,46,0,67,111,110,116,105,110,117,101,32,115,116,97,116,101,109,101,110,116,32,109,117,115,116,32,98,101,32,105,110,115,105,100,101,32,97,32,108,111,111,112,46,0,76,97,98,101,108,101,100,32,115,116,97,116,101,109,101,110,116,32,116,97,114,103,101,116,101,100,32,98,121,32,97,32,98,114,101,97,107,32,110,111,116,32,102,111,117,110,100,46,0,66,114,101,97,107,32,115,116,97,116,101,109,101,110,116,32,109,117,115,116,32,98,101,32,105,110,115,105,100,101,32,97,32,108,111,111,112,32,111,114,32,115,119,105,116,99,104,46,0,73,110,118,97,108,105,100,32,115,119,105,116,99,104,32,98,111,100,121,46,0,73,110,118,97,108,105,100,32,101,120,112,114,101,115,115,105,111,110,46,0,80,114,111,112,101,114,116,121,32,115,101,116,116,101,114,115,32,109,117,115,116,32,104,97,118,101,32,111,110,101,32,97,114,103,117,109,101,110,116,46,0,80,114,111,112,101,114,116,121,32,103,101,116,116,101,114,115,32,109,117,115,116,32,104,97,118,101,32,110,111,32,97,114,103,117,109,101,110,116,115,46,0,69,120,112,101,99,116,101,100,32,97,114,103,117,109,101,110,116,32,108,105,115,116,46,0,80,114,111,112,101,114,116,121,32,105,100,101,110,116,105,102,105,101,114,32,101,120,112,101,99,116,101,100,46,0,83,116,97,116,101,109,101,110,116,32,101,120,112,101,99,116,101,100,46,0,80,114,105,109,97,114,121,32,101,120,112,114,101,115,115,105,111,110,32,101,120,112,101,99,116,101,100,46,0,69,120,112,114,101,115,115,105,111,110,32,101,120,112,101,99,116,101,100,46,0,73,100,101,110,116,105,102,105,101,114,32,101,120,112,101,99,116,101,100,46,0,69,120,112,101,99,116,101,100,32,39,44,39,32,111,114,32,39,125,39,32,97,102,116,101,114,32,97,32,112,114,111,112,101,114,116,121,32,100,101,102,105,110,105,116,105,111,110,46,0,69,120,112,101,99,116,101,100,32,39,44,39,32,111,114,32,39,93,39,32,97,102,116,101,114,32,97,110,32,97,114,114,97,121,32,105,116,101,109,46,0,67,97,116,99,104,32,111,114,32,102,105,110,97,108,108,121,32,98,108,111,99,107,32,101,120,112,101,99,116,101,100,46,0,87,104,105,108,101,32,101,120,112,101,99,116,101,100,32,102,111,114,32,100,111,45,119,104,105,108,101,32,108,111,111,112,46,0,69,120,112,101,99,116,101,100,32,39,105,110,39,32,116,111,107,101,110,46,0,69,120,112,101,99,116,101,100,32,39,59,39,32,116,111,107,101,110,46,0,69,120,112,101,99,116,101,100,32,39,58,39,32,116,111,107,101,110,32,102,111,114,32,63,58,32,99,111,110,100,105,116,105,111,110,97,108,32,101,120,112,114,101,115,115,105,111,110,46,0,69,120,112,101,99,116,101,100,32,39,58,39,32,116,111,107,101,110,46,0,69,120,112,101,99,116,101,100,32,39,93,39,32,116,111,107,101,110,46,0,69,120,112,101,99,116,101,100,32,39,41,39,32,116,111,107,101,110,46,0,69,120,112,101,99,116,101,100,32,39,123,39,32,116,111,107,101,110,46,0,69,120,112,101,99,116,101,100,32,39,40,39,32,116,111,107,101,110,46,0,67,97,115,101,32,115,116,97,116,101,109,101,110,116,32,109,117,115,116,32,98,101,32,105,110,32,97,32,115,119,105,116,99,104,32,98,108,111,99,107,46,0,68,101,102,97,117,108,116,32,115,116,97,116,101,109,101,110,116,32,109,117,115,116,32,98,101,32,105,110,32,97,32,115,119,105,116,99,104,32,98,108,111,99,107,46,0,77,117,108,116,105,112,108,101,32,100,101,102,97,117,108,116,32,99,97,115,101,115,32,97,114,101,32,110,111,116,32,97,108,108,111,119,101,100,46,0,87,105,116,104,32,115,116,97,116,101,109,101,110,116,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,115,116,114,105,99,116,32,109,111,100,101,46,0,65,114,103,117,109,101,110,116,115,32,99,97,110,110,111,116,32,98,101,32,97,115,115,105,103,110,101,100,32,116,111,32,105,110,32,115,116,114,105,99,116,32,109,111,100,101,46,0,69,118,97,108,32,99,97,110,110,111,116,32,98,101,32,97,115,115,105,103,110,101,100,32,116,111,32,105,110,32,115,116,114,105,99,116,32,109,111,100,101,46,0,68,101,108,101,116,105,110,103,32,105,100,101,110,116,105,102,105,101,114,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,115,116,114,105,99,116,32,109,111,100,101,46,0,65,114,103,117,109,101,110,116,115,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,116,111,32,98,101,32,117,115,101,100,32,104,101,114,101,32,105,110,32,115,116,114,105,99,116,32,109,111,100,101,46,0,69,118,97,108,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,116,111,32,98,101,32,117,115,101,100,32,104,101,114,101,32,105,110,32,115,116,114,105,99,116,32,109,111,100,101,46,0,73,100,101,110,116,105,102,105,101,114,32,110,97,109,101,32,105,115,32,114,101,115,101,114,118,101,100,32,105,110,32,115,116,114,105,99,116,32,109,111,100,101,46,0,79,99,116,97,108,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,115,32,97,114,101,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,115,116,114,105,99,116,32,109,111,100,101,46,0,79,99,116,97,108,32,110,117,109,98,101,114,115,32,97,114,101,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,115,116,114,105,99,116,32,109,111,100,101,46,0,78,101,119,108,105,110,101,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,115,116,114,105,110,103,115,32,111,114,32,114,101,103,101,120,112,115,46,0,85,110,116,101,114,109,105,110,97,116,101,100,32,114,101,103,101,120,112,32,108,105,116,101,114,97,108,46,0,85,110,116,101,114,109,105,110,97,116,101,100,32,115,116,114,105,110,103,32,108,105,116,101,114,97,108,46,0,85,110,116,101,114,109,105,110,97,116,101,100,32,109,117,108,116,105,108,105,110,101,32,99,111,109,109,101,110,116,46,0,82,101,103,101,120,112,32,105,115,32,116,111,111,32,108,111,110,103,46,0,78,117,109,98,101,114,32,105,115,32,116,111,111,32,108,111,110,103,46,0,83,116,114,105,110,103,32,105,115,32,116,111,111,32,108,111,110,103,46,0,73,100,101,110,116,105,102,105,101,114,32,105,115,32,116,111,111,32,108,111,110,103,46,0,82,101,103,101,120,112,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,116,104,101,32,115,101,108,101,99,116,101,100,32,112,114,111,102,105,108,101,46,0,68,117,112,108,105,99,97,116,101,100,32,114,101,103,101,120,112,32,102,108,97,103,46,0,85,110,107,110,111,119,110,32,114,101,103,101,120,112,32,102,108,97,103,46,0,73,110,118,97,108,105,100,32,114,101,103,117,108,97,114,32,101,120,112,114,101,115,115,105,111,110,46,0,73,100,101,110,116,105,102,105,101,114,32,99,97,110,110,111,116,32,115,116,97,114,116,32,97,102,116,101,114,32,97,32,110,117,109,98,101,114,46,0,77,105,115,115,105,110,103,32,101,120,112,111,110,101,110,116,32,112,97,114,116,46,0,73,110,118,97,108,105,100,32,110,117,109,98,101,114,46,0,67,104,97,114,97,99,116,101,114,32,99,97,110,110,111,116,32,98,101,32,112,97,114,116,32,111,102,32,97,110,32,105,100,101,110,116,105,102,105,101,114,46,0,67,104,97,114,97,99,116,101,114,32,99,97,110,110,111,116,32,98,101,32,115,116,97,114,116,32,111,102,32,97,110,32,105,100,101,110,116,105,102,105,101,114,46,0,73,110,118,97,108,105,100,32,117,110,105,99,111,100,101,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,46,0,73,110,118,97,108,105,100,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,46,0,73,110,118,97,108,105,100,32,104,101,120,97,100,101,99,105,109,97,108,32,100,105,103,105,116,46,0,73,110,118,97,108,105,100,32,40,117,110,101,120,112,101,99,116,101,100,41,32,99,104,97,114,97,99,116,101,114,46,0,77,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,114,101,103,105,115,116,101,114,115,32,105,115,32,114,101,97,99,104,101,100,46,0,77,97,120,105,109,117,109,32,102,117,110,99,116,105,111,110,32,115,116,97,99,107,32,115,105,122,101,32,114,101,97,99,104,101,100,46,0,77,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,102,117,110,99,116,105,111,110,32,97,114,103,117,109,101,110,116,115,32,114,101,97,99,104,101,100,46,0,77,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,108,105,116,101,114,97,108,115,32,114,101,97,99,104,101,100,46,0,79,117,116,32,111,102,32,109,101,109,111,114,121,46,0,69,120,112,101,99,116,101,100,32,97,110,32,111,98,106,101,99,116,32,105,110,32,39,105,110,115,116,97,110,99,101,111,102,39,32,99,104,101,99,107,46,0,69,120,112,101,99,116,101,100,32,97,110,32,111,98,106,101,99,116,32,105,110,32,39,105,110,39,32,99,104,101,99,107,46,0,3,3,3,3,3,3,3,3,3,3,3,3,4,5,6,7,8,9,10,10,10,10,11,11,11,11,11,11,12,12,12,13,13,14,14,14,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   

   

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

   

   

   

  function _abort() {
      Module['abort']();
    }

   

  
   
  
   function _longjmp(env, value) {
      Module['setThrew'](env, value || 1);
      throw 'longjmp';
    }

  function ___lock() {}

  function ___unlock() {}

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = ((SAFE_HEAP_LOAD((((SYSCALLS.varargs)-(4))|0), 4, 0))|0);
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _emscripten_asm_const_int=true;

  
    

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      Runtime.stackRestore(ret);
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) SAFE_HEAP_STORE(((Module['___errno_location']())|0), ((value)|0), 4);
      return value;
    } 


  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    }  

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }




  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

   

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      SAFE_HEAP_STORE(((result)|0), ((stream.position)|0), 4);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffer) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = ((SAFE_HEAP_LOAD((((iov)+(i*8))|0), 4, 0))|0);
        var len = ((SAFE_HEAP_LOAD((((iov)+(i*8 + 4))|0), 4, 0))|0);
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
/* flush anything remaining in the buffer during shutdown */ __ATEXIT__.push(function() { var fflush = Module["_fflush"]; if (fflush) fflush(0); var printChar = ___syscall146.printChar; if (!printChar) return; var buffers = ___syscall146.buffers; if (buffers[1].length) printChar(1, 10); if (buffers[2].length) printChar(2, 10); });;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory


function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "segfault": segfault, "alignfault": alignfault, "ftfault": ftfault, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_iiiii": invoke_iiiii, "_longjmp": _longjmp, "_emscripten_asm_const_i": _emscripten_asm_const_i, "___lock": ___lock, "_abort": _abort, "___setErrNo": ___setErrNo, "___syscall6": ___syscall6, "_llvm_stacksave": _llvm_stacksave, "___syscall140": ___syscall140, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___syscall54": ___syscall54, "___unlock": ___unlock, "_exit": _exit, "_llvm_stackrestore": _llvm_stackrestore, "__exit": __exit, "___syscall146": ___syscall146, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var segfault=env.segfault;
  var alignfault=env.alignfault;
  var ftfault=env.ftfault;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_iiiii=env.invoke_iiiii;
  var _longjmp=env._longjmp;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var ___lock=env.___lock;
  var _abort=env._abort;
  var ___setErrNo=env.___setErrNo;
  var ___syscall6=env.___syscall6;
  var _llvm_stacksave=env._llvm_stacksave;
  var ___syscall140=env.___syscall140;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _exit=env._exit;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var __exit=env.__exit;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function _vm_loop($0) {
 $0 = $0 | 0;
 var $$$8 = 0, $$01093 = 0, $$01097 = 0, $$010981426 = 0, $$01102 = 0, $$01103 = 0, $$01104 = 0, $$01105 = 0, $$01114 = 0, $$01187 = 0, $$012001420$ph = 0, $$0120014201675 = 0, $$012031419$ph = 0, $$01206 = 0, $$01207 = 0, $$01214 = 0, $$01242 = 0, $$01243 = 0, $$01246 = 0, $$01247$lcssa = 0, $$012471422 = 0, $$012481421 = 0, $$01249 = 0, $$01250 = 0, $$01252 = 0, $$01254 = 0, $$10 = 0, $$101125 = 0, $$101149 = 0, $$101197 = 0, $$11094 = 0, $$11099 = 0, $$11106 = 0, $$111150 = 0, $$111198 = 0, $$11188 = 0, $$11188$phi = 0, $$11208 = 0, $$121127 = 0, $$1211991324 = 0, $$1269 = 0.0, $$13 = 0, $$131128 = 0, $$1311521326 = 0, $$14 = 0, $$15 = 0, $$151168 = 0, $$17 = 0, $$18 = 0, $$191134 = 0, $$201135 = 0, $$21 = 0, $$21095 = 0, $$21107 = 0, $$211136 = 0, $$21117 = 0, $$21189 = 0, $$221137 = 0, $$2311381327 = 0, $$261179 = 0, $$28 = 0, $$29 = 0, $$3 = 0, $$30 = 0, $$31 = 0, $$31096 = 0, $$31108 = 0, $$32 = 0, $$331186 = 0, $$361325 = 0, $$3613251507 = 0, $$4 = 0, $$41109 = 0, $$41211 = 0, $$51120 = 0, $$51192 = 0, $$61145 = 0, $$61213 = 0, $$7 = 0, $$71112 = 0, $$71146 = 0, $$8 = 0, $$811131328 = 0, $$81123 = 0, $$9 = 0, $$91148 = 0, $$91196 = 0, $$sink = 0, $$sink1268 = 0, $1 = 0, $1000 = 0, $1016 = 0, $1020 = 0, $1021 = 0, $1023 = 0, $1025 = 0, $1026 = 0, $1028 = 0, $1033 = 0, $1035 = 0, $1037 = 0, $1039 = 0, $1042 = 0, $1049 = 0, $1050 = 0, $1055 = 0, $1059 = 0, $106 = 0, $1068 = 0, $1074 = 0, $1078 = 0, $1082 = 0, $11 = 0, $116 = 0, $118 = 0, $122 = 0, $124 = 0, $13 = 0, $134 = 0, $139 = 0, $140 = 0, $141 = 0, $143 = 0, $146 = 0, $147 = 0, $149 = 0, $152 = 0, $155 = 0, $165 = 0, $167 = 0, $170 = 0, $172 = 0, $174 = 0, $177 = 0, $179 = 0, $181 = 0, $189 = 0, $199 = 0, $2 = 0, $201 = 0, $205 = 0, $207 = 0, $216 = 0, $219 = 0, $221 = 0, $223 = 0, $225 = 0, $228 = 0, $229 = 0, $231 = 0, $232 = 0, $238 = 0, $239 = 0, $245 = 0, $246 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $256 = 0, $257 = 0, $258 = 0, $260 = 0, $261 = 0, $269 = 0, $275 = 0, $277 = 0, $279 = 0, $281 = 0, $282 = 0, $283 = 0, $286 = 0, $289 = 0, $290 = 0, $291 = 0, $295 = 0, $298 = 0, $299 = 0, $3 = 0, $301 = 0, $303 = 0, $305 = 0, $307 = 0, $308 = 0, $31 = 0, $311 = 0, $313 = 0, $321 = 0, $323 = 0, $329 = 0, $33 = 0, $330 = 0, $335 = 0, $337 = 0, $338 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $347 = 0, $35 = 0, $353 = 0, $354 = 0, $358 = 0, $36 = 0, $360 = 0, $362 = 0, $365 = 0, $37 = 0, $377 = 0, $38 = 0, $381 = 0, $39 = 0, $390 = 0, $392 = 0.0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $403 = 0, $41 = 0, $410 = 0, $419 = 0.0, $42 = 0, $423 = 0, $424 = 0, $427 = 0, $429 = 0, $43 = 0, $430 = 0, $433 = 0, $44 = 0, $441 = 0, $444 = 0, $445 = 0, $446 = 0, $45 = 0, $454 = 0, $455 = 0, $457 = 0, $46 = 0, $461 = 0, $463 = 0, $465 = 0, $467 = 0, $475 = 0, $477 = 0, $482 = 0, $484 = 0, $487 = 0, $488 = 0, $489 = 0, $495 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $502 = 0, $508 = 0, $510 = 0, $512 = 0, $514 = 0, $519 = 0, $521 = 0, $523 = 0, $525 = 0, $527 = 0, $529 = 0, $537 = 0, $54 = 0, $546 = 0, $548 = 0, $55 = 0, $550 = 0, $552 = 0, $554 = 0, $557 = 0, $56 = 0, $563 = 0.0, $570 = 0.0, $574 = 0, $577 = 0, $58 = 0, $583 = 0.0, $590 = 0.0, $594 = 0, $597 = 0, $598 = 0, $60 = 0, $611 = 0.0, $618 = 0.0, $622 = 0, $624 = 0, $627 = 0, $628 = 0, $630 = 0, $634 = 0, $636 = 0, $638 = 0, $640 = 0, $642 = 0, $643 = 0, $646 = 0, $647 = 0, $651 = 0, $652 = 0, $656 = 0, $661 = 0, $665 = 0, $668 = 0, $673 = 0, $676 = 0, $68 = 0, $681 = 0, $684 = 0, $689 = 0, $692 = 0, $693 = 0, $695 = 0, $696 = 0, $698 = 0, $7 = 0, $704 = 0, $715 = 0, $716 = 0, $720 = 0.0, $723 = 0, $724 = 0, $726 = 0, $728 = 0, $732 = 0, $733 = 0, $737 = 0.0, $740 = 0, $741 = 0, $743 = 0, $745 = 0, $749 = 0, $750 = 0, $754 = 0.0, $757 = 0, $758 = 0, $760 = 0, $762 = 0, $766 = 0, $767 = 0, $771 = 0.0, $774 = 0, $775 = 0, $777 = 0, $779 = 0, $78 = 0, $781 = 0, $783 = 0, $785 = 0, $787 = 0, $790 = 0, $791 = 0, $795 = 0, $796 = 0, $798 = 0, $80 = 0, $800 = 0, $805 = 0, $813 = 0, $814 = 0, $815 = 0, $821 = 0, $826 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $845 = 0, $846 = 0, $848 = 0, $849 = 0, $855 = 0, $857 = 0, $86 = 0, $860 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $879 = 0, $887 = 0, $893 = 0, $898 = 0, $9 = 0, $907 = 0, $908 = 0, $914 = 0, $920 = 0, $922 = 0, $925 = 0, $926 = 0, $932 = 0, $937 = 0, $945 = 0, $946 = 0, $955 = 0, $957 = 0, $96 = 0, $964 = 0, $966 = 0, $974 = 0, $98 = 0, $987 = 0, $996 = 0, $998 = 0, $999 = 0, label = 0, sp = 0, $$012031419$ph$looptemp = 0;
 sp = STACKTOP; //@line 63
 STACKTOP = STACKTOP + 16 | 0; //@line 64
 $1 = sp + 4 | 0; //@line 65
 $2 = sp; //@line 66
 $3 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0; //@line 67
 $4 = $0 + 4 | 0; //@line 68
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0; //@line 69
 $7 = SAFE_HEAP_LOAD($0 + 20 | 0, 4, 0) | 0 | 0; //@line 71
 $9 = SAFE_HEAP_LOAD($3 + 4 | 0, 2, 0) | 0 | 0; //@line 73
 $11 = ($9 & 8) != 0; //@line 75
 $13 = ($9 & 2) == 0; //@line 77
 if (!($9 & 4)) {
  $$01102 = SAFE_HEAP_LOAD($3 + 8 >> 0 | 0, 1, 1) | 0 | 0; //@line 90
  $$01103 = SAFE_HEAP_LOAD($3 + 9 >> 0 | 0, 1, 1) | 0 | 0; //@line 90
  $$01104 = SAFE_HEAP_LOAD($3 + 10 >> 0 | 0, 1, 1) | 0 | 0; //@line 90
 } else {
  $$01102 = SAFE_HEAP_LOAD($3 + 10 | 0, 2, 0) | 0 | 0; //@line 98
  $$01103 = SAFE_HEAP_LOAD($3 + 12 | 0, 2, 0) | 0 | 0; //@line 98
  $$01104 = SAFE_HEAP_LOAD($3 + 14 | 0, 2, 0) | 0 | 0; //@line 98
 }
 $31 = $0 + 16 | 0; //@line 100
 SAFE_HEAP_STORE($1 | 0, SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0, 4);
 $33 = $13 ? 255 : 128; //@line 103
 $34 = $$01103 & 65535; //@line 104
 $35 = $$01102 & 65535; //@line 105
 $36 = $0 + 12 | 0; //@line 106
 $37 = $0 + 24 | 0; //@line 107
 $38 = $0 + 32 | 0; //@line 108
 $39 = $$01104 & 65535; //@line 109
 $40 = $13 ? 65025 : 32768; //@line 110
 $41 = $0 + 43 | 0; //@line 111
 $42 = $0 + 36 | 0; //@line 112
 $43 = $0 + 8 | 0; //@line 113
 $44 = $0 + 40 | 0; //@line 114
 $$01093 = $5; //@line 115
 $$01105 = 0; //@line 115
 $$01187 = 72; //@line 115
 L5 : while (1) {
  $$11094 = $$01093; //@line 117
  $$11106 = $$01105; //@line 117
  $$11188 = $$01187; //@line 117
  L7 : while (1) {
   $45 = $$11094 + 1 | 0; //@line 119
   $46 = SAFE_HEAP_LOAD($$11094 >> 0 | 0, 1, 0) | 0 | 0; //@line 120
   if (!($46 << 24 >> 24)) {
    $50 = SAFE_HEAP_LOAD($45 >> 0 | 0, 1, 0) | 0 | 0; //@line 125
    $$01206 = $50; //@line 128
    $$01207 = ($50 & 255) + 237 | 0; //@line 128
    $$21095 = $$11094 + 2 | 0; //@line 128
   } else {
    $$01206 = $46; //@line 130
    $$01207 = $46 & 255; //@line 130
    $$21095 = $45; //@line 130
   }
   $54 = SAFE_HEAP_LOAD(2768 + ($$01207 << 1) | 0, 2, 0) | 0 | 0; //@line 133
   $55 = $54 & 65535; //@line 134
   $56 = $55 & 896; //@line 135
   L12 : do {
    if ($56 >>> 0 > 511) {
     $58 = $$21095 + 1 | 0; //@line 139
     $60 = SAFE_HEAP_LOAD($$21095 >> 0 | 0, 1, 1) | 0 | 0; //@line 141
     if ($60 >>> 0 < $33 >>> 0) {
      $$01214 = $60; //@line 144
      $$31096 = $58; //@line 144
     } else {
      $$01214 = (SAFE_HEAP_LOAD($58 >> 0 | 0, 1, 1) | 0 | $60 << 8) - $40 | 0; //@line 152
      $$31096 = $$21095 + 2 | 0; //@line 152
     }
     $68 = $$01214 & 65535; //@line 154
     do {
      if ($68 >>> 0 < $34 >>> 0) {
       if ($68 >>> 0 < $35 >>> 0) {
        $$21117 = _ecma_fast_copy_value(SAFE_HEAP_LOAD((SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0) + ($68 << 2) | 0, 4, 0) | 0 | 0) | 0; //@line 164
        break;
       } else {
        $78 = _jmem_decompress_pointer(SAFE_HEAP_LOAD($7 + ($68 << 1) | 0, 2, 1) | 0 | 0) | 0; //@line 170
        $80 = _ecma_op_resolve_reference_value(SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0, $78) | 0; //@line 172
        if (($80 | 0) == 24) {
         $$1211991324 = $$11188; //@line 175
         $$1311521326 = 72; //@line 175
         $$2311381327 = 72; //@line 175
         $$361325 = 24; //@line 175
         $$811131328 = $$11106; //@line 175
         break L7;
        } else {
         $$21117 = $80; //@line 178
         break;
        }
       }
      } else {
       $84 = SAFE_HEAP_LOAD($7 + ($68 << 1) | 0, 2, 0) | 0 | 0; //@line 185
       if ($68 >>> 0 >= $39 >>> 0) {
        $$21117 = _vm_construct_literal_object($0, $84) | 0; //@line 188
        break;
       }
       $86 = _jmem_decompress_pointer($84 & 65535) | 0; //@line 192
       if (((SAFE_HEAP_LOAD($86 | 0, 2, 0) | 0) & 7) == 5) {
        $$21117 = _ecma_fast_copy_value(SAFE_HEAP_LOAD($86 + 4 | 0, 4, 0) | 0 | 0) | 0; //@line 200
        break;
       } else {
        _ecma_ref_ecma_string($86); //@line 203
        $$21117 = _ecma_make_string_value($86) | 0; //@line 205
        break;
       }
      }
     } while (0);
     if (($56 | 0) == 512) {
      $$31108 = $$11106; //@line 212
      $$51120 = $$21117; //@line 212
      $$61145 = 72; //@line 212
      $$8 = $$31096; //@line 212
     } else {
      switch ($56 & 1023) {
      case 640:
       {
        $96 = $$31096 + 1 | 0; //@line 218
        $98 = SAFE_HEAP_LOAD($$31096 >> 0 | 0, 1, 1) | 0 | 0; //@line 220
        if ($98 >>> 0 < $33 >>> 0) {
         $$01242 = $98; //@line 223
         $$4 = $96; //@line 223
        } else {
         $$01242 = (SAFE_HEAP_LOAD($96 >> 0 | 0, 1, 1) | 0 | $98 << 8) - $40 | 0; //@line 231
         $$4 = $$31096 + 2 | 0; //@line 231
        }
        $106 = $$01242 & 65535; //@line 233
        if ($106 >>> 0 < $34 >>> 0) {
         if ($106 >>> 0 < $35 >>> 0) {
          $$31108 = $$11106; //@line 242
          $$51120 = $$21117; //@line 242
          $$61145 = _ecma_fast_copy_value(SAFE_HEAP_LOAD((SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0) + ($106 << 2) | 0, 4, 0) | 0 | 0) | 0; //@line 242
          $$8 = $$4; //@line 242
          break L12;
         } else {
          $116 = _jmem_decompress_pointer(SAFE_HEAP_LOAD($7 + ($106 << 1) | 0, 2, 1) | 0 | 0) | 0; //@line 248
          $118 = _ecma_op_resolve_reference_value(SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0, $116) | 0; //@line 250
          if (($118 | 0) == 24) {
           $$1211991324 = $$11188; //@line 253
           $$1311521326 = 72; //@line 253
           $$2311381327 = $$21117; //@line 253
           $$361325 = 24; //@line 253
           $$811131328 = $$11106; //@line 253
           break L7;
          } else {
           $$31108 = $$11106; //@line 256
           $$51120 = $$21117; //@line 256
           $$61145 = $118; //@line 256
           $$8 = $$4; //@line 256
           break L12;
          }
         }
        }
        $122 = SAFE_HEAP_LOAD($7 + ($106 << 1) | 0, 2, 0) | 0 | 0; //@line 263
        if ($106 >>> 0 >= $39 >>> 0) {
         $$31108 = $$11106; //@line 266
         $$51120 = $$21117; //@line 266
         $$61145 = _vm_construct_literal_object($0, $122) | 0; //@line 266
         $$8 = $$4; //@line 266
         break L12;
        }
        $124 = _jmem_decompress_pointer($122 & 65535) | 0; //@line 270
        if (((SAFE_HEAP_LOAD($124 | 0, 2, 0) | 0) & 7) == 5) {
         $$31108 = $$11106; //@line 278
         $$51120 = $$21117; //@line 278
         $$61145 = _ecma_fast_copy_value(SAFE_HEAP_LOAD($124 + 4 | 0, 4, 0) | 0 | 0) | 0; //@line 278
         $$8 = $$4; //@line 278
         break L12;
        } else {
         _ecma_ref_ecma_string($124); //@line 281
         $$31108 = $$11106; //@line 283
         $$51120 = $$21117; //@line 283
         $$61145 = _ecma_make_string_value($124) | 0; //@line 283
         $$8 = $$4; //@line 283
         break L12;
        }
        break;
       }
      case 768:
       {
        $134 = (SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + -4 | 0; //@line 290
        SAFE_HEAP_STORE($1 | 0, $134 | 0, 4);
        $$31108 = $$11106; //@line 293
        $$51120 = SAFE_HEAP_LOAD($134 | 0, 4, 0) | 0 | 0; //@line 293
        $$61145 = $$21117; //@line 293
        $$8 = $$31096; //@line 293
        break L12;
        break;
       }
      default:
       {
        $$31108 = $$11106; //@line 300
        $$51120 = _ecma_copy_value(SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0) | 0; //@line 300
        $$61145 = $$21117; //@line 300
        $$8 = $$31096; //@line 300
        break L12;
       }
      }
     }
    } else {
     if ($56 >>> 0 > 255) {
      $139 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 308
      $140 = $139 + -4 | 0; //@line 309
      SAFE_HEAP_STORE($1 | 0, $140 | 0, 4);
      $141 = SAFE_HEAP_LOAD($140 | 0, 4, 0) | 0 | 0; //@line 311
      if (($56 | 0) != 384) {
       $$31108 = $$11106; //@line 314
       $$51120 = $141; //@line 314
       $$61145 = 72; //@line 314
       $$8 = $$21095; //@line 314
       break;
      }
      $143 = $139 + -8 | 0; //@line 317
      SAFE_HEAP_STORE($1 | 0, $143 | 0, 4);
      $$31108 = $$11106; //@line 320
      $$51120 = SAFE_HEAP_LOAD($143 | 0, 4, 0) | 0 | 0; //@line 320
      $$61145 = $141; //@line 320
      $$8 = $$21095; //@line 320
      break;
     }
     if (($56 | 0) == 128) {
      $146 = $$01206 & 3; //@line 325
      $147 = $$21095 + 1 | 0; //@line 326
      $149 = SAFE_HEAP_LOAD($$21095 >> 0 | 0, 1, 1) | 0 | 0; //@line 328
      if ($146 << 24 >> 24 == 1) {
       $$21107 = $149; //@line 331
       $$7 = $147; //@line 331
      } else {
       $152 = $$21095 + 2 | 0; //@line 334
       $155 = SAFE_HEAP_LOAD($147 >> 0 | 0, 1, 1) | 0 | $149 << 8; //@line 337
       if ($146 << 24 >> 24 == 3) {
        $$21107 = SAFE_HEAP_LOAD($152 >> 0 | 0, 1, 1) | 0 | $155 << 8; //@line 345
        $$7 = $$21095 + 3 | 0; //@line 345
       } else {
        $$21107 = $155; //@line 347
        $$7 = $152; //@line 347
       }
      }
      $$31108 = ($55 & 16384 | 0) == 0 ? $$21107 : 0 - $$21107 | 0; //@line 354
      $$51120 = 72; //@line 354
      $$61145 = 72; //@line 354
      $$8 = $$7; //@line 354
     } else {
      $$31108 = $$11106; //@line 356
      $$51120 = 72; //@line 356
      $$61145 = 72; //@line 356
      $$8 = $$21095; //@line 356
     }
    }
   } while (0);
   $165 = $55 & 127; //@line 360
   L61 : do {
    switch ($54 & 127) {
    case 88:
    case 87:
    case 0:
     {
      $$11188$phi = $$11188; //@line 366
      $$11094 = $$8; //@line 366
      $$11106 = $$31108; //@line 366
      $$11188 = $$11188$phi; //@line 366
      continue L7;
      break;
     }
    case 38:
     {
      label = 132; //@line 371
      break L7;
      break;
     }
    case 39:
     {
      label = 133; //@line 376
      break L7;
      break;
     }
    case 40:
     {
      label = 134; //@line 381
      break L7;
      break;
     }
    case 1:
     {
      $167 = (SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + -4 | 0; //@line 387
      SAFE_HEAP_STORE($1 | 0, $167 | 0, 4);
      _ecma_free_value(SAFE_HEAP_LOAD($167 | 0, 4, 0) | 0 | 0); //@line 390
      $$11188$phi = $$11188; //@line 391
      $$11094 = $$8; //@line 391
      $$11106 = $$31108; //@line 391
      $$11188 = $$11188$phi; //@line 391
      continue L7;
      break;
     }
    case 2:
     {
      _ecma_fast_free_value($$11188); //@line 396
      $170 = (SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + -4 | 0; //@line 398
      SAFE_HEAP_STORE($1 | 0, $170 | 0, 4);
      $$11094 = $$8; //@line 401
      $$11106 = $$31108; //@line 401
      $$11188 = SAFE_HEAP_LOAD($170 | 0, 4, 0) | 0 | 0; //@line 401
      continue L7;
      break;
     }
    case 3:
     {
      $172 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 406
      SAFE_HEAP_STORE($1 | 0, $172 + 4 | 0, 4);
      SAFE_HEAP_STORE($172 | 0, $$51120 | 0, 4);
      $$11188$phi = $$11188; //@line 410
      $$11094 = $$8; //@line 410
      $$11106 = $$31108; //@line 410
      $$11188 = $$11188$phi; //@line 410
      continue L7;
      break;
     }
    case 4:
     {
      $174 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 415
      SAFE_HEAP_STORE($174 | 0, $$51120 | 0, 4);
      SAFE_HEAP_STORE($1 | 0, $174 + 8 | 0, 4);
      SAFE_HEAP_STORE($174 + 4 | 0, $$61145 | 0, 4);
      $$11188$phi = $$11188; //@line 421
      $$11094 = $$8; //@line 421
      $$11106 = $$31108; //@line 421
      $$11188 = $$11188$phi; //@line 421
      continue L7;
      break;
     }
    case 5:
     {
      $177 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 426
      SAFE_HEAP_STORE($1 | 0, $177 + 4 | 0, 4);
      SAFE_HEAP_STORE($177 | 0, $$51120 | 0, 4);
      $179 = $$8 + 1 | 0; //@line 430
      $181 = SAFE_HEAP_LOAD($$8 >> 0 | 0, 1, 1) | 0 | 0; //@line 432
      if ($181 >>> 0 < $33 >>> 0) {
       $$01243 = $181; //@line 435
       $$9 = $179; //@line 435
      } else {
       $$01243 = (SAFE_HEAP_LOAD($179 >> 0 | 0, 1, 1) | 0 | $181 << 8) - $40 | 0; //@line 443
       $$9 = $$8 + 2 | 0; //@line 443
      }
      $189 = $$01243 & 65535; //@line 445
      do {
       if ($189 >>> 0 < $34 >>> 0) {
        if ($189 >>> 0 < $35 >>> 0) {
         $$81123 = _ecma_fast_copy_value(SAFE_HEAP_LOAD((SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0) + ($189 << 2) | 0, 4, 0) | 0 | 0) | 0; //@line 455
         break;
        } else {
         $199 = _jmem_decompress_pointer(SAFE_HEAP_LOAD($7 + ($189 << 1) | 0, 2, 1) | 0 | 0) | 0; //@line 461
         $201 = _ecma_op_resolve_reference_value(SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0, $199) | 0; //@line 463
         if (($201 | 0) == 24) {
          $$1211991324 = $$11188; //@line 466
          $$1311521326 = $$61145; //@line 466
          $$2311381327 = 72; //@line 466
          $$361325 = 24; //@line 466
          $$811131328 = $$31108; //@line 466
          break L7;
         } else {
          $$81123 = $201; //@line 469
          break;
         }
        }
       } else {
        $205 = SAFE_HEAP_LOAD($7 + ($189 << 1) | 0, 2, 0) | 0 | 0; //@line 476
        if ($189 >>> 0 >= $39 >>> 0) {
         $$81123 = _vm_construct_literal_object($0, $205) | 0; //@line 479
         break;
        }
        $207 = _jmem_decompress_pointer($205 & 65535) | 0; //@line 483
        if (((SAFE_HEAP_LOAD($207 | 0, 2, 0) | 0) & 7) == 5) {
         $$81123 = _ecma_fast_copy_value(SAFE_HEAP_LOAD($207 + 4 | 0, 4, 0) | 0 | 0) | 0; //@line 491
         break;
        } else {
         _ecma_ref_ecma_string($207); //@line 494
         $$81123 = _ecma_make_string_value($207) | 0; //@line 496
         break;
        }
       }
      } while (0);
      $216 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 501
      SAFE_HEAP_STORE($216 | 0, $$61145 | 0, 4);
      SAFE_HEAP_STORE($1 | 0, $216 + 8 | 0, 4);
      SAFE_HEAP_STORE($216 + 4 | 0, $$81123 | 0, 4);
      $$11188$phi = $$11188; //@line 507
      $$11094 = $$9; //@line 507
      $$11106 = $$31108; //@line 507
      $$11188 = $$11188$phi; //@line 507
      continue L7;
      break;
     }
    case 6:
     {
      $219 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 512
      SAFE_HEAP_STORE($1 | 0, $219 + 4 | 0, 4);
      SAFE_HEAP_STORE($219 | 0, 72 | 0, 4);
      $$11188$phi = $$11188; //@line 516
      $$11094 = $$8; //@line 516
      $$11106 = $$31108; //@line 516
      $$11188 = $$11188$phi; //@line 516
      continue L7;
      break;
     }
    case 7:
     {
      $221 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 521
      SAFE_HEAP_STORE($1 | 0, $221 + 4 | 0, 4);
      SAFE_HEAP_STORE($221 | 0, 56 | 0, 4);
      $$11188$phi = $$11188; //@line 525
      $$11094 = $$8; //@line 525
      $$11106 = $$31108; //@line 525
      $$11188 = $$11188$phi; //@line 525
      continue L7;
      break;
     }
    case 8:
     {
      $223 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 530
      SAFE_HEAP_STORE($1 | 0, $223 + 4 | 0, 4);
      SAFE_HEAP_STORE($223 | 0, 40 | 0, 4);
      $$11188$phi = $$11188; //@line 534
      $$11094 = $$8; //@line 534
      $$11106 = $$31108; //@line 534
      $$11188 = $$11188$phi; //@line 534
      continue L7;
      break;
     }
    case 9:
     {
      $225 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 539
      SAFE_HEAP_STORE($1 | 0, $225 + 4 | 0, 4);
      SAFE_HEAP_STORE($225 | 0, 88 | 0, 4);
      $$11188$phi = $$11188; //@line 543
      $$11094 = $$8; //@line 543
      $$11106 = $$31108; //@line 543
      $$11188 = $$11188$phi; //@line 543
      continue L7;
      break;
     }
    case 10:
     {
      $228 = _ecma_copy_value(SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0) | 0; //@line 549
      $229 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 550
      SAFE_HEAP_STORE($1 | 0, $229 + 4 | 0, 4);
      SAFE_HEAP_STORE($229 | 0, $228 | 0, 4);
      $$11188$phi = $$11188; //@line 554
      $$11094 = $$8; //@line 554
      $$11106 = $$31108; //@line 554
      $$11188 = $$11188$phi; //@line 554
      continue L7;
      break;
     }
    case 11:
     {
      $231 = _ecma_make_integer_value(0) | 0; //@line 559
      $232 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 560
      SAFE_HEAP_STORE($1 | 0, $232 + 4 | 0, 4);
      SAFE_HEAP_STORE($232 | 0, $231 | 0, 4);
      $$11188$phi = $$11188; //@line 564
      $$11094 = $$8; //@line 564
      $$11106 = $$31108; //@line 564
      $$11188 = $$11188$phi; //@line 564
      continue L7;
      break;
     }
    case 12:
     {
      $238 = _ecma_make_integer_value((SAFE_HEAP_LOAD($$8 >> 0 | 0, 1, 1) | 0 | 0) + 1 | 0) | 0; //@line 573
      $239 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 574
      SAFE_HEAP_STORE($1 | 0, $239 + 4 | 0, 4);
      SAFE_HEAP_STORE($239 | 0, $238 | 0, 4);
      $$11188$phi = $$11188; //@line 578
      $$11094 = $$8 + 1 | 0; //@line 578
      $$11106 = $$31108; //@line 578
      $$11188 = $$11188$phi; //@line 578
      continue L7;
      break;
     }
    case 13:
     {
      $245 = _ecma_make_integer_value(~(SAFE_HEAP_LOAD($$8 >> 0 | 0, 1, 1) | 0)) | 0; //@line 587
      $246 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 588
      SAFE_HEAP_STORE($1 | 0, $246 + 4 | 0, 4);
      SAFE_HEAP_STORE($246 | 0, $245 | 0, 4);
      $$11188$phi = $$11188; //@line 592
      $$11094 = $$8 + 1 | 0; //@line 592
      $$11106 = $$31108; //@line 592
      $$11188 = $$11188$phi; //@line 592
      continue L7;
      break;
     }
    case 14:
     {
      $248 = _ecma_builtin_get(0) | 0; //@line 597
      $249 = _ecma_create_object($248, 0, 0) | 0; //@line 598
      _ecma_deref_object($248); //@line 599
      $250 = _ecma_make_object_value($249) | 0; //@line 600
      $251 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 601
      SAFE_HEAP_STORE($1 | 0, $251 + 4 | 0, 4);
      SAFE_HEAP_STORE($251 | 0, $250 | 0, 4);
      $$11188$phi = $$11188; //@line 605
      $$11094 = $$8; //@line 605
      $$11106 = $$31108; //@line 605
      $$11188 = $$11188$phi; //@line 605
      continue L7;
      break;
     }
    case 15:
     {
      $256 = _ecma_get_object_from_value(SAFE_HEAP_LOAD((SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + -4 | 0, 4, 0) | 0 | 0) | 0; //@line 613
      $257 = _ecma_is_value_string($$61145) | 0; //@line 614
      if ($257) {
       $$sink = $$61145; //@line 616
      } else {
       $258 = _ecma_op_to_string($$61145) | 0; //@line 618
       if (($258 | 0) == 24) {
        $$1211991324 = $$11188; //@line 621
        $$1311521326 = $$61145; //@line 621
        $$2311381327 = $$51120; //@line 621
        $$361325 = 24; //@line 621
        $$811131328 = $$31108; //@line 621
        break L7;
       } else {
        $$sink = $258; //@line 624
       }
      }
      $260 = _ecma_get_string_from_value($$sink) | 0; //@line 627
      $261 = _ecma_find_named_property($256, $260) | 0; //@line 628
      if (!$261) {
       label = 74; //@line 631
      } else {
       $269 = $261 + 7 & -4; //@line 639
       if (((SAFE_HEAP_LOAD($261 >> 0 | 0, 1, 0) | 0) & 3) == 1) {
        $$01246 = $269; //@line 641
       } else {
        _ecma_delete_property($256, $269); //@line 643
        label = 74; //@line 644
       }
      }
      if ((label | 0) == 74) {
       label = 0; //@line 648
       $$01246 = _ecma_create_named_data_property($256, $260, 28, 0) | 0; //@line 650
      }
      _ecma_named_data_property_assign_value($256, $$01246, $$51120); //@line 652
      if ($257) {
       $$101197 = $$11188; //@line 654
       $$111150 = $$61145; //@line 654
       $$211136 = $$51120; //@line 654
       $$31 = $$8; //@line 654
       label = 334; //@line 655
      } else {
       _ecma_deref_ecma_string($260); //@line 657
       $$101197 = $$11188; //@line 658
       $$111150 = $$61145; //@line 658
       $$211136 = $$51120; //@line 658
       $$31 = $$8; //@line 658
       label = 334; //@line 659
      }
      break;
     }
    case 17:
    case 16:
     {
      _opfunc_set_accessor(($165 | 0) == 16, SAFE_HEAP_LOAD((SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + -4 | 0, 4, 0) | 0 | 0, $$51120, $$61145); //@line 668
      $$101197 = $$11188; //@line 669
      $$111150 = $$61145; //@line 669
      $$211136 = $$51120; //@line 669
      $$31 = $$8; //@line 669
      label = 334; //@line 670
      break;
     }
    case 19:
     {
      $275 = _ecma_op_create_array_object(0, 0, 0) | 0; //@line 674
      if (($275 | 0) == 24) {
       $$1211991324 = $$11188; //@line 677
       $$1311521326 = $$61145; //@line 677
       $$2311381327 = $$51120; //@line 677
       $$361325 = 24; //@line 677
       $$811131328 = $$31108; //@line 677
       break L7;
      }
      $277 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 680
      SAFE_HEAP_STORE($1 | 0, $277 + 4 | 0, 4);
      SAFE_HEAP_STORE($277 | 0, $275 | 0, 4);
      $$11188$phi = $$11188; //@line 684
      $$11094 = $$8; //@line 684
      $$11106 = $$31108; //@line 684
      $$11188 = $$11188$phi; //@line 684
      continue L7;
      break;
     }
    case 20:
     {
      $279 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 689
      SAFE_HEAP_STORE($1 | 0, $279 + 4 | 0, 4);
      SAFE_HEAP_STORE($279 | 0, 104 | 0, 4);
      $$11188$phi = $$11188; //@line 693
      $$11094 = $$8; //@line 693
      $$11106 = $$31108; //@line 693
      $$11188 = $$11188$phi; //@line 693
      continue L7;
      break;
     }
    case 21:
     {
      $281 = $$8 + 1 | 0; //@line 698
      $282 = SAFE_HEAP_LOAD($$8 >> 0 | 0, 1, 0) | 0 | 0; //@line 699
      $283 = $282 & 255; //@line 700
      $286 = (SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + (0 - $283 << 2) | 0; //@line 703
      SAFE_HEAP_STORE($1 | 0, $286 | 0, 4);
      $289 = _ecma_get_object_from_value(SAFE_HEAP_LOAD($286 + -4 | 0, 4, 0) | 0 | 0) | 0; //@line 707
      $290 = $289 + 8 | 0; //@line 708
      $291 = SAFE_HEAP_LOAD($290 | 0, 4, 0) | 0 | 0; //@line 709
      if (!($282 << 24 >> 24)) {
       $$01247$lcssa = $291; //@line 712
      } else {
       $$012471422 = $291; //@line 714
       $$012481421 = 0; //@line 714
       $295 = $286; //@line 714
       while (1) {
        if (!(_ecma_is_value_array_hole(SAFE_HEAP_LOAD($295 + ($$012481421 << 2) | 0, 4, 0) | 0 | 0) | 0)) {
         $298 = _ecma_new_ecma_string_from_uint32($$012471422) | 0; //@line 720
         $299 = _ecma_create_named_data_property($289, $298, 28, 0) | 0; //@line 721
         $301 = (SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + ($$012481421 << 2) | 0; //@line 723
         SAFE_HEAP_STORE($299 | 0, SAFE_HEAP_LOAD($301 | 0, 4, 0) | 0 | 0, 4);
         $303 = SAFE_HEAP_LOAD($301 | 0, 4, 0) | 0 | 0; //@line 726
         if (_ecma_is_value_object($303) | 0) {
          _ecma_free_value($303); //@line 729
         }
         _ecma_deref_ecma_string($298); //@line 731
        }
        $305 = $$012481421 + 1 | 0; //@line 733
        if (($305 | 0) == ($283 | 0)) {
         break;
        }
        $$012471422 = $$012471422 + 1 | 0; //@line 740
        $$012481421 = $305; //@line 740
        $295 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 740
       }
       $$01247$lcssa = $291 + $283 | 0; //@line 743
      }
      SAFE_HEAP_STORE($290 | 0, $$01247$lcssa | 0, 4);
      $$11188$phi = $$11188; //@line 746
      $$11094 = $281; //@line 746
      $$11106 = $$31108; //@line 746
      $$11188 = $$11188$phi; //@line 746
      continue L7;
      break;
     }
    case 18:
     {
      $307 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 751
      $308 = $307 + -4 | 0; //@line 752
      SAFE_HEAP_STORE($307 | 0, SAFE_HEAP_LOAD($308 | 0, 4, 0) | 0 | 0, 4);
      SAFE_HEAP_STORE($308 | 0, 72 | 0, 4);
      SAFE_HEAP_STORE($1 | 0, $307 + 4 | 0, 4);
      $$11188$phi = $$11188; //@line 758
      $$11094 = $$8; //@line 758
      $$11106 = $$31108; //@line 758
      $$11188 = $$11188$phi; //@line 758
      continue L7;
      break;
     }
    case 22:
     {
      $311 = $$8 + 1 | 0; //@line 763
      $313 = SAFE_HEAP_LOAD($$8 >> 0 | 0, 1, 1) | 0 | 0; //@line 765
      if ($313 >>> 0 < $33 >>> 0) {
       $$01249 = $313; //@line 768
       $$10 = $311; //@line 768
      } else {
       $$01249 = (SAFE_HEAP_LOAD($311 >> 0 | 0, 1, 1) | 0 | $313 << 8) - $40 | 0; //@line 776
       $$10 = $$8 + 2 | 0; //@line 776
      }
      $321 = $$01249 & 65535; //@line 778
      if ($321 >>> 0 < $35 >>> 0) {
       $323 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 781
       SAFE_HEAP_STORE($323 | 0, 136 | 0, 4);
       SAFE_HEAP_STORE($1 | 0, $323 + 8 | 0, 4);
       SAFE_HEAP_STORE($323 + 4 | 0, $321 | 0, 4);
       $329 = _ecma_fast_copy_value(SAFE_HEAP_LOAD((SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0) + ($321 << 2) | 0, 4, 0) | 0 | 0) | 0; //@line 790
       $330 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 791
       SAFE_HEAP_STORE($1 | 0, $330 + 4 | 0, 4);
       SAFE_HEAP_STORE($330 | 0, $329 | 0, 4);
       $$11188$phi = $$11188; //@line 795
       $$11094 = $$10; //@line 795
       $$11106 = $$31108; //@line 795
       $$11188 = $$11188$phi; //@line 795
       continue L7;
      }
      $335 = _jmem_decompress_pointer(SAFE_HEAP_LOAD($7 + ($321 << 1) | 0, 2, 1) | 0 | 0) | 0; //@line 801
      $337 = _ecma_op_resolve_reference_base(SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0, $335) | 0; //@line 803
      $338 = _ecma_op_get_value_lex_env_base($337, $335, $11) | 0; //@line 804
      if (($338 | 0) == 24) {
       $$1211991324 = $$11188; //@line 807
       $$1311521326 = $$61145; //@line 807
       $$2311381327 = $$51120; //@line 807
       $$361325 = 24; //@line 807
       $$811131328 = $$31108; //@line 807
       break L7;
      }
      _ecma_ref_object($337); //@line 810
      _ecma_ref_ecma_string($335); //@line 811
      $340 = _ecma_make_object_value($337) | 0; //@line 812
      $341 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 813
      $342 = $341 + 4 | 0; //@line 814
      SAFE_HEAP_STORE($1 | 0, $342 | 0, 4);
      SAFE_HEAP_STORE($341 | 0, $340 | 0, 4);
      SAFE_HEAP_STORE($342 | 0, _ecma_make_string_value($335) | 0 | 0, 4);
      SAFE_HEAP_STORE($1 | 0, $341 + 12 | 0, 4);
      SAFE_HEAP_STORE($341 + 8 | 0, $338 | 0, 4);
      $$11188$phi = $$11188; //@line 823
      $$11094 = $$10; //@line 823
      $$11106 = $$31108; //@line 823
      $$11188 = $$11188$phi; //@line 823
      continue L7;
      break;
     }
    case 23:
     {
      if ($$01206 << 24 >> 24 == 57) {
       $347 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 830
       $$101125 = SAFE_HEAP_LOAD($347 + -8 | 0, 4, 0) | 0 | 0; //@line 835
       $$71146 = SAFE_HEAP_LOAD($347 + -4 | 0, 4, 0) | 0 | 0; //@line 835
       label = 102; //@line 836
       break L61;
      }
      $353 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 840
      $354 = $353 + 4 | 0; //@line 841
      SAFE_HEAP_STORE($1 | 0, $354 | 0, 4);
      SAFE_HEAP_STORE($353 | 0, $$51120 | 0, 4);
      if ($$01206 << 24 >> 24 == 58) {
       $$101125 = SAFE_HEAP_LOAD($353 + -4 | 0, 4, 0) | 0 | 0; //@line 847
       $$71146 = $$51120; //@line 847
       label = 102; //@line 848
       break L61;
      } else {
       SAFE_HEAP_STORE($1 | 0, $353 + 8 | 0, 4);
       SAFE_HEAP_STORE($354 | 0, $$61145 | 0, 4);
       $$101125 = $$51120; //@line 854
       $$71146 = $$61145; //@line 854
       label = 102; //@line 855
       break L61;
      }
      break;
     }
    case 28:
    case 27:
    case 26:
    case 25:
    case 24:
     {
      $$101125 = $$51120; //@line 861
      $$71146 = $$61145; //@line 861
      label = 102; //@line 862
      break;
     }
    case 32:
    case 31:
    case 30:
    case 29:
     {
      $$121127 = $$51120; //@line 866
      $$91148 = $$61145; //@line 866
      label = 107; //@line 867
      break;
     }
    case 35:
     {
      $$101149 = $$61145; //@line 871
      $$201135 = 72; //@line 871
      $$261179 = $$51120; //@line 871
      $$28 = $$8; //@line 871
      $$61213 = $55; //@line 871
      $$91196 = $$11188; //@line 871
      label = 312; //@line 872
      break;
     }
    case 36:
     {
      $423 = (SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + -4 | 0; //@line 877
      $424 = SAFE_HEAP_LOAD($423 | 0, 4, 0) | 0 | 0; //@line 878
      SAFE_HEAP_STORE($423 | 0, $$51120 | 0, 4);
      $$101149 = $$61145; //@line 880
      $$201135 = 72; //@line 880
      $$261179 = $424; //@line 880
      $$28 = $$8; //@line 880
      $$61213 = $55; //@line 880
      $$91196 = $$11188; //@line 880
      label = 312; //@line 881
      break;
     }
    case 37:
     {
      $427 = SAFE_HEAP_LOAD((SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + -4 | 0, 4, 0) | 0 | 0; //@line 887
      $429 = _ecma_copy_value(SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0) | 0; //@line 889
      $430 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 890
      SAFE_HEAP_STORE($430 + -4 | 0, $429 | 0, 4);
      SAFE_HEAP_STORE($1 | 0, $430 + 4 | 0, 4);
      SAFE_HEAP_STORE($430 | 0, $$51120 | 0, 4);
      $$101149 = $$61145; //@line 896
      $$201135 = 72; //@line 896
      $$261179 = $427; //@line 896
      $$28 = $$8; //@line 896
      $$61213 = $55; //@line 896
      $$91196 = $$11188; //@line 896
      label = 312; //@line 897
      break;
     }
    case 41:
     {
      SAFE_HEAP_STORE(134116 * 4 | 0, SAFE_HEAP_LOAD(134116 * 4 | 0, 4, 0) | 0 | 2 | 0, 4);
      $$11188$phi = $$11188; //@line 904
      $$11094 = $$8; //@line 904
      $$11106 = $$31108; //@line 904
      $$11188 = $$11188$phi; //@line 904
      continue L7;
      break;
     }
    case 42:
     {
      $441 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 911
      if (!(SAFE_HEAP_LOAD($41 >> 0 | 0, 1, 0) | 0)) {
       label = 137; //@line 913
       break L5;
      }
      $$$8 = ($$01206 & 255) < 181 ? $$8 + 1 | 0 : $$8; //@line 918
      SAFE_HEAP_STORE($41 >> 0 | 0, 0 | 0, 1);
      $444 = $441 + -4 | 0; //@line 920
      SAFE_HEAP_STORE($1 | 0, $444 | 0, 4);
      $445 = SAFE_HEAP_LOAD($444 | 0, 4, 0) | 0 | 0; //@line 922
      $446 = SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0; //@line 923
      if (($445 | 0) == 24) {
       $$1211991324 = $446; //@line 926
       $$1311521326 = $$61145; //@line 926
       $$2311381327 = $$51120; //@line 926
       $$361325 = 24; //@line 926
       $$811131328 = $$31108; //@line 926
       break L7;
      }
      if (!($55 & 12288)) {
       _ecma_fast_free_value($445); //@line 932
       $$11094 = $$$8; //@line 933
       $$11106 = $$31108; //@line 933
       $$11188 = $446; //@line 933
       continue L7;
      }
      if (!($55 & 4096)) {
       _ecma_fast_free_value($446); //@line 939
       $$11094 = $$$8; //@line 940
       $$11106 = $$31108; //@line 940
       $$11188 = $445; //@line 940
       continue L7;
      } else {
       SAFE_HEAP_STORE($1 | 0, $441 | 0, 4);
       $$11094 = $$$8; //@line 944
       $$11106 = $$31108; //@line 944
       $$11188 = $446; //@line 944
       continue L7;
      }
      break;
     }
    case 43:
     {
      $454 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 952
      if (!(SAFE_HEAP_LOAD($41 >> 0 | 0, 1, 0) | 0)) {
       label = 145; //@line 954
       break L5;
      }
      SAFE_HEAP_STORE($41 >> 0 | 0, 0 | 0, 1);
      $455 = $454 + -4 | 0; //@line 958
      SAFE_HEAP_STORE($1 | 0, $455 | 0, 4);
      $457 = SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0; //@line 961
      if ((SAFE_HEAP_LOAD($455 | 0, 4, 0) | 0 | 0) == 24) {
       $$1211991324 = $457; //@line 964
       $$1311521326 = $$61145; //@line 964
       $$2311381327 = $$51120; //@line 964
       $$361325 = 24; //@line 964
       $$811131328 = $$31108; //@line 964
       break L7;
      }
      SAFE_HEAP_STORE($1 | 0, $454 | 0, 4);
      $$11094 = ($$01206 & 255) < 62 ? $$8 + 1 | 0 : $$8; //@line 971
      $$11106 = $$31108; //@line 971
      $$11188 = $457; //@line 971
      continue L7;
      break;
     }
    case 33:
     {
      $461 = _vm_op_delete_prop($$51120, $$61145, $11) | 0; //@line 976
      if (($461 | 0) == 24) {
       $$1211991324 = $$11188; //@line 979
       $$1311521326 = $$61145; //@line 979
       $$2311381327 = $$51120; //@line 979
       $$361325 = 24; //@line 979
       $$811131328 = $$31108; //@line 979
       break L7;
      }
      $463 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 982
      SAFE_HEAP_STORE($1 | 0, $463 + 4 | 0, 4);
      SAFE_HEAP_STORE($463 | 0, $461 | 0, 4);
      $$101197 = $$11188; //@line 986
      $$111150 = $$61145; //@line 986
      $$211136 = $$51120; //@line 986
      $$31 = $$8; //@line 986
      label = 334; //@line 987
      break;
     }
    case 34:
     {
      $465 = $$8 + 1 | 0; //@line 991
      $467 = SAFE_HEAP_LOAD($$8 >> 0 | 0, 1, 1) | 0 | 0; //@line 993
      if ($467 >>> 0 < $33 >>> 0) {
       $$01252 = $467; //@line 996
       $$13 = $465; //@line 996
      } else {
       $$01252 = (SAFE_HEAP_LOAD($465 >> 0 | 0, 1, 1) | 0 | $467 << 8) - $40 | 0; //@line 1004
       $$13 = $$8 + 2 | 0; //@line 1004
      }
      $475 = $$01252 & 65535; //@line 1006
      if ($475 >>> 0 < $35 >>> 0) {
       $477 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1009
       SAFE_HEAP_STORE($1 | 0, $477 + 4 | 0, 4);
       SAFE_HEAP_STORE($477 | 0, 40 | 0, 4);
       $$11188$phi = $$11188; //@line 1013
       $$11094 = $$13; //@line 1013
       $$11106 = $$31108; //@line 1013
       $$11188 = $$11188$phi; //@line 1013
       continue L7;
      }
      $482 = _vm_op_delete_var(SAFE_HEAP_LOAD($7 + ($475 << 1) | 0, 2, 0) | 0 | 0, SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0) | 0; //@line 1019
      if (($482 | 0) == 24) {
       $$1211991324 = $$11188; //@line 1022
       $$1311521326 = $$61145; //@line 1022
       $$2311381327 = $$51120; //@line 1022
       $$361325 = 24; //@line 1022
       $$811131328 = $$31108; //@line 1022
       break L7;
      }
      $484 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1025
      SAFE_HEAP_STORE($1 | 0, $484 + 4 | 0, 4);
      SAFE_HEAP_STORE($484 | 0, $482 | 0, 4);
      $$11188$phi = $$11188; //@line 1029
      $$11094 = $$13; //@line 1029
      $$11106 = $$31108; //@line 1029
      $$11188 = $$11188$phi; //@line 1029
      continue L7;
      break;
     }
    case 44:
     {
      $$11188$phi = $$11188; //@line 1035
      $$11094 = $$11094 + $$31108 | 0; //@line 1035
      $$11106 = $$31108; //@line 1035
      $$11188 = $$11188$phi; //@line 1035
      continue L7;
      break;
     }
    case 45:
     {
      $487 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1040
      $488 = $487 + -4 | 0; //@line 1041
      SAFE_HEAP_STORE($1 | 0, $488 | 0, 4);
      $489 = SAFE_HEAP_LOAD($488 | 0, 4, 0) | 0 | 0; //@line 1043
      if (_ecma_op_strict_equality_compare($489, SAFE_HEAP_LOAD($487 + -8 | 0, 4, 0) | 0 | 0) | 0) {
       $495 = (SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + -4 | 0; //@line 1050
       SAFE_HEAP_STORE($1 | 0, $495 | 0, 4);
       _ecma_free_value(SAFE_HEAP_LOAD($495 | 0, 4, 0) | 0 | 0); //@line 1053
       $$14 = $$11094 + $$31108 | 0; //@line 1054
      } else {
       $$14 = $$8; //@line 1056
      }
      _ecma_free_value($489); //@line 1058
      $$11188$phi = $$11188; //@line 1059
      $$11094 = $$14; //@line 1059
      $$11106 = $$31108; //@line 1059
      $$11188 = $$11188$phi; //@line 1059
      continue L7;
      break;
     }
    case 49:
    case 48:
    case 47:
    case 46:
     {
      $498 = (SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + -4 | 0; //@line 1065
      SAFE_HEAP_STORE($1 | 0, $498 | 0, 4);
      $499 = SAFE_HEAP_LOAD($498 | 0, 4, 0) | 0 | 0; //@line 1067
      if (($55 & 1 | 0) != 0 ^ (_ecma_op_to_boolean($499) | 0)) {
       $502 = $$11094 + $$31108 | 0; //@line 1073
       if (!($55 & 2)) {
        SAFE_HEAP_STORE($1 | 0, (SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + 4 | 0, 4);
        $$11188$phi = $$11188; //@line 1080
        $$11094 = $502; //@line 1080
        $$11106 = $$31108; //@line 1080
        $$11188 = $$11188$phi; //@line 1080
        continue L7;
       } else {
        $$15 = $502; //@line 1083
       }
      } else {
       $$15 = $$8; //@line 1086
      }
      _ecma_fast_free_value($499); //@line 1088
      $$11188$phi = $$11188; //@line 1089
      $$11094 = $$15; //@line 1089
      $$11106 = $$31108; //@line 1089
      $$11188 = $$11188$phi; //@line 1089
      continue L7;
      break;
     }
    case 51:
    case 50:
     {
      $508 = _opfunc_unary_operation($$51120, ($165 | 0) == 50) | 0; //@line 1095
      if (($508 | 0) == 24) {
       $$1211991324 = $$11188; //@line 1098
       $$1311521326 = $$61145; //@line 1098
       $$2311381327 = $$51120; //@line 1098
       $$361325 = 24; //@line 1098
       $$811131328 = $$31108; //@line 1098
       break L7;
      }
      $510 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1101
      SAFE_HEAP_STORE($1 | 0, $510 + 4 | 0, 4);
      SAFE_HEAP_STORE($510 | 0, $508 | 0, 4);
      $$111198 = $$11188; //@line 1105
      $$221137 = $$51120; //@line 1105
      $$32 = $$8; //@line 1105
      break;
     }
    case 52:
     {
      $512 = _opfunc_logical_not($$51120) | 0; //@line 1109
      if (($512 | 0) == 24) {
       $$1211991324 = $$11188; //@line 1112
       $$1311521326 = $$61145; //@line 1112
       $$2311381327 = $$51120; //@line 1112
       $$361325 = 24; //@line 1112
       $$811131328 = $$31108; //@line 1112
       break L7;
      }
      $514 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1115
      SAFE_HEAP_STORE($1 | 0, $514 + 4 | 0, 4);
      SAFE_HEAP_STORE($514 | 0, $512 | 0, 4);
      $$111198 = $$11188; //@line 1119
      $$221137 = $$51120; //@line 1119
      $$32 = $$8; //@line 1119
      break;
     }
    case 53:
     {
      if (_ecma_is_value_integer_number($$51120) | 0) {
       $519 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1127
       SAFE_HEAP_STORE($1 | 0, $519 + 4 | 0, 4);
       SAFE_HEAP_STORE($519 | 0, $$51120 & -16 ^ -16 | 0, 4);
       $$111198 = $$11188; //@line 1131
       $$221137 = $$51120; //@line 1131
       $$32 = $$8; //@line 1131
       break L61;
      }
      $521 = _do_number_bitwise_logic(6, $$51120, $$51120) | 0; //@line 1134
      if (($521 | 0) == 24) {
       $$1211991324 = $$11188; //@line 1137
       $$1311521326 = $$61145; //@line 1137
       $$2311381327 = $$51120; //@line 1137
       $$361325 = 24; //@line 1137
       $$811131328 = $$31108; //@line 1137
       break L7;
      }
      $523 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1140
      SAFE_HEAP_STORE($1 | 0, $523 + 4 | 0, 4);
      SAFE_HEAP_STORE($523 | 0, $521 | 0, 4);
      $$111198 = $$11188; //@line 1144
      $$221137 = $$51120; //@line 1144
      $$32 = $$8; //@line 1144
      break;
     }
    case 54:
     {
      $525 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1148
      SAFE_HEAP_STORE($1 | 0, $525 + 4 | 0, 4);
      SAFE_HEAP_STORE($525 | 0, 72 | 0, 4);
      $$111198 = $$11188; //@line 1152
      $$221137 = $$51120; //@line 1152
      $$32 = $$8; //@line 1152
      break;
     }
    case 55:
     {
      $527 = $$8 + 1 | 0; //@line 1156
      $529 = SAFE_HEAP_LOAD($$8 >> 0 | 0, 1, 1) | 0 | 0; //@line 1158
      if ($529 >>> 0 < $33 >>> 0) {
       $$01254 = $529; //@line 1161
       $$17 = $527; //@line 1161
      } else {
       $$01254 = (SAFE_HEAP_LOAD($527 >> 0 | 0, 1, 1) | 0 | $529 << 8) - $40 | 0; //@line 1169
       $$17 = $$8 + 2 | 0; //@line 1169
      }
      $537 = $$01254 & 65535; //@line 1171
      if ($537 >>> 0 < $35 >>> 0) {
       $$18 = $$17; //@line 1178
       $$191134 = _ecma_copy_value(SAFE_HEAP_LOAD((SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0) + ($537 << 2) | 0, 4, 0) | 0 | 0) | 0; //@line 1178
       label = 179; //@line 1179
       break L61;
      }
      $546 = _jmem_decompress_pointer(SAFE_HEAP_LOAD($7 + ($537 << 1) | 0, 2, 1) | 0 | 0) | 0; //@line 1185
      $548 = _ecma_op_resolve_reference_base(SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0, $546) | 0; //@line 1187
      if (!$548) {
       $$18 = $$17; //@line 1190
       $$191134 = 72; //@line 1190
       label = 179; //@line 1191
      } else {
       $550 = _ecma_op_get_value_lex_env_base($548, $546, $11) | 0; //@line 1193
       if (($550 | 0) == 24) {
        $$1211991324 = $$11188; //@line 1196
        $$1311521326 = $$61145; //@line 1196
        $$2311381327 = $$51120; //@line 1196
        $$361325 = 24; //@line 1196
        $$811131328 = $$31108; //@line 1196
        break L7;
       } else {
        $$18 = $$17; //@line 1199
        $$191134 = $550; //@line 1199
        label = 179; //@line 1200
       }
      }
      break;
     }
    case 56:
     {
      $$18 = $$8; //@line 1206
      $$191134 = $$51120; //@line 1206
      label = 179; //@line 1207
      break;
     }
    case 57:
     {
      if (_ecma_are_values_integer_numbers($$51120, $$61145) | 0) {
       $557 = _ecma_get_integer_from_value($$51120) | 0; //@line 1213
       $$101149 = $$61145; //@line 1217
       $$201135 = $$51120; //@line 1217
       $$261179 = _ecma_make_int32_value((_ecma_get_integer_from_value($$61145) | 0) + $557 | 0) | 0; //@line 1217
       $$28 = $$8; //@line 1217
       $$61213 = $55; //@line 1217
       $$91196 = $$11188; //@line 1217
       label = 312; //@line 1218
       break L61;
      }
      if (_ecma_is_value_float_number($$51120) | 0) {
       if (_ecma_is_value_number($$61145) | 0) {
        $563 = +_ecma_get_float_from_value($$51120); //@line 1225
        $$101149 = $$61145; //@line 1229
        $$201135 = 72; //@line 1229
        $$261179 = _ecma_update_float_number($$51120, $563 + +_ecma_get_number_from_value($$61145)) | 0; //@line 1229
        $$28 = $$8; //@line 1229
        $$61213 = $55; //@line 1229
        $$91196 = $$11188; //@line 1229
        label = 312; //@line 1230
        break L61;
       }
      }
      if (_ecma_is_value_float_number($$61145) | 0) {
       if (_ecma_is_value_integer_number($$51120) | 0) {
        $570 = +(_ecma_get_integer_from_value($$51120) | 0); //@line 1239
        $$101149 = 72; //@line 1243
        $$201135 = $$51120; //@line 1243
        $$261179 = _ecma_update_float_number($$61145, $570 + +_ecma_get_float_from_value($$61145)) | 0; //@line 1243
        $$28 = $$8; //@line 1243
        $$61213 = $55; //@line 1243
        $$91196 = $$11188; //@line 1243
        label = 312; //@line 1244
        break L61;
       }
      }
      $574 = _opfunc_addition($$51120, $$61145) | 0; //@line 1248
      if (($574 | 0) == 24) {
       $$1211991324 = $$11188; //@line 1251
       $$1311521326 = $$61145; //@line 1251
       $$2311381327 = $$51120; //@line 1251
       $$361325 = 24; //@line 1251
       $$811131328 = $$31108; //@line 1251
       break L7;
      } else {
       $$101149 = $$61145; //@line 1254
       $$201135 = $$51120; //@line 1254
       $$261179 = $574; //@line 1254
       $$28 = $$8; //@line 1254
       $$61213 = $55; //@line 1254
       $$91196 = $$11188; //@line 1254
       label = 312; //@line 1255
      }
      break;
     }
    case 58:
     {
      if (_ecma_are_values_integer_numbers($$51120, $$61145) | 0) {
       $577 = _ecma_get_integer_from_value($$51120) | 0; //@line 1262
       $$101149 = $$61145; //@line 1266
       $$201135 = $$51120; //@line 1266
       $$261179 = _ecma_make_int32_value($577 - (_ecma_get_integer_from_value($$61145) | 0) | 0) | 0; //@line 1266
       $$28 = $$8; //@line 1266
       $$61213 = $55; //@line 1266
       $$91196 = $$11188; //@line 1266
       label = 312; //@line 1267
       break L61;
      }
      if (_ecma_is_value_float_number($$51120) | 0) {
       if (_ecma_is_value_number($$61145) | 0) {
        $583 = +_ecma_get_float_from_value($$51120); //@line 1274
        $$101149 = $$61145; //@line 1278
        $$201135 = 72; //@line 1278
        $$261179 = _ecma_update_float_number($$51120, $583 - +_ecma_get_number_from_value($$61145)) | 0; //@line 1278
        $$28 = $$8; //@line 1278
        $$61213 = $55; //@line 1278
        $$91196 = $$11188; //@line 1278
        label = 312; //@line 1279
        break L61;
       }
      }
      if (_ecma_is_value_float_number($$61145) | 0) {
       if (_ecma_is_value_integer_number($$51120) | 0) {
        $590 = +(_ecma_get_integer_from_value($$51120) | 0); //@line 1288
        $$101149 = 72; //@line 1292
        $$201135 = $$51120; //@line 1292
        $$261179 = _ecma_update_float_number($$61145, $590 - +_ecma_get_float_from_value($$61145)) | 0; //@line 1292
        $$28 = $$8; //@line 1292
        $$61213 = $55; //@line 1292
        $$91196 = $$11188; //@line 1292
        label = 312; //@line 1293
        break L61;
       }
      }
      $594 = _do_number_arithmetic(0, $$51120, $$61145) | 0; //@line 1297
      if (($594 | 0) == 24) {
       $$1211991324 = $$11188; //@line 1300
       $$1311521326 = $$61145; //@line 1300
       $$2311381327 = $$51120; //@line 1300
       $$361325 = 24; //@line 1300
       $$811131328 = $$31108; //@line 1300
       break L7;
      } else {
       $$101149 = $$61145; //@line 1303
       $$201135 = $$51120; //@line 1303
       $$261179 = $594; //@line 1303
       $$28 = $$8; //@line 1303
       $$61213 = $55; //@line 1303
       $$91196 = $$11188; //@line 1303
       label = 312; //@line 1304
      }
      break;
     }
    case 59:
     {
      if (_ecma_are_values_integer_numbers($$51120, $$61145) | 0) {
       $597 = _ecma_get_integer_from_value($$51120) | 0; //@line 1311
       $598 = _ecma_get_integer_from_value($$61145) | 0; //@line 1312
       if (($$61145 | 0) != 0 & (($$51120 | 0) != 0 & (($597 + 11585 | 0) >>> 0 < 23171 & ($598 + 11585 | 0) >>> 0 < 23171))) {
        $$101149 = $$61145; //@line 1324
        $$201135 = $$51120; //@line 1324
        $$261179 = _ecma_integer_multiply($597, $598) | 0; //@line 1324
        $$28 = $$8; //@line 1324
        $$61213 = $55; //@line 1324
        $$91196 = $$11188; //@line 1324
        label = 312; //@line 1325
        break L61;
       } else {
        $$101149 = $$61145; //@line 1332
        $$201135 = $$51120; //@line 1332
        $$261179 = _ecma_make_number_value(+($597 | 0) * +($598 | 0)) | 0; //@line 1332
        $$28 = $$8; //@line 1332
        $$61213 = $55; //@line 1332
        $$91196 = $$11188; //@line 1332
        label = 312; //@line 1333
        break L61;
       }
      }
      if (_ecma_is_value_float_number($$51120) | 0) {
       if (_ecma_is_value_number($$61145) | 0) {
        $611 = +_ecma_get_float_from_value($$51120); //@line 1341
        $$101149 = $$61145; //@line 1345
        $$201135 = 72; //@line 1345
        $$261179 = _ecma_update_float_number($$51120, $611 * +_ecma_get_number_from_value($$61145)) | 0; //@line 1345
        $$28 = $$8; //@line 1345
        $$61213 = $55; //@line 1345
        $$91196 = $$11188; //@line 1345
        label = 312; //@line 1346
        break L61;
       }
      }
      if (_ecma_is_value_float_number($$61145) | 0) {
       if (_ecma_is_value_integer_number($$51120) | 0) {
        $618 = +(_ecma_get_integer_from_value($$51120) | 0); //@line 1355
        $$101149 = 72; //@line 1359
        $$201135 = $$51120; //@line 1359
        $$261179 = _ecma_update_float_number($$61145, $618 * +_ecma_get_float_from_value($$61145)) | 0; //@line 1359
        $$28 = $$8; //@line 1359
        $$61213 = $55; //@line 1359
        $$91196 = $$11188; //@line 1359
        label = 312; //@line 1360
        break L61;
       }
      }
      $622 = _do_number_arithmetic(1, $$51120, $$61145) | 0; //@line 1364
      if (($622 | 0) == 24) {
       $$1211991324 = $$11188; //@line 1367
       $$1311521326 = $$61145; //@line 1367
       $$2311381327 = $$51120; //@line 1367
       $$361325 = 24; //@line 1367
       $$811131328 = $$31108; //@line 1367
       break L7;
      } else {
       $$101149 = $$61145; //@line 1370
       $$201135 = $$51120; //@line 1370
       $$261179 = $622; //@line 1370
       $$28 = $$8; //@line 1370
       $$61213 = $55; //@line 1370
       $$91196 = $$11188; //@line 1370
       label = 312; //@line 1371
      }
      break;
     }
    case 60:
     {
      $624 = _do_number_arithmetic(2, $$51120, $$61145) | 0; //@line 1376
      if (($624 | 0) == 24) {
       $$1211991324 = $$11188; //@line 1379
       $$1311521326 = $$61145; //@line 1379
       $$2311381327 = $$51120; //@line 1379
       $$361325 = 24; //@line 1379
       $$811131328 = $$31108; //@line 1379
       break L7;
      } else {
       $$101149 = $$61145; //@line 1382
       $$201135 = $$51120; //@line 1382
       $$261179 = $624; //@line 1382
       $$28 = $$8; //@line 1382
       $$61213 = $55; //@line 1382
       $$91196 = $$11188; //@line 1382
       label = 312; //@line 1383
      }
      break;
     }
    case 61:
     {
      if (_ecma_are_values_integer_numbers($$51120, $$61145) | 0) {
       $627 = _ecma_get_integer_from_value($$51120) | 0; //@line 1390
       $628 = _ecma_get_integer_from_value($$61145) | 0; //@line 1391
       if ($628 | 0) {
        $630 = ($627 | 0) % ($628 | 0) | 0; //@line 1394
        if (($627 | 0) > -1 | ($630 | 0) != 0) {
         $$101149 = $$61145; //@line 1400
         $$201135 = $$51120; //@line 1400
         $$261179 = _ecma_make_integer_value($630) | 0; //@line 1400
         $$28 = $$8; //@line 1400
         $$61213 = $55; //@line 1400
         $$91196 = $$11188; //@line 1400
         label = 312; //@line 1401
         break L61;
        }
       }
      }
      $634 = _do_number_arithmetic(3, $$51120, $$61145) | 0; //@line 1406
      if (($634 | 0) == 24) {
       $$1211991324 = $$11188; //@line 1409
       $$1311521326 = $$61145; //@line 1409
       $$2311381327 = $$51120; //@line 1409
       $$361325 = 24; //@line 1409
       $$811131328 = $$31108; //@line 1409
       break L7;
      } else {
       $$101149 = $$61145; //@line 1412
       $$201135 = $$51120; //@line 1412
       $$261179 = $634; //@line 1412
       $$28 = $$8; //@line 1412
       $$61213 = $55; //@line 1412
       $$91196 = $$11188; //@line 1412
       label = 312; //@line 1413
      }
      break;
     }
    case 62:
     {
      $636 = _opfunc_equality($$51120, $$61145) | 0; //@line 1418
      if (($636 | 0) == 24) {
       $$1211991324 = $$11188; //@line 1421
       $$1311521326 = $$61145; //@line 1421
       $$2311381327 = $$51120; //@line 1421
       $$361325 = 24; //@line 1421
       $$811131328 = $$31108; //@line 1421
       break L7;
      }
      $638 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1424
      SAFE_HEAP_STORE($1 | 0, $638 + 4 | 0, 4);
      SAFE_HEAP_STORE($638 | 0, $636 | 0, 4);
      $$101197 = $$11188; //@line 1428
      $$111150 = $$61145; //@line 1428
      $$211136 = $$51120; //@line 1428
      $$31 = $$8; //@line 1428
      label = 334; //@line 1429
      break;
     }
    case 63:
     {
      $640 = _opfunc_equality($$51120, $$61145) | 0; //@line 1433
      if (($640 | 0) == 24) {
       $$1211991324 = $$11188; //@line 1436
       $$1311521326 = $$61145; //@line 1436
       $$2311381327 = $$51120; //@line 1436
       $$361325 = 24; //@line 1436
       $$811131328 = $$31108; //@line 1436
       break L7;
      }
      $642 = _ecma_invert_boolean_value($640) | 0; //@line 1439
      $643 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1440
      SAFE_HEAP_STORE($1 | 0, $643 + 4 | 0, 4);
      SAFE_HEAP_STORE($643 | 0, $642 | 0, 4);
      $$101197 = $$11188; //@line 1444
      $$111150 = $$61145; //@line 1444
      $$211136 = $$51120; //@line 1444
      $$31 = $$8; //@line 1444
      label = 334; //@line 1445
      break;
     }
    case 64:
     {
      $646 = _ecma_make_boolean_value(_ecma_op_strict_equality_compare($$51120, $$61145) | 0) | 0; //@line 1450
      $647 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1451
      SAFE_HEAP_STORE($1 | 0, $647 + 4 | 0, 4);
      SAFE_HEAP_STORE($647 | 0, $646 | 0, 4);
      $$101197 = $$11188; //@line 1455
      $$111150 = $$61145; //@line 1455
      $$211136 = $$51120; //@line 1455
      $$31 = $$8; //@line 1455
      label = 334; //@line 1456
      break;
     }
    case 65:
     {
      $651 = _ecma_make_boolean_value((_ecma_op_strict_equality_compare($$51120, $$61145) | 0) ^ 1) | 0; //@line 1462
      $652 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1463
      SAFE_HEAP_STORE($1 | 0, $652 + 4 | 0, 4);
      SAFE_HEAP_STORE($652 | 0, $651 | 0, 4);
      $$101197 = $$11188; //@line 1467
      $$111150 = $$61145; //@line 1467
      $$211136 = $$51120; //@line 1467
      $$31 = $$8; //@line 1467
      label = 334; //@line 1468
      break;
     }
    case 72:
     {
      if (_ecma_are_values_integer_numbers($$51120, $$61145) | 0) {
       $$101149 = $$61145; //@line 1475
       $$201135 = $$51120; //@line 1475
       $$261179 = $$51120 | $$61145; //@line 1475
       $$28 = $$8; //@line 1475
       $$61213 = $55; //@line 1475
       $$91196 = $$11188; //@line 1475
       label = 312; //@line 1476
       break L61;
      } else {
       $656 = _do_number_bitwise_logic(1, $$51120, $$61145) | 0; //@line 1479
       if (($656 | 0) == 24) {
        $$1211991324 = $$11188; //@line 1482
        $$1311521326 = $$61145; //@line 1482
        $$2311381327 = $$51120; //@line 1482
        $$361325 = 24; //@line 1482
        $$811131328 = $$31108; //@line 1482
        break L7;
       } else {
        $$101149 = $$61145; //@line 1485
        $$201135 = $$51120; //@line 1485
        $$261179 = $656; //@line 1485
        $$28 = $$8; //@line 1485
        $$61213 = $55; //@line 1485
        $$91196 = $$11188; //@line 1485
        label = 312; //@line 1486
        break L61;
       }
      }
      break;
     }
    case 73:
     {
      if (_ecma_are_values_integer_numbers($$51120, $$61145) | 0) {
       $$101149 = $$61145; //@line 1497
       $$201135 = $$51120; //@line 1497
       $$261179 = ($$51120 ^ $$61145) & -16; //@line 1497
       $$28 = $$8; //@line 1497
       $$61213 = $55; //@line 1497
       $$91196 = $$11188; //@line 1497
       label = 312; //@line 1498
       break L61;
      } else {
       $661 = _do_number_bitwise_logic(2, $$51120, $$61145) | 0; //@line 1501
       if (($661 | 0) == 24) {
        $$1211991324 = $$11188; //@line 1504
        $$1311521326 = $$61145; //@line 1504
        $$2311381327 = $$51120; //@line 1504
        $$361325 = 24; //@line 1504
        $$811131328 = $$31108; //@line 1504
        break L7;
       } else {
        $$101149 = $$61145; //@line 1507
        $$201135 = $$51120; //@line 1507
        $$261179 = $661; //@line 1507
        $$28 = $$8; //@line 1507
        $$61213 = $55; //@line 1507
        $$91196 = $$11188; //@line 1507
        label = 312; //@line 1508
        break L61;
       }
      }
      break;
     }
    case 74:
     {
      if (_ecma_are_values_integer_numbers($$51120, $$61145) | 0) {
       $$101149 = $$61145; //@line 1518
       $$201135 = $$51120; //@line 1518
       $$261179 = $$51120 & $$61145; //@line 1518
       $$28 = $$8; //@line 1518
       $$61213 = $55; //@line 1518
       $$91196 = $$11188; //@line 1518
       label = 312; //@line 1519
       break L61;
      } else {
       $665 = _do_number_bitwise_logic(0, $$51120, $$61145) | 0; //@line 1522
       if (($665 | 0) == 24) {
        $$1211991324 = $$11188; //@line 1525
        $$1311521326 = $$61145; //@line 1525
        $$2311381327 = $$51120; //@line 1525
        $$361325 = 24; //@line 1525
        $$811131328 = $$31108; //@line 1525
        break L7;
       } else {
        $$101149 = $$61145; //@line 1528
        $$201135 = $$51120; //@line 1528
        $$261179 = $665; //@line 1528
        $$28 = $$8; //@line 1528
        $$61213 = $55; //@line 1528
        $$91196 = $$11188; //@line 1528
        label = 312; //@line 1529
        break L61;
       }
      }
      break;
     }
    case 75:
     {
      if (_ecma_are_values_integer_numbers($$51120, $$61145) | 0) {
       $668 = _ecma_get_integer_from_value($$51120) | 0; //@line 1538
       $$101149 = $$61145; //@line 1543
       $$201135 = $$51120; //@line 1543
       $$261179 = _ecma_make_int32_value($668 << ((_ecma_get_integer_from_value($$61145) | 0) & 31)) | 0; //@line 1543
       $$28 = $$8; //@line 1543
       $$61213 = $55; //@line 1543
       $$91196 = $$11188; //@line 1543
       label = 312; //@line 1544
       break L61;
      } else {
       $673 = _do_number_bitwise_logic(3, $$51120, $$61145) | 0; //@line 1547
       if (($673 | 0) == 24) {
        $$1211991324 = $$11188; //@line 1550
        $$1311521326 = $$61145; //@line 1550
        $$2311381327 = $$51120; //@line 1550
        $$361325 = 24; //@line 1550
        $$811131328 = $$31108; //@line 1550
        break L7;
       } else {
        $$101149 = $$61145; //@line 1553
        $$201135 = $$51120; //@line 1553
        $$261179 = $673; //@line 1553
        $$28 = $$8; //@line 1553
        $$61213 = $55; //@line 1553
        $$91196 = $$11188; //@line 1553
        label = 312; //@line 1554
        break L61;
       }
      }
      break;
     }
    case 76:
     {
      if (_ecma_are_values_integer_numbers($$51120, $$61145) | 0) {
       $676 = _ecma_get_integer_from_value($$51120) | 0; //@line 1563
       $$101149 = $$61145; //@line 1568
       $$201135 = $$51120; //@line 1568
       $$261179 = _ecma_make_integer_value($676 >> ((_ecma_get_integer_from_value($$61145) | 0) & 31)) | 0; //@line 1568
       $$28 = $$8; //@line 1568
       $$61213 = $55; //@line 1568
       $$91196 = $$11188; //@line 1568
       label = 312; //@line 1569
       break L61;
      } else {
       $681 = _do_number_bitwise_logic(4, $$51120, $$61145) | 0; //@line 1572
       if (($681 | 0) == 24) {
        $$1211991324 = $$11188; //@line 1575
        $$1311521326 = $$61145; //@line 1575
        $$2311381327 = $$51120; //@line 1575
        $$361325 = 24; //@line 1575
        $$811131328 = $$31108; //@line 1575
        break L7;
       } else {
        $$101149 = $$61145; //@line 1578
        $$201135 = $$51120; //@line 1578
        $$261179 = $681; //@line 1578
        $$28 = $$8; //@line 1578
        $$61213 = $55; //@line 1578
        $$91196 = $$11188; //@line 1578
        label = 312; //@line 1579
        break L61;
       }
      }
      break;
     }
    case 77:
     {
      if (_ecma_are_values_integer_numbers($$51120, $$61145) | 0) {
       $684 = _ecma_get_integer_from_value($$51120) | 0; //@line 1588
       $$101149 = $$61145; //@line 1593
       $$201135 = $$51120; //@line 1593
       $$261179 = _ecma_make_uint32_value($684 >>> ((_ecma_get_integer_from_value($$61145) | 0) & 31)) | 0; //@line 1593
       $$28 = $$8; //@line 1593
       $$61213 = $55; //@line 1593
       $$91196 = $$11188; //@line 1593
       label = 312; //@line 1594
       break L61;
      } else {
       $689 = _do_number_bitwise_logic(5, $$51120, $$61145) | 0; //@line 1597
       if (($689 | 0) == 24) {
        $$1211991324 = $$11188; //@line 1600
        $$1311521326 = $$61145; //@line 1600
        $$2311381327 = $$51120; //@line 1600
        $$361325 = 24; //@line 1600
        $$811131328 = $$31108; //@line 1600
        break L7;
       } else {
        $$101149 = $$61145; //@line 1603
        $$201135 = $$51120; //@line 1603
        $$261179 = $689; //@line 1603
        $$28 = $$8; //@line 1603
        $$61213 = $55; //@line 1603
        $$91196 = $$11188; //@line 1603
        label = 312; //@line 1604
        break L61;
       }
      }
      break;
     }
    case 66:
     {
      if (!(_ecma_are_values_integer_numbers($$51120, $$61145) | 0)) {
       if (_ecma_is_value_number($$51120) | 0) {
        if (_ecma_is_value_number($$61145) | 0) {
         $720 = +_ecma_get_number_from_value($$51120); //@line 1617
         $723 = _ecma_make_boolean_value($720 < +_ecma_get_number_from_value($$61145)) | 0; //@line 1620
         $724 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1621
         SAFE_HEAP_STORE($1 | 0, $724 + 4 | 0, 4);
         SAFE_HEAP_STORE($724 | 0, $723 | 0, 4);
         $$101197 = $$11188; //@line 1625
         $$111150 = $$61145; //@line 1625
         $$211136 = $$51120; //@line 1625
         $$31 = $$8; //@line 1625
         label = 334; //@line 1626
         break L61;
        }
       }
       $726 = _opfunc_relation($$51120, $$61145, 1, 0) | 0; //@line 1630
       if (($726 | 0) == 24) {
        $$1211991324 = $$11188; //@line 1633
        $$1311521326 = $$61145; //@line 1633
        $$2311381327 = $$51120; //@line 1633
        $$361325 = 24; //@line 1633
        $$811131328 = $$31108; //@line 1633
        break L7;
       }
       $728 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1636
       SAFE_HEAP_STORE($1 | 0, $728 + 4 | 0, 4);
       SAFE_HEAP_STORE($728 | 0, $726 | 0, 4);
       $$101197 = $$11188; //@line 1640
       $$111150 = $$61145; //@line 1640
       $$211136 = $$51120; //@line 1640
       $$31 = $$8; //@line 1640
       label = 334; //@line 1641
       break L61;
      }
      $692 = ($$51120 | 0) < ($$61145 | 0); //@line 1644
      $693 = SAFE_HEAP_LOAD($$8 >> 0 | 0, 1, 0) | 0 | 0; //@line 1645
      if (($693 + -13 & 255) >= 3) {
       $715 = _ecma_make_boolean_value($692) | 0; //@line 1649
       $716 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1650
       SAFE_HEAP_STORE($1 | 0, $716 + 4 | 0, 4);
       SAFE_HEAP_STORE($716 | 0, $715 | 0, 4);
       $$11188$phi = $$11188; //@line 1654
       $$11094 = $$8; //@line 1654
       $$11106 = $$31108; //@line 1654
       $$11188 = $$11188$phi; //@line 1654
       continue L7;
      }
      $695 = $$8 + 1 | 0; //@line 1657
      $696 = $693 & 3; //@line 1658
      if (!$692) {
       $$11188$phi = $$11188; //@line 1662
       $$11094 = $695 + ($696 & 255) | 0; //@line 1662
       $$11106 = $$31108; //@line 1662
       $$11188 = $$11188$phi; //@line 1662
       continue L7;
      }
      $698 = SAFE_HEAP_LOAD($695 >> 0 | 0, 1, 1) | 0 | 0; //@line 1666
      if ($696 << 24 >> 24 == 1) {
       $$41109 = $698; //@line 1669
      } else {
       $704 = SAFE_HEAP_LOAD($$8 + 2 >> 0 | 0, 1, 1) | 0 | $698 << 8; //@line 1675
       if ($696 << 24 >> 24 == 3) {
        $$41109 = SAFE_HEAP_LOAD($$8 + 3 >> 0 | 0, 1, 1) | 0 | $704 << 8; //@line 1683
       } else {
        $$41109 = $704; //@line 1685
       }
      }
      $$11188$phi = $$11188; //@line 1690
      $$11094 = $$8 + (0 - $$41109) | 0; //@line 1690
      $$11106 = $$41109; //@line 1690
      $$11188 = $$11188$phi; //@line 1690
      continue L7;
      break;
     }
    case 67:
     {
      if (_ecma_are_values_integer_numbers($$51120, $$61145) | 0) {
       $732 = _ecma_make_boolean_value(($$51120 | 0) > ($$61145 | 0)) | 0; //@line 1698
       $733 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1699
       SAFE_HEAP_STORE($1 | 0, $733 + 4 | 0, 4);
       SAFE_HEAP_STORE($733 | 0, $732 | 0, 4);
       $$11188$phi = $$11188; //@line 1703
       $$11094 = $$8; //@line 1703
       $$11106 = $$31108; //@line 1703
       $$11188 = $$11188$phi; //@line 1703
       continue L7;
      }
      if (_ecma_is_value_number($$51120) | 0) {
       if (_ecma_is_value_number($$61145) | 0) {
        $737 = +_ecma_get_number_from_value($$51120); //@line 1710
        $740 = _ecma_make_boolean_value($737 > +_ecma_get_number_from_value($$61145)) | 0; //@line 1713
        $741 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1714
        SAFE_HEAP_STORE($1 | 0, $741 + 4 | 0, 4);
        SAFE_HEAP_STORE($741 | 0, $740 | 0, 4);
        $$101197 = $$11188; //@line 1718
        $$111150 = $$61145; //@line 1718
        $$211136 = $$51120; //@line 1718
        $$31 = $$8; //@line 1718
        label = 334; //@line 1719
        break L61;
       }
      }
      $743 = _opfunc_relation($$51120, $$61145, 0, 0) | 0; //@line 1723
      if (($743 | 0) == 24) {
       $$1211991324 = $$11188; //@line 1726
       $$1311521326 = $$61145; //@line 1726
       $$2311381327 = $$51120; //@line 1726
       $$361325 = 24; //@line 1726
       $$811131328 = $$31108; //@line 1726
       break L7;
      }
      $745 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1729
      SAFE_HEAP_STORE($1 | 0, $745 + 4 | 0, 4);
      SAFE_HEAP_STORE($745 | 0, $743 | 0, 4);
      $$101197 = $$11188; //@line 1733
      $$111150 = $$61145; //@line 1733
      $$211136 = $$51120; //@line 1733
      $$31 = $$8; //@line 1733
      label = 334; //@line 1734
      break;
     }
    case 68:
     {
      if (_ecma_are_values_integer_numbers($$51120, $$61145) | 0) {
       $749 = _ecma_make_boolean_value(($$51120 | 0) <= ($$61145 | 0)) | 0; //@line 1741
       $750 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1742
       SAFE_HEAP_STORE($1 | 0, $750 + 4 | 0, 4);
       SAFE_HEAP_STORE($750 | 0, $749 | 0, 4);
       $$11188$phi = $$11188; //@line 1746
       $$11094 = $$8; //@line 1746
       $$11106 = $$31108; //@line 1746
       $$11188 = $$11188$phi; //@line 1746
       continue L7;
      }
      if (_ecma_is_value_number($$51120) | 0) {
       if (_ecma_is_value_number($$61145) | 0) {
        $754 = +_ecma_get_number_from_value($$51120); //@line 1753
        $757 = _ecma_make_boolean_value($754 <= +_ecma_get_number_from_value($$61145)) | 0; //@line 1756
        $758 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1757
        SAFE_HEAP_STORE($1 | 0, $758 + 4 | 0, 4);
        SAFE_HEAP_STORE($758 | 0, $757 | 0, 4);
        $$101197 = $$11188; //@line 1761
        $$111150 = $$61145; //@line 1761
        $$211136 = $$51120; //@line 1761
        $$31 = $$8; //@line 1761
        label = 334; //@line 1762
        break L61;
       }
      }
      $760 = _opfunc_relation($$51120, $$61145, 0, 1) | 0; //@line 1766
      if (($760 | 0) == 24) {
       $$1211991324 = $$11188; //@line 1769
       $$1311521326 = $$61145; //@line 1769
       $$2311381327 = $$51120; //@line 1769
       $$361325 = 24; //@line 1769
       $$811131328 = $$31108; //@line 1769
       break L7;
      }
      $762 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1772
      SAFE_HEAP_STORE($1 | 0, $762 + 4 | 0, 4);
      SAFE_HEAP_STORE($762 | 0, $760 | 0, 4);
      $$101197 = $$11188; //@line 1776
      $$111150 = $$61145; //@line 1776
      $$211136 = $$51120; //@line 1776
      $$31 = $$8; //@line 1776
      label = 334; //@line 1777
      break;
     }
    case 69:
     {
      if (_ecma_are_values_integer_numbers($$51120, $$61145) | 0) {
       $766 = _ecma_make_boolean_value(($$51120 | 0) >= ($$61145 | 0)) | 0; //@line 1784
       $767 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1785
       SAFE_HEAP_STORE($1 | 0, $767 + 4 | 0, 4);
       SAFE_HEAP_STORE($767 | 0, $766 | 0, 4);
       $$11188$phi = $$11188; //@line 1789
       $$11094 = $$8; //@line 1789
       $$11106 = $$31108; //@line 1789
       $$11188 = $$11188$phi; //@line 1789
       continue L7;
      }
      if (_ecma_is_value_number($$51120) | 0) {
       if (_ecma_is_value_number($$61145) | 0) {
        $771 = +_ecma_get_number_from_value($$51120); //@line 1796
        $774 = _ecma_make_boolean_value($771 >= +_ecma_get_number_from_value($$61145)) | 0; //@line 1799
        $775 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1800
        SAFE_HEAP_STORE($1 | 0, $775 + 4 | 0, 4);
        SAFE_HEAP_STORE($775 | 0, $774 | 0, 4);
        $$101197 = $$11188; //@line 1804
        $$111150 = $$61145; //@line 1804
        $$211136 = $$51120; //@line 1804
        $$31 = $$8; //@line 1804
        label = 334; //@line 1805
        break L61;
       }
      }
      $777 = _opfunc_relation($$51120, $$61145, 1, 1) | 0; //@line 1809
      if (($777 | 0) == 24) {
       $$1211991324 = $$11188; //@line 1812
       $$1311521326 = $$61145; //@line 1812
       $$2311381327 = $$51120; //@line 1812
       $$361325 = 24; //@line 1812
       $$811131328 = $$31108; //@line 1812
       break L7;
      }
      $779 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1815
      SAFE_HEAP_STORE($1 | 0, $779 + 4 | 0, 4);
      SAFE_HEAP_STORE($779 | 0, $777 | 0, 4);
      $$101197 = $$11188; //@line 1819
      $$111150 = $$61145; //@line 1819
      $$211136 = $$51120; //@line 1819
      $$31 = $$8; //@line 1819
      label = 334; //@line 1820
      break;
     }
    case 70:
     {
      $781 = _opfunc_in($$51120, $$61145) | 0; //@line 1824
      if (($781 | 0) == 24) {
       $$1211991324 = $$11188; //@line 1827
       $$1311521326 = $$61145; //@line 1827
       $$2311381327 = $$51120; //@line 1827
       $$361325 = 24; //@line 1827
       $$811131328 = $$31108; //@line 1827
       break L7;
      }
      $783 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1830
      SAFE_HEAP_STORE($1 | 0, $783 + 4 | 0, 4);
      SAFE_HEAP_STORE($783 | 0, $781 | 0, 4);
      $$101197 = $$11188; //@line 1834
      $$111150 = $$61145; //@line 1834
      $$211136 = $$51120; //@line 1834
      $$31 = $$8; //@line 1834
      label = 334; //@line 1835
      break;
     }
    case 71:
     {
      $785 = _opfunc_instanceof($$51120, $$61145) | 0; //@line 1839
      if (($785 | 0) == 24) {
       $$1211991324 = $$11188; //@line 1842
       $$1311521326 = $$61145; //@line 1842
       $$2311381327 = $$51120; //@line 1842
       $$361325 = 24; //@line 1842
       $$811131328 = $$31108; //@line 1842
       break L7;
      }
      $787 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1845
      SAFE_HEAP_STORE($1 | 0, $787 + 4 | 0, 4);
      SAFE_HEAP_STORE($787 | 0, $785 | 0, 4);
      $$101197 = $$11188; //@line 1849
      $$111150 = $$61145; //@line 1849
      $$211136 = $$51120; //@line 1849
      $$31 = $$8; //@line 1849
      label = 334; //@line 1850
      break;
     }
    case 78:
     {
      $790 = (SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + -4 | 0; //@line 1855
      SAFE_HEAP_STORE($1 | 0, $790 | 0, 4);
      $791 = SAFE_HEAP_LOAD($790 | 0, 4, 0) | 0 | 0; //@line 1857
      $795 = $$11094 - (SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0) + $$31108 | 0; //@line 1861
      $796 = _ecma_op_to_object($791) | 0; //@line 1862
      _ecma_free_value($791); //@line 1863
      if (($796 | 0) == 24) {
       $$1211991324 = $$11188; //@line 1866
       $$1311521326 = $$61145; //@line 1866
       $$2311381327 = $$51120; //@line 1866
       $$361325 = 24; //@line 1866
       $$811131328 = $795; //@line 1866
       break L7;
      }
      $798 = _ecma_get_object_from_value($796) | 0; //@line 1869
      $800 = _ecma_create_object_lex_env(SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0, $798, 1) | 0; //@line 1871
      _ecma_deref_object($798); //@line 1872
      SAFE_HEAP_STORE($44 | 0, (SAFE_HEAP_LOAD($44 | 0, 2, 1) | 0 | 0) + 2 | 0, 2);
      $805 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1878
      SAFE_HEAP_STORE($1 | 0, $805 + 8 | 0, 4);
      SAFE_HEAP_STORE($805 + 4 | 0, $795 << 4 | 5 | 0, 4);
      SAFE_HEAP_STORE($805 | 0, _ecma_make_object_value(SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0) | 0 | 0, 4);
      SAFE_HEAP_STORE($37 | 0, $800 | 0, 4);
      $$11188$phi = $$11188; //@line 1889
      $$11094 = $$8; //@line 1889
      $$11106 = $795; //@line 1889
      $$11188 = $$11188$phi; //@line 1889
      continue L7;
      break;
     }
    case 79:
     {
      $813 = (SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + -4 | 0; //@line 1895
      SAFE_HEAP_STORE($1 | 0, $813 | 0, 4);
      $814 = SAFE_HEAP_LOAD($813 | 0, 4, 0) | 0 | 0; //@line 1897
      SAFE_HEAP_STORE($2 | 0, 72 | 0, 4);
      $815 = _opfunc_for_in($814, $2) | 0; //@line 1899
      _ecma_free_value($814); //@line 1900
      if (!$815) {
       $$21 = $$11094 + $$31108 | 0; //@line 1904
       $$71112 = $$31108; //@line 1904
      } else {
       $821 = $$11094 - (SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0) + $$31108 | 0; //@line 1909
       SAFE_HEAP_STORE($44 | 0, (SAFE_HEAP_LOAD($44 | 0, 2, 1) | 0 | 0) + 4 | 0, 2);
       $826 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1915
       SAFE_HEAP_STORE($1 | 0, $826 + 16 | 0, 4);
       SAFE_HEAP_STORE($826 + 12 | 0, $821 << 4 | 6 | 0, 4);
       SAFE_HEAP_STORE($826 + 8 | 0, $815 | 0, 4);
       SAFE_HEAP_STORE($826 + 4 | 0, 0 | 0, 4);
       SAFE_HEAP_STORE($826 | 0, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0, 4);
       $$21 = $$8; //@line 1929
       $$71112 = $821; //@line 1929
      }
      $$11188$phi = $$11188; //@line 1931
      $$11094 = $$21; //@line 1931
      $$11106 = $$71112; //@line 1931
      $$11188 = $$11188$phi; //@line 1931
      continue L7;
      break;
     }
    case 80:
     {
      $839 = (SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0) + ($35 << 2) + ((SAFE_HEAP_LOAD($44 | 0, 2, 1) | 0) << 2) | 0; //@line 1940
      $840 = $839 + -8 | 0; //@line 1941
      $841 = SAFE_HEAP_LOAD($840 | 0, 4, 0) | 0 | 0; //@line 1942
      $842 = $839 + -12 | 0; //@line 1943
      $843 = SAFE_HEAP_LOAD($842 | 0, 4, 0) | 0 | 0; //@line 1944
      $845 = SAFE_HEAP_LOAD($841 + ($843 << 2) | 0, 4, 0) | 0 | 0; //@line 1946
      $846 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1947
      SAFE_HEAP_STORE($1 | 0, $846 + 4 | 0, 4);
      SAFE_HEAP_STORE($846 | 0, $845 | 0, 4);
      $848 = $843 + 1 | 0; //@line 1951
      $849 = $841 + ($848 << 2) | 0; //@line 1952
      if (_ecma_is_value_collection_chunk(SAFE_HEAP_LOAD($849 | 0, 4, 0) | 0 | 0) | 0) {
       SAFE_HEAP_STORE($842 | 0, 0 | 0, 4);
       SAFE_HEAP_STORE($840 | 0, _ecma_get_collection_chunk_from_value(SAFE_HEAP_LOAD($849 | 0, 4, 0) | 0 | 0) | 0 | 0, 4);
       _jmem_heap_free_block($841, 24); //@line 1961
       $$11188$phi = $$11188; //@line 1962
       $$11094 = $$8; //@line 1962
       $$11106 = $$31108; //@line 1962
       $$11188 = $$11188$phi; //@line 1962
       continue L7;
      } else {
       SAFE_HEAP_STORE($842 | 0, $848 | 0, 4);
       $$11188$phi = $$11188; //@line 1966
       $$11094 = $$8; //@line 1966
       $$11106 = $$31108; //@line 1966
       $$11188 = $$11188$phi; //@line 1966
       continue L7;
      }
      break;
     }
    case 81:
     {
      $855 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1972
      $857 = SAFE_HEAP_LOAD($855 + -8 | 0, 4, 0) | 0 | 0; //@line 1974
      $860 = _ecma_get_object_from_value(SAFE_HEAP_LOAD($855 + -16 | 0, 4, 0) | 0 | 0) | 0; //@line 1977
      L327 : do {
       if ($857 | 0) {
        $$012001420$ph = SAFE_HEAP_LOAD($855 + -12 | 0, 4, 0) | 0 | 0; //@line 1983
        $$012031419$ph = $857; //@line 1983
        L329 : while (1) {
         $887 = _ecma_get_string_from_value(SAFE_HEAP_LOAD($$012031419$ph + ($$012001420$ph << 2) | 0, 4, 0) | 0 | 0) | 0; //@line 1987
         if (_ecma_op_object_has_property($860, $887) | 0) {
          break;
         } else {
          $$0120014201675 = $$012001420$ph; //@line 1992
          $876 = $887; //@line 1992
         }
         while (1) {
          $$0120014201675 = $$0120014201675 + 1 | 0; //@line 1995
          $872 = SAFE_HEAP_LOAD($$012031419$ph + ($$0120014201675 << 2) | 0, 4, 0) | 0 | 0; //@line 1997
          $873 = _ecma_is_value_collection_chunk($872) | 0; //@line 1998
          $874 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 1999
          $875 = $874 + -12 | 0; //@line 2000
          if ($873) {
           break;
          }
          SAFE_HEAP_STORE($875 | 0, $$0120014201675 | 0, 4);
          _ecma_deref_ecma_string($876); //@line 2005
          $879 = _ecma_get_string_from_value(SAFE_HEAP_LOAD($$012031419$ph + ($$0120014201675 << 2) | 0, 4, 0) | 0 | 0) | 0; //@line 2008
          if (_ecma_op_object_has_property($860, $879) | 0) {
           break L329;
          } else {
           $876 = $879; //@line 2013
          }
         }
         SAFE_HEAP_STORE($875 | 0, 0 | 0, 4);
         $$012031419$ph$looptemp = $$012031419$ph;
         $$012031419$ph = _ecma_get_collection_chunk_from_value($872) | 0; //@line 2017
         SAFE_HEAP_STORE($874 + -8 | 0, $$012031419$ph | 0, 4);
         _jmem_heap_free_block($$012031419$ph$looptemp, 24); //@line 2021
         _ecma_deref_ecma_string($876); //@line 2022
         if (!$$012031419$ph) {
          break L327;
         } else {
          $$012001420$ph = 0; //@line 2027
         }
        }
        $$11188$phi = $$11188; //@line 2031
        $$11094 = $$11094 + $$31108 | 0; //@line 2031
        $$11106 = $$31108; //@line 2031
        $$11188 = $$11188$phi; //@line 2031
        continue L7;
       }
      } while (0);
      _ecma_deref_object($860); //@line 2035
      SAFE_HEAP_STORE($44 | 0, (SAFE_HEAP_LOAD($44 | 0, 2, 1) | 0 | 0) + 65532 | 0, 2);
      SAFE_HEAP_STORE($1 | 0, (SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + -16 | 0, 4);
      $$11188$phi = $$11188; //@line 2044
      $$11094 = $$8; //@line 2044
      $$11106 = $$31108; //@line 2044
      $$11188 = $$11188$phi; //@line 2044
      continue L7;
      break;
     }
    case 82:
     {
      $893 = $$11094 - (SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0) + $$31108 | 0; //@line 2052
      SAFE_HEAP_STORE($44 | 0, (SAFE_HEAP_LOAD($44 | 0, 2, 1) | 0 | 0) + 2 | 0, 2);
      $898 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 2058
      SAFE_HEAP_STORE($1 | 0, $898 + 8 | 0, 4);
      SAFE_HEAP_STORE($898 + 4 | 0, $893 << 4 | 3 | 0, 4);
      $$11188$phi = $$11188; //@line 2065
      $$11094 = $$8; //@line 2065
      $$11106 = $893; //@line 2065
      $$11188 = $$11188$phi; //@line 2065
      continue L7;
      break;
     }
    case 83:
     {
      $$11188$phi = $$11188; //@line 2071
      $$11094 = $$11094 + $$31108 | 0; //@line 2071
      $$11106 = $$31108; //@line 2071
      $$11188 = $$11188$phi; //@line 2071
      continue L7;
      break;
     }
    case 84:
     {
      $907 = $$11094 - (SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0) + $$31108 | 0; //@line 2079
      $908 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 2080
      if (((SAFE_HEAP_LOAD($908 + -4 | 0, 4, 0) | 0) & 15 | 0) == 4) {
       _ecma_deref_object(SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0); //@line 2087
       $914 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 2088
       SAFE_HEAP_STORE($37 | 0, _ecma_get_object_from_value(SAFE_HEAP_LOAD($914 + -8 | 0, 4, 0) | 0 | 0) | 0 | 0, 4);
       $920 = $914; //@line 2093
      } else {
       $920 = $908; //@line 2095
      }
      SAFE_HEAP_STORE($920 + -4 | 0, $907 << 4 | 0, 4);
      SAFE_HEAP_STORE($920 + -8 | 0, $907 | 0, 4);
      $$11188$phi = $$11188; //@line 2102
      $$11094 = $$8; //@line 2102
      $$11106 = $907; //@line 2102
      $$11188 = $$11188$phi; //@line 2102
      continue L7;
      break;
     }
    case 85:
     {
      $922 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 2107
      switch ((SAFE_HEAP_LOAD($922 + -4 | 0, 4, 0) | 0) & 15) {
      case 1:
       {
        label = 305; //@line 2114
        break L7;
        break;
       }
      case 2:
       {
        label = 306; //@line 2119
        break L7;
        break;
       }
      case 0:
       {
        break;
       }
      default:
       {
        SAFE_HEAP_STORE($1 | 0, _vm_stack_context_abort($0, $922) | 0 | 0, 4);
        $$11188$phi = $$11188; //@line 2129
        $$11094 = $$8; //@line 2129
        $$11106 = $$31108; //@line 2129
        $$11188 = $$11188$phi; //@line 2129
        continue L7;
       }
      }
      $925 = $922 + -8 | 0; //@line 2133
      $926 = SAFE_HEAP_LOAD($925 | 0, 4, 0) | 0 | 0; //@line 2134
      SAFE_HEAP_STORE($44 | 0, (SAFE_HEAP_LOAD($44 | 0, 2, 1) | 0 | 0) + 65534 | 0, 2);
      SAFE_HEAP_STORE($1 | 0, $925 | 0, 4);
      if (_vm_stack_find_finally($0, $1, 0, $926) | 0) {
       $932 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0; //@line 2143
       SAFE_HEAP_STORE((SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + -8 | 0, $926 | 0, 4);
       $$11188$phi = $$11188; //@line 2147
       $$11094 = $932; //@line 2147
       $$11106 = $$31108; //@line 2147
       $$11188 = $$11188$phi; //@line 2147
       continue L7;
      } else {
       $$11188$phi = $$11188; //@line 2152
       $$11094 = (SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0) + $926 | 0; //@line 2152
       $$11106 = $$31108; //@line 2152
       $$11188 = $$11188$phi; //@line 2152
       continue L7;
      }
      break;
     }
    case 86:
     {
      $955 = $$11094 - (SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0) + $$31108 | 0; //@line 2161
      if (_vm_stack_find_finally($0, $1, 0, $955) | 0) {
       $957 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0; //@line 2164
       SAFE_HEAP_STORE((SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + -8 | 0, $955 | 0, 4);
       $$11188$phi = $$11188; //@line 2168
       $$11094 = $957; //@line 2168
       $$11106 = $955; //@line 2168
       $$11188 = $$11188$phi; //@line 2168
       continue L7;
      } else {
       $$11188$phi = $$11188; //@line 2173
       $$11094 = (SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0) + $955 | 0; //@line 2173
       $$11106 = $955; //@line 2173
       $$11188 = $$11188$phi; //@line 2173
       continue L7;
      }
      break;
     }
    default:
     {
      label = 311; //@line 2179
      break L5;
     }
    }
   } while (0);
   do {
    if ((label | 0) == 102) {
     label = 0; //@line 2186
     $358 = _vm_op_get_value($$101125, $$71146) | 0; //@line 2187
     if (($358 | 0) == 24) {
      label = 103; //@line 2190
      break L7;
     }
     if (($$01206 & 255) < 151) {
      $362 = ($$01206 & 255) > 56; //@line 2195
      $$101149 = $362 ? 72 : $$71146; //@line 2198
      $$201135 = $362 ? 72 : $$101125; //@line 2198
      $$261179 = $358; //@line 2198
      $$28 = $$8; //@line 2198
      $$61213 = $55; //@line 2198
      $$91196 = $$11188; //@line 2198
      label = 312; //@line 2199
      break;
     } else {
      SAFE_HEAP_STORE($1 | 0, (SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + 8 | 0, 4);
      $$121127 = $358; //@line 2205
      $$91148 = 72; //@line 2205
      label = 107; //@line 2206
      break;
     }
    } else if ((label | 0) == 179) {
     label = 0; //@line 2211
     $552 = _opfunc_typeof($$191134) | 0; //@line 2212
     if (($552 | 0) == 24) {
      $$1211991324 = $$11188; //@line 2215
      $$1311521326 = $$61145; //@line 2215
      $$2311381327 = $$191134; //@line 2215
      $$361325 = 24; //@line 2215
      $$811131328 = $$31108; //@line 2215
      break L7;
     }
     $554 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 2218
     SAFE_HEAP_STORE($1 | 0, $554 + 4 | 0, 4);
     SAFE_HEAP_STORE($554 | 0, $552 | 0, 4);
     $$111198 = $$11188; //@line 2222
     $$221137 = $$191134; //@line 2222
     $$32 = $$18; //@line 2222
    }
   } while (0);
   do {
    if ((label | 0) == 107) {
     label = 0; //@line 2227
     $365 = $165 + -25 | 0; //@line 2228
     if (_ecma_is_value_integer_number($$121127) | 0) {
      $$01250 = ($55 & 1 | 0) == 0 ? ($$121127 | 0) == -2147483648 ? 0 : -16 : ($$121127 | 0) < 2147483632 ? 16 : 0; //@line 2237
      if (!$$01250) {
       $$131128 = 72; //@line 2240
       $$151168 = $$121127; //@line 2240
      } else {
       do {
        if (!($365 & 2)) {
         $$11208 = $55; //@line 2246
         $$21189 = $$11188; //@line 2246
        } else {
         if (!($55 & 4096)) {
          if (!($55 & 8192)) {
           $$11208 = $55; //@line 2254
           $$21189 = $$11188; //@line 2254
           break;
          }
          _ecma_free_value($$11188); //@line 2258
          $$11208 = $55 & 57343; //@line 2259
          $$21189 = $$121127; //@line 2259
          break;
         }
         $377 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 2264
         SAFE_HEAP_STORE($1 | 0, $377 + 4 | 0, 4);
         if (!($365 & 4)) {
          SAFE_HEAP_STORE($377 | 0, SAFE_HEAP_LOAD($377 + -4 | 0, 4, 0) | 0 | 0, 4);
          $381 = $377 + -8 | 0; //@line 2271
          SAFE_HEAP_STORE($377 + -4 | 0, SAFE_HEAP_LOAD($381 | 0, 4, 0) | 0 | 0, 4);
          $$sink1268 = $381; //@line 2275
         } else {
          $$sink1268 = $377; //@line 2277
         }
         SAFE_HEAP_STORE($$sink1268 | 0, $$121127 | 0, 4);
         $$11208 = $55 & 61439; //@line 2281
         $$21189 = $$11188; //@line 2281
        }
       } while (0);
       $$101149 = $$91148; //@line 2285
       $$201135 = 72; //@line 2285
       $$261179 = $$01250 + $$121127 | 0; //@line 2285
       $$28 = $45; //@line 2285
       $$61213 = $$11208; //@line 2285
       $$91196 = $$21189; //@line 2285
       label = 312; //@line 2286
       break;
      }
     } else {
      if (_ecma_is_value_float_number($$121127) | 0) {
       $$131128 = 72; //@line 2292
       $$151168 = $$121127; //@line 2292
      } else {
       $390 = _ecma_op_to_number($$121127) | 0; //@line 2294
       if (($390 | 0) == 24) {
        $$1211991324 = $$11188; //@line 2297
        $$1311521326 = $$91148; //@line 2297
        $$2311381327 = $$121127; //@line 2297
        $$361325 = 24; //@line 2297
        $$811131328 = $$31108; //@line 2297
        break L7;
       } else {
        $$131128 = $$121127; //@line 2300
        $$151168 = $390; //@line 2300
       }
      }
     }
     $392 = +_ecma_get_number_from_value($$151168); //@line 2304
     $$1269 = ($55 & 1 | 0) == 0 ? -1.0 : 1.0; //@line 2307
     do {
      if (!($365 & 2)) {
       $$41211 = $55; //@line 2312
       $$51192 = $$11188; //@line 2312
      } else {
       if (!($55 & 4096)) {
        if (!($55 & 8192)) {
         $$41211 = $55; //@line 2320
         $$51192 = $$11188; //@line 2320
         break;
        }
        _ecma_free_value($$11188); //@line 2324
        $$41211 = $55 & 57343; //@line 2326
        $$51192 = _ecma_copy_value($$151168) | 0; //@line 2326
        break;
       }
       if (!($365 & 4)) {
        $403 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 2332
        SAFE_HEAP_STORE($1 | 0, $403 + 4 | 0, 4);
        SAFE_HEAP_STORE($403 | 0, SAFE_HEAP_LOAD($403 + -4 | 0, 4, 0) | 0 | 0, 4);
        SAFE_HEAP_STORE($403 + -4 | 0, SAFE_HEAP_LOAD($403 + -8 | 0, 4, 0) | 0 | 0, 4);
        $410 = _ecma_copy_value($$151168) | 0; //@line 2342
        SAFE_HEAP_STORE((SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + -12 | 0, $410 | 0, 4);
       } else {
        $400 = _ecma_copy_value($$151168) | 0; //@line 2347
        $401 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 2348
        SAFE_HEAP_STORE($1 | 0, $401 + 4 | 0, 4);
        SAFE_HEAP_STORE($401 | 0, $400 | 0, 4);
       }
       $$41211 = $55 & 61439; //@line 2354
       $$51192 = $$11188; //@line 2354
      }
     } while (0);
     $419 = $$1269 + $392; //@line 2358
     if (_ecma_is_value_integer_number($$151168) | 0) {
      $$101149 = $$91148; //@line 2361
      $$201135 = $$131128; //@line 2361
      $$261179 = _ecma_make_number_value($419) | 0; //@line 2361
      $$28 = $45; //@line 2361
      $$61213 = $$41211; //@line 2361
      $$91196 = $$51192; //@line 2361
      label = 312; //@line 2362
      break;
     } else {
      $$101149 = $$91148; //@line 2366
      $$201135 = $$131128; //@line 2366
      $$261179 = _ecma_update_float_number($$151168, $419) | 0; //@line 2366
      $$28 = $45; //@line 2366
      $$61213 = $$41211; //@line 2366
      $$91196 = $$51192; //@line 2366
      label = 312; //@line 2367
      break;
     }
    }
   } while (0);
   L394 : do {
    if ((label | 0) == 312) {
     label = 0; //@line 2374
     do {
      if (!($$61213 & 1024)) {
       if (!($$61213 & 2048)) {
        $$30 = $$28; //@line 2382
        $$331186 = $$261179; //@line 2382
       } else {
        $996 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 2384
        $998 = SAFE_HEAP_LOAD($996 + -4 | 0, 4, 0) | 0 | 0; //@line 2386
        $999 = $996 + -8 | 0; //@line 2387
        SAFE_HEAP_STORE($1 | 0, $999 | 0, 4);
        $1000 = SAFE_HEAP_LOAD($999 | 0, 4, 0) | 0 | 0; //@line 2389
        if (($1000 | 0) == 136) {
         _ecma_fast_free_value(SAFE_HEAP_LOAD((SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0) + ($998 << 2) | 0, 4, 0) | 0 | 0); //@line 2395
         SAFE_HEAP_STORE((SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0) + ($998 << 2) | 0, $$261179 | 0, 4);
         if (!($$61213 & 12288)) {
          $$101197 = $$91196; //@line 2402
          $$111150 = $$101149; //@line 2402
          $$211136 = $$201135; //@line 2402
          $$31 = $$28; //@line 2402
          label = 334; //@line 2403
          break L394;
         }
         $$30 = $$28; //@line 2407
         $$331186 = _ecma_fast_copy_value($$261179) | 0; //@line 2407
         break;
        }
        if ((_vm_op_set_value($1000, $998, $$261179, $11) | 0) == 24) {
         label = 327; //@line 2413
         break L7;
        }
        if (!($$61213 & 12288)) {
         _ecma_fast_free_value($$261179); //@line 2419
         $$101197 = $$91196; //@line 2420
         $$111150 = $$101149; //@line 2420
         $$211136 = $$201135; //@line 2420
         $$31 = $$28; //@line 2420
         label = 334; //@line 2421
         break L394;
        } else {
         $$30 = $$28; //@line 2424
         $$331186 = $$261179; //@line 2424
        }
       }
      } else {
       $964 = $$28 + 1 | 0; //@line 2428
       $966 = SAFE_HEAP_LOAD($$28 >> 0 | 0, 1, 1) | 0 | 0; //@line 2430
       if ($966 >>> 0 < $33 >>> 0) {
        $$01114 = $966; //@line 2433
        $$29 = $964; //@line 2433
       } else {
        $$01114 = (SAFE_HEAP_LOAD($964 >> 0 | 0, 1, 1) | 0 | $966 << 8) - $40 | 0; //@line 2441
        $$29 = $$28 + 2 | 0; //@line 2441
       }
       $974 = $$01114 & 65535; //@line 2443
       if ($974 >>> 0 < $35 >>> 0) {
        _ecma_fast_free_value(SAFE_HEAP_LOAD((SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0) + ($974 << 2) | 0, 4, 0) | 0 | 0); //@line 2449
        SAFE_HEAP_STORE((SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0) + ($974 << 2) | 0, $$261179 | 0, 4);
        if (!($$61213 & 12288)) {
         $$30 = $$29; //@line 2456
         $$331186 = $$261179; //@line 2456
         break;
        }
        $$30 = $$29; //@line 2460
        $$331186 = _ecma_fast_copy_value($$261179) | 0; //@line 2460
        break;
       }
       $987 = _jmem_decompress_pointer(SAFE_HEAP_LOAD($7 + ($974 << 1) | 0, 2, 1) | 0 | 0) | 0; //@line 2466
       if ((_ecma_op_put_value_lex_env_base(_ecma_op_resolve_reference_base(SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0, $987) | 0, $987, $11, $$261179) | 0) == 24) {
        label = 321; //@line 2472
        break L7;
       }
       if (!($$61213 & 12288)) {
        _ecma_fast_free_value($$261179); //@line 2478
        $$30 = $$29; //@line 2479
        $$331186 = $$261179; //@line 2479
       } else {
        $$30 = $$29; //@line 2481
        $$331186 = $$261179; //@line 2481
       }
      }
     } while (0);
     if ($$61213 & 4096 | 0) {
      $1016 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 2488
      SAFE_HEAP_STORE($1 | 0, $1016 + 4 | 0, 4);
      SAFE_HEAP_STORE($1016 | 0, $$331186 | 0, 4);
      $$101197 = $$91196; //@line 2492
      $$111150 = $$101149; //@line 2492
      $$211136 = $$201135; //@line 2492
      $$31 = $$30; //@line 2492
      label = 334; //@line 2493
      break;
     }
     if (!($$61213 & 8192)) {
      $$101197 = $$91196; //@line 2499
      $$111150 = $$101149; //@line 2499
      $$211136 = $$201135; //@line 2499
      $$31 = $$30; //@line 2499
      label = 334; //@line 2500
     } else {
      _ecma_fast_free_value($$91196); //@line 2502
      $$101197 = $$331186; //@line 2503
      $$111150 = $$101149; //@line 2503
      $$211136 = $$201135; //@line 2503
      $$31 = $$30; //@line 2503
      label = 334; //@line 2504
     }
    }
   } while (0);
   if ((label | 0) == 334) {
    label = 0; //@line 2509
    _ecma_fast_free_value($$111150); //@line 2510
    $$111198 = $$101197; //@line 2511
    $$221137 = $$211136; //@line 2511
    $$32 = $$31; //@line 2511
   }
   _ecma_fast_free_value($$221137); //@line 2513
   $$11094 = $$32; //@line 2514
   $$11106 = $$31108; //@line 2514
   $$11188 = $$111198; //@line 2514
  }
  if ((label | 0) == 103) {
   label = 0; //@line 2517
   $360 = ($$01206 + -57 & 255) < 94; //@line 2519
   $$1211991324 = $$11188; //@line 2522
   $$1311521326 = $360 ? 72 : $$71146; //@line 2522
   $$2311381327 = $360 ? 72 : $$101125; //@line 2522
   $$361325 = 24; //@line 2522
   $$811131328 = $$31108; //@line 2522
  } else if ((label | 0) == 132) {
   label = 0; //@line 2525
   $433 = $$01206 << 24 >> 24 == 70; //@line 2526
   $$1211991324 = $433 ? 72 : $$11188; //@line 2529
   $$1311521326 = $$61145; //@line 2529
   $$2311381327 = 72; //@line 2529
   $$361325 = $433 ? $$11188 : $$51120; //@line 2529
   $$811131328 = $$31108; //@line 2529
  } else if ((label | 0) == 133) {
   label = 0; //@line 2532
   SAFE_HEAP_STORE(134113 * 4 | 0, $$51120 | 0, 4);
   SAFE_HEAP_STORE(134116 * 4 | 0, SAFE_HEAP_LOAD(134116 * 4 | 0, 4, 0) | 0 | 8 | 0, 4);
   $$1211991324 = $$11188; //@line 2537
   $$1311521326 = $$61145; //@line 2537
   $$2311381327 = 72; //@line 2537
   $$361325 = 24; //@line 2537
   $$811131328 = $$31108; //@line 2537
  } else if ((label | 0) == 134) {
   label = 0; //@line 2540
   $$1211991324 = $$11188; //@line 2542
   $$1311521326 = $$61145; //@line 2542
   $$2311381327 = $$51120; //@line 2542
   $$361325 = _ecma_raise_reference_error(6047) | 0; //@line 2542
   $$811131328 = $$31108; //@line 2542
  } else if ((label | 0) == 305) {
   label = 0; //@line 2545
   $937 = $922 + -8 | 0; //@line 2546
   SAFE_HEAP_STORE(134113 * 4 | 0, SAFE_HEAP_LOAD($937 | 0, 4, 0) | 0 | 0, 4);
   SAFE_HEAP_STORE(134116 * 4 | 0, SAFE_HEAP_LOAD(134116 * 4 | 0, 4, 0) | 0 | 8 | 0, 4);
   SAFE_HEAP_STORE($44 | 0, (SAFE_HEAP_LOAD($44 | 0, 2, 1) | 0 | 0) + 65534 | 0, 2);
   SAFE_HEAP_STORE($1 | 0, $937 | 0, 4);
   $$1211991324 = $$11188; //@line 2558
   $$1311521326 = $$61145; //@line 2558
   $$2311381327 = $$51120; //@line 2558
   $$361325 = 24; //@line 2558
   $$811131328 = $$31108; //@line 2558
  } else if ((label | 0) == 306) {
   label = 0; //@line 2561
   $945 = $922 + -8 | 0; //@line 2562
   $946 = SAFE_HEAP_LOAD($945 | 0, 4, 0) | 0 | 0; //@line 2563
   SAFE_HEAP_STORE($44 | 0, (SAFE_HEAP_LOAD($44 | 0, 2, 1) | 0 | 0) + 65534 | 0, 2);
   SAFE_HEAP_STORE($1 | 0, $945 | 0, 4);
   $$1211991324 = $$11188; //@line 2570
   $$1311521326 = $$61145; //@line 2570
   $$2311381327 = $$51120; //@line 2570
   $$361325 = $946; //@line 2570
   $$811131328 = $$31108; //@line 2570
  } else if ((label | 0) == 321) {
   label = 0; //@line 2573
   _ecma_free_value($$261179); //@line 2574
   $$1211991324 = $$91196; //@line 2575
   $$1311521326 = $$101149; //@line 2575
   $$2311381327 = $$201135; //@line 2575
   $$361325 = 24; //@line 2575
   $$811131328 = $$31108; //@line 2575
  } else if ((label | 0) == 327) {
   label = 0; //@line 2578
   _ecma_free_value($$261179); //@line 2579
   $$1211991324 = $$91196; //@line 2580
   $$1311521326 = $$101149; //@line 2580
   $$2311381327 = $$201135; //@line 2580
   $$361325 = 24; //@line 2580
   $$811131328 = $$31108; //@line 2580
  }
  _ecma_fast_free_value($$2311381327); //@line 2582
  _ecma_fast_free_value($$1311521326); //@line 2583
  $1020 = ($$361325 | 0) == 24; //@line 2584
  if ($1020) {
   $1021 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0; //@line 2586
   $1023 = SAFE_HEAP_LOAD($44 | 0, 2, 0) | 0 | 0; //@line 2588
   $1025 = $1021 + ($35 << 2) + (($1023 & 65535) << 2) | 0; //@line 2590
   $1026 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 2591
   if ($1025 >>> 0 < $1026 >>> 0) {
    $$010981426 = $1025; //@line 2594
    $1082 = $1026; //@line 2594
    while (1) {
     $1028 = SAFE_HEAP_LOAD($$010981426 | 0, 4, 0) | 0 | 0; //@line 2596
     if (($1028 | 0) == 136) {
      $$11099 = $$010981426 + 4 | 0; //@line 2600
      $1033 = $1082; //@line 2600
     } else {
      _ecma_free_value($1028); //@line 2602
      $$11099 = $$010981426; //@line 2604
      $1033 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 2604
     }
     $$010981426 = $$11099 + 4 | 0; //@line 2606
     if ($$010981426 >>> 0 >= $1033 >>> 0) {
      break;
     } else {
      $1082 = $1033; //@line 2609
     }
    }
    $1035 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0; //@line 2616
    $1037 = SAFE_HEAP_LOAD($44 | 0, 2, 0) | 0 | 0; //@line 2616
   } else {
    $1035 = $1021; //@line 2618
    $1037 = $1023; //@line 2618
   }
   SAFE_HEAP_STORE($1 | 0, $1035 + ($35 << 2) + (($1037 & 65535) << 2) | 0, 4);
   $1039 = $1037; //@line 2624
  } else {
   $1039 = SAFE_HEAP_LOAD($44 | 0, 2, 0) | 0 | 0; //@line 2627
  }
  if (!($1039 << 16 >> 16)) {
   label = 346; //@line 2631
   break;
  }
  if (!$1020) {
   if (!(_vm_stack_find_finally($0, $1, 2, 0) | 0)) {
    $$3613251507 = $$361325; //@line 2637
    label = 359; //@line 2638
    break;
   }
   $1042 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0; //@line 2641
   SAFE_HEAP_STORE((SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + -8 | 0, $$361325 | 0, 4);
   $$01093 = $1042; //@line 2645
   $$01105 = $$811131328; //@line 2645
   $$01187 = $$1211991324; //@line 2645
   continue;
  }
  if (!((SAFE_HEAP_LOAD(134116 * 4 | 0, 4, 0) | 0) & 8)) {
   label = 351; //@line 2652
   break;
  }
  if (!(_vm_stack_find_finally($0, $1, 1, 0) | 0)) {
   $$3613251507 = 24; //@line 2657
   label = 359; //@line 2658
   break;
  }
  $1049 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0; //@line 2661
  $1050 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 2662
  $1055 = SAFE_HEAP_LOAD(134113 * 4 | 0, 4, 0) | 0 | 0; //@line 2667
  if (((SAFE_HEAP_LOAD($1050 + -4 | 0, 4, 0) | 0) & 15 | 0) != 4) {
   SAFE_HEAP_STORE($1050 + -8 | 0, $1055 | 0, 4);
   $$01093 = $1049; //@line 2671
   $$01105 = $$811131328; //@line 2671
   $$01187 = $$1211991324; //@line 2671
   continue;
  }
  SAFE_HEAP_STORE($1 | 0, $1050 + 4 | 0, 4);
  SAFE_HEAP_STORE($1050 | 0, $1055 | 0, 4);
  $1059 = SAFE_HEAP_LOAD($1049 + 1 >> 0 | 0, 1, 1) | 0 | 0; //@line 2679
  if ($1059 >>> 0 < $33 >>> 0) {
   $$01097 = $1059; //@line 2682
  } else {
   $$01097 = (SAFE_HEAP_LOAD($1049 + 2 >> 0 | 0, 1, 1) | 0 | $1059 << 8) - $40 | 0; //@line 2690
  }
  $1068 = _ecma_create_decl_lex_env(SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0) | 0; //@line 2693
  _ecma_op_create_mutable_binding($1068, _jmem_decompress_pointer(SAFE_HEAP_LOAD($7 + ($$01097 << 1) | 0, 2, 1) | 0 | 0) | 0, 0) | 0; //@line 2698
  $1074 = _ecma_make_object_value(SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0) | 0; //@line 2700
  SAFE_HEAP_STORE((SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + -12 | 0, $1074 | 0, 4);
  SAFE_HEAP_STORE($37 | 0, $1068 | 0, 4);
  $$01093 = $1049; //@line 2705
  $$01105 = $$811131328; //@line 2705
  $$01187 = $$1211991324; //@line 2705
 }
 if ((label | 0) == 137) {
  SAFE_HEAP_STORE($41 >> 0 | 0, 1 | 0, 1);
  SAFE_HEAP_STORE($4 | 0, $$11094 | 0, 4);
  SAFE_HEAP_STORE($31 | 0, $441 | 0, 4);
  SAFE_HEAP_STORE($42 | 0, $$11188 | 0, 4);
  $$3 = 72; //@line 2712
 } else if ((label | 0) == 145) {
  SAFE_HEAP_STORE($41 >> 0 | 0, 2 | 0, 1);
  SAFE_HEAP_STORE($4 | 0, $$11094 | 0, 4);
  SAFE_HEAP_STORE($31 | 0, $454 | 0, 4);
  SAFE_HEAP_STORE($42 | 0, $$11188 | 0, 4);
  $$3 = 72; //@line 2719
 } else if ((label | 0) == 311) {} else if ((label | 0) == 346) {
  _ecma_fast_free_value($$1211991324); //@line 2725
  $$3 = $$361325; //@line 2726
 } else if ((label | 0) == 351) {
  $1078 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 2730
  do {
   $1078 = _vm_stack_context_abort($0, $1078) | 0; //@line 2732
   SAFE_HEAP_STORE($1 | 0, $1078 | 0, 4);
  } while ((SAFE_HEAP_LOAD($44 | 0, 2, 0) | 0 | 0) != 0);
  $$3613251507 = 24; //@line 2737
  label = 359; //@line 2738
 }
 if ((label | 0) == 359) {
  _ecma_free_value($$1211991324); //@line 2746
  $$3 = $$3613251507; //@line 2747
 }
 STACKTOP = sp; //@line 2749
 return $$3 | 0; //@line 2749
}
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01928$i = 0, $$0193$lcssa$i = 0, $$01937$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024371$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124470$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234253237$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$415$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435114$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435713$i = 0, $$723948$i = 0, $$749$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1001 = 0, $1007 = 0, $101 = 0, $1010 = 0, $1011 = 0, $102 = 0, $1029 = 0, $1031 = 0, $1038 = 0, $1039 = 0, $1040 = 0, $1048 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $142 = 0, $145 = 0, $148 = 0, $149 = 0, $155 = 0, $157 = 0, $16 = 0, $160 = 0, $162 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $183 = 0, $188 = 0, $189 = 0, $19 = 0, $20 = 0, $201 = 0, $205 = 0, $211 = 0, $218 = 0, $222 = 0, $231 = 0, $232 = 0, $234 = 0, $235 = 0, $239 = 0, $240 = 0, $248 = 0, $249 = 0, $250 = 0, $252 = 0, $253 = 0, $258 = 0, $259 = 0, $262 = 0, $264 = 0, $267 = 0, $27 = 0, $272 = 0, $279 = 0, $289 = 0, $293 = 0, $299 = 0, $30 = 0, $303 = 0, $306 = 0, $310 = 0, $312 = 0, $313 = 0, $315 = 0, $317 = 0, $319 = 0, $321 = 0, $323 = 0, $325 = 0, $327 = 0, $337 = 0, $338 = 0, $34 = 0, $348 = 0, $350 = 0, $353 = 0, $355 = 0, $358 = 0, $360 = 0, $363 = 0, $366 = 0, $367 = 0, $369 = 0, $37 = 0, $370 = 0, $372 = 0, $373 = 0, $375 = 0, $376 = 0, $381 = 0, $382 = 0, $387 = 0, $394 = 0, $398 = 0, $404 = 0, $41 = 0, $411 = 0, $415 = 0, $423 = 0, $426 = 0, $427 = 0, $428 = 0, $432 = 0, $433 = 0, $439 = 0, $44 = 0, $444 = 0, $445 = 0, $448 = 0, $450 = 0, $453 = 0, $458 = 0, $464 = 0, $466 = 0, $468 = 0, $47 = 0, $470 = 0, $487 = 0, $489 = 0, $49 = 0, $496 = 0, $497 = 0, $498 = 0, $50 = 0, $506 = 0, $508 = 0, $509 = 0, $511 = 0, $52 = 0, $520 = 0, $524 = 0, $526 = 0, $527 = 0, $528 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $546 = 0, $548 = 0, $549 = 0, $555 = 0, $557 = 0, $559 = 0, $56 = 0, $564 = 0, $566 = 0, $568 = 0, $569 = 0, $570 = 0, $578 = 0, $579 = 0, $58 = 0, $582 = 0, $586 = 0, $589 = 0, $591 = 0, $597 = 0, $6 = 0, $60 = 0, $601 = 0, $605 = 0, $614 = 0, $615 = 0, $62 = 0, $621 = 0, $623 = 0, $627 = 0, $630 = 0, $632 = 0, $637 = 0, $64 = 0, $643 = 0, $648 = 0, $649 = 0, $650 = 0, $656 = 0, $657 = 0, $658 = 0, $662 = 0, $67 = 0, $673 = 0, $678 = 0, $679 = 0, $681 = 0, $687 = 0, $689 = 0, $69 = 0, $693 = 0, $699 = 0, $7 = 0, $70 = 0, $703 = 0, $709 = 0, $71 = 0, $711 = 0, $717 = 0, $72 = 0, $721 = 0, $722 = 0, $727 = 0, $73 = 0, $733 = 0, $738 = 0, $741 = 0, $742 = 0, $745 = 0, $747 = 0, $749 = 0, $752 = 0, $763 = 0, $768 = 0, $77 = 0, $770 = 0, $773 = 0, $775 = 0, $778 = 0, $781 = 0, $782 = 0, $783 = 0, $785 = 0, $787 = 0, $788 = 0, $790 = 0, $791 = 0, $796 = 0, $797 = 0, $8 = 0, $80 = 0, $810 = 0, $813 = 0, $814 = 0, $820 = 0, $828 = 0, $834 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $843 = 0, $844 = 0, $850 = 0, $855 = 0, $856 = 0, $859 = 0, $861 = 0, $864 = 0, $869 = 0, $87 = 0, $875 = 0, $877 = 0, $879 = 0, $880 = 0, $898 = 0, $9 = 0, $900 = 0, $907 = 0, $908 = 0, $909 = 0, $916 = 0, $92 = 0, $920 = 0, $924 = 0, $926 = 0, $93 = 0, $932 = 0, $933 = 0, $935 = 0, $936 = 0, $937 = 0, $940 = 0, $945 = 0, $946 = 0, $947 = 0, $95 = 0, $953 = 0, $955 = 0, $96 = 0, $961 = 0, $966 = 0, $969 = 0, $970 = 0, $971 = 0, $975 = 0, $976 = 0, $98 = 0, $982 = 0, $987 = 0, $988 = 0, $991 = 0, $993 = 0, $996 = 0, label = 0, sp = 0, $955$looptemp = 0;
 sp = STACKTOP; //@line 17238
 STACKTOP = STACKTOP + 16 | 0; //@line 17239
 $1 = sp; //@line 17240
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 17247
   $7 = $6 >>> 3; //@line 17248
   $8 = SAFE_HEAP_LOAD(134650 * 4 | 0, 4, 0) | 0 | 0; //@line 17249
   $9 = $8 >>> $7; //@line 17250
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 17256
    $16 = 538640 + ($14 << 1 << 2) | 0; //@line 17258
    $17 = $16 + 8 | 0; //@line 17259
    $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0; //@line 17260
    $19 = $18 + 8 | 0; //@line 17261
    $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0; //@line 17262
    do {
     if (($16 | 0) == ($20 | 0)) {
      SAFE_HEAP_STORE(134650 * 4 | 0, $8 & ~(1 << $14) | 0, 4);
     } else {
      if ($20 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
       _abort(); //@line 17274
      }
      $27 = $20 + 12 | 0; //@line 17277
      if ((SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0) == ($18 | 0)) {
       SAFE_HEAP_STORE($27 | 0, $16 | 0, 4);
       SAFE_HEAP_STORE($17 | 0, $20 | 0, 4);
       break;
      } else {
       _abort(); //@line 17285
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 17290
    SAFE_HEAP_STORE($18 + 4 | 0, $30 | 3 | 0, 4);
    $34 = $18 + $30 + 4 | 0; //@line 17295
    SAFE_HEAP_STORE($34 | 0, SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 1 | 0, 4);
    $$0 = $19; //@line 17299
    STACKTOP = sp; //@line 17300
    return $$0 | 0; //@line 17300
   }
   $37 = SAFE_HEAP_LOAD(134652 * 4 | 0, 4, 0) | 0 | 0; //@line 17302
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 17308
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 17311
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 17314
     $49 = $47 >>> 12 & 16; //@line 17316
     $50 = $47 >>> $49; //@line 17317
     $52 = $50 >>> 5 & 8; //@line 17319
     $54 = $50 >>> $52; //@line 17321
     $56 = $54 >>> 2 & 4; //@line 17323
     $58 = $54 >>> $56; //@line 17325
     $60 = $58 >>> 1 & 2; //@line 17327
     $62 = $58 >>> $60; //@line 17329
     $64 = $62 >>> 1 & 1; //@line 17331
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 17334
     $69 = 538640 + ($67 << 1 << 2) | 0; //@line 17336
     $70 = $69 + 8 | 0; //@line 17337
     $71 = SAFE_HEAP_LOAD($70 | 0, 4, 0) | 0 | 0; //@line 17338
     $72 = $71 + 8 | 0; //@line 17339
     $73 = SAFE_HEAP_LOAD($72 | 0, 4, 0) | 0 | 0; //@line 17340
     do {
      if (($69 | 0) == ($73 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 17346
       SAFE_HEAP_STORE(134650 * 4 | 0, $77 | 0, 4);
       $98 = $77; //@line 17348
      } else {
       if ($73 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
        _abort(); //@line 17353
       }
       $80 = $73 + 12 | 0; //@line 17356
       if ((SAFE_HEAP_LOAD($80 | 0, 4, 0) | 0 | 0) == ($71 | 0)) {
        SAFE_HEAP_STORE($80 | 0, $69 | 0, 4);
        SAFE_HEAP_STORE($70 | 0, $73 | 0, 4);
        $98 = $8; //@line 17362
        break;
       } else {
        _abort(); //@line 17365
       }
      }
     } while (0);
     $84 = ($67 << 3) - $6 | 0; //@line 17371
     SAFE_HEAP_STORE($71 + 4 | 0, $6 | 3 | 0, 4);
     $87 = $71 + $6 | 0; //@line 17375
     SAFE_HEAP_STORE($87 + 4 | 0, $84 | 1 | 0, 4);
     SAFE_HEAP_STORE($87 + $84 | 0, $84 | 0, 4);
     if ($37 | 0) {
      $92 = SAFE_HEAP_LOAD(134655 * 4 | 0, 4, 0) | 0 | 0; //@line 17383
      $93 = $37 >>> 3; //@line 17384
      $95 = 538640 + ($93 << 1 << 2) | 0; //@line 17386
      $96 = 1 << $93; //@line 17387
      if (!($98 & $96)) {
       SAFE_HEAP_STORE(134650 * 4 | 0, $98 | $96 | 0, 4);
       $$0199 = $95; //@line 17394
       $$pre$phiZ2D = $95 + 8 | 0; //@line 17394
      } else {
       $101 = $95 + 8 | 0; //@line 17396
       $102 = SAFE_HEAP_LOAD($101 | 0, 4, 0) | 0 | 0; //@line 17397
       if ($102 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
        _abort(); //@line 17401
       } else {
        $$0199 = $102; //@line 17404
        $$pre$phiZ2D = $101; //@line 17404
       }
      }
      SAFE_HEAP_STORE($$pre$phiZ2D | 0, $92 | 0, 4);
      SAFE_HEAP_STORE($$0199 + 12 | 0, $92 | 0, 4);
      SAFE_HEAP_STORE($92 + 8 | 0, $$0199 | 0, 4);
      SAFE_HEAP_STORE($92 + 12 | 0, $95 | 0, 4);
     }
     SAFE_HEAP_STORE(134652 * 4 | 0, $84 | 0, 4);
     SAFE_HEAP_STORE(134655 * 4 | 0, $87 | 0, 4);
     $$0 = $72; //@line 17417
     STACKTOP = sp; //@line 17418
     return $$0 | 0; //@line 17418
    }
    $108 = SAFE_HEAP_LOAD(134651 * 4 | 0, 4, 0) | 0 | 0; //@line 17420
    if (!$108) {
     $$0197 = $6; //@line 17423
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 17427
     $114 = $112 >>> 12 & 16; //@line 17429
     $115 = $112 >>> $114; //@line 17430
     $117 = $115 >>> 5 & 8; //@line 17432
     $119 = $115 >>> $117; //@line 17434
     $121 = $119 >>> 2 & 4; //@line 17436
     $123 = $119 >>> $121; //@line 17438
     $125 = $123 >>> 1 & 2; //@line 17440
     $127 = $123 >>> $125; //@line 17442
     $129 = $127 >>> 1 & 1; //@line 17444
     $134 = SAFE_HEAP_LOAD(538904 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) | 0, 4, 0) | 0 | 0; //@line 17449
     $138 = ((SAFE_HEAP_LOAD($134 + 4 | 0, 4, 0) | 0) & -8) - $6 | 0; //@line 17453
     $142 = SAFE_HEAP_LOAD($134 + 16 + (((SAFE_HEAP_LOAD($134 + 16 | 0, 4, 0) | 0 | 0) == 0 & 1) << 2) | 0, 4, 0) | 0 | 0; //@line 17459
     if (!$142) {
      $$0192$lcssa$i = $134; //@line 17462
      $$0193$lcssa$i = $138; //@line 17462
     } else {
      $$01928$i = $134; //@line 17464
      $$01937$i = $138; //@line 17464
      $145 = $142; //@line 17464
      while (1) {
       $148 = ((SAFE_HEAP_LOAD($145 + 4 | 0, 4, 0) | 0) & -8) - $6 | 0; //@line 17469
       $149 = $148 >>> 0 < $$01937$i >>> 0; //@line 17470
       $$$0193$i = $149 ? $148 : $$01937$i; //@line 17471
       $$$0192$i = $149 ? $145 : $$01928$i; //@line 17472
       $145 = SAFE_HEAP_LOAD($145 + 16 + (((SAFE_HEAP_LOAD($145 + 16 | 0, 4, 0) | 0 | 0) == 0 & 1) << 2) | 0, 4, 0) | 0 | 0; //@line 17478
       if (!$145) {
        $$0192$lcssa$i = $$$0192$i; //@line 17481
        $$0193$lcssa$i = $$$0193$i; //@line 17481
        break;
       } else {
        $$01928$i = $$$0192$i; //@line 17484
        $$01937$i = $$$0193$i; //@line 17484
       }
      }
     }
     $155 = SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0; //@line 17488
     if ($$0192$lcssa$i >>> 0 < $155 >>> 0) {
      _abort(); //@line 17491
     }
     $157 = $$0192$lcssa$i + $6 | 0; //@line 17494
     if ($$0192$lcssa$i >>> 0 >= $157 >>> 0) {
      _abort(); //@line 17497
     }
     $160 = SAFE_HEAP_LOAD($$0192$lcssa$i + 24 | 0, 4, 0) | 0 | 0; //@line 17501
     $162 = SAFE_HEAP_LOAD($$0192$lcssa$i + 12 | 0, 4, 0) | 0 | 0; //@line 17503
     do {
      if (($162 | 0) == ($$0192$lcssa$i | 0)) {
       $173 = $$0192$lcssa$i + 20 | 0; //@line 17507
       $174 = SAFE_HEAP_LOAD($173 | 0, 4, 0) | 0 | 0; //@line 17508
       if (!$174) {
        $176 = $$0192$lcssa$i + 16 | 0; //@line 17511
        $177 = SAFE_HEAP_LOAD($176 | 0, 4, 0) | 0 | 0; //@line 17512
        if (!$177) {
         $$3$i = 0; //@line 17515
         break;
        } else {
         $$1196$i = $177; //@line 17518
         $$1198$i = $176; //@line 17518
        }
       } else {
        $$1196$i = $174; //@line 17521
        $$1198$i = $173; //@line 17521
       }
       while (1) {
        $179 = $$1196$i + 20 | 0; //@line 17524
        $180 = SAFE_HEAP_LOAD($179 | 0, 4, 0) | 0 | 0; //@line 17525
        if ($180 | 0) {
         $$1196$i = $180; //@line 17528
         $$1198$i = $179; //@line 17528
         continue;
        }
        $182 = $$1196$i + 16 | 0; //@line 17531
        $183 = SAFE_HEAP_LOAD($182 | 0, 4, 0) | 0 | 0; //@line 17532
        if (!$183) {
         break;
        } else {
         $$1196$i = $183; //@line 17537
         $$1198$i = $182; //@line 17537
        }
       }
       if ($$1198$i >>> 0 < $155 >>> 0) {
        _abort(); //@line 17542
       } else {
        SAFE_HEAP_STORE($$1198$i | 0, 0 | 0, 4);
        $$3$i = $$1196$i; //@line 17546
        break;
       }
      } else {
       $165 = SAFE_HEAP_LOAD($$0192$lcssa$i + 8 | 0, 4, 0) | 0 | 0; //@line 17551
       if ($165 >>> 0 < $155 >>> 0) {
        _abort(); //@line 17554
       }
       $167 = $165 + 12 | 0; //@line 17557
       if ((SAFE_HEAP_LOAD($167 | 0, 4, 0) | 0 | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 17561
       }
       $170 = $162 + 8 | 0; //@line 17564
       if ((SAFE_HEAP_LOAD($170 | 0, 4, 0) | 0 | 0) == ($$0192$lcssa$i | 0)) {
        SAFE_HEAP_STORE($167 | 0, $162 | 0, 4);
        SAFE_HEAP_STORE($170 | 0, $165 | 0, 4);
        $$3$i = $162; //@line 17570
        break;
       } else {
        _abort(); //@line 17573
       }
      }
     } while (0);
     L73 : do {
      if ($160 | 0) {
       $188 = SAFE_HEAP_LOAD($$0192$lcssa$i + 28 | 0, 4, 0) | 0 | 0; //@line 17582
       $189 = 538904 + ($188 << 2) | 0; //@line 17583
       do {
        if (($$0192$lcssa$i | 0) == (SAFE_HEAP_LOAD($189 | 0, 4, 0) | 0 | 0)) {
         SAFE_HEAP_STORE($189 | 0, $$3$i | 0, 4);
         if (!$$3$i) {
          SAFE_HEAP_STORE(134651 * 4 | 0, $108 & ~(1 << $188) | 0, 4);
          break L73;
         }
        } else {
         if ($160 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
          _abort(); //@line 17601
         } else {
          SAFE_HEAP_STORE($160 + 16 + (((SAFE_HEAP_LOAD($160 + 16 | 0, 4, 0) | 0 | 0) != ($$0192$lcssa$i | 0) & 1) << 2) | 0, $$3$i | 0, 4);
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $201 = SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0; //@line 17619
       if ($$3$i >>> 0 < $201 >>> 0) {
        _abort(); //@line 17622
       }
       SAFE_HEAP_STORE($$3$i + 24 | 0, $160 | 0, 4);
       $205 = SAFE_HEAP_LOAD($$0192$lcssa$i + 16 | 0, 4, 0) | 0 | 0; //@line 17628
       do {
        if ($205 | 0) {
         if ($205 >>> 0 < $201 >>> 0) {
          _abort(); //@line 17634
         } else {
          SAFE_HEAP_STORE($$3$i + 16 | 0, $205 | 0, 4);
          SAFE_HEAP_STORE($205 + 24 | 0, $$3$i | 0, 4);
          break;
         }
        }
       } while (0);
       $211 = SAFE_HEAP_LOAD($$0192$lcssa$i + 20 | 0, 4, 0) | 0 | 0; //@line 17646
       if ($211 | 0) {
        if ($211 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
         _abort(); //@line 17652
        } else {
         SAFE_HEAP_STORE($$3$i + 20 | 0, $211 | 0, 4);
         SAFE_HEAP_STORE($211 + 24 | 0, $$3$i | 0, 4);
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $218 = $$0193$lcssa$i + $6 | 0; //@line 17666
      SAFE_HEAP_STORE($$0192$lcssa$i + 4 | 0, $218 | 3 | 0, 4);
      $222 = $$0192$lcssa$i + $218 + 4 | 0; //@line 17671
      SAFE_HEAP_STORE($222 | 0, SAFE_HEAP_LOAD($222 | 0, 4, 0) | 0 | 1 | 0, 4);
     } else {
      SAFE_HEAP_STORE($$0192$lcssa$i + 4 | 0, $6 | 3 | 0, 4);
      SAFE_HEAP_STORE($157 + 4 | 0, $$0193$lcssa$i | 1 | 0, 4);
      SAFE_HEAP_STORE($157 + $$0193$lcssa$i | 0, $$0193$lcssa$i | 0, 4);
      if ($37 | 0) {
       $231 = SAFE_HEAP_LOAD(134655 * 4 | 0, 4, 0) | 0 | 0; //@line 17686
       $232 = $37 >>> 3; //@line 17687
       $234 = 538640 + ($232 << 1 << 2) | 0; //@line 17689
       $235 = 1 << $232; //@line 17690
       if (!($8 & $235)) {
        SAFE_HEAP_STORE(134650 * 4 | 0, $8 | $235 | 0, 4);
        $$0189$i = $234; //@line 17697
        $$pre$phi$iZ2D = $234 + 8 | 0; //@line 17697
       } else {
        $239 = $234 + 8 | 0; //@line 17699
        $240 = SAFE_HEAP_LOAD($239 | 0, 4, 0) | 0 | 0; //@line 17700
        if ($240 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
         _abort(); //@line 17704
        } else {
         $$0189$i = $240; //@line 17707
         $$pre$phi$iZ2D = $239; //@line 17707
        }
       }
       SAFE_HEAP_STORE($$pre$phi$iZ2D | 0, $231 | 0, 4);
       SAFE_HEAP_STORE($$0189$i + 12 | 0, $231 | 0, 4);
       SAFE_HEAP_STORE($231 + 8 | 0, $$0189$i | 0, 4);
       SAFE_HEAP_STORE($231 + 12 | 0, $234 | 0, 4);
      }
      SAFE_HEAP_STORE(134652 * 4 | 0, $$0193$lcssa$i | 0, 4);
      SAFE_HEAP_STORE(134655 * 4 | 0, $157 | 0, 4);
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 17722
     STACKTOP = sp; //@line 17723
     return $$0 | 0; //@line 17723
    }
   } else {
    $$0197 = $6; //@line 17726
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 17731
   } else {
    $248 = $0 + 11 | 0; //@line 17733
    $249 = $248 & -8; //@line 17734
    $250 = SAFE_HEAP_LOAD(134651 * 4 | 0, 4, 0) | 0 | 0; //@line 17735
    if (!$250) {
     $$0197 = $249; //@line 17738
    } else {
     $252 = 0 - $249 | 0; //@line 17740
     $253 = $248 >>> 8; //@line 17741
     if (!$253) {
      $$0358$i = 0; //@line 17744
     } else {
      if ($249 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 17748
      } else {
       $258 = ($253 + 1048320 | 0) >>> 16 & 8; //@line 17752
       $259 = $253 << $258; //@line 17753
       $262 = ($259 + 520192 | 0) >>> 16 & 4; //@line 17756
       $264 = $259 << $262; //@line 17758
       $267 = ($264 + 245760 | 0) >>> 16 & 2; //@line 17761
       $272 = 14 - ($262 | $258 | $267) + ($264 << $267 >>> 15) | 0; //@line 17766
       $$0358$i = $249 >>> ($272 + 7 | 0) & 1 | $272 << 1; //@line 17772
      }
     }
     $279 = SAFE_HEAP_LOAD(538904 + ($$0358$i << 2) | 0, 4, 0) | 0 | 0; //@line 17776
     L117 : do {
      if (!$279) {
       $$2355$i = 0; //@line 17780
       $$3$i201 = 0; //@line 17780
       $$3350$i = $252; //@line 17780
       label = 81; //@line 17781
      } else {
       $$0342$i = 0; //@line 17788
       $$0347$i = $252; //@line 17788
       $$0353$i = $279; //@line 17788
       $$0359$i = $249 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 17788
       $$0362$i = 0; //@line 17788
       while (1) {
        $289 = ((SAFE_HEAP_LOAD($$0353$i + 4 | 0, 4, 0) | 0) & -8) - $249 | 0; //@line 17793
        if ($289 >>> 0 < $$0347$i >>> 0) {
         if (!$289) {
          $$415$i = $$0353$i; //@line 17798
          $$435114$i = 0; //@line 17798
          $$435713$i = $$0353$i; //@line 17798
          label = 85; //@line 17799
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 17802
          $$1348$i = $289; //@line 17802
         }
        } else {
         $$1343$i = $$0342$i; //@line 17805
         $$1348$i = $$0347$i; //@line 17805
        }
        $293 = SAFE_HEAP_LOAD($$0353$i + 20 | 0, 4, 0) | 0 | 0; //@line 17808
        $$0353$i = SAFE_HEAP_LOAD($$0353$i + 16 + ($$0359$i >>> 31 << 2) | 0, 4, 0) | 0 | 0; //@line 17811
        $$1363$i = ($293 | 0) == 0 | ($293 | 0) == ($$0353$i | 0) ? $$0362$i : $293; //@line 17815
        $299 = ($$0353$i | 0) == 0; //@line 17816
        if ($299) {
         $$2355$i = $$1363$i; //@line 17821
         $$3$i201 = $$1343$i; //@line 17821
         $$3350$i = $$1348$i; //@line 17821
         label = 81; //@line 17822
         break;
        } else {
         $$0342$i = $$1343$i; //@line 17825
         $$0347$i = $$1348$i; //@line 17825
         $$0359$i = $$0359$i << (($299 ^ 1) & 1); //@line 17825
         $$0362$i = $$1363$i; //@line 17825
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i201 | 0) == 0) {
       $303 = 2 << $$0358$i; //@line 17835
       $306 = $250 & ($303 | 0 - $303); //@line 17838
       if (!$306) {
        $$0197 = $249; //@line 17841
        break;
       }
       $310 = ($306 & 0 - $306) + -1 | 0; //@line 17846
       $312 = $310 >>> 12 & 16; //@line 17848
       $313 = $310 >>> $312; //@line 17849
       $315 = $313 >>> 5 & 8; //@line 17851
       $317 = $313 >>> $315; //@line 17853
       $319 = $317 >>> 2 & 4; //@line 17855
       $321 = $317 >>> $319; //@line 17857
       $323 = $321 >>> 1 & 2; //@line 17859
       $325 = $321 >>> $323; //@line 17861
       $327 = $325 >>> 1 & 1; //@line 17863
       $$4$ph$i = 0; //@line 17869
       $$4357$ph$i = SAFE_HEAP_LOAD(538904 + (($315 | $312 | $319 | $323 | $327) + ($325 >>> $327) << 2) | 0, 4, 0) | 0 | 0; //@line 17869
      } else {
       $$4$ph$i = $$3$i201; //@line 17871
       $$4357$ph$i = $$2355$i; //@line 17871
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 17875
       $$4351$lcssa$i = $$3350$i; //@line 17875
      } else {
       $$415$i = $$4$ph$i; //@line 17877
       $$435114$i = $$3350$i; //@line 17877
       $$435713$i = $$4357$ph$i; //@line 17877
       label = 85; //@line 17878
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 17883
       $337 = ((SAFE_HEAP_LOAD($$435713$i + 4 | 0, 4, 0) | 0) & -8) - $249 | 0; //@line 17887
       $338 = $337 >>> 0 < $$435114$i >>> 0; //@line 17888
       $$$4351$i = $338 ? $337 : $$435114$i; //@line 17889
       $$4357$$4$i = $338 ? $$435713$i : $$415$i; //@line 17890
       $$435713$i = SAFE_HEAP_LOAD($$435713$i + 16 + (((SAFE_HEAP_LOAD($$435713$i + 16 | 0, 4, 0) | 0 | 0) == 0 & 1) << 2) | 0, 4, 0) | 0 | 0; //@line 17896
       if (!$$435713$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 17899
        $$4351$lcssa$i = $$$4351$i; //@line 17899
        break;
       } else {
        $$415$i = $$4357$$4$i; //@line 17902
        $$435114$i = $$$4351$i; //@line 17902
        label = 85; //@line 17903
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $249; //@line 17909
     } else {
      if ($$4351$lcssa$i >>> 0 < ((SAFE_HEAP_LOAD(134652 * 4 | 0, 4, 0) | 0 | 0) - $249 | 0) >>> 0) {
       $348 = SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0; //@line 17915
       if ($$4$lcssa$i >>> 0 < $348 >>> 0) {
        _abort(); //@line 17918
       }
       $350 = $$4$lcssa$i + $249 | 0; //@line 17921
       if ($$4$lcssa$i >>> 0 >= $350 >>> 0) {
        _abort(); //@line 17924
       }
       $353 = SAFE_HEAP_LOAD($$4$lcssa$i + 24 | 0, 4, 0) | 0 | 0; //@line 17928
       $355 = SAFE_HEAP_LOAD($$4$lcssa$i + 12 | 0, 4, 0) | 0 | 0; //@line 17930
       do {
        if (($355 | 0) == ($$4$lcssa$i | 0)) {
         $366 = $$4$lcssa$i + 20 | 0; //@line 17934
         $367 = SAFE_HEAP_LOAD($366 | 0, 4, 0) | 0 | 0; //@line 17935
         if (!$367) {
          $369 = $$4$lcssa$i + 16 | 0; //@line 17938
          $370 = SAFE_HEAP_LOAD($369 | 0, 4, 0) | 0 | 0; //@line 17939
          if (!$370) {
           $$3372$i = 0; //@line 17942
           break;
          } else {
           $$1370$i = $370; //@line 17945
           $$1374$i = $369; //@line 17945
          }
         } else {
          $$1370$i = $367; //@line 17948
          $$1374$i = $366; //@line 17948
         }
         while (1) {
          $372 = $$1370$i + 20 | 0; //@line 17951
          $373 = SAFE_HEAP_LOAD($372 | 0, 4, 0) | 0 | 0; //@line 17952
          if ($373 | 0) {
           $$1370$i = $373; //@line 17955
           $$1374$i = $372; //@line 17955
           continue;
          }
          $375 = $$1370$i + 16 | 0; //@line 17958
          $376 = SAFE_HEAP_LOAD($375 | 0, 4, 0) | 0 | 0; //@line 17959
          if (!$376) {
           break;
          } else {
           $$1370$i = $376; //@line 17964
           $$1374$i = $375; //@line 17964
          }
         }
         if ($$1374$i >>> 0 < $348 >>> 0) {
          _abort(); //@line 17969
         } else {
          SAFE_HEAP_STORE($$1374$i | 0, 0 | 0, 4);
          $$3372$i = $$1370$i; //@line 17973
          break;
         }
        } else {
         $358 = SAFE_HEAP_LOAD($$4$lcssa$i + 8 | 0, 4, 0) | 0 | 0; //@line 17978
         if ($358 >>> 0 < $348 >>> 0) {
          _abort(); //@line 17981
         }
         $360 = $358 + 12 | 0; //@line 17984
         if ((SAFE_HEAP_LOAD($360 | 0, 4, 0) | 0 | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 17988
         }
         $363 = $355 + 8 | 0; //@line 17991
         if ((SAFE_HEAP_LOAD($363 | 0, 4, 0) | 0 | 0) == ($$4$lcssa$i | 0)) {
          SAFE_HEAP_STORE($360 | 0, $355 | 0, 4);
          SAFE_HEAP_STORE($363 | 0, $358 | 0, 4);
          $$3372$i = $355; //@line 17997
          break;
         } else {
          _abort(); //@line 18000
         }
        }
       } while (0);
       L164 : do {
        if (!$353) {
         $470 = $250; //@line 18008
        } else {
         $381 = SAFE_HEAP_LOAD($$4$lcssa$i + 28 | 0, 4, 0) | 0 | 0; //@line 18011
         $382 = 538904 + ($381 << 2) | 0; //@line 18012
         do {
          if (($$4$lcssa$i | 0) == (SAFE_HEAP_LOAD($382 | 0, 4, 0) | 0 | 0)) {
           SAFE_HEAP_STORE($382 | 0, $$3372$i | 0, 4);
           if (!$$3372$i) {
            $387 = $250 & ~(1 << $381); //@line 18022
            SAFE_HEAP_STORE(134651 * 4 | 0, $387 | 0, 4);
            $470 = $387; //@line 18024
            break L164;
           }
          } else {
           if ($353 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
            _abort(); //@line 18031
           } else {
            SAFE_HEAP_STORE($353 + 16 + (((SAFE_HEAP_LOAD($353 + 16 | 0, 4, 0) | 0 | 0) != ($$4$lcssa$i | 0) & 1) << 2) | 0, $$3372$i | 0, 4);
            if (!$$3372$i) {
             $470 = $250; //@line 18042
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $394 = SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0; //@line 18050
         if ($$3372$i >>> 0 < $394 >>> 0) {
          _abort(); //@line 18053
         }
         SAFE_HEAP_STORE($$3372$i + 24 | 0, $353 | 0, 4);
         $398 = SAFE_HEAP_LOAD($$4$lcssa$i + 16 | 0, 4, 0) | 0 | 0; //@line 18059
         do {
          if ($398 | 0) {
           if ($398 >>> 0 < $394 >>> 0) {
            _abort(); //@line 18065
           } else {
            SAFE_HEAP_STORE($$3372$i + 16 | 0, $398 | 0, 4);
            SAFE_HEAP_STORE($398 + 24 | 0, $$3372$i | 0, 4);
            break;
           }
          }
         } while (0);
         $404 = SAFE_HEAP_LOAD($$4$lcssa$i + 20 | 0, 4, 0) | 0 | 0; //@line 18077
         if (!$404) {
          $470 = $250; //@line 18080
         } else {
          if ($404 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
           _abort(); //@line 18085
          } else {
           SAFE_HEAP_STORE($$3372$i + 20 | 0, $404 | 0, 4);
           SAFE_HEAP_STORE($404 + 24 | 0, $$3372$i | 0, 4);
           $470 = $250; //@line 18092
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $411 = $$4351$lcssa$i + $249 | 0; //@line 18101
         SAFE_HEAP_STORE($$4$lcssa$i + 4 | 0, $411 | 3 | 0, 4);
         $415 = $$4$lcssa$i + $411 + 4 | 0; //@line 18106
         SAFE_HEAP_STORE($415 | 0, SAFE_HEAP_LOAD($415 | 0, 4, 0) | 0 | 1 | 0, 4);
        } else {
         SAFE_HEAP_STORE($$4$lcssa$i + 4 | 0, $249 | 3 | 0, 4);
         SAFE_HEAP_STORE($350 + 4 | 0, $$4351$lcssa$i | 1 | 0, 4);
         SAFE_HEAP_STORE($350 + $$4351$lcssa$i | 0, $$4351$lcssa$i | 0, 4);
         $423 = $$4351$lcssa$i >>> 3; //@line 18119
         if ($$4351$lcssa$i >>> 0 < 256) {
          $426 = 538640 + ($423 << 1 << 2) | 0; //@line 18123
          $427 = SAFE_HEAP_LOAD(134650 * 4 | 0, 4, 0) | 0 | 0; //@line 18124
          $428 = 1 << $423; //@line 18125
          if (!($427 & $428)) {
           SAFE_HEAP_STORE(134650 * 4 | 0, $427 | $428 | 0, 4);
           $$0368$i = $426; //@line 18132
           $$pre$phi$i211Z2D = $426 + 8 | 0; //@line 18132
          } else {
           $432 = $426 + 8 | 0; //@line 18134
           $433 = SAFE_HEAP_LOAD($432 | 0, 4, 0) | 0 | 0; //@line 18135
           if ($433 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
            _abort(); //@line 18139
           } else {
            $$0368$i = $433; //@line 18142
            $$pre$phi$i211Z2D = $432; //@line 18142
           }
          }
          SAFE_HEAP_STORE($$pre$phi$i211Z2D | 0, $350 | 0, 4);
          SAFE_HEAP_STORE($$0368$i + 12 | 0, $350 | 0, 4);
          SAFE_HEAP_STORE($350 + 8 | 0, $$0368$i | 0, 4);
          SAFE_HEAP_STORE($350 + 12 | 0, $426 | 0, 4);
          break;
         }
         $439 = $$4351$lcssa$i >>> 8; //@line 18154
         if (!$439) {
          $$0361$i = 0; //@line 18157
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 18161
          } else {
           $444 = ($439 + 1048320 | 0) >>> 16 & 8; //@line 18165
           $445 = $439 << $444; //@line 18166
           $448 = ($445 + 520192 | 0) >>> 16 & 4; //@line 18169
           $450 = $445 << $448; //@line 18171
           $453 = ($450 + 245760 | 0) >>> 16 & 2; //@line 18174
           $458 = 14 - ($448 | $444 | $453) + ($450 << $453 >>> 15) | 0; //@line 18179
           $$0361$i = $$4351$lcssa$i >>> ($458 + 7 | 0) & 1 | $458 << 1; //@line 18185
          }
         }
         $464 = 538904 + ($$0361$i << 2) | 0; //@line 18188
         SAFE_HEAP_STORE($350 + 28 | 0, $$0361$i | 0, 4);
         $466 = $350 + 16 | 0; //@line 18191
         SAFE_HEAP_STORE($466 + 4 | 0, 0 | 0, 4);
         SAFE_HEAP_STORE($466 | 0, 0 | 0, 4);
         $468 = 1 << $$0361$i; //@line 18195
         if (!($470 & $468)) {
          SAFE_HEAP_STORE(134651 * 4 | 0, $470 | $468 | 0, 4);
          SAFE_HEAP_STORE($464 | 0, $350 | 0, 4);
          SAFE_HEAP_STORE($350 + 24 | 0, $464 | 0, 4);
          SAFE_HEAP_STORE($350 + 12 | 0, $350 | 0, 4);
          SAFE_HEAP_STORE($350 + 8 | 0, $350 | 0, 4);
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 18216
         $$0345$i = SAFE_HEAP_LOAD($464 | 0, 4, 0) | 0 | 0; //@line 18216
         while (1) {
          if (((SAFE_HEAP_LOAD($$0345$i + 4 | 0, 4, 0) | 0) & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 18223
           break;
          }
          $487 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 18227
          $489 = SAFE_HEAP_LOAD($487 | 0, 4, 0) | 0 | 0; //@line 18229
          if (!$489) {
           label = 136; //@line 18232
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 18235
           $$0345$i = $489; //@line 18235
          }
         }
         if ((label | 0) == 136) {
          if ($487 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
           _abort(); //@line 18242
          } else {
           SAFE_HEAP_STORE($487 | 0, $350 | 0, 4);
           SAFE_HEAP_STORE($350 + 24 | 0, $$0345$i | 0, 4);
           SAFE_HEAP_STORE($350 + 12 | 0, $350 | 0, 4);
           SAFE_HEAP_STORE($350 + 8 | 0, $350 | 0, 4);
           break;
          }
         } else if ((label | 0) == 139) {
          $496 = $$0345$i + 8 | 0; //@line 18256
          $497 = SAFE_HEAP_LOAD($496 | 0, 4, 0) | 0 | 0; //@line 18257
          $498 = SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0; //@line 18258
          if ($497 >>> 0 >= $498 >>> 0 & $$0345$i >>> 0 >= $498 >>> 0) {
           SAFE_HEAP_STORE($497 + 12 | 0, $350 | 0, 4);
           SAFE_HEAP_STORE($496 | 0, $350 | 0, 4);
           SAFE_HEAP_STORE($350 + 8 | 0, $497 | 0, 4);
           SAFE_HEAP_STORE($350 + 12 | 0, $$0345$i | 0, 4);
           SAFE_HEAP_STORE($350 + 24 | 0, 0 | 0, 4);
           break;
          } else {
           _abort(); //@line 18274
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 18281
       STACKTOP = sp; //@line 18282
       return $$0 | 0; //@line 18282
      } else {
       $$0197 = $249; //@line 18284
      }
     }
    }
   }
  }
 } while (0);
 $506 = SAFE_HEAP_LOAD(134652 * 4 | 0, 4, 0) | 0 | 0; //@line 18291
 if ($506 >>> 0 >= $$0197 >>> 0) {
  $508 = $506 - $$0197 | 0; //@line 18294
  $509 = SAFE_HEAP_LOAD(134655 * 4 | 0, 4, 0) | 0 | 0; //@line 18295
  if ($508 >>> 0 > 15) {
   $511 = $509 + $$0197 | 0; //@line 18298
   SAFE_HEAP_STORE(134655 * 4 | 0, $511 | 0, 4);
   SAFE_HEAP_STORE(134652 * 4 | 0, $508 | 0, 4);
   SAFE_HEAP_STORE($511 + 4 | 0, $508 | 1 | 0, 4);
   SAFE_HEAP_STORE($511 + $508 | 0, $508 | 0, 4);
   SAFE_HEAP_STORE($509 + 4 | 0, $$0197 | 3 | 0, 4);
  } else {
   SAFE_HEAP_STORE(134652 * 4 | 0, 0 | 0, 4);
   SAFE_HEAP_STORE(134655 * 4 | 0, 0 | 0, 4);
   SAFE_HEAP_STORE($509 + 4 | 0, $506 | 3 | 0, 4);
   $520 = $509 + $506 + 4 | 0; //@line 18316
   SAFE_HEAP_STORE($520 | 0, SAFE_HEAP_LOAD($520 | 0, 4, 0) | 0 | 1 | 0, 4);
  }
  $$0 = $509 + 8 | 0; //@line 18322
  STACKTOP = sp; //@line 18323
  return $$0 | 0; //@line 18323
 }
 $524 = SAFE_HEAP_LOAD(134653 * 4 | 0, 4, 0) | 0 | 0; //@line 18325
 if ($524 >>> 0 > $$0197 >>> 0) {
  $526 = $524 - $$0197 | 0; //@line 18328
  SAFE_HEAP_STORE(134653 * 4 | 0, $526 | 0, 4);
  $527 = SAFE_HEAP_LOAD(134656 * 4 | 0, 4, 0) | 0 | 0; //@line 18330
  $528 = $527 + $$0197 | 0; //@line 18331
  SAFE_HEAP_STORE(134656 * 4 | 0, $528 | 0, 4);
  SAFE_HEAP_STORE($528 + 4 | 0, $526 | 1 | 0, 4);
  SAFE_HEAP_STORE($527 + 4 | 0, $$0197 | 3 | 0, 4);
  $$0 = $527 + 8 | 0; //@line 18340
  STACKTOP = sp; //@line 18341
  return $$0 | 0; //@line 18341
 }
 if (!(SAFE_HEAP_LOAD(134768 * 4 | 0, 4, 0) | 0)) {
  SAFE_HEAP_STORE(134770 * 4 | 0, 4096 | 0, 4);
  SAFE_HEAP_STORE(134769 * 4 | 0, 4096 | 0, 4);
  SAFE_HEAP_STORE(134771 * 4 | 0, -1 | 0, 4);
  SAFE_HEAP_STORE(134772 * 4 | 0, -1 | 0, 4);
  SAFE_HEAP_STORE(134773 * 4 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE(134761 * 4 | 0, 0 | 0, 4);
  $538 = $1 & -16 ^ 1431655768; //@line 18354
  SAFE_HEAP_STORE($1 | 0, $538 | 0, 4);
  SAFE_HEAP_STORE(134768 * 4 | 0, $538 | 0, 4);
  $542 = 4096; //@line 18357
 } else {
  $542 = SAFE_HEAP_LOAD(134770 * 4 | 0, 4, 0) | 0 | 0; //@line 18360
 }
 $539 = $$0197 + 48 | 0; //@line 18362
 $540 = $$0197 + 47 | 0; //@line 18363
 $541 = $542 + $540 | 0; //@line 18364
 $543 = 0 - $542 | 0; //@line 18365
 $544 = $541 & $543; //@line 18366
 if ($544 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 18369
  STACKTOP = sp; //@line 18370
  return $$0 | 0; //@line 18370
 }
 $546 = SAFE_HEAP_LOAD(134760 * 4 | 0, 4, 0) | 0 | 0; //@line 18372
 if ($546 | 0) {
  $548 = SAFE_HEAP_LOAD(134758 * 4 | 0, 4, 0) | 0 | 0; //@line 18375
  $549 = $548 + $544 | 0; //@line 18376
  if ($549 >>> 0 <= $548 >>> 0 | $549 >>> 0 > $546 >>> 0) {
   $$0 = 0; //@line 18381
   STACKTOP = sp; //@line 18382
   return $$0 | 0; //@line 18382
  }
 }
 L244 : do {
  if (!((SAFE_HEAP_LOAD(134761 * 4 | 0, 4, 0) | 0) & 4)) {
   $555 = SAFE_HEAP_LOAD(134656 * 4 | 0, 4, 0) | 0 | 0; //@line 18390
   L246 : do {
    if (!$555) {
     label = 163; //@line 18394
    } else {
     $$0$i$i = 539048; //@line 18396
     while (1) {
      $557 = SAFE_HEAP_LOAD($$0$i$i | 0, 4, 0) | 0 | 0; //@line 18398
      if ($557 >>> 0 <= $555 >>> 0) {
       $559 = $$0$i$i + 4 | 0; //@line 18401
       if (($557 + (SAFE_HEAP_LOAD($559 | 0, 4, 0) | 0 | 0) | 0) >>> 0 > $555 >>> 0) {
        break;
       }
      }
      $564 = SAFE_HEAP_LOAD($$0$i$i + 8 | 0, 4, 0) | 0 | 0; //@line 18410
      if (!$564) {
       label = 163; //@line 18413
       break L246;
      } else {
       $$0$i$i = $564; //@line 18416
      }
     }
     $589 = $541 - $524 & $543; //@line 18420
     if ($589 >>> 0 < 2147483647) {
      $591 = _sbrk($589 | 0) | 0; //@line 18423
      if (($591 | 0) == ((SAFE_HEAP_LOAD($$0$i$i | 0, 4, 0) | 0 | 0) + (SAFE_HEAP_LOAD($559 | 0, 4, 0) | 0 | 0) | 0)) {
       if (($591 | 0) == (-1 | 0)) {
        $$2234253237$i = $589; //@line 18431
       } else {
        $$723948$i = $589; //@line 18433
        $$749$i = $591; //@line 18433
        label = 180; //@line 18434
        break L244;
       }
      } else {
       $$2247$ph$i = $591; //@line 18438
       $$2253$ph$i = $589; //@line 18438
       label = 171; //@line 18439
      }
     } else {
      $$2234253237$i = 0; //@line 18442
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $566 = _sbrk(0) | 0; //@line 18448
     if (($566 | 0) == (-1 | 0)) {
      $$2234253237$i = 0; //@line 18451
     } else {
      $568 = $566; //@line 18453
      $569 = SAFE_HEAP_LOAD(134769 * 4 | 0, 4, 0) | 0 | 0; //@line 18454
      $570 = $569 + -1 | 0; //@line 18455
      $$$i = (($570 & $568 | 0) == 0 ? 0 : ($570 + $568 & 0 - $569) - $568 | 0) + $544 | 0; //@line 18463
      $578 = SAFE_HEAP_LOAD(134758 * 4 | 0, 4, 0) | 0 | 0; //@line 18464
      $579 = $$$i + $578 | 0; //@line 18465
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $582 = SAFE_HEAP_LOAD(134760 * 4 | 0, 4, 0) | 0 | 0; //@line 18470
       if ($582 | 0) {
        if ($579 >>> 0 <= $578 >>> 0 | $579 >>> 0 > $582 >>> 0) {
         $$2234253237$i = 0; //@line 18477
         break;
        }
       }
       $586 = _sbrk($$$i | 0) | 0; //@line 18481
       if (($586 | 0) == ($566 | 0)) {
        $$723948$i = $$$i; //@line 18484
        $$749$i = $566; //@line 18484
        label = 180; //@line 18485
        break L244;
       } else {
        $$2247$ph$i = $586; //@line 18488
        $$2253$ph$i = $$$i; //@line 18488
        label = 171; //@line 18489
       }
      } else {
       $$2234253237$i = 0; //@line 18492
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $597 = 0 - $$2253$ph$i | 0; //@line 18499
     if (!($539 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234253237$i = 0; //@line 18508
       break;
      } else {
       $$723948$i = $$2253$ph$i; //@line 18511
       $$749$i = $$2247$ph$i; //@line 18511
       label = 180; //@line 18512
       break L244;
      }
     }
     $601 = SAFE_HEAP_LOAD(134770 * 4 | 0, 4, 0) | 0 | 0; //@line 18516
     $605 = $540 - $$2253$ph$i + $601 & 0 - $601; //@line 18520
     if ($605 >>> 0 >= 2147483647) {
      $$723948$i = $$2253$ph$i; //@line 18523
      $$749$i = $$2247$ph$i; //@line 18523
      label = 180; //@line 18524
      break L244;
     }
     if ((_sbrk($605 | 0) | 0) == (-1 | 0)) {
      _sbrk($597 | 0) | 0; //@line 18530
      $$2234253237$i = 0; //@line 18531
      break;
     } else {
      $$723948$i = $605 + $$2253$ph$i | 0; //@line 18535
      $$749$i = $$2247$ph$i; //@line 18535
      label = 180; //@line 18536
      break L244;
     }
    }
   } while (0);
   SAFE_HEAP_STORE(134761 * 4 | 0, SAFE_HEAP_LOAD(134761 * 4 | 0, 4, 0) | 0 | 4 | 0, 4);
   $$4236$i = $$2234253237$i; //@line 18544
   label = 178; //@line 18545
  } else {
   $$4236$i = 0; //@line 18547
   label = 178; //@line 18548
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($544 >>> 0 < 2147483647) {
   $614 = _sbrk($544 | 0) | 0; //@line 18554
   $615 = _sbrk(0) | 0; //@line 18555
   $621 = $615 - $614 | 0; //@line 18563
   $623 = $621 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 18565
   if (!(($614 | 0) == (-1 | 0) | $623 ^ 1 | $614 >>> 0 < $615 >>> 0 & (($614 | 0) != (-1 | 0) & ($615 | 0) != (-1 | 0)) ^ 1)) {
    $$723948$i = $623 ? $621 : $$4236$i; //@line 18573
    $$749$i = $614; //@line 18573
    label = 180; //@line 18574
   }
  }
 }
 if ((label | 0) == 180) {
  $627 = (SAFE_HEAP_LOAD(134758 * 4 | 0, 4, 0) | 0 | 0) + $$723948$i | 0; //@line 18580
  SAFE_HEAP_STORE(134758 * 4 | 0, $627 | 0, 4);
  if ($627 >>> 0 > (SAFE_HEAP_LOAD(134759 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
   SAFE_HEAP_STORE(134759 * 4 | 0, $627 | 0, 4);
  }
  $630 = SAFE_HEAP_LOAD(134656 * 4 | 0, 4, 0) | 0 | 0; //@line 18587
  do {
   if (!$630) {
    $632 = SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0; //@line 18591
    if (($632 | 0) == 0 | $$749$i >>> 0 < $632 >>> 0) {
     SAFE_HEAP_STORE(134654 * 4 | 0, $$749$i | 0, 4);
    }
    SAFE_HEAP_STORE(134762 * 4 | 0, $$749$i | 0, 4);
    SAFE_HEAP_STORE(134763 * 4 | 0, $$723948$i | 0, 4);
    SAFE_HEAP_STORE(134765 * 4 | 0, 0 | 0, 4);
    SAFE_HEAP_STORE(134659 * 4 | 0, SAFE_HEAP_LOAD(134768 * 4 | 0, 4, 0) | 0 | 0, 4);
    SAFE_HEAP_STORE(134658 * 4 | 0, -1 | 0, 4);
    $$01$i$i = 0; //@line 18604
    do {
     $637 = 538640 + ($$01$i$i << 1 << 2) | 0; //@line 18607
     SAFE_HEAP_STORE($637 + 12 | 0, $637 | 0, 4);
     SAFE_HEAP_STORE($637 + 8 | 0, $637 | 0, 4);
     $$01$i$i = $$01$i$i + 1 | 0; //@line 18612
    } while (($$01$i$i | 0) != 32);
    $643 = $$749$i + 8 | 0; //@line 18622
    $648 = ($643 & 7 | 0) == 0 ? 0 : 0 - $643 & 7; //@line 18627
    $649 = $$749$i + $648 | 0; //@line 18628
    $650 = $$723948$i + -40 - $648 | 0; //@line 18629
    SAFE_HEAP_STORE(134656 * 4 | 0, $649 | 0, 4);
    SAFE_HEAP_STORE(134653 * 4 | 0, $650 | 0, 4);
    SAFE_HEAP_STORE($649 + 4 | 0, $650 | 1 | 0, 4);
    SAFE_HEAP_STORE($649 + $650 + 4 | 0, 40 | 0, 4);
    SAFE_HEAP_STORE(134657 * 4 | 0, SAFE_HEAP_LOAD(134772 * 4 | 0, 4, 0) | 0 | 0, 4);
   } else {
    $$024371$i = 539048; //@line 18641
    while (1) {
     $656 = SAFE_HEAP_LOAD($$024371$i | 0, 4, 0) | 0 | 0; //@line 18643
     $657 = $$024371$i + 4 | 0; //@line 18644
     $658 = SAFE_HEAP_LOAD($657 | 0, 4, 0) | 0 | 0; //@line 18645
     if (($$749$i | 0) == ($656 + $658 | 0)) {
      label = 190; //@line 18649
      break;
     }
     $662 = SAFE_HEAP_LOAD($$024371$i + 8 | 0, 4, 0) | 0 | 0; //@line 18653
     if (!$662) {
      break;
     } else {
      $$024371$i = $662; //@line 18658
     }
    }
    if ((label | 0) == 190) {
     if (!((SAFE_HEAP_LOAD($$024371$i + 12 | 0, 4, 0) | 0) & 8)) {
      if ($630 >>> 0 < $$749$i >>> 0 & $630 >>> 0 >= $656 >>> 0) {
       SAFE_HEAP_STORE($657 | 0, $658 + $$723948$i | 0, 4);
       $673 = $630 + 8 | 0; //@line 18675
       $678 = ($673 & 7 | 0) == 0 ? 0 : 0 - $673 & 7; //@line 18680
       $679 = $630 + $678 | 0; //@line 18681
       $681 = (SAFE_HEAP_LOAD(134653 * 4 | 0, 4, 0) | 0 | 0) + ($$723948$i - $678) | 0; //@line 18683
       SAFE_HEAP_STORE(134656 * 4 | 0, $679 | 0, 4);
       SAFE_HEAP_STORE(134653 * 4 | 0, $681 | 0, 4);
       SAFE_HEAP_STORE($679 + 4 | 0, $681 | 1 | 0, 4);
       SAFE_HEAP_STORE($679 + $681 + 4 | 0, 40 | 0, 4);
       SAFE_HEAP_STORE(134657 * 4 | 0, SAFE_HEAP_LOAD(134772 * 4 | 0, 4, 0) | 0 | 0, 4);
       break;
      }
     }
    }
    $687 = SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0; //@line 18698
    if ($$749$i >>> 0 < $687 >>> 0) {
     SAFE_HEAP_STORE(134654 * 4 | 0, $$749$i | 0, 4);
     $752 = $$749$i; //@line 18702
    } else {
     $752 = $687; //@line 18704
    }
    $689 = $$749$i + $$723948$i | 0; //@line 18706
    $$124470$i = 539048; //@line 18707
    while (1) {
     if ((SAFE_HEAP_LOAD($$124470$i | 0, 4, 0) | 0 | 0) == ($689 | 0)) {
      label = 198; //@line 18712
      break;
     }
     $693 = SAFE_HEAP_LOAD($$124470$i + 8 | 0, 4, 0) | 0 | 0; //@line 18716
     if (!$693) {
      break;
     } else {
      $$124470$i = $693; //@line 18721
     }
    }
    if ((label | 0) == 198) {
     if (!((SAFE_HEAP_LOAD($$124470$i + 12 | 0, 4, 0) | 0) & 8)) {
      SAFE_HEAP_STORE($$124470$i | 0, $$749$i | 0, 4);
      $699 = $$124470$i + 4 | 0; //@line 18731
      SAFE_HEAP_STORE($699 | 0, (SAFE_HEAP_LOAD($699 | 0, 4, 0) | 0 | 0) + $$723948$i | 0, 4);
      $703 = $$749$i + 8 | 0; //@line 18736
      $709 = $$749$i + (($703 & 7 | 0) == 0 ? 0 : 0 - $703 & 7) | 0; //@line 18742
      $711 = $689 + 8 | 0; //@line 18744
      $717 = $689 + (($711 & 7 | 0) == 0 ? 0 : 0 - $711 & 7) | 0; //@line 18750
      $721 = $709 + $$0197 | 0; //@line 18754
      $722 = $717 - $709 - $$0197 | 0; //@line 18755
      SAFE_HEAP_STORE($709 + 4 | 0, $$0197 | 3 | 0, 4);
      do {
       if (($717 | 0) == ($630 | 0)) {
        $727 = (SAFE_HEAP_LOAD(134653 * 4 | 0, 4, 0) | 0 | 0) + $722 | 0; //@line 18763
        SAFE_HEAP_STORE(134653 * 4 | 0, $727 | 0, 4);
        SAFE_HEAP_STORE(134656 * 4 | 0, $721 | 0, 4);
        SAFE_HEAP_STORE($721 + 4 | 0, $727 | 1 | 0, 4);
       } else {
        if (($717 | 0) == (SAFE_HEAP_LOAD(134655 * 4 | 0, 4, 0) | 0 | 0)) {
         $733 = (SAFE_HEAP_LOAD(134652 * 4 | 0, 4, 0) | 0 | 0) + $722 | 0; //@line 18774
         SAFE_HEAP_STORE(134652 * 4 | 0, $733 | 0, 4);
         SAFE_HEAP_STORE(134655 * 4 | 0, $721 | 0, 4);
         SAFE_HEAP_STORE($721 + 4 | 0, $733 | 1 | 0, 4);
         SAFE_HEAP_STORE($721 + $733 | 0, $733 | 0, 4);
         break;
        }
        $738 = SAFE_HEAP_LOAD($717 + 4 | 0, 4, 0) | 0 | 0; //@line 18785
        if (($738 & 3 | 0) == 1) {
         $741 = $738 & -8; //@line 18789
         $742 = $738 >>> 3; //@line 18790
         L314 : do {
          if ($738 >>> 0 < 256) {
           $745 = SAFE_HEAP_LOAD($717 + 8 | 0, 4, 0) | 0 | 0; //@line 18795
           $747 = SAFE_HEAP_LOAD($717 + 12 | 0, 4, 0) | 0 | 0; //@line 18797
           $749 = 538640 + ($742 << 1 << 2) | 0; //@line 18799
           do {
            if (($745 | 0) != ($749 | 0)) {
             if ($745 >>> 0 < $752 >>> 0) {
              _abort(); //@line 18805
             }
             if ((SAFE_HEAP_LOAD($745 + 12 | 0, 4, 0) | 0 | 0) == ($717 | 0)) {
              break;
             }
             _abort(); //@line 18814
            }
           } while (0);
           if (($747 | 0) == ($745 | 0)) {
            SAFE_HEAP_STORE(134650 * 4 | 0, (SAFE_HEAP_LOAD(134650 * 4 | 0, 4, 0) | 0) & ~(1 << $742) | 0, 4);
            break;
           }
           do {
            if (($747 | 0) == ($749 | 0)) {
             $$pre$phi11$i$iZ2D = $747 + 8 | 0; //@line 18831
            } else {
             if ($747 >>> 0 < $752 >>> 0) {
              _abort(); //@line 18835
             }
             $763 = $747 + 8 | 0; //@line 18838
             if ((SAFE_HEAP_LOAD($763 | 0, 4, 0) | 0 | 0) == ($717 | 0)) {
              $$pre$phi11$i$iZ2D = $763; //@line 18842
              break;
             }
             _abort(); //@line 18845
            }
           } while (0);
           SAFE_HEAP_STORE($745 + 12 | 0, $747 | 0, 4);
           SAFE_HEAP_STORE($$pre$phi11$i$iZ2D | 0, $745 | 0, 4);
          } else {
           $768 = SAFE_HEAP_LOAD($717 + 24 | 0, 4, 0) | 0 | 0; //@line 18854
           $770 = SAFE_HEAP_LOAD($717 + 12 | 0, 4, 0) | 0 | 0; //@line 18856
           do {
            if (($770 | 0) == ($717 | 0)) {
             $781 = $717 + 16 | 0; //@line 18860
             $782 = $781 + 4 | 0; //@line 18861
             $783 = SAFE_HEAP_LOAD($782 | 0, 4, 0) | 0 | 0; //@line 18862
             if (!$783) {
              $785 = SAFE_HEAP_LOAD($781 | 0, 4, 0) | 0 | 0; //@line 18865
              if (!$785) {
               $$3$i$i = 0; //@line 18868
               break;
              } else {
               $$1291$i$i = $785; //@line 18871
               $$1293$i$i = $781; //@line 18871
              }
             } else {
              $$1291$i$i = $783; //@line 18874
              $$1293$i$i = $782; //@line 18874
             }
             while (1) {
              $787 = $$1291$i$i + 20 | 0; //@line 18877
              $788 = SAFE_HEAP_LOAD($787 | 0, 4, 0) | 0 | 0; //@line 18878
              if ($788 | 0) {
               $$1291$i$i = $788; //@line 18881
               $$1293$i$i = $787; //@line 18881
               continue;
              }
              $790 = $$1291$i$i + 16 | 0; //@line 18884
              $791 = SAFE_HEAP_LOAD($790 | 0, 4, 0) | 0 | 0; //@line 18885
              if (!$791) {
               break;
              } else {
               $$1291$i$i = $791; //@line 18890
               $$1293$i$i = $790; //@line 18890
              }
             }
             if ($$1293$i$i >>> 0 < $752 >>> 0) {
              _abort(); //@line 18895
             } else {
              SAFE_HEAP_STORE($$1293$i$i | 0, 0 | 0, 4);
              $$3$i$i = $$1291$i$i; //@line 18899
              break;
             }
            } else {
             $773 = SAFE_HEAP_LOAD($717 + 8 | 0, 4, 0) | 0 | 0; //@line 18904
             if ($773 >>> 0 < $752 >>> 0) {
              _abort(); //@line 18907
             }
             $775 = $773 + 12 | 0; //@line 18910
             if ((SAFE_HEAP_LOAD($775 | 0, 4, 0) | 0 | 0) != ($717 | 0)) {
              _abort(); //@line 18914
             }
             $778 = $770 + 8 | 0; //@line 18917
             if ((SAFE_HEAP_LOAD($778 | 0, 4, 0) | 0 | 0) == ($717 | 0)) {
              SAFE_HEAP_STORE($775 | 0, $770 | 0, 4);
              SAFE_HEAP_STORE($778 | 0, $773 | 0, 4);
              $$3$i$i = $770; //@line 18923
              break;
             } else {
              _abort(); //@line 18926
             }
            }
           } while (0);
           if (!$768) {
            break;
           }
           $796 = SAFE_HEAP_LOAD($717 + 28 | 0, 4, 0) | 0 | 0; //@line 18936
           $797 = 538904 + ($796 << 2) | 0; //@line 18937
           do {
            if (($717 | 0) == (SAFE_HEAP_LOAD($797 | 0, 4, 0) | 0 | 0)) {
             SAFE_HEAP_STORE($797 | 0, $$3$i$i | 0, 4);
             if ($$3$i$i | 0) {
              break;
             }
             SAFE_HEAP_STORE(134651 * 4 | 0, (SAFE_HEAP_LOAD(134651 * 4 | 0, 4, 0) | 0) & ~(1 << $796) | 0, 4);
             break L314;
            } else {
             if ($768 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
              _abort(); //@line 18957
             } else {
              SAFE_HEAP_STORE($768 + 16 + (((SAFE_HEAP_LOAD($768 + 16 | 0, 4, 0) | 0 | 0) != ($717 | 0) & 1) << 2) | 0, $$3$i$i | 0, 4);
              if (!$$3$i$i) {
               break L314;
              } else {
               break;
              }
             }
            }
           } while (0);
           $810 = SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0; //@line 18975
           if ($$3$i$i >>> 0 < $810 >>> 0) {
            _abort(); //@line 18978
           }
           SAFE_HEAP_STORE($$3$i$i + 24 | 0, $768 | 0, 4);
           $813 = $717 + 16 | 0; //@line 18983
           $814 = SAFE_HEAP_LOAD($813 | 0, 4, 0) | 0 | 0; //@line 18984
           do {
            if ($814 | 0) {
             if ($814 >>> 0 < $810 >>> 0) {
              _abort(); //@line 18990
             } else {
              SAFE_HEAP_STORE($$3$i$i + 16 | 0, $814 | 0, 4);
              SAFE_HEAP_STORE($814 + 24 | 0, $$3$i$i | 0, 4);
              break;
             }
            }
           } while (0);
           $820 = SAFE_HEAP_LOAD($813 + 4 | 0, 4, 0) | 0 | 0; //@line 19002
           if (!$820) {
            break;
           }
           if ($820 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
            _abort(); //@line 19010
           } else {
            SAFE_HEAP_STORE($$3$i$i + 20 | 0, $820 | 0, 4);
            SAFE_HEAP_STORE($820 + 24 | 0, $$3$i$i | 0, 4);
            break;
           }
          }
         } while (0);
         $$0$i18$i = $717 + $741 | 0; //@line 19023
         $$0287$i$i = $741 + $722 | 0; //@line 19023
        } else {
         $$0$i18$i = $717; //@line 19025
         $$0287$i$i = $722; //@line 19025
        }
        $828 = $$0$i18$i + 4 | 0; //@line 19027
        SAFE_HEAP_STORE($828 | 0, (SAFE_HEAP_LOAD($828 | 0, 4, 0) | 0) & -2 | 0, 4);
        SAFE_HEAP_STORE($721 + 4 | 0, $$0287$i$i | 1 | 0, 4);
        SAFE_HEAP_STORE($721 + $$0287$i$i | 0, $$0287$i$i | 0, 4);
        $834 = $$0287$i$i >>> 3; //@line 19036
        if ($$0287$i$i >>> 0 < 256) {
         $837 = 538640 + ($834 << 1 << 2) | 0; //@line 19040
         $838 = SAFE_HEAP_LOAD(134650 * 4 | 0, 4, 0) | 0 | 0; //@line 19041
         $839 = 1 << $834; //@line 19042
         do {
          if (!($838 & $839)) {
           SAFE_HEAP_STORE(134650 * 4 | 0, $838 | $839 | 0, 4);
           $$0295$i$i = $837; //@line 19050
           $$pre$phi$i20$iZ2D = $837 + 8 | 0; //@line 19050
          } else {
           $843 = $837 + 8 | 0; //@line 19052
           $844 = SAFE_HEAP_LOAD($843 | 0, 4, 0) | 0 | 0; //@line 19053
           if ($844 >>> 0 >= (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
            $$0295$i$i = $844; //@line 19057
            $$pre$phi$i20$iZ2D = $843; //@line 19057
            break;
           }
           _abort(); //@line 19060
          }
         } while (0);
         SAFE_HEAP_STORE($$pre$phi$i20$iZ2D | 0, $721 | 0, 4);
         SAFE_HEAP_STORE($$0295$i$i + 12 | 0, $721 | 0, 4);
         SAFE_HEAP_STORE($721 + 8 | 0, $$0295$i$i | 0, 4);
         SAFE_HEAP_STORE($721 + 12 | 0, $837 | 0, 4);
         break;
        }
        $850 = $$0287$i$i >>> 8; //@line 19073
        do {
         if (!$850) {
          $$0296$i$i = 0; //@line 19077
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 19081
           break;
          }
          $855 = ($850 + 1048320 | 0) >>> 16 & 8; //@line 19086
          $856 = $850 << $855; //@line 19087
          $859 = ($856 + 520192 | 0) >>> 16 & 4; //@line 19090
          $861 = $856 << $859; //@line 19092
          $864 = ($861 + 245760 | 0) >>> 16 & 2; //@line 19095
          $869 = 14 - ($859 | $855 | $864) + ($861 << $864 >>> 15) | 0; //@line 19100
          $$0296$i$i = $$0287$i$i >>> ($869 + 7 | 0) & 1 | $869 << 1; //@line 19106
         }
        } while (0);
        $875 = 538904 + ($$0296$i$i << 2) | 0; //@line 19109
        SAFE_HEAP_STORE($721 + 28 | 0, $$0296$i$i | 0, 4);
        $877 = $721 + 16 | 0; //@line 19112
        SAFE_HEAP_STORE($877 + 4 | 0, 0 | 0, 4);
        SAFE_HEAP_STORE($877 | 0, 0 | 0, 4);
        $879 = SAFE_HEAP_LOAD(134651 * 4 | 0, 4, 0) | 0 | 0; //@line 19116
        $880 = 1 << $$0296$i$i; //@line 19117
        if (!($879 & $880)) {
         SAFE_HEAP_STORE(134651 * 4 | 0, $879 | $880 | 0, 4);
         SAFE_HEAP_STORE($875 | 0, $721 | 0, 4);
         SAFE_HEAP_STORE($721 + 24 | 0, $875 | 0, 4);
         SAFE_HEAP_STORE($721 + 12 | 0, $721 | 0, 4);
         SAFE_HEAP_STORE($721 + 8 | 0, $721 | 0, 4);
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 19138
        $$0289$i$i = SAFE_HEAP_LOAD($875 | 0, 4, 0) | 0 | 0; //@line 19138
        while (1) {
         if (((SAFE_HEAP_LOAD($$0289$i$i + 4 | 0, 4, 0) | 0) & -8 | 0) == ($$0287$i$i | 0)) {
          label = 265; //@line 19145
          break;
         }
         $898 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 19149
         $900 = SAFE_HEAP_LOAD($898 | 0, 4, 0) | 0 | 0; //@line 19151
         if (!$900) {
          label = 262; //@line 19154
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 19157
          $$0289$i$i = $900; //@line 19157
         }
        }
        if ((label | 0) == 262) {
         if ($898 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
          _abort(); //@line 19164
         } else {
          SAFE_HEAP_STORE($898 | 0, $721 | 0, 4);
          SAFE_HEAP_STORE($721 + 24 | 0, $$0289$i$i | 0, 4);
          SAFE_HEAP_STORE($721 + 12 | 0, $721 | 0, 4);
          SAFE_HEAP_STORE($721 + 8 | 0, $721 | 0, 4);
          break;
         }
        } else if ((label | 0) == 265) {
         $907 = $$0289$i$i + 8 | 0; //@line 19178
         $908 = SAFE_HEAP_LOAD($907 | 0, 4, 0) | 0 | 0; //@line 19179
         $909 = SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0; //@line 19180
         if ($908 >>> 0 >= $909 >>> 0 & $$0289$i$i >>> 0 >= $909 >>> 0) {
          SAFE_HEAP_STORE($908 + 12 | 0, $721 | 0, 4);
          SAFE_HEAP_STORE($907 | 0, $721 | 0, 4);
          SAFE_HEAP_STORE($721 + 8 | 0, $908 | 0, 4);
          SAFE_HEAP_STORE($721 + 12 | 0, $$0289$i$i | 0, 4);
          SAFE_HEAP_STORE($721 + 24 | 0, 0 | 0, 4);
          break;
         } else {
          _abort(); //@line 19196
         }
        }
       }
      } while (0);
      $$0 = $709 + 8 | 0; //@line 19203
      STACKTOP = sp; //@line 19204
      return $$0 | 0; //@line 19204
     }
    }
    $$0$i$i$i = 539048; //@line 19207
    while (1) {
     $916 = SAFE_HEAP_LOAD($$0$i$i$i | 0, 4, 0) | 0 | 0; //@line 19209
     if ($916 >>> 0 <= $630 >>> 0) {
      $920 = $916 + (SAFE_HEAP_LOAD($$0$i$i$i + 4 | 0, 4, 0) | 0 | 0) | 0; //@line 19214
      if ($920 >>> 0 > $630 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = SAFE_HEAP_LOAD($$0$i$i$i + 8 | 0, 4, 0) | 0 | 0; //@line 19222
    }
    $924 = $920 + -47 | 0; //@line 19224
    $926 = $924 + 8 | 0; //@line 19226
    $932 = $924 + (($926 & 7 | 0) == 0 ? 0 : 0 - $926 & 7) | 0; //@line 19232
    $933 = $630 + 16 | 0; //@line 19233
    $935 = $932 >>> 0 < $933 >>> 0 ? $630 : $932; //@line 19235
    $936 = $935 + 8 | 0; //@line 19236
    $937 = $935 + 24 | 0; //@line 19237
    $940 = $$749$i + 8 | 0; //@line 19240
    $945 = ($940 & 7 | 0) == 0 ? 0 : 0 - $940 & 7; //@line 19245
    $946 = $$749$i + $945 | 0; //@line 19246
    $947 = $$723948$i + -40 - $945 | 0; //@line 19247
    SAFE_HEAP_STORE(134656 * 4 | 0, $946 | 0, 4);
    SAFE_HEAP_STORE(134653 * 4 | 0, $947 | 0, 4);
    SAFE_HEAP_STORE($946 + 4 | 0, $947 | 1 | 0, 4);
    SAFE_HEAP_STORE($946 + $947 + 4 | 0, 40 | 0, 4);
    SAFE_HEAP_STORE(134657 * 4 | 0, SAFE_HEAP_LOAD(134772 * 4 | 0, 4, 0) | 0 | 0, 4);
    $953 = $935 + 4 | 0; //@line 19258
    SAFE_HEAP_STORE($953 | 0, 27 | 0, 4);
    SAFE_HEAP_STORE($936 | 0, SAFE_HEAP_LOAD(134762 * 4 | 0, 4, 0) | 0 | 0, 4);
    SAFE_HEAP_STORE($936 + 4 | 0, SAFE_HEAP_LOAD(134763 * 4 | 0, 4, 0) | 0 | 0, 4);
    SAFE_HEAP_STORE($936 + 8 | 0, SAFE_HEAP_LOAD(134764 * 4 | 0, 4, 0) | 0 | 0, 4);
    SAFE_HEAP_STORE($936 + 12 | 0, SAFE_HEAP_LOAD(134765 * 4 | 0, 4, 0) | 0 | 0, 4);
    SAFE_HEAP_STORE(134762 * 4 | 0, $$749$i | 0, 4);
    SAFE_HEAP_STORE(134763 * 4 | 0, $$723948$i | 0, 4);
    SAFE_HEAP_STORE(134765 * 4 | 0, 0 | 0, 4);
    SAFE_HEAP_STORE(134764 * 4 | 0, $936 | 0, 4);
    $955 = $937; //@line 19265
    do {
     $955$looptemp = $955;
     $955 = $955 + 4 | 0; //@line 19267
     SAFE_HEAP_STORE($955 | 0, 7 | 0, 4);
    } while (($955$looptemp + 8 | 0) >>> 0 < $920 >>> 0);
    if (($935 | 0) != ($630 | 0)) {
     $961 = $935 - $630 | 0; //@line 19281
     SAFE_HEAP_STORE($953 | 0, (SAFE_HEAP_LOAD($953 | 0, 4, 0) | 0) & -2 | 0, 4);
     SAFE_HEAP_STORE($630 + 4 | 0, $961 | 1 | 0, 4);
     SAFE_HEAP_STORE($935 | 0, $961 | 0, 4);
     $966 = $961 >>> 3; //@line 19289
     if ($961 >>> 0 < 256) {
      $969 = 538640 + ($966 << 1 << 2) | 0; //@line 19293
      $970 = SAFE_HEAP_LOAD(134650 * 4 | 0, 4, 0) | 0 | 0; //@line 19294
      $971 = 1 << $966; //@line 19295
      if (!($970 & $971)) {
       SAFE_HEAP_STORE(134650 * 4 | 0, $970 | $971 | 0, 4);
       $$0211$i$i = $969; //@line 19302
       $$pre$phi$i$iZ2D = $969 + 8 | 0; //@line 19302
      } else {
       $975 = $969 + 8 | 0; //@line 19304
       $976 = SAFE_HEAP_LOAD($975 | 0, 4, 0) | 0 | 0; //@line 19305
       if ($976 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
        _abort(); //@line 19309
       } else {
        $$0211$i$i = $976; //@line 19312
        $$pre$phi$i$iZ2D = $975; //@line 19312
       }
      }
      SAFE_HEAP_STORE($$pre$phi$i$iZ2D | 0, $630 | 0, 4);
      SAFE_HEAP_STORE($$0211$i$i + 12 | 0, $630 | 0, 4);
      SAFE_HEAP_STORE($630 + 8 | 0, $$0211$i$i | 0, 4);
      SAFE_HEAP_STORE($630 + 12 | 0, $969 | 0, 4);
      break;
     }
     $982 = $961 >>> 8; //@line 19324
     if (!$982) {
      $$0212$i$i = 0; //@line 19327
     } else {
      if ($961 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 19331
      } else {
       $987 = ($982 + 1048320 | 0) >>> 16 & 8; //@line 19335
       $988 = $982 << $987; //@line 19336
       $991 = ($988 + 520192 | 0) >>> 16 & 4; //@line 19339
       $993 = $988 << $991; //@line 19341
       $996 = ($993 + 245760 | 0) >>> 16 & 2; //@line 19344
       $1001 = 14 - ($991 | $987 | $996) + ($993 << $996 >>> 15) | 0; //@line 19349
       $$0212$i$i = $961 >>> ($1001 + 7 | 0) & 1 | $1001 << 1; //@line 19355
      }
     }
     $1007 = 538904 + ($$0212$i$i << 2) | 0; //@line 19358
     SAFE_HEAP_STORE($630 + 28 | 0, $$0212$i$i | 0, 4);
     SAFE_HEAP_STORE($630 + 20 | 0, 0 | 0, 4);
     SAFE_HEAP_STORE($933 | 0, 0 | 0, 4);
     $1010 = SAFE_HEAP_LOAD(134651 * 4 | 0, 4, 0) | 0 | 0; //@line 19364
     $1011 = 1 << $$0212$i$i; //@line 19365
     if (!($1010 & $1011)) {
      SAFE_HEAP_STORE(134651 * 4 | 0, $1010 | $1011 | 0, 4);
      SAFE_HEAP_STORE($1007 | 0, $630 | 0, 4);
      SAFE_HEAP_STORE($630 + 24 | 0, $1007 | 0, 4);
      SAFE_HEAP_STORE($630 + 12 | 0, $630 | 0, 4);
      SAFE_HEAP_STORE($630 + 8 | 0, $630 | 0, 4);
      break;
     }
     $$0206$i$i = $961 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 19386
     $$0207$i$i = SAFE_HEAP_LOAD($1007 | 0, 4, 0) | 0 | 0; //@line 19386
     while (1) {
      if (((SAFE_HEAP_LOAD($$0207$i$i + 4 | 0, 4, 0) | 0) & -8 | 0) == ($961 | 0)) {
       label = 292; //@line 19393
       break;
      }
      $1029 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 19397
      $1031 = SAFE_HEAP_LOAD($1029 | 0, 4, 0) | 0 | 0; //@line 19399
      if (!$1031) {
       label = 289; //@line 19402
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 19405
       $$0207$i$i = $1031; //@line 19405
      }
     }
     if ((label | 0) == 289) {
      if ($1029 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
       _abort(); //@line 19412
      } else {
       SAFE_HEAP_STORE($1029 | 0, $630 | 0, 4);
       SAFE_HEAP_STORE($630 + 24 | 0, $$0207$i$i | 0, 4);
       SAFE_HEAP_STORE($630 + 12 | 0, $630 | 0, 4);
       SAFE_HEAP_STORE($630 + 8 | 0, $630 | 0, 4);
       break;
      }
     } else if ((label | 0) == 292) {
      $1038 = $$0207$i$i + 8 | 0; //@line 19426
      $1039 = SAFE_HEAP_LOAD($1038 | 0, 4, 0) | 0 | 0; //@line 19427
      $1040 = SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0; //@line 19428
      if ($1039 >>> 0 >= $1040 >>> 0 & $$0207$i$i >>> 0 >= $1040 >>> 0) {
       SAFE_HEAP_STORE($1039 + 12 | 0, $630 | 0, 4);
       SAFE_HEAP_STORE($1038 | 0, $630 | 0, 4);
       SAFE_HEAP_STORE($630 + 8 | 0, $1039 | 0, 4);
       SAFE_HEAP_STORE($630 + 12 | 0, $$0207$i$i | 0, 4);
       SAFE_HEAP_STORE($630 + 24 | 0, 0 | 0, 4);
       break;
      } else {
       _abort(); //@line 19444
      }
     }
    }
   }
  } while (0);
  $1048 = SAFE_HEAP_LOAD(134653 * 4 | 0, 4, 0) | 0 | 0; //@line 19451
  if ($1048 >>> 0 > $$0197 >>> 0) {
   $1050 = $1048 - $$0197 | 0; //@line 19454
   SAFE_HEAP_STORE(134653 * 4 | 0, $1050 | 0, 4);
   $1051 = SAFE_HEAP_LOAD(134656 * 4 | 0, 4, 0) | 0 | 0; //@line 19456
   $1052 = $1051 + $$0197 | 0; //@line 19457
   SAFE_HEAP_STORE(134656 * 4 | 0, $1052 | 0, 4);
   SAFE_HEAP_STORE($1052 + 4 | 0, $1050 | 1 | 0, 4);
   SAFE_HEAP_STORE($1051 + 4 | 0, $$0197 | 3 | 0, 4);
   $$0 = $1051 + 8 | 0; //@line 19466
   STACKTOP = sp; //@line 19467
   return $$0 | 0; //@line 19467
  }
 }
 SAFE_HEAP_STORE(___errno_location() | 0 | 0, 12 | 0, 4);
 $$0 = 0; //@line 19472
 STACKTOP = sp; //@line 19473
 return $$0 | 0; //@line 19473
}
function _ecma_utf8_string_to_number($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0649 = 0, $$0667930 = 0.0, $$0670929 = 0, $$0672$off0 = 0, $$0682$lcssa$ph = 0, $$0682913 = 0, $$0691$lcssa$ph = 0, $$0691912 = 0, $$0703$off0$lcssa$ph = 0, $$0703$off0911 = 0, $$0709887 = 0, $$0712 = 0, $$0715883 = 0, $$10701876 = 0, $$11660755 = 0, $$11702842 = 0, $$12 = 0.0, $$13 = 0.0, $$1650$lcssa$ph = 0, $$1650915 = 0, $$1683 = 0, $$1692 = 0, $$1716871 = 0, $$2717$lcssa = 0, $$2717848 = 0, $$3706$off0894 = 0, $$3718$lcssa = 0, $$3718860 = 0, $$4653898 = 0, $$4686896 = 0, $$4695895 = 0, $$4719$lcssa = 0, $$4719837 = 0, $$5696 = 0, $$5708$off0 = 0, $$5720$lcssa = 0, $$5720825 = 0, $$6655 = 0, $$6688 = 0, $$6721$lcssa = 0, $$6721814 = 0, $$7656 = 0, $$7698 = 0, $$7722803 = 0, $$8657888 = 0, $$8690 = 0, $$8723792 = 0, $$9700 = 0, $$9724$lcssa = 0, $$9724784 = 0, $$pr$pre = 0, $$sink = 0, $$sroa$162$0886$off0 = 0, $$sroa$162$1875$off0 = 0, $$sroa$162$3864$off0 = 0, $$sroa$162$5829$off0 = 0, $$sroa$162$7807$off0 = 0, $$sroa$162$9788$off0 = 0, $$sroa$44$9786$off0 = 0, $10 = 0, $103 = 0, $105 = 0, $112 = 0, $113 = 0, $12 = 0, $121 = 0, $122 = 0, $123 = 0, $126 = 0, $128 = 0, $13 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $139 = 0, $140 = 0, $141 = 0, $151 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $173 = 0, $176 = 0, $177 = 0, $18 = 0, $180 = 0, $186 = 0, $187 = 0, $19 = 0, $190 = 0, $191 = 0, $194 = 0, $195 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $206 = 0, $208 = 0, $209 = 0, $211 = 0, $212 = 0, $219 = 0, $22 = 0, $221 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $279 = 0, $28 = 0, $281 = 0, $286 = 0, $288 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $350 = 0, $352 = 0, $355 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0.0, $361 = 0, $363 = 0, $365 = 0, $367 = 0, $368 = 0, $370 = 0, $372 = 0, $374 = 0, $376 = 0, $378 = 0, $380 = 0, $381 = 0, $383 = 0, $385 = 0, $387 = 0, $389 = 0, $391 = 0, $393 = 0, $394 = 0, $395 = 0, $397 = 0, $399 = 0, $4 = 0, $401 = 0, $403 = 0, $405 = 0, $407 = 0, $408 = 0, $411 = 0, $413 = 0, $418 = 0, $419 = 0, $420 = 0, $421 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $440 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $459 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $471 = 0, $473 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $487 = 0, $489 = 0, $490 = 0, $492 = 0, $493 = 0, $494 = 0, $498 = 0, $499 = 0, $5 = 0, $507 = 0, $508 = 0, $508$phi = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $513 = 0, $514 = 0, $516 = 0, $517 = 0, $518 = 0, $522 = 0, $528 = 0, $529 = 0, $531 = 0, $532 = 0, $533 = 0, $535 = 0, $539 = 0, $54 = 0, $540 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $66 = 0, $7 = 0, $71 = 0, $72 = 0, $74 = 0, $77 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $91 = 0, $95 = 0, $extract$t = 0, label = 0, sp = 0, $$10701876$looptemp = 0;
 sp = STACKTOP; //@line 1541
 STACKTOP = STACKTOP + 16 | 0; //@line 1542
 $2 = sp; //@line 1543
 if (!$1) {
  $$13 = 0.0; //@line 1546
 } else {
  SAFE_HEAP_STORE($2 | 0, $0 | 0, 4);
  $4 = $0 + $1 | 0; //@line 1549
  $5 = ($1 | 0) > 0; //@line 1550
  L3 : do {
   if ($5) {
    $6 = $0; //@line 1553
    while (1) {
     $7 = _lit_utf8_peek_next($6) | 0; //@line 1555
     if (!(_lit_char_is_white_space($7) | 0)) {
      if (!(_lit_char_is_line_terminator($7) | 0)) {
       label = 6; //@line 1560
       break;
      }
     }
     _lit_utf8_incr($2); //@line 1564
     $10 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 1565
     if ($10 >>> 0 < $4 >>> 0) {
      $6 = $10; //@line 1568
     } else {
      $543 = $10; //@line 1570
      break;
     }
    }
    if ((label | 0) == 6) {
     $543 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 1576
    }
    SAFE_HEAP_STORE($2 | 0, $4 | 0, 4);
    if ($5) {
     $12 = $4; //@line 1580
     while (1) {
      $13 = _lit_utf8_peek_prev($12) | 0; //@line 1582
      if (!(_lit_char_is_white_space($13) | 0)) {
       if (!(_lit_char_is_line_terminator($13) | 0)) {
        break;
       }
      }
      _lit_utf8_decr($2); //@line 1590
      $16 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 1591
      if ($16 >>> 0 > $0 >>> 0) {
       $12 = $16; //@line 1594
      } else {
       $19 = $16; //@line 1596
       $20 = $543; //@line 1596
       break L3;
      }
     }
     $19 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 1601
     $20 = $543; //@line 1601
    } else {
     $19 = $4; //@line 1603
     $20 = $543; //@line 1603
    }
   } else {
    SAFE_HEAP_STORE($2 | 0, $4 | 0, 4);
    $19 = $4; //@line 1607
    $20 = $0; //@line 1607
   }
  } while (0);
  $18 = $19 + -1 | 0; //@line 1610
  L20 : do {
   if ($20 >>> 0 > $18 >>> 0) {
    $$12 = 0.0; //@line 1614
   } else {
    $22 = $20 + 2 | 0; //@line 1616
    $$pr$pre = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0; //@line 1618
    L22 : do {
     if ($18 >>> 0 >= $22 >>> 0 & $$pr$pre << 24 >> 24 == 48) {
      switch (SAFE_HEAP_LOAD($20 + 1 >> 0 | 0, 1, 0) | 0 | 0) {
      case 88:
      case 120:
       {
        $$0667930 = 0.0; //@line 1627
        $$0670929 = $22; //@line 1627
        break;
       }
      default:
       {
        $$0649 = $20; //@line 1631
        $$0672$off0 = 0; //@line 1631
        break L22;
       }
      }
      while (1) {
       $27 = SAFE_HEAP_LOAD($$0670929 >> 0 | 0, 1, 0) | 0 | 0; //@line 1636
       $28 = $27 & 255; //@line 1637
       if (($27 + -48 & 255) < 10) {
        $$sink = -48; //@line 1641
       } else {
        if (($27 + -97 & 255) < 6) {
         $$sink = -87; //@line 1646
        } else {
         if (($27 + -65 & 255) < 6) {
          $$sink = -55; //@line 1651
         } else {
          break;
         }
        }
       }
       $36 = $$0667930 * 16.0 + +($$sink + $28 | 0); //@line 1660
       $$0670929 = $$0670929 + 1 | 0; //@line 1661
       if ($$0670929 >>> 0 > $18 >>> 0) {
        $$12 = $36; //@line 1664
        break L20;
       } else {
        $$0667930 = $36; //@line 1667
       }
      }
      $$12 = +_ecma_number_make_nan(); //@line 1671
      break L20;
     } else {
      switch ($$pr$pre << 24 >> 24) {
      case 43:
       {
        $$0649 = $20 + 1 | 0; //@line 1677
        $$0672$off0 = 0; //@line 1677
        break L22;
        break;
       }
      case 45:
       {
        $$0649 = $20 + 1 | 0; //@line 1683
        $$0672$off0 = 1; //@line 1683
        break L22;
        break;
       }
      default:
       {
        $$0649 = $20; //@line 1688
        $$0672$off0 = 0; //@line 1688
        break L22;
       }
      }
     }
    } while (0);
    if ($$0649 >>> 0 > $18 >>> 0) {
     $$12 = +_ecma_number_make_nan(); //@line 1697
     break;
    }
    $43 = _lit_get_magic_string_utf8(42) | 0; //@line 1700
    if (($18 - $$0649 | 0) == 7) {
     if (!(_memcmp($43, $$0649, 8) | 0)) {
      $$12 = +_ecma_number_make_infinity($$0672$off0); //@line 1710
      break;
     } else {
      $$0682913 = 0; //@line 1713
      $$0691912 = 0; //@line 1713
      $$0703$off0911 = 0; //@line 1713
      $$1650915 = $$0649; //@line 1713
      $58 = 0; //@line 1713
      $59 = 0; //@line 1713
     }
    } else {
     $$0682913 = 0; //@line 1716
     $$0691912 = 0; //@line 1716
     $$0703$off0911 = 0; //@line 1716
     $$1650915 = $$0649; //@line 1716
     $58 = 0; //@line 1716
     $59 = 0; //@line 1716
    }
    while (1) {
     $51 = SAFE_HEAP_LOAD($$1650915 >> 0 | 0, 1, 0) | 0 | 0; //@line 1719
     if (($51 + -48 & 255) >= 10) {
      $$0682$lcssa$ph = $$0682913; //@line 1723
      $$0691$lcssa$ph = $$0691912; //@line 1723
      $$0703$off0$lcssa$ph = $$0703$off0911; //@line 1723
      $$1650$lcssa$ph = $$1650915; //@line 1723
      $544 = $58; //@line 1723
      $545 = $59; //@line 1723
      break;
     }
     $54 = ($51 & 255) + -48 | 0; //@line 1727
     do {
      if (!($54 | $$0682913)) {
       $$1683 = $$0682913; //@line 1732
       $$1692 = $$0691912; //@line 1732
       $546 = $58; //@line 1732
       $547 = $59; //@line 1732
      } else {
       if ($$0682913 >>> 0 < 19) {
        $60 = ___muldi3($58 | 0, $59 | 0, 10, 0) | 0; //@line 1736
        $62 = _i64Add($54 | 0, 0, $60 | 0, tempRet0 | 0) | 0; //@line 1738
        $$1683 = $$0682913 + 1 | 0; //@line 1741
        $$1692 = $$0691912; //@line 1741
        $546 = $62; //@line 1741
        $547 = tempRet0; //@line 1741
        break;
       } else {
        $$1683 = $$0682913; //@line 1745
        $$1692 = $$0691912 + 1 | 0; //@line 1745
        $546 = $58; //@line 1745
        $547 = $59; //@line 1745
        break;
       }
      }
     } while (0);
     $66 = $$1650915 + 1 | 0; //@line 1750
     if ($66 >>> 0 > $18 >>> 0) {
      $$0682$lcssa$ph = $$1683; //@line 1753
      $$0691$lcssa$ph = $$1692; //@line 1753
      $$0703$off0$lcssa$ph = 1; //@line 1753
      $$1650$lcssa$ph = $66; //@line 1753
      $544 = $546; //@line 1753
      $545 = $547; //@line 1753
      break;
     } else {
      $$0682913 = $$1683; //@line 1756
      $$0691912 = $$1692; //@line 1756
      $$0703$off0911 = 1; //@line 1756
      $$1650915 = $66; //@line 1756
      $58 = $546; //@line 1756
      $59 = $547; //@line 1756
     }
    }
    L52 : do {
     if ($$1650$lcssa$ph >>> 0 > $18 >>> 0) {
      $$5708$off0 = $$0703$off0$lcssa$ph; //@line 1762
      $$6655 = $$1650$lcssa$ph; //@line 1762
      $$7698 = $$0691$lcssa$ph; //@line 1762
      $$8690 = $$0682$lcssa$ph; //@line 1762
      $126 = $544; //@line 1762
      $128 = $545; //@line 1762
     } else {
      if ((SAFE_HEAP_LOAD($$1650$lcssa$ph >> 0 | 0, 1, 0) | 0 | 0) == 46) {
       $71 = $$1650$lcssa$ph + 1 | 0; //@line 1767
       $72 = $71 >>> 0 > $18 >>> 0; //@line 1769
       if ($72 & ($$0703$off0$lcssa$ph ^ 1)) {
        $$12 = +_ecma_number_make_nan(); //@line 1773
        break L20;
       }
       if ($72) {
        $$5708$off0 = $$0703$off0$lcssa$ph; //@line 1777
        $$6655 = $71; //@line 1777
        $$7698 = $$0691$lcssa$ph; //@line 1777
        $$8690 = $$0682$lcssa$ph; //@line 1777
        $126 = $544; //@line 1777
        $128 = $545; //@line 1777
       } else {
        $$3706$off0894 = $$0703$off0$lcssa$ph; //@line 1779
        $$4653898 = $71; //@line 1779
        $$4686896 = $$0682$lcssa$ph; //@line 1779
        $$4695895 = $$0691$lcssa$ph; //@line 1779
        $81 = $544; //@line 1779
        $82 = $545; //@line 1779
        while (1) {
         $74 = SAFE_HEAP_LOAD($$4653898 >> 0 | 0, 1, 0) | 0 | 0; //@line 1781
         if (($74 + -48 & 255) >= 10) {
          $$5708$off0 = $$3706$off0894; //@line 1785
          $$6655 = $$4653898; //@line 1785
          $$7698 = $$4695895; //@line 1785
          $$8690 = $$4686896; //@line 1785
          $126 = $81; //@line 1785
          $128 = $82; //@line 1785
          break L52;
         }
         $77 = ($74 & 255) + -48 | 0; //@line 1789
         if ($$4686896 >>> 0 < 19) {
          $80 = ($77 | $$4686896 | 0) == 0; //@line 1793
          $83 = ___muldi3($81 | 0, $82 | 0, 10, 0) | 0; //@line 1794
          $85 = _i64Add($77 | 0, 0, $83 | 0, tempRet0 | 0) | 0; //@line 1796
          $$5696 = $$4695895 + -1 | 0; //@line 1804
          $$6688 = (($80 ^ 1) & 1) + $$4686896 | 0; //@line 1804
          $548 = $80 ? $81 : $85; //@line 1804
          $549 = $80 ? $82 : tempRet0; //@line 1804
         } else {
          $$5696 = $$4695895; //@line 1806
          $$6688 = $$4686896; //@line 1806
          $548 = $81; //@line 1806
          $549 = $82; //@line 1806
         }
         $91 = $$4653898 + 1 | 0; //@line 1808
         if ($91 >>> 0 > $18 >>> 0) {
          $$5708$off0 = 1; //@line 1811
          $$6655 = $91; //@line 1811
          $$7698 = $$5696; //@line 1811
          $$8690 = $$6688; //@line 1811
          $126 = $548; //@line 1811
          $128 = $549; //@line 1811
          break;
         } else {
          $$3706$off0894 = 1; //@line 1814
          $$4653898 = $91; //@line 1814
          $$4686896 = $$6688; //@line 1814
          $$4695895 = $$5696; //@line 1814
          $81 = $548; //@line 1814
          $82 = $549; //@line 1814
         }
        }
       }
      } else {
       $$5708$off0 = $$0703$off0$lcssa$ph; //@line 1819
       $$6655 = $$1650$lcssa$ph; //@line 1819
       $$7698 = $$0691$lcssa$ph; //@line 1819
       $$8690 = $$0682$lcssa$ph; //@line 1819
       $126 = $544; //@line 1819
       $128 = $545; //@line 1819
      }
     }
    } while (0);
    L65 : do {
     if ($$6655 >>> 0 > $18 >>> 0) {
      $$11660755 = $$6655; //@line 1826
      $121 = $$7698; //@line 1826
     } else {
      switch (SAFE_HEAP_LOAD($$6655 >> 0 | 0, 1, 0) | 0 | 0) {
      case 69:
      case 101:
       {
        break;
       }
      default:
       {
        $$11660755 = $$6655; //@line 1834
        $121 = $$7698; //@line 1834
        break L65;
       }
      }
      $95 = $$6655 + 1 | 0; //@line 1838
      if ($95 >>> 0 > $18 >>> 0 | $$5708$off0 ^ 1) {
       $$12 = +_ecma_number_make_nan(); //@line 1844
       break L20;
      }
      switch (SAFE_HEAP_LOAD($95 >> 0 | 0, 1, 0) | 0 | 0) {
      case 43:
       {
        $$0712 = 0; //@line 1851
        $$7656 = $$6655 + 2 | 0; //@line 1851
        break;
       }
      case 45:
       {
        $$0712 = 1; //@line 1856
        $$7656 = $$6655 + 2 | 0; //@line 1856
        break;
       }
      default:
       {
        $$0712 = 0; //@line 1860
        $$7656 = $95; //@line 1860
       }
      }
      if ($$7656 >>> 0 > $18 >>> 0) {
       $$12 = +_ecma_number_make_nan(); //@line 1866
       break L20;
      }
      $extract$t = $$0712 << 24 >> 24 != 0; //@line 1869
      $103 = $$7698 + -1 + $$8690 | 0; //@line 1871
      $$0709887 = 0; //@line 1872
      $$8657888 = $$7656; //@line 1872
      while (1) {
       $105 = SAFE_HEAP_LOAD($$8657888 >> 0 | 0, 1, 0) | 0 | 0; //@line 1874
       if (($105 + -48 & 255) >= 10) {
        label = 56; //@line 1878
        break;
       }
       $$0709887 = ($$0709887 * 10 | 0) + -48 + ($105 & 255) | 0; //@line 1884
       $112 = $extract$t ? 0 - $$0709887 | 0 : $$0709887; //@line 1886
       $113 = $103 + $112 | 0; //@line 1887
       if (($113 | 0) > 308) {
        label = 57; //@line 1890
        break;
       }
       if (($113 | 0) < -324) {
        label = 59; //@line 1895
        break;
       }
       $$8657888 = $$8657888 + 1 | 0; //@line 1898
       if ($$8657888 >>> 0 > $18 >>> 0) {
        label = 61; //@line 1901
        break;
       }
      }
      if ((label | 0) == 56) {
       $$12 = +_ecma_number_make_nan(); //@line 1909
       break L20;
      } else if ((label | 0) == 57) {
       $$12 = +_ecma_number_make_infinity($$0672$off0); //@line 1914
       break L20;
      } else if ((label | 0) == 59) {
       $$12 = $$0672$off0 ? -0.0 : 0.0; //@line 1919
       break L20;
      } else if ((label | 0) == 61) {
       $$11660755 = $$8657888; //@line 1924
       $121 = $112 + $$7698 | 0; //@line 1924
       break;
      }
     }
    } while (0);
    $122 = ($121 | 0) < 0; //@line 1929
    $123 = 0 - $121 | 0; //@line 1930
    $$9700 = $122 ? $123 : $121; //@line 1931
    if ($$11660755 >>> 0 <= $18 >>> 0) {
     $$12 = +_ecma_number_make_nan(); //@line 1935
     break;
    }
    if (($126 | 0) == 0 & ($128 | 0) == 0) {
     $$12 = $$0672$off0 ? -0.0 : 0.0; //@line 1943
     break;
    }
    $$0715883 = 33; //@line 1946
    $$sroa$162$0886$off0 = 0; //@line 1946
    $133 = $128; //@line 1946
    $134 = 0; //@line 1946
    $139 = $126; //@line 1946
    $140 = 0; //@line 1946
    while (1) {
     $135 = _bitshift64Lshr($133 | 0, $134 | 0, 31) | 0; //@line 1949
     $136 = tempRet0; //@line 1950
     $$sroa$162$0886$off0 = $$sroa$162$0886$off0 << 1 | $135; //@line 1951
     $141 = _bitshift64Lshr($139 | 0, $140 | 0, 31) | 0; //@line 1953
     $134 = tempRet0; //@line 1954
     $133 = $133 << 1 | $141; //@line 1955
     $139 = $139 << 1; //@line 1956
     $$0715883 = $$0715883 + -1 | 0; //@line 1957
     if (!($136 >>> 0 < 0 | ($136 | 0) == 0 & $$sroa$162$0886$off0 >>> 0 < 134217728)) {
      break;
     } else {
      $140 = 0; //@line 1964
     }
    }
    $151 = ($$9700 | 0) > 0; //@line 1969
    if ($122) {
     if ($151) {
      $$11702842 = $123; //@line 1972
      $$4719837 = $$0715883; //@line 1972
      $279 = $136; //@line 1972
      $281 = $$sroa$162$0886$off0; //@line 1972
      $550 = $133; //@line 1972
      $551 = $134; //@line 1972
      $552 = $139; //@line 1972
      $553 = 0; //@line 1972
      $554 = 0; //@line 1972
      $555 = 0; //@line 1972
      while (1) {
       if ($279 >>> 0 < 0 | ($279 | 0) == 0 & $281 >>> 0 < 2147483648) {
        $$5720825 = $$4719837; //@line 1980
        $$sroa$162$5829$off0 = $281; //@line 1980
        $294 = $550; //@line 1980
        $295 = $551; //@line 1980
        $300 = $552; //@line 1980
        $301 = $553; //@line 1980
        $306 = $554; //@line 1980
        $307 = $555; //@line 1980
        while (1) {
         $296 = _bitshift64Lshr($294 | 0, $295 | 0, 31) | 0; //@line 1983
         $297 = tempRet0; //@line 1984
         $298 = $$sroa$162$5829$off0 << 1 | $296; //@line 1985
         $302 = _bitshift64Lshr($300 | 0, $301 | 0, 31) | 0; //@line 1987
         $303 = tempRet0; //@line 1988
         $304 = $294 << 1 | $302; //@line 1989
         $308 = _bitshift64Lshr($306 | 0, $307 | 0, 31) | 0; //@line 1991
         $309 = tempRet0; //@line 1992
         $310 = $300 << 1 | $308; //@line 1993
         $311 = $306 << 1; //@line 1994
         $312 = $$5720825 + -1 | 0; //@line 1995
         if ($297 >>> 0 < 0 | ($297 | 0) == 0 & $298 >>> 0 < 2147483648) {
          $$5720825 = $312; //@line 2002
          $$sroa$162$5829$off0 = $298; //@line 2002
          $294 = $304; //@line 2002
          $295 = $303; //@line 2002
          $300 = $310; //@line 2002
          $301 = $309; //@line 2002
          $306 = $311; //@line 2002
          $307 = 0; //@line 2002
         } else {
          $$5720$lcssa = $312; //@line 2004
          $318 = $311; //@line 2004
          $319 = 0; //@line 2004
          $321 = $310; //@line 2004
          $322 = $309; //@line 2004
          $325 = $304; //@line 2004
          $326 = $303; //@line 2004
          $329 = $298; //@line 2004
          $330 = $297; //@line 2004
          break;
         }
        }
       } else {
        $$5720$lcssa = $$4719837; //@line 2009
        $318 = $554; //@line 2009
        $319 = $555; //@line 2009
        $321 = $552; //@line 2009
        $322 = $553; //@line 2009
        $325 = $550; //@line 2009
        $326 = $551; //@line 2009
        $329 = $281; //@line 2009
        $330 = $279; //@line 2009
       }
       ___muldi3($318 | 0, $319 | 0, -1717986918, 0) | 0; //@line 2011
       $320 = tempRet0; //@line 2012
       $323 = ___muldi3($321 | 0, $322 | 0, -1717986918, 0) | 0; //@line 2013
       $324 = tempRet0; //@line 2014
       $327 = ___muldi3($325 | 0, $326 | 0, -1717986918, 0) | 0; //@line 2015
       $328 = tempRet0; //@line 2016
       $331 = ___muldi3($329 | 0, $330 | 0, -1717986918, 0) | 0; //@line 2017
       $332 = tempRet0; //@line 2018
       $333 = ___muldi3($318 | 0, $319 | 0, -1717986919, 0) | 0; //@line 2019
       $334 = tempRet0; //@line 2020
       $335 = ___muldi3($321 | 0, $322 | 0, -1717986919, 0) | 0; //@line 2021
       $336 = tempRet0; //@line 2022
       $337 = ___muldi3($325 | 0, $326 | 0, -1717986919, 0) | 0; //@line 2023
       $338 = tempRet0; //@line 2024
       $339 = ___muldi3($329 | 0, $330 | 0, -1717986919, 0) | 0; //@line 2025
       $340 = tempRet0; //@line 2026
       $341 = ___muldi3($318 | 0, $319 | 0, 429496729, 0) | 0; //@line 2027
       $342 = tempRet0; //@line 2028
       $343 = ___muldi3($321 | 0, $322 | 0, 429496729, 0) | 0; //@line 2029
       $344 = tempRet0; //@line 2030
       $345 = ___muldi3($325 | 0, $326 | 0, 429496729, 0) | 0; //@line 2031
       $346 = tempRet0; //@line 2032
       $347 = ___muldi3($329 | 0, $330 | 0, 429496729, 0) | 0; //@line 2033
       $348 = tempRet0; //@line 2034
       $350 = _i64Add($333 | 0, 0, $320 | 0, 0) | 0; //@line 2036
       _i64Add($350 | 0, tempRet0 | 0, $323 & -2 | 0, 0) | 0; //@line 2038
       $352 = tempRet0; //@line 2039
       $355 = _i64Add($340 | 0, 0, $346 | 0, 0) | 0; //@line 2042
       $357 = _i64Add($355 | 0, tempRet0 | 0, $347 | 0, 0) | 0; //@line 2044
       $358 = tempRet0; //@line 2045
       $359 = _i64Add($333 | 0, 0, $334 | 0, 0) | 0; //@line 2046
       $361 = _i64Add($359 | 0, tempRet0 | 0, $324 | 0, 0) | 0; //@line 2048
       $363 = _i64Add($361 | 0, tempRet0 | 0, $335 | 0, 0) | 0; //@line 2050
       $365 = _i64Add($363 | 0, tempRet0 | 0, $327 & -2 | 0, 0) | 0; //@line 2052
       _i64Add($365 | 0, tempRet0 | 0, $352 | 0, 0) | 0; //@line 2054
       $367 = tempRet0; //@line 2055
       $368 = _i64Add($341 | 0, 0, $334 | 0, 0) | 0; //@line 2056
       $370 = _i64Add($368 | 0, tempRet0 | 0, $336 | 0, 0) | 0; //@line 2058
       $372 = _i64Add($370 | 0, tempRet0 | 0, $335 | 0, 0) | 0; //@line 2060
       $374 = _i64Add($372 | 0, tempRet0 | 0, $328 | 0, 0) | 0; //@line 2062
       $376 = _i64Add($374 | 0, tempRet0 | 0, $337 | 0, 0) | 0; //@line 2064
       $378 = _i64Add($376 | 0, tempRet0 | 0, $331 & -2 | 0, 0) | 0; //@line 2066
       _i64Add($378 | 0, tempRet0 | 0, $367 | 0, 0) | 0; //@line 2068
       $380 = tempRet0; //@line 2069
       $381 = _i64Add($336 | 0, 0, $342 | 0, 0) | 0; //@line 2070
       $383 = _i64Add($381 | 0, tempRet0 | 0, $343 | 0, 0) | 0; //@line 2072
       $385 = _i64Add($383 | 0, tempRet0 | 0, $338 | 0, 0) | 0; //@line 2074
       $387 = _i64Add($385 | 0, tempRet0 | 0, $337 | 0, 0) | 0; //@line 2076
       $389 = _i64Add($387 | 0, tempRet0 | 0, $332 | 0, 0) | 0; //@line 2078
       $391 = _i64Add($389 | 0, tempRet0 | 0, $339 | 0, 0) | 0; //@line 2080
       $393 = _i64Add($391 | 0, tempRet0 | 0, $380 | 0, 0) | 0; //@line 2082
       $394 = tempRet0; //@line 2083
       $395 = _i64Add($338 | 0, 0, $344 | 0, 0) | 0; //@line 2084
       $397 = _i64Add($395 | 0, tempRet0 | 0, $345 | 0, 0) | 0; //@line 2086
       $399 = _i64Add($397 | 0, tempRet0 | 0, $340 | 0, 0) | 0; //@line 2088
       $401 = _i64Add($399 | 0, tempRet0 | 0, $339 | 0, 0) | 0; //@line 2090
       $403 = _i64Add($401 | 0, tempRet0 | 0, $394 | 0, 0) | 0; //@line 2092
       $405 = _i64Add($357 | 0, $358 | 0, tempRet0 | 0, 0) | 0; //@line 2094
       $407 = _i64Add(tempRet0 | 0, 0, $348 | 0, 0) | 0; //@line 2096
       $408 = tempRet0; //@line 2097
       if (($$11702842 | 0) > 1) {
        $$11702842 = $$11702842 + -1 | 0; //@line 2101
        $$4719837 = $$5720$lcssa; //@line 2101
        $279 = $408; //@line 2101
        $281 = $407; //@line 2101
        $550 = $405; //@line 2101
        $551 = 0; //@line 2101
        $552 = $403; //@line 2101
        $553 = 0; //@line 2101
        $554 = $393; //@line 2101
        $555 = 0; //@line 2101
       } else {
        $$4719$lcssa = $$5720$lcssa; //@line 2103
        $286 = $408; //@line 2103
        $288 = $407; //@line 2103
        $556 = $393; //@line 2103
        $557 = 0; //@line 2103
        $558 = $403; //@line 2103
        $559 = 0; //@line 2103
        $560 = $405; //@line 2103
        $561 = 0; //@line 2103
        break;
       }
      }
     } else {
      $$4719$lcssa = $$0715883; //@line 2108
      $286 = $136; //@line 2108
      $288 = $$sroa$162$0886$off0; //@line 2108
      $556 = 0; //@line 2108
      $557 = 0; //@line 2108
      $558 = $139; //@line 2108
      $559 = 0; //@line 2108
      $560 = $133; //@line 2108
      $561 = $134; //@line 2108
     }
     if ($286 >>> 0 > 0 | ($286 | 0) == 0 & $288 >>> 0 > 268435455) {
      $$6721814 = $$4719$lcssa; //@line 2116
      $418 = $556; //@line 2116
      $419 = $557; //@line 2116
      $423 = $558; //@line 2116
      $425 = $559; //@line 2116
      $429 = $560; //@line 2116
      $431 = $561; //@line 2116
      $435 = $288; //@line 2116
      $437 = $286; //@line 2116
      while (1) {
       $420 = _bitshift64Lshr($418 | 0, $419 | 0, 1) | 0; //@line 2118
       $421 = tempRet0; //@line 2119
       $424 = $423 << 31 | $420; //@line 2121
       $426 = _bitshift64Lshr($423 | 0, $425 | 0, 1) | 0; //@line 2122
       $427 = tempRet0; //@line 2123
       $430 = $429 << 31 | $426; //@line 2125
       $432 = _bitshift64Lshr($429 | 0, $431 | 0, 1) | 0; //@line 2126
       $433 = tempRet0; //@line 2127
       $436 = $435 << 31 | $432; //@line 2129
       $438 = _bitshift64Lshr($435 | 0, $437 | 0, 1) | 0; //@line 2130
       $439 = tempRet0; //@line 2131
       $440 = $$6721814 + 1 | 0; //@line 2132
       if ($437 >>> 0 > 0 | ($437 | 0) == 0 & $435 >>> 0 > 536870911) {
        $$6721814 = $440; //@line 2139
        $418 = $424; //@line 2139
        $419 = $421; //@line 2139
        $423 = $430; //@line 2139
        $425 = $427; //@line 2139
        $429 = $436; //@line 2139
        $431 = $433; //@line 2139
        $435 = $438; //@line 2139
        $437 = $439; //@line 2139
       } else {
        $$6721$lcssa = $440; //@line 2141
        $411 = $439; //@line 2141
        $413 = $438; //@line 2141
        $576 = $424; //@line 2141
        $577 = $421; //@line 2141
        $578 = $430; //@line 2141
        $579 = $427; //@line 2141
        $580 = $436; //@line 2141
        $581 = $433; //@line 2141
        break;
       }
      }
     } else {
      $$6721$lcssa = $$4719$lcssa; //@line 2146
      $411 = $286; //@line 2146
      $413 = $288; //@line 2146
      $576 = $556; //@line 2146
      $577 = $557; //@line 2146
      $578 = $558; //@line 2146
      $579 = $559; //@line 2146
      $580 = $560; //@line 2146
      $581 = $561; //@line 2146
     }
     if ($411 >>> 0 < 0 | ($411 | 0) == 0 & $413 >>> 0 < 134217728) {
      $$7722803 = $$6721$lcssa; //@line 2154
      $$sroa$162$7807$off0 = $413; //@line 2154
      $447 = $580; //@line 2154
      $448 = $581; //@line 2154
      $453 = $578; //@line 2154
      $454 = $579; //@line 2154
      $459 = $576; //@line 2154
      $460 = $577; //@line 2154
      while (1) {
       $449 = _bitshift64Lshr($447 | 0, $448 | 0, 31) | 0; //@line 2157
       $450 = tempRet0; //@line 2158
       $451 = $$sroa$162$7807$off0 << 1 | $449; //@line 2159
       $455 = _bitshift64Lshr($453 | 0, $454 | 0, 31) | 0; //@line 2161
       $456 = tempRet0; //@line 2162
       $457 = $447 << 1 | $455; //@line 2163
       $461 = _bitshift64Lshr($459 | 0, $460 | 0, 31) | 0; //@line 2165
       $462 = tempRet0; //@line 2166
       $463 = $453 << 1 | $461; //@line 2167
       $464 = $459 << 1; //@line 2168
       $465 = $$7722803 + -1 | 0; //@line 2169
       if ($450 >>> 0 < 0 | ($450 | 0) == 0 & $451 >>> 0 < 134217728) {
        $$7722803 = $465; //@line 2176
        $$sroa$162$7807$off0 = $451; //@line 2176
        $447 = $457; //@line 2176
        $448 = $456; //@line 2176
        $453 = $463; //@line 2176
        $454 = $462; //@line 2176
        $459 = $464; //@line 2176
        $460 = 0; //@line 2176
       } else {
        $$8723792 = $465; //@line 2178
        $471 = $450; //@line 2178
        $473 = $451; //@line 2178
        $482 = $464; //@line 2178
        $483 = 0; //@line 2178
        $487 = $463; //@line 2178
        $489 = $462; //@line 2178
        $492 = $457; //@line 2178
        $493 = $456; //@line 2178
        break;
       }
      }
     } else {
      $$8723792 = $$6721$lcssa; //@line 2183
      $471 = $411; //@line 2183
      $473 = $413; //@line 2183
      $482 = $576; //@line 2183
      $483 = $577; //@line 2183
      $487 = $578; //@line 2183
      $489 = $579; //@line 2183
      $492 = $580; //@line 2183
      $493 = $581; //@line 2183
     }
    } else {
     if ($151) {
      $$10701876 = $121; //@line 2187
      $$1716871 = $$0715883; //@line 2187
      $$sroa$162$1875$off0 = $$sroa$162$0886$off0; //@line 2187
      $154 = $133; //@line 2187
      $155 = $134; //@line 2187
      $160 = $139; //@line 2187
      $161 = 0; //@line 2187
      $166 = 0; //@line 2187
      $167 = 0; //@line 2187
      while (1) {
       $156 = _bitshift64Lshr($154 | 0, $155 | 0, 31) | 0; //@line 2190
       $157 = tempRet0; //@line 2191
       $158 = $$sroa$162$1875$off0 << 1 | $156; //@line 2192
       $162 = _bitshift64Lshr($160 | 0, $161 | 0, 31) | 0; //@line 2194
       $163 = tempRet0; //@line 2195
       $164 = $154 << 1 | $162; //@line 2196
       $168 = _bitshift64Lshr($166 | 0, $167 | 0, 31) | 0; //@line 2198
       $169 = tempRet0; //@line 2199
       $170 = $160 << 1 | $168; //@line 2200
       $173 = _bitshift64Lshr($164 | 0, $163 | 0, 31) | 0; //@line 2203
       $176 = $164 << 1; //@line 2206
       $177 = _bitshift64Lshr($170 | 0, $169 | 0, 31) | 0; //@line 2207
       $180 = $170 << 1; //@line 2210
       $186 = _bitshift64Lshr($176 | 0, 0, 31) | 0; //@line 2216
       $187 = tempRet0; //@line 2217
       $190 = _bitshift64Lshr($180 | 0, 0, 31) | 0; //@line 2220
       $191 = tempRet0; //@line 2221
       $194 = _bitshift64Lshr($166 << 2 | 0, 0, 31) | 0; //@line 2224
       $195 = tempRet0; //@line 2225
       $198 = _i64Add($166 << 1 | 0, 0, $166 << 3 | 0, 0) | 0; //@line 2228
       $199 = tempRet0; //@line 2229
       $200 = _i64Add(($176 | $177) << 1 | $190 | 0, $191 | 0, $164 | 0, $163 | 0) | 0; //@line 2230
       $201 = tempRet0; //@line 2231
       $202 = _i64Add(($158 << 1 | $173) << 1 | $186 | 0, $187 | 0, $158 | 0, $157 | 0) | 0; //@line 2232
       $203 = tempRet0; //@line 2233
       $204 = _i64Add($199 | 0, 0, $170 | 0, $169 | 0) | 0; //@line 2234
       $206 = _i64Add($204 | 0, tempRet0 | 0, ($180 | $166 >>> 30 & 1) << 1 | $194 | 0, $195 | 0) | 0; //@line 2236
       $208 = $198 & -2; //@line 2238
       $209 = _i64Add($200 | 0, $201 | 0, tempRet0 | 0, 0) | 0; //@line 2239
       $211 = _i64Add($202 | 0, $203 | 0, tempRet0 | 0, 0) | 0; //@line 2241
       $212 = tempRet0; //@line 2242
       $$10701876$looptemp = $$10701876;
       $$10701876 = $$10701876 + -1 | 0; //@line 2243
       if ($212 >>> 0 > 0 | ($212 | 0) == 0 & $211 >>> 0 > 268435455) {
        $$2717848 = $$1716871; //@line 2250
        $226 = $208; //@line 2250
        $227 = 0; //@line 2250
        $231 = $206; //@line 2250
        $233 = 0; //@line 2250
        $237 = $209; //@line 2250
        $239 = 0; //@line 2250
        $243 = $211; //@line 2250
        $245 = $212; //@line 2250
        while (1) {
         $228 = _bitshift64Lshr($226 | 0, $227 | 0, 1) | 0; //@line 2252
         $229 = tempRet0; //@line 2253
         $232 = $231 << 31 | $228; //@line 2255
         $234 = _bitshift64Lshr($231 | 0, $233 | 0, 1) | 0; //@line 2256
         $235 = tempRet0; //@line 2257
         $238 = $237 << 31 | $234; //@line 2259
         $240 = _bitshift64Lshr($237 | 0, $239 | 0, 1) | 0; //@line 2260
         $241 = tempRet0; //@line 2261
         $244 = $243 << 31 | $240; //@line 2263
         $246 = _bitshift64Lshr($243 | 0, $245 | 0, 1) | 0; //@line 2264
         $247 = tempRet0; //@line 2265
         $248 = $$2717848 + 1 | 0; //@line 2266
         if ($245 >>> 0 > 0 | ($245 | 0) == 0 & $243 >>> 0 > 536870911) {
          $$2717848 = $248; //@line 2273
          $226 = $232; //@line 2273
          $227 = $229; //@line 2273
          $231 = $238; //@line 2273
          $233 = $235; //@line 2273
          $237 = $244; //@line 2273
          $239 = $241; //@line 2273
          $243 = $246; //@line 2273
          $245 = $247; //@line 2273
         } else {
          $$2717$lcssa = $248; //@line 2275
          $219 = $247; //@line 2275
          $221 = $246; //@line 2275
          $570 = $232; //@line 2275
          $571 = $229; //@line 2275
          $572 = $238; //@line 2275
          $573 = $235; //@line 2275
          $574 = $244; //@line 2275
          $575 = $241; //@line 2275
          break;
         }
        }
       } else {
        $$2717$lcssa = $$1716871; //@line 2280
        $219 = $212; //@line 2280
        $221 = $211; //@line 2280
        $570 = $208; //@line 2280
        $571 = 0; //@line 2280
        $572 = $206; //@line 2280
        $573 = 0; //@line 2280
        $574 = $209; //@line 2280
        $575 = 0; //@line 2280
       }
       if ($219 >>> 0 < 0 | ($219 | 0) == 0 & $221 >>> 0 < 134217728) {
        $$3718860 = $$2717$lcssa; //@line 2288
        $$sroa$162$3864$off0 = $221; //@line 2288
        $255 = $574; //@line 2288
        $256 = $575; //@line 2288
        $261 = $572; //@line 2288
        $262 = $573; //@line 2288
        $267 = $570; //@line 2288
        $268 = $571; //@line 2288
        while (1) {
         $257 = _bitshift64Lshr($255 | 0, $256 | 0, 31) | 0; //@line 2291
         $258 = tempRet0; //@line 2292
         $259 = $$sroa$162$3864$off0 << 1 | $257; //@line 2293
         $263 = _bitshift64Lshr($261 | 0, $262 | 0, 31) | 0; //@line 2295
         $264 = tempRet0; //@line 2296
         $265 = $255 << 1 | $263; //@line 2297
         $269 = _bitshift64Lshr($267 | 0, $268 | 0, 31) | 0; //@line 2299
         $270 = tempRet0; //@line 2300
         $271 = $261 << 1 | $269; //@line 2301
         $272 = $267 << 1; //@line 2302
         $273 = $$3718860 + -1 | 0; //@line 2303
         if ($258 >>> 0 < 0 | ($258 | 0) == 0 & $259 >>> 0 < 134217728) {
          $$3718860 = $273; //@line 2310
          $$sroa$162$3864$off0 = $259; //@line 2310
          $255 = $265; //@line 2310
          $256 = $264; //@line 2310
          $261 = $271; //@line 2310
          $262 = $270; //@line 2310
          $267 = $272; //@line 2310
          $268 = 0; //@line 2310
         } else {
          $$3718$lcssa = $273; //@line 2312
          $562 = $259; //@line 2312
          $563 = $265; //@line 2312
          $564 = $264; //@line 2312
          $565 = $271; //@line 2312
          $566 = $270; //@line 2312
          $567 = $272; //@line 2312
          $568 = 0; //@line 2312
          $569 = $258; //@line 2312
          break;
         }
        }
       } else {
        $$3718$lcssa = $$2717$lcssa; //@line 2317
        $562 = $221; //@line 2317
        $563 = $574; //@line 2317
        $564 = $575; //@line 2317
        $565 = $572; //@line 2317
        $566 = $573; //@line 2317
        $567 = $570; //@line 2317
        $568 = $571; //@line 2317
        $569 = $219; //@line 2317
       }
       if (($$10701876$looptemp | 0) <= 1) {
        $$8723792 = $$3718$lcssa; //@line 2323
        $471 = $569; //@line 2323
        $473 = $562; //@line 2323
        $482 = $567; //@line 2323
        $483 = $568; //@line 2323
        $487 = $565; //@line 2323
        $489 = $566; //@line 2323
        $492 = $563; //@line 2323
        $493 = $564; //@line 2323
        break;
       } else {
        $$1716871 = $$3718$lcssa; //@line 2321
        $$sroa$162$1875$off0 = $562; //@line 2321
        $154 = $563; //@line 2321
        $155 = $564; //@line 2321
        $160 = $565; //@line 2321
        $161 = $566; //@line 2321
        $166 = $567; //@line 2321
        $167 = $568; //@line 2321
       }
      }
     } else {
      $$8723792 = $$0715883; //@line 2328
      $471 = $136; //@line 2328
      $473 = $$sroa$162$0886$off0; //@line 2328
      $482 = 0; //@line 2328
      $483 = 0; //@line 2328
      $487 = $139; //@line 2328
      $489 = 0; //@line 2328
      $492 = $133; //@line 2328
      $493 = $134; //@line 2328
     }
    }
    while (1) {
     $484 = _bitshift64Lshr($482 | 0, $483 | 0, 1) | 0; //@line 2332
     $483 = tempRet0; //@line 2333
     $482 = $487 << 31 | $484; //@line 2335
     $490 = _bitshift64Lshr($487 | 0, $489 | 0, 1) | 0; //@line 2336
     $489 = tempRet0; //@line 2337
     $487 = $492 << 31 | $490; //@line 2339
     $494 = _bitshift64Lshr($492 | 0, $493 | 0, 1) | 0; //@line 2340
     $493 = tempRet0; //@line 2341
     $492 = $473 << 31 | $494; //@line 2343
     $498 = _bitshift64Lshr($473 | 0, $471 | 0, 1) | 0; //@line 2344
     $499 = tempRet0; //@line 2345
     $$8723792 = $$8723792 + 1 | 0; //@line 2346
     if (!($471 >>> 0 > 0 | ($471 | 0) == 0 & $473 >>> 0 > 4194303)) {
      break;
     } else {
      $471 = $499; //@line 2353
      $473 = $498; //@line 2353
     }
    }
    $480 = _bitshift64Lshr($487 | 0, $489 | 0, 31) | 0; //@line 2363
    $481 = tempRet0; //@line 2364
    if ($471 >>> 0 < 0 | ($471 | 0) == 0 & $473 >>> 0 < 2097152) {
     $$9724784 = $$8723792; //@line 2366
     $$sroa$162$9788$off0 = $498; //@line 2366
     $$sroa$44$9786$off0 = $487; //@line 2366
     $507 = $492; //@line 2366
     $508 = $493; //@line 2366
     $514 = $480; //@line 2366
     $516 = $482; //@line 2366
     $517 = $483; //@line 2366
     $583 = $481; //@line 2366
     while (1) {
      $509 = _bitshift64Lshr($507 | 0, $508 | 0, 31) | 0; //@line 2369
      $510 = tempRet0; //@line 2370
      $511 = $$sroa$162$9788$off0 << 1 | $509; //@line 2371
      $513 = $507 << 1 | $514; //@line 2373
      $518 = _bitshift64Lshr($516 | 0, $517 | 0, 31) | 0; //@line 2375
      $$sroa$44$9786$off0 = $$sroa$44$9786$off0 << 1 | $518; //@line 2377
      $522 = $$9724784 + -1 | 0; //@line 2379
      $528 = _bitshift64Lshr($$sroa$44$9786$off0 | 0, tempRet0 | 0, 31) | 0; //@line 2385
      $529 = tempRet0; //@line 2386
      if (!($510 >>> 0 < 0 | ($510 | 0) == 0 & $511 >>> 0 < 1048576)) {
       $$9724$lcssa = $522; //@line 2390
       $531 = $583; //@line 2390
       $532 = $511; //@line 2390
       $533 = $528; //@line 2390
       $535 = $529; //@line 2390
       $539 = $513; //@line 2390
       $582 = $510; //@line 2390
       break;
      } else {
       $508$phi = $583; //@line 2388
       $$9724784 = $522; //@line 2388
       $$sroa$162$9788$off0 = $511; //@line 2388
       $507 = $513; //@line 2388
       $514 = $528; //@line 2388
       $516 = $516 << 1; //@line 2388
       $517 = 0; //@line 2388
       $583 = $529; //@line 2388
       $508 = $508$phi; //@line 2388
      }
     }
    } else {
     $$9724$lcssa = $$8723792; //@line 2395
     $531 = $493; //@line 2395
     $532 = $498; //@line 2395
     $533 = $480; //@line 2395
     $535 = $481; //@line 2395
     $539 = $492; //@line 2395
     $582 = $499; //@line 2395
    }
    $540 = _i64Add($539 | 0, $532 | $531 | 0, (($533 | 0) != 0 | ($535 | 0) != 0) & 1 | 0, 0) | 0; //@line 2402
    $$12 = +_ecma_number_make_from_sign_mantissa_and_exponent($$0672$off0, $540, tempRet0, $$9724$lcssa); //@line 2405
   }
  } while (0);
  $$13 = $$12; //@line 2408
 }
 STACKTOP = sp; //@line 2410
 return +$$13;
}
function _parser_post_processing($0) {
 $0 = $0 | 0;
 var $$ = 0, $$$0469$off0 = 0, $$$5419 = 0, $$0$in = 0, $$0377$ph = 0, $$0379$be = 0, $$0379538 = 0, $$0381 = 0, $$0382 = 0, $$0383$be = 0, $$0383537 = 0, $$0412$off0 = 0, $$0412$off0$ph = 0, $$0414$be = 0, $$0414$lcssa = 0, $$0414536 = 0, $$0424 = 0, $$0425 = 0, $$0426 = 0, $$0426$in = 0, $$0428$ph$be = 0, $$0428$ph531 = 0, $$0428523 = 0, $$0447 = 0, $$0448 = 0, $$0453$off0 = 0, $$0454$lcssa = 0, $$0455$ph$be = 0, $$0455$ph$lcssa = 0, $$0455$ph530 = 0, $$0465 = 0, $$0465$ph = 0, $$0469$off0 = 0, $$0469$off0$ph = 0, $$0473$in = 0, $$0474$ph = 0, $$0474$ph$in = 0, $$10438 = 0, $$11439 = 0, $$12440 = 0, $$12440$ph = 0, $$13$ph$be = 0, $$13$ph533 = 0, $$13396$ph$be = 0, $$13396$ph532 = 0, $$13396524 = 0, $$13441 = 0, $$13525 = 0, $$1380 = 0, $$1384 = 0, $$14 = 0, $$1413$off0 = 0, $$1415 = 0, $$1415$ph = 0, $$1427 = 0, $$1427$ph = 0, $$1429 = 0, $$14397 = 0, $$1449 = 0, $$1456 = 0, $$1475 = 0, $$1475$ph = 0, $$15 = 0, $$15398 = 0, $$16 = 0, $$16399 = 0, $$18 = 0, $$18401 = 0, $$19 = 0, $$19402 = 0, $$2 = 0, $$20 = 0, $$20403 = 0, $$21 = 0, $$21404 = 0, $$22 = 0, $$22405 = 0, $$23 = 0, $$23406 = 0, $$2385 = 0, $$24$ph = 0, $$2416 = 0, $$2430 = 0, $$24407 = 0, $$24407$ph = 0, $$2457 = 0, $$3 = 0, $$3$ph = 0, $$3386 = 0, $$3386$ph = 0, $$3417 = 0, $$3431 = 0, $$3458 = 0, $$4 = 0, $$4387 = 0, $$4418 = 0, $$4459 = 0, $$5 = 0, $$5388 = 0, $$5419 = 0, $$5419$ph = 0, $$5433 = 0, $$5460 = 0, $$6 = 0, $$6389 = 0, $$6434 = 0, $$6461 = 0, $$6461$ph = 0, $$7 = 0, $$7390 = 0, $$7435 = 0, $$7462 = 0, $$8 = 0, $$8391 = 0, $$8436 = 0, $$9$ph = 0, $$9392 = 0, $$9392$ph = 0, $$9423 = 0, $$9437 = 0, $$not = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink484 = 0, $$sink491 = 0, $1 = 0, $109 = 0, $115 = 0, $116 = 0, $121 = 0, $122 = 0, $132 = 0, $135 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $159 = 0, $170 = 0, $175 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $182 = 0, $183 = 0, $186 = 0, $187 = 0, $188 = 0, $190 = 0, $193 = 0, $196 = 0, $199 = 0, $2 = 0, $200 = 0, $201 = 0, $203 = 0, $206 = 0, $207 = 0, $210 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $222 = 0, $224 = 0, $225 = 0, $226 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $238 = 0, $24 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $252 = 0, $254 = 0, $26 = 0, $265 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $278 = 0, $279 = 0, $28 = 0, $284 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $296 = 0, $3 = 0, $30 = 0, $300 = 0, $302 = 0, $304 = 0, $307 = 0, $31 = 0, $313 = 0, $321 = 0, $323 = 0, $326 = 0, $331 = 0, $349 = 0, $35 = 0, $351 = 0, $36 = 0, $4 = 0, $40 = 0, $43 = 0, $47 = 0, $5 = 0, $50 = 0, $53 = 0, $56 = 0, $57 = 0, $6 = 0, $62 = 0, $70 = 0, $71 = 0, $72 = 0, $77 = 0, $87 = 0, $9 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16613
 STACKTOP = STACKTOP + 32 | 0; //@line 16614
 $1 = sp + 18 | 0; //@line 16615
 $2 = sp + 16 | 0; //@line 16616
 $3 = sp + 14 | 0; //@line 16617
 $4 = sp + 12 | 0; //@line 16618
 $5 = sp; //@line 16619
 $6 = $0 + 174 | 0; //@line 16620
 $9 = $0 + 244 | 0; //@line 16623
 if (((SAFE_HEAP_LOAD($9 | 0, 2, 1) | 0 | 0) + (SAFE_HEAP_LOAD($6 | 0, 2, 1) | 0 | 0) | 0) >>> 0 > 1024) {
  _parser_raise_error($0, 4); //@line 16629
 }
 _parser_copy_identifiers($0); //@line 16632
 $14 = _parser_compute_indicies($0, $1, $2, $3, $4) | 0; //@line 16633
 $15 = $0 + 246 | 0; //@line 16634
 $$ = (SAFE_HEAP_LOAD($15 | 0, 2, 1) | 0 | 0) < 511 ? 254 : 127; //@line 16637
 $18 = $0 + 248 | 0; //@line 16638
 $22 = SAFE_HEAP_LOAD($0 + 256 | 0, 4, 0) | 0 | 0; //@line 16642
 $23 = $22 >>> 0 > 59; //@line 16643
 $$0382 = $23 ? 0 : $22; //@line 16644
 $$0381 = $23 ? 0 : SAFE_HEAP_LOAD($0 + 252 | 0, 4, 0) | 0 | 0; //@line 16645
 $24 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0; //@line 16646
 $26 = ($$0382 | 0) != 0; //@line 16648
 if ($26 | ($24 | 0) != ($$0381 | 0)) {
  $27 = $0 + 264 | 0; //@line 16651
  $$0379538 = $24; //@line 16652
  $$0383537 = 0; //@line 16652
  $$0414536 = $14; //@line 16652
  while (1) {
   $28 = $$0379538 + 4 + $$0383537 | 0; //@line 16654
   $29 = SAFE_HEAP_LOAD($28 >> 0 | 0, 1, 0) | 0 | 0; //@line 16655
   $30 = $29 & 255; //@line 16656
   $31 = $$0383537 + 1 | 0; //@line 16657
   if ($31 >>> 0 > 59) {
    $$1380 = SAFE_HEAP_LOAD($$0379538 | 0, 4, 0) | 0 | 0; //@line 16661
    $$1384 = 0; //@line 16661
   } else {
    $$1380 = $$0379538; //@line 16663
    $$1384 = $31; //@line 16663
   }
   $35 = SAFE_HEAP_LOAD(6556 + $30 >> 0 | 0, 1, 0) | 0 | 0; //@line 16666
   $36 = $$0414536 + 1 | 0; //@line 16667
   if (!($29 << 24 >> 24)) {
    $40 = SAFE_HEAP_LOAD($$1380 + 4 + $$1384 >> 0 | 0, 1, 1) | 0 | 0; //@line 16672
    $43 = $$1384 + 1 | 0; //@line 16675
    if ($43 >>> 0 > 59) {
     $$2 = SAFE_HEAP_LOAD($$1380 | 0, 4, 0) | 0 | 0; //@line 16679
     $$2385 = 0; //@line 16679
    } else {
     $$2 = $$1380; //@line 16681
     $$2385 = $43; //@line 16681
    }
    $$0465$ph = SAFE_HEAP_LOAD(6793 + $40 >> 0 | 0, 1, 0) | 0 | 0; //@line 16684
    $$0474$ph$in = $40; //@line 16684
    $$1415$ph = $$0414536 + 2 | 0; //@line 16684
    $$3$ph = $$2; //@line 16684
    $$3386$ph = $$2385; //@line 16684
   } else {
    $$0465$ph = $35; //@line 16686
    $$0474$ph$in = $30; //@line 16686
    $$1415$ph = $36; //@line 16686
    $$3$ph = $$1380; //@line 16686
    $$3386$ph = $$1384; //@line 16686
   }
   $$0474$ph = $$0474$ph$in & 3; //@line 16688
   $$0465 = $$0465$ph; //@line 16689
   $$1415 = $$1415$ph; //@line 16689
   $$3 = $$3$ph; //@line 16689
   $$3386 = $$3386$ph; //@line 16689
   while (1) {
    $47 = $$0465 & 255; //@line 16691
    if (!($47 & 3)) {
     $$3417 = $$1415; //@line 16695
     $$6 = $$3; //@line 16695
     $$6389 = $$3386; //@line 16695
     break;
    }
    $50 = $$3 + 4 + $$3386 | 0; //@line 16698
    $53 = $$3386 + 1 | 0; //@line 16701
    if ($53 >>> 0 > 59) {
     $$4 = SAFE_HEAP_LOAD($$3 | 0, 4, 0) | 0 | 0; //@line 16705
     $$4387 = 0; //@line 16705
    } else {
     $$4 = $$3; //@line 16707
     $$4387 = $53; //@line 16707
    }
    $56 = $$1415 + 1 | 0; //@line 16709
    $57 = $$4 + 4 + $$4387 | 0; //@line 16710
    $62 = _parser_list_get($27, (SAFE_HEAP_LOAD($57 >> 0 | 0, 1, 1) | 0) << 8 | (SAFE_HEAP_LOAD($50 >> 0 | 0, 1, 1) | 0)) | 0; //@line 16715
    if ((SAFE_HEAP_LOAD($62 + 6 >> 0 | 0, 1, 0) | 0 | 0) == 5) {
     $$0473$in = _parser_list_get($27, SAFE_HEAP_LOAD($62 + 4 | 0, 2, 1) | 0 | 0) | 0; //@line 16724
    } else {
     $$0473$in = $62; //@line 16726
    }
    $70 = $$0473$in + 4 | 0; //@line 16728
    $71 = SAFE_HEAP_LOAD($70 | 0, 2, 0) | 0 | 0; //@line 16729
    $72 = $71 & 65535; //@line 16730
    do {
     if (($71 & 65535) > ($$ & 65535)) {
      $77 = $$1415 + 2 | 0; //@line 16736
      if ((SAFE_HEAP_LOAD($15 | 0, 2, 1) | 0 | 0) < 511) {
       SAFE_HEAP_STORE($50 >> 0 | 0, -1 | 0, 1);
       SAFE_HEAP_STORE($57 >> 0 | 0, (SAFE_HEAP_LOAD($70 | 0, 2, 1) | 0 | 0) + 1 | 0, 1);
       $$2416 = $77; //@line 16744
       break;
      } else {
       SAFE_HEAP_STORE($50 >> 0 | 0, $72 >>> 8 | 128 | 0, 1);
       SAFE_HEAP_STORE($57 >> 0 | 0, SAFE_HEAP_LOAD($70 | 0, 2, 0) | 0 | 0, 1);
       $$2416 = $77; //@line 16754
       break;
      }
     } else {
      SAFE_HEAP_STORE($50 >> 0 | 0, $71 | 0, 1);
      $$2416 = $56; //@line 16760
     }
    } while (0);
    $87 = $$4387 + 1 | 0; //@line 16763
    if ($87 >>> 0 > 59) {
     $$5 = SAFE_HEAP_LOAD($$4 | 0, 4, 0) | 0 | 0; //@line 16767
     $$5388 = 0; //@line 16767
    } else {
     $$5 = $$4; //@line 16769
     $$5388 = $87; //@line 16769
    }
    if (!($47 & 2)) {
     $$3417 = $$2416; //@line 16778
     $$6 = $$5; //@line 16778
     $$6389 = $$5388; //@line 16778
     break;
    } else {
     $$0465 = ($47 & 1) << 1 & 255 ^ 3; //@line 16781
     $$1415 = $$2416; //@line 16781
     $$3 = $$5; //@line 16781
     $$3386 = $$5388; //@line 16781
    }
   }
   if (!($47 & 4)) {
    $$4418 = $$3417; //@line 16787
    $$8 = $$6; //@line 16787
    $$8391 = $$6389; //@line 16787
   } else {
    $98 = $$6389 + 1 | 0; //@line 16789
    if ($98 >>> 0 > 59) {
     $$7 = SAFE_HEAP_LOAD($$6 | 0, 4, 0) | 0 | 0; //@line 16793
     $$7390 = 0; //@line 16793
    } else {
     $$7 = $$6; //@line 16795
     $$7390 = $98; //@line 16795
    }
    $$4418 = $$3417 + 1 | 0; //@line 16798
    $$8 = $$7; //@line 16798
    $$8391 = $$7390; //@line 16798
   }
   if (!($47 & 8)) {
    $$0379$be = $$8; //@line 16803
    $$0383$be = $$8391; //@line 16803
    $$0414$be = $$4418; //@line 16803
   } else {
    $$0469$off0$ph = 1; //@line 16805
    $$1475$ph = $$0474$ph; //@line 16805
    $$5419$ph = $$4418; //@line 16805
    $$9$ph = $$8; //@line 16805
    $$9392$ph = $$8391; //@line 16805
    L44 : while (1) {
     $$0469$off0 = $$0469$off0$ph; //@line 16807
     $$1475 = $$1475$ph; //@line 16807
     $$5419 = $$5419$ph; //@line 16807
     $$9392 = $$9392$ph; //@line 16807
     while (1) {
      $$1475 = $$1475 + -1 | 0; //@line 16809
      if (!$$1475) {
       break L44;
      }
      $$not = (SAFE_HEAP_LOAD($$9$ph + 4 + $$9392 >> 0 | 0, 1, 0) | 0 | 0) != 0; //@line 16816
      $$$0469$off0 = $$0469$off0 & ($$not ^ 1); //@line 16820
      $$$5419 = (($$not | $$0469$off0 ^ 1) & 1) + $$5419 | 0; //@line 16822
      $109 = $$9392 + 1 | 0; //@line 16823
      if ($109 >>> 0 > 59) {
       break;
      } else {
       $$0469$off0 = $$$0469$off0; //@line 16828
       $$5419 = $$$5419; //@line 16828
       $$9392 = $109; //@line 16828
      }
     }
     $$0469$off0$ph = $$$0469$off0; //@line 16832
     $$1475$ph = $$1475; //@line 16832
     $$5419$ph = $$$5419; //@line 16832
     $$9$ph = SAFE_HEAP_LOAD($$9$ph | 0, 4, 0) | 0 | 0; //@line 16832
     $$9392$ph = 0; //@line 16832
    }
    if ($29 << 24 >> 24 != 3 | $$0469$off0 ^ 1) {
     $$sink = 1; //@line 16838
    } else {
     if ((SAFE_HEAP_LOAD($$9$ph + 4 + $$9392 >> 0 | 0, 1, 0) | 0 | 0) == 4) {
      SAFE_HEAP_STORE($28 >> 0 | 0, 1 | 0, 1);
      $$sink = -1; //@line 16845
     } else {
      $$sink = 1; //@line 16847
     }
    }
    $115 = $$sink + $$5419 | 0; //@line 16850
    $116 = $$9392 + 1 | 0; //@line 16851
    if ($116 >>> 0 > 59) {
     $$0379$be = SAFE_HEAP_LOAD($$9$ph | 0, 4, 0) | 0 | 0; //@line 16855
     $$0383$be = 0; //@line 16855
     $$0414$be = $115; //@line 16855
    } else {
     $$0379$be = $$9$ph; //@line 16857
     $$0383$be = $116; //@line 16857
     $$0414$be = $115; //@line 16857
    }
   }
   if ($$0383$be >>> 0 < $$0382 >>> 0 | ($$0379$be | 0) != ($$0381 | 0)) {
    $$0379538 = $$0379$be; //@line 16864
    $$0383537 = $$0383$be; //@line 16864
    $$0414536 = $$0414$be; //@line 16864
   } else {
    $$0414$lcssa = $$0414$be; //@line 16866
    $$0454$lcssa = $30; //@line 16866
    break;
   }
  }
 } else {
  $$0414$lcssa = $14; //@line 16871
  $$0454$lcssa = 0; //@line 16871
 }
 $121 = $0 + 168 | 0; //@line 16873
 $122 = SAFE_HEAP_LOAD($121 | 0, 4, 0) | 0 | 0; //@line 16874
 if (($$0454$lcssa + -69 | 0) >>> 0 < 3 & ($122 & 65536 | 0) != 0) {
  $$9423 = $$0414$lcssa; //@line 16881
 } else {
  SAFE_HEAP_STORE($121 | 0, $122 & -65537 | 0, 4);
  $$9423 = $$0414$lcssa + 1 | 0; //@line 16886
 }
 if ((SAFE_HEAP_LOAD($6 | 0, 2, 1) | 0 | 0) > 255) {
  label = 45; //@line 16891
 } else {
  if ((SAFE_HEAP_LOAD($9 | 0, 2, 1) | 0 | 0) > 255) {
   label = 45; //@line 16896
  } else {
   $132 = SAFE_HEAP_LOAD($15 | 0, 2, 0) | 0 | 0; //@line 16898
   if (($132 & 65535) > 255) {
    label = 45; //@line 16901
   } else {
    $$0424 = 12; //@line 16903
    $$0453$off0 = 0; //@line 16903
    $135 = $132; //@line 16903
   }
  }
 }
 if ((label | 0) == 45) {
  $$0424 = 18; //@line 16909
  $$0453$off0 = 1; //@line 16909
  $135 = SAFE_HEAP_LOAD($15 | 0, 2, 0) | 0 | 0; //@line 16909
 }
 $138 = $$0424 + $$9423 + (($135 & 65535) << 1) | 0; //@line 16914
 $139 = $138 + 7 | 0; //@line 16915
 $140 = $139 & -8; //@line 16916
 $141 = _parser_malloc($0, $140) | 0; //@line 16917
 if ($140 >>> 0 > $138 >>> 0) {
  _memset($141 + $138 | 0, 0, $140 - $138 | 0) | 0; //@line 16922
 }
 _jmem_stats_allocate_byte_code_bytes($140); //@line 16924
 SAFE_HEAP_STORE($141 | 0, $139 >>> 3 | 0, 2);
 SAFE_HEAP_STORE($141 + 2 | 0, 1 | 0, 2);
 $148 = $141 + 4 | 0; //@line 16930
 SAFE_HEAP_STORE($148 | 0, 1 | 0, 2);
 $149 = SAFE_HEAP_LOAD($15 | 0, 2, 0) | 0 | 0; //@line 16932
 $150 = SAFE_HEAP_LOAD($6 | 0, 2, 0) | 0 | 0; //@line 16933
 $151 = SAFE_HEAP_LOAD($1 | 0, 2, 0) | 0 | 0; //@line 16934
 $152 = SAFE_HEAP_LOAD($9 | 0, 2, 0) | 0 | 0; //@line 16935
 $153 = $0 + 242 | 0; //@line 16936
 $154 = SAFE_HEAP_LOAD($153 | 0, 2, 0) | 0 | 0; //@line 16937
 if ($$0453$off0) {
  SAFE_HEAP_STORE($141 + 6 | 0, $150 | 0, 2);
  SAFE_HEAP_STORE($141 + 8 | 0, $154 | 0, 2);
  SAFE_HEAP_STORE($141 + 10 | 0, $152 | 0, 2);
  SAFE_HEAP_STORE($141 + 12 | 0, $151 | 0, 2);
  $159 = SAFE_HEAP_LOAD($4 | 0, 2, 0) | 0 | 0; //@line 16947
  SAFE_HEAP_STORE($141 + 14 | 0, $159 | 0, 2);
  SAFE_HEAP_STORE($141 + 16 | 0, $149 | 0, 2);
  SAFE_HEAP_STORE($148 | 0, 5 | 0, 2);
  $$sink484 = 18; //@line 16953
  $178 = 5; //@line 16953
  $199 = $159; //@line 16953
 } else {
  SAFE_HEAP_STORE($141 + 6 >> 0 | 0, $150 | 0, 1);
  SAFE_HEAP_STORE($141 + 7 >> 0 | 0, $154 | 0, 1);
  SAFE_HEAP_STORE($141 + 8 >> 0 | 0, $152 | 0, 1);
  SAFE_HEAP_STORE($141 + 9 >> 0 | 0, $151 | 0, 1);
  $170 = SAFE_HEAP_LOAD($4 | 0, 2, 0) | 0 | 0; //@line 16967
  SAFE_HEAP_STORE($141 + 10 >> 0 | 0, $170 | 0, 1);
  SAFE_HEAP_STORE($141 + 11 >> 0 | 0, $149 | 0, 1);
  $$sink484 = 12; //@line 16974
  $178 = 1; //@line 16974
  $199 = $170; //@line 16974
 }
 $175 = $141 + $$sink484 | 0; //@line 16976
 if (($149 & 65535) > 510) {
  $177 = $178 | 2; //@line 16979
  SAFE_HEAP_STORE($148 | 0, $177 | 0, 2);
  $183 = $177; //@line 16981
 } else {
  $183 = $178; //@line 16983
 }
 $179 = SAFE_HEAP_LOAD($121 | 0, 4, 0) | 0 | 0; //@line 16985
 if (!($179 & 1)) {
  $188 = $183; //@line 16989
 } else {
  $182 = $183 | 8; //@line 16991
  SAFE_HEAP_STORE($148 | 0, $182 | 0, 2);
  $188 = $182; //@line 16993
 }
 if (!($179 & 256)) {
  $190 = $179; //@line 16998
  $193 = $188; //@line 16998
 } else {
  $186 = $179 | 1024; //@line 17000
  $187 = $188 | 16; //@line 17001
  SAFE_HEAP_STORE($148 | 0, $187 | 0, 2);
  SAFE_HEAP_STORE($121 | 0, $186 | 0, 4);
  $190 = $186; //@line 17004
  $193 = $187; //@line 17004
 }
 if (!($190 & 1024)) {
  SAFE_HEAP_STORE($148 | 0, $193 | 32 | 0, 2);
 }
 $196 = $175 + (($149 & 65535) << 1) | 0; //@line 17014
 $200 = _parser_generate_initializers($0, $196, $175, SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0, SAFE_HEAP_LOAD($3 | 0, 2, 0) | 0 | 0, $199, $$) | 0; //@line 17017
 $201 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0; //@line 17018
 L86 : do {
  if ($26 | ($201 | 0) != ($$0381 | 0)) {
   $203 = $$ & 65535; //@line 17023
   $$0428$ph531 = 0; //@line 17024
   $$0455$ph530 = $200; //@line 17024
   $$13$ph533 = $201; //@line 17024
   $$13396$ph532 = 0; //@line 17024
   while (1) {
    $$0428523 = $$0428$ph531; //@line 17026
    $$13396524 = $$13396$ph532; //@line 17026
    $$13525 = $$13$ph533; //@line 17026
    while (1) {
     $206 = $$13525 + 4 + $$13396524 | 0; //@line 17028
     $207 = SAFE_HEAP_LOAD($206 >> 0 | 0, 1, 0) | 0 | 0; //@line 17029
     if ($207 << 24 >> 24 == 1) {
      $$0425 = 4; //@line 17032
      $$14 = $$13525; //@line 17032
      $$1429 = $$0428523; //@line 17032
      $$14397 = $$13396524; //@line 17032
     } else {
      break;
     }
     while (1) {
      SAFE_HEAP_STORE($$14 + 4 + $$14397 >> 0 | 0, $$1429 | 0, 1);
      $210 = $$14397 + 1 | 0; //@line 17039
      if ($210 >>> 0 > 59) {
       $$15 = SAFE_HEAP_LOAD($$14 | 0, 4, 0) | 0 | 0; //@line 17043
       $$15398 = 0; //@line 17043
       $$2430 = 0; //@line 17043
      } else {
       $$15 = $$14; //@line 17045
       $$15398 = $210; //@line 17045
       $$2430 = $$1429; //@line 17045
      }
      $$0425 = $$0425 + -1 | 0; //@line 17047
      if (!$$0425) {
       break;
      } else {
       $$14 = $$15; //@line 17052
       $$1429 = $$2430; //@line 17052
       $$14397 = $$15398; //@line 17052
      }
     }
     if ($$15398 >>> 0 < $$0382 >>> 0 | ($$15 | 0) != ($$0381 | 0)) {
      $$0428523 = $$2430; //@line 17059
      $$13396524 = $$15398; //@line 17059
      $$13525 = $$15; //@line 17059
     } else {
      $$0455$ph$lcssa = $$0455$ph530; //@line 17061
      break L86;
     }
    }
    $215 = $207 & 255; //@line 17065
    $216 = $$0455$ph530 + 1 | 0; //@line 17066
    SAFE_HEAP_STORE($$0455$ph530 >> 0 | 0, $207 | 0, 1);
    $217 = $$0428523 + 1 << 24 >> 24; //@line 17068
    SAFE_HEAP_STORE($206 >> 0 | 0, $217 | 0, 1);
    $218 = $$13396524 + 1 | 0; //@line 17070
    if ($218 >>> 0 > 59) {
     $$16 = SAFE_HEAP_LOAD($$13525 | 0, 4, 0) | 0 | 0; //@line 17074
     $$16399 = 0; //@line 17074
     $$3431 = 0; //@line 17074
    } else {
     $$16 = $$13525; //@line 17076
     $$16399 = $218; //@line 17076
     $$3431 = $217; //@line 17076
    }
    $222 = SAFE_HEAP_LOAD(6556 + $215 >> 0 | 0, 1, 0) | 0 | 0; //@line 17079
    if (!($207 << 24 >> 24)) {
     $224 = $$16 + 4 + $$16399 | 0; //@line 17082
     $225 = SAFE_HEAP_LOAD($224 >> 0 | 0, 1, 0) | 0 | 0; //@line 17083
     $226 = $225 & 255; //@line 17084
     $228 = SAFE_HEAP_LOAD(6793 + $226 >> 0 | 0, 1, 0) | 0 | 0; //@line 17086
     $229 = $$0455$ph530 + 2 | 0; //@line 17087
     SAFE_HEAP_STORE($216 >> 0 | 0, $225 | 0, 1);
     $230 = $$3431 + 1 << 24 >> 24; //@line 17089
     SAFE_HEAP_STORE($224 >> 0 | 0, $230 | 0, 1);
     $231 = $$16399 + 1 | 0; //@line 17091
     if ($231 >>> 0 > 59) {
      $$0426$in = $226; //@line 17095
      $$0447 = $216; //@line 17095
      $$0448 = $228; //@line 17095
      $$1456 = $229; //@line 17095
      $$18 = SAFE_HEAP_LOAD($$16 | 0, 4, 0) | 0 | 0; //@line 17095
      $$18401 = 0; //@line 17095
      $$5433 = 0; //@line 17095
     } else {
      $$0426$in = $226; //@line 17097
      $$0447 = $216; //@line 17097
      $$0448 = $228; //@line 17097
      $$1456 = $229; //@line 17097
      $$18 = $$16; //@line 17097
      $$18401 = $231; //@line 17097
      $$5433 = $230; //@line 17097
     }
    } else {
     $$0426$in = $215; //@line 17100
     $$0447 = $$0455$ph530; //@line 17100
     $$0448 = $222; //@line 17100
     $$1456 = $216; //@line 17100
     $$18 = $$16; //@line 17100
     $$18401 = $$16399; //@line 17100
     $$5433 = $$3431; //@line 17100
    }
    $$0426 = $$0426$in & 3; //@line 17102
    if (!($$0448 & 8)) {
     $$1449 = $$0448; //@line 17106
     $$19 = $$18; //@line 17106
     $$19402 = $$18401; //@line 17106
     $$2457 = $$1456; //@line 17106
     $$6434 = $$5433; //@line 17106
    } else {
     SAFE_HEAP_STORE($206 >> 0 | 0, SAFE_HEAP_LOAD($206 >> 0 | 0, 1, 0) | 0 | -128 | 0, 1);
     $$1449 = $$0448; //@line 17111
     $$19 = $$18; //@line 17111
     $$19402 = $$18401; //@line 17111
     $$2457 = $$1456; //@line 17111
     $$6434 = $$5433; //@line 17111
    }
    while (1) {
     $238 = $$1449 & 255; //@line 17114
     if (!($238 & 3)) {
      $$10438 = $$6434; //@line 17118
      $$22 = $$19; //@line 17118
      $$22405 = $$19402; //@line 17118
      $$4459 = $$2457; //@line 17118
      break;
     }
     $241 = $$19 + 4 + $$19402 | 0; //@line 17121
     $242 = SAFE_HEAP_LOAD($241 >> 0 | 0, 1, 0) | 0 | 0; //@line 17122
     $243 = $$2457 + 1 | 0; //@line 17123
     SAFE_HEAP_STORE($$2457 >> 0 | 0, $242 | 0, 1);
     $244 = $$6434 + 1 << 24 >> 24; //@line 17125
     SAFE_HEAP_STORE($241 >> 0 | 0, $244 | 0, 1);
     $245 = $$19402 + 1 | 0; //@line 17127
     if ($245 >>> 0 > 59) {
      $$20 = SAFE_HEAP_LOAD($$19 | 0, 4, 0) | 0 | 0; //@line 17131
      $$20403 = 0; //@line 17131
      $$7435 = 0; //@line 17131
     } else {
      $$20 = $$19; //@line 17133
      $$20403 = $245; //@line 17133
      $$7435 = $244; //@line 17133
     }
     if (($242 & 255) >>> 0 > $203 >>> 0) {
      $252 = $$20 + 4 + $$20403 | 0; //@line 17140
      SAFE_HEAP_STORE($243 >> 0 | 0, SAFE_HEAP_LOAD($252 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
      $$3458 = $$2457 + 2 | 0; //@line 17143
      $$8436 = $$7435 + 1 << 24 >> 24; //@line 17143
      $$pre$phiZ2D = $252; //@line 17143
     } else {
      $$3458 = $243; //@line 17146
      $$8436 = $$7435; //@line 17146
      $$pre$phiZ2D = $$20 + 4 + $$20403 | 0; //@line 17146
     }
     SAFE_HEAP_STORE($$pre$phiZ2D >> 0 | 0, $$8436 | 0, 1);
     $254 = $$20403 + 1 | 0; //@line 17149
     if ($254 >>> 0 > 59) {
      $$21 = SAFE_HEAP_LOAD($$20 | 0, 4, 0) | 0 | 0; //@line 17153
      $$21404 = 0; //@line 17153
      $$9437 = 0; //@line 17153
     } else {
      $$21 = $$20; //@line 17155
      $$21404 = $254; //@line 17155
      $$9437 = $$8436; //@line 17155
     }
     if (!($238 & 2)) {
      $$10438 = $$9437; //@line 17164
      $$22 = $$21; //@line 17164
      $$22405 = $$21404; //@line 17164
      $$4459 = $$3458; //@line 17164
      break;
     } else {
      $$1449 = ($238 & 1) << 1 & 255 ^ 3; //@line 17167
      $$19 = $$21; //@line 17167
      $$19402 = $$21404; //@line 17167
      $$2457 = $$3458; //@line 17167
      $$6434 = $$9437; //@line 17167
     }
    }
    if (!($238 & 4)) {
     $$11439 = $$10438; //@line 17173
     $$23 = $$22; //@line 17173
     $$23406 = $$22405; //@line 17173
     $$5460 = $$4459; //@line 17173
    } else {
     $265 = $$22 + 4 + $$22405 | 0; //@line 17175
     $267 = $$4459 + 1 | 0; //@line 17177
     SAFE_HEAP_STORE($$4459 >> 0 | 0, SAFE_HEAP_LOAD($265 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
     $268 = $$10438 + 1 << 24 >> 24; //@line 17179
     SAFE_HEAP_STORE($265 >> 0 | 0, $268 | 0, 1);
     $269 = $$22405 + 1 | 0; //@line 17181
     if ($269 >>> 0 > 59) {
      $$11439 = 0; //@line 17185
      $$23 = SAFE_HEAP_LOAD($$22 | 0, 4, 0) | 0 | 0; //@line 17185
      $$23406 = 0; //@line 17185
      $$5460 = $267; //@line 17185
     } else {
      $$11439 = $268; //@line 17187
      $$23 = $$22; //@line 17187
      $$23406 = $269; //@line 17187
      $$5460 = $267; //@line 17187
     }
    }
    if (!($238 & 8)) {
     $$0428$ph$be = $$11439; //@line 17193
     $$0455$ph$be = $$5460; //@line 17193
     $$13$ph$be = $$23; //@line 17193
     $$13396$ph$be = $$23406; //@line 17193
    } else {
     $$0412$off0$ph = 1; //@line 17195
     $$12440$ph = $$11439; //@line 17195
     $$1427$ph = $$0426; //@line 17195
     $$24$ph = $$23; //@line 17195
     $$24407$ph = $$23406; //@line 17195
     $$6461$ph = $$5460; //@line 17195
     L127 : while (1) {
      $$0412$off0 = $$0412$off0$ph; //@line 17197
      $$12440 = $$12440$ph; //@line 17197
      $$1427 = $$1427$ph; //@line 17197
      $$24407 = $$24407$ph; //@line 17197
      $$6461 = $$6461$ph; //@line 17197
      while (1) {
       $$1427 = $$1427 + -1 | 0; //@line 17199
       $278 = $$24$ph + 4 + $$24407 | 0; //@line 17201
       $279 = SAFE_HEAP_LOAD($278 >> 0 | 0, 1, 0) | 0 | 0; //@line 17202
       if (!$$1427) {
        break L127;
       }
       if ($279 << 24 >> 24 != 0 | $$0412$off0 ^ 1) {
        SAFE_HEAP_STORE($$6461 >> 0 | 0, $279 | 0, 1);
        $$13441 = $$12440 + 1 << 24 >> 24; //@line 17213
        $$1413$off0 = 0; //@line 17213
        $$7462 = $$6461 + 1 | 0; //@line 17213
       } else {
        SAFE_HEAP_STORE($$0447 >> 0 | 0, (SAFE_HEAP_LOAD($$0447 >> 0 | 0, 1, 0) | 0 | 0) + -1 << 24 >> 24 | 0, 1);
        $$13441 = $$12440; //@line 17218
        $$1413$off0 = $$0412$off0; //@line 17218
        $$7462 = $$6461; //@line 17218
       }
       SAFE_HEAP_STORE($278 >> 0 | 0, $$13441 | 0, 1);
       $284 = $$24407 + 1 | 0; //@line 17221
       if ($284 >>> 0 > 59) {
        break;
       } else {
        $$0412$off0 = $$1413$off0; //@line 17226
        $$12440 = $$13441; //@line 17226
        $$24407 = $284; //@line 17226
        $$6461 = $$7462; //@line 17226
       }
      }
      $$0412$off0$ph = $$1413$off0; //@line 17230
      $$12440$ph = 0; //@line 17230
      $$1427$ph = $$1427; //@line 17230
      $$24$ph = SAFE_HEAP_LOAD($$24$ph | 0, 4, 0) | 0 | 0; //@line 17230
      $$24407$ph = 0; //@line 17230
      $$6461$ph = $$7462; //@line 17230
     }
     $287 = $$6461 + 1 | 0; //@line 17232
     SAFE_HEAP_STORE($$6461 >> 0 | 0, $279 | 0, 1);
     $288 = $$12440 + 1 << 24 >> 24; //@line 17234
     SAFE_HEAP_STORE($278 >> 0 | 0, $288 | 0, 1);
     $289 = $$24407 + 1 | 0; //@line 17236
     if ($289 >>> 0 > 59) {
      $$0428$ph$be = 0; //@line 17240
      $$0455$ph$be = $287; //@line 17240
      $$13$ph$be = SAFE_HEAP_LOAD($$24$ph | 0, 4, 0) | 0 | 0; //@line 17240
      $$13396$ph$be = 0; //@line 17240
     } else {
      $$0428$ph$be = $288; //@line 17242
      $$0455$ph$be = $287; //@line 17242
      $$13$ph$be = $$24$ph; //@line 17242
      $$13396$ph$be = $289; //@line 17242
     }
    }
    if ($$13396$ph$be >>> 0 < $$0382 >>> 0 | ($$13$ph$be | 0) != ($$0381 | 0)) {
     $$0428$ph531 = $$0428$ph$be; //@line 17249
     $$0455$ph530 = $$0455$ph$be; //@line 17249
     $$13$ph533 = $$13$ph$be; //@line 17249
     $$13396$ph532 = $$13396$ph$be; //@line 17249
    } else {
     $$0455$ph$lcssa = $$0455$ph$be; //@line 17251
     break;
    }
   }
  } else {
   $$0455$ph$lcssa = $200; //@line 17256
  }
 } while (0);
 if (!((SAFE_HEAP_LOAD($121 | 0, 4, 0) | 0) & 65536)) {
  SAFE_HEAP_STORE($$0455$ph$lcssa >> 0 | 0, 70 | 0, 1);
 }
 _parse_update_branches($0, $196 + $14 | 0); //@line 17266
 _parser_cbc_stream_free($18); //@line 17267
 $296 = SAFE_HEAP_LOAD($121 | 0, 4, 0) | 0 | 0; //@line 17268
 if (!($296 & 32768)) {
  $321 = $296; //@line 17272
 } else {
  _parser_list_iterator_init($0 + 264 | 0, $5); //@line 17275
  $300 = _parser_list_iterator_next($5) | 0; //@line 17276
  if ($300 | 0) {
   $302 = $0 + 220 | 0; //@line 17279
   $304 = $300; //@line 17280
   do {
    if ((SAFE_HEAP_LOAD($304 + 7 >> 0 | 0, 1, 0) | 0 | 0) < 0) {
     $307 = SAFE_HEAP_LOAD($304 | 0, 4, 0) | 0 | 0; //@line 17286
     $313 = _ecma_find_or_create_literal_string((SAFE_HEAP_LOAD($302 | 0, 4, 0) | 0 | 0) + (0 - ($307 & 1048575)) | 0, $307 >>> 20) | 0; //@line 17292
     SAFE_HEAP_STORE($175 + ((SAFE_HEAP_LOAD($304 + 4 | 0, 2, 1) | 0) << 1) | 0, $313 | 0, 2);
    }
    $304 = _parser_list_iterator_next($5) | 0; //@line 17299
   } while (($304 | 0) != 0);
  }
  $321 = SAFE_HEAP_LOAD($121 | 0, 4, 0) | 0 | 0; //@line 17309
 }
 if (($321 & 257 | 0) == 256) {
  $323 = $0 + 264 | 0; //@line 17314
  _parser_list_iterator_init($323, $5); //@line 17315
  $$0377$ph = 0; //@line 17316
  L157 : while (1) {
   do {
    if (($$0377$ph & 65535) >= (SAFE_HEAP_LOAD($153 | 0, 2, 1) | 0 | 0)) {
     break L157;
    }
    $326 = _parser_list_iterator_next($5) | 0; //@line 17324
   } while (!((SAFE_HEAP_LOAD($326 + 7 >> 0 | 0, 1, 0) | 0) & 16));
   $331 = $$0377$ph & 65535; //@line 17333
   if ((SAFE_HEAP_LOAD($326 + 6 >> 0 | 0, 1, 0) | 0 | 0) == 5) {
    if (!(SAFE_HEAP_LOAD($326 | 0, 4, 0) | 0)) {
     $$sink491 = 0; //@line 17341
    } else {
     $$0$in = _parser_list_get($323, SAFE_HEAP_LOAD($326 + 4 | 0, 2, 1) | 0 | 0) | 0; //@line 17347
     label = 114; //@line 17348
    }
   } else {
    $$0$in = $326; //@line 17351
    label = 114; //@line 17352
   }
   if ((label | 0) == 114) {
    label = 0; //@line 17355
    $$sink491 = SAFE_HEAP_LOAD($175 + ((SAFE_HEAP_LOAD($$0$in + 4 | 0, 2, 1) | 0) << 1) | 0, 2, 0) | 0 | 0; //@line 17361
   }
   SAFE_HEAP_STORE($175 + ($331 << 1) | 0, $$sink491 | 0, 2);
   $$0377$ph = $$0377$ph + 1 << 16 >> 16; //@line 17366
  }
  $349 = SAFE_HEAP_LOAD($121 | 0, 4, 0) | 0 | 0; //@line 17369
 } else {
  $349 = $321; //@line 17371
 }
 if ($349 & 64 | 0) {
  $351 = _jmem_compress_pointer($141) | 0; //@line 17376
  SAFE_HEAP_STORE($175 + ((SAFE_HEAP_LOAD($4 | 0, 2, 1) | 0) << 1) | 0, $351 | 0, 2);
 }
 STACKTOP = sp; //@line 17382
 return $141 | 0; //@line 17382
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484692 = 0, $$$4502 = 0, $$$559 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463584 = 0, $$0464594 = 0, $$0471 = 0.0, $$0479 = 0, $$0487642 = 0, $$0488653 = 0, $$0488655 = 0, $$0496$$9 = 0, $$0497654 = 0, $$0498 = 0, $$0509582 = 0.0, $$0511 = 0, $$0514637 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527629 = 0, $$0527631 = 0, $$0530636 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482661 = 0, $$1489641 = 0, $$1499$lcssa = 0, $$1499660 = 0, $$1508583 = 0, $$1512$lcssa = 0, $$1512607 = 0, $$1515 = 0, $$1524 = 0, $$1528614 = 0, $$1531$lcssa = 0, $$1531630 = 0, $$1598 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516618 = 0, $$2529 = 0, $$2532617 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484648 = 0, $$3501$lcssa = 0, $$3501647 = 0, $$3533613 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478590 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$539 = 0, $$539$ = 0, $$542 = 0.0, $$546 = 0, $$548 = 0, $$5486$lcssa = 0, $$5486623 = 0, $$5493597 = 0, $$5519$ph = 0, $$556 = 0, $$5602 = 0, $$6 = 0, $$6494589 = 0, $$7495601 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa673 = 0, $$pn = 0, $$pn566 = 0, $$pr = 0, $$pr564 = 0, $$pre$phi690Z2D = 0, $$sink545$lcssa = 0, $$sink545622 = 0, $$sink562 = 0, $10 = 0, $100 = 0, $104 = 0, $11 = 0, $111 = 0, $114 = 0, $121 = 0, $123 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $136 = 0, $138 = 0, $142 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $152 = 0, $158 = 0, $159 = 0, $160 = 0, $172 = 0, $183 = 0, $187 = 0, $188 = 0, $191 = 0, $196 = 0, $197 = 0, $199 = 0, $207 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $215 = 0, $218 = 0, $222 = 0, $227 = 0, $230 = 0, $233 = 0, $235 = 0, $237 = 0, $239 = 0, $244 = 0, $245 = 0, $248 = 0, $250 = 0, $253 = 0, $256 = 0, $264 = 0, $267 = 0, $272 = 0, $28 = 0, $281 = 0, $282 = 0, $286 = 0, $289 = 0, $291 = 0, $293 = 0, $297 = 0, $300 = 0, $301 = 0, $305 = 0, $315 = 0, $32 = 0, $320 = 0, $323 = 0, $324 = 0, $325 = 0, $327 = 0, $332 = 0, $344 = 0, $348 = 0, $353 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $366 = 0, $37 = 0, $370 = 0, $372 = 0, $375 = 0, $378 = 0, $40 = 0, $42 = 0, $45 = 0, $47 = 0, $6 = 0, $61 = 0, $64 = 0, $67 = 0, $69 = 0, $7 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, $99 = 0, $notrhs = 0, sp = 0;
 sp = STACKTOP; //@line 4049
 STACKTOP = STACKTOP + 560 | 0; //@line 4050
 $6 = sp + 8 | 0; //@line 4051
 $7 = sp; //@line 4052
 $8 = sp + 524 | 0; //@line 4053
 $9 = $8; //@line 4054
 $10 = sp + 512 | 0; //@line 4055
 SAFE_HEAP_STORE($7 | 0, 0 | 0, 4);
 $11 = $10 + 12 | 0; //@line 4057
 ___DOUBLE_BITS_661($1) | 0; //@line 4058
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 4063
  $$0520 = 1; //@line 4063
  $$0521 = 10125; //@line 4063
 } else {
  $$0471 = $1; //@line 4074
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 4074
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 10126 : 10131 : 10128; //@line 4074
 }
 ___DOUBLE_BITS_661($$0471) | 0; //@line 4076
 $21 = tempRet0 & 2146435072; //@line 4078
 do {
  if ($21 >>> 0 < 2146435072 | ($21 | 0) == 2146435072 & 0 < 0) {
   $36 = +_frexpl($$0471, $7) * 2.0; //@line 4087
   $37 = $36 != 0.0; //@line 4088
   if ($37) {
    SAFE_HEAP_STORE($7 | 0, (SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0) + -1 | 0, 4);
   }
   $40 = $5 | 32; //@line 4094
   if (($40 | 0) == 97) {
    $42 = $5 & 32; //@line 4097
    $$0521$ = ($42 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 4100
    $45 = $$0520 | 2; //@line 4101
    $47 = 12 - $3 | 0; //@line 4103
    do {
     if ($3 >>> 0 > 11 | ($47 | 0) == 0) {
      $$1472 = $36; //@line 4108
     } else {
      $$0509582 = 8.0; //@line 4110
      $$1508583 = $47; //@line 4110
      do {
       $$1508583 = $$1508583 + -1 | 0; //@line 4112
       $$0509582 = $$0509582 * 16.0; //@line 4113
      } while (($$1508583 | 0) != 0);
      if ((SAFE_HEAP_LOAD($$0521$ >> 0 | 0, 1, 0) | 0 | 0) == 45) {
       $$1472 = -($$0509582 + (-$36 - $$0509582)); //@line 4128
       break;
      } else {
       $$1472 = $36 + $$0509582 - $$0509582; //@line 4133
       break;
      }
     }
    } while (0);
    $61 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0; //@line 4138
    $64 = ($61 | 0) < 0 ? 0 - $61 | 0 : $61; //@line 4141
    $67 = _fmt_u($64, (($64 | 0) < 0) << 31 >> 31, $11) | 0; //@line 4144
    if (($67 | 0) == ($11 | 0)) {
     $69 = $10 + 11 | 0; //@line 4147
     SAFE_HEAP_STORE($69 >> 0 | 0, 48 | 0, 1);
     $$0511 = $69; //@line 4149
    } else {
     $$0511 = $67; //@line 4151
    }
    SAFE_HEAP_STORE($$0511 + -1 >> 0 | 0, ($61 >> 31 & 2) + 43 | 0, 1);
    $77 = $$0511 + -2 | 0; //@line 4161
    SAFE_HEAP_STORE($77 >> 0 | 0, $5 + 15 | 0, 1);
    $notrhs = ($3 | 0) < 1; //@line 4163
    $79 = ($4 & 8 | 0) == 0; //@line 4165
    $$0523 = $8; //@line 4166
    $$2473 = $$1472; //@line 4166
    while (1) {
     $80 = ~~$$2473; //@line 4168
     $86 = $$0523 + 1 | 0; //@line 4174
     SAFE_HEAP_STORE($$0523 >> 0 | 0, SAFE_HEAP_LOAD(10160 + $80 >> 0 | 0, 1, 1) | 0 | $42 | 0, 1);
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 4178
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($notrhs & $$2473 == 0.0)) {
       $$1524 = $86; //@line 4187
      } else {
       SAFE_HEAP_STORE($86 >> 0 | 0, 46 | 0, 1);
       $$1524 = $$0523 + 2 | 0; //@line 4191
      }
     } else {
      $$1524 = $86; //@line 4194
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 4198
     }
    }
    $99 = $$1524 - $9 | 0; //@line 4207
    $100 = $11 - $77 | 0; //@line 4208
    $$pn = ($3 | 0) != 0 & ($99 + -2 | 0) < ($3 | 0) ? $3 + 2 | 0 : $99; //@line 4213
    $104 = $100 + $45 + $$pn | 0; //@line 4215
    _pad_660($0, 32, $2, $104, $4); //@line 4216
    _out($0, $$0521$, $45); //@line 4217
    _pad_660($0, 48, $2, $104, $4 ^ 65536); //@line 4219
    _out($0, $8, $99); //@line 4220
    _pad_660($0, 48, $$pn - $99 | 0, 0, 0); //@line 4222
    _out($0, $77, $100); //@line 4223
    _pad_660($0, 32, $2, $104, $4 ^ 8192); //@line 4225
    $$sink562 = $104; //@line 4226
    break;
   }
   $$539 = ($3 | 0) < 0 ? 6 : $3; //@line 4230
   if ($37) {
    $111 = (SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0) + -28 | 0; //@line 4234
    SAFE_HEAP_STORE($7 | 0, $111 | 0, 4);
    $$3 = $36 * 268435456.0; //@line 4236
    $$pr = $111; //@line 4236
   } else {
    $$3 = $36; //@line 4239
    $$pr = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0; //@line 4239
   }
   $$556 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 4243
   $$0498 = $$556; //@line 4244
   $$4 = $$3; //@line 4244
   do {
    $114 = ~~$$4 >>> 0; //@line 4246
    SAFE_HEAP_STORE($$0498 | 0, $114 | 0, 4);
    $$0498 = $$0498 + 4 | 0; //@line 4248
    $$4 = ($$4 - +($114 >>> 0)) * 1.0e9; //@line 4251
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482661 = $$556; //@line 4261
    $$1499660 = $$0498; //@line 4261
    $121 = $$pr; //@line 4261
    while (1) {
     $123 = ($121 | 0) < 29 ? $121 : 29; //@line 4264
     $$0488653 = $$1499660 + -4 | 0; //@line 4265
     if ($$0488653 >>> 0 < $$1482661 >>> 0) {
      $$2483$ph = $$1482661; //@line 4268
     } else {
      $$0488655 = $$0488653; //@line 4270
      $$0497654 = 0; //@line 4270
      do {
       $126 = _bitshift64Shl(SAFE_HEAP_LOAD($$0488655 | 0, 4, 0) | 0 | 0, 0, $123 | 0) | 0; //@line 4273
       $128 = _i64Add($126 | 0, tempRet0 | 0, $$0497654 | 0, 0) | 0; //@line 4275
       $129 = tempRet0; //@line 4276
       $130 = ___uremdi3($128 | 0, $129 | 0, 1e9, 0) | 0; //@line 4277
       SAFE_HEAP_STORE($$0488655 | 0, $130 | 0, 4);
       $$0497654 = ___udivdi3($128 | 0, $129 | 0, 1e9, 0) | 0; //@line 4280
       $$0488655 = $$0488655 + -4 | 0; //@line 4282
      } while ($$0488655 >>> 0 >= $$1482661 >>> 0);
      if (!$$0497654) {
       $$2483$ph = $$1482661; //@line 4292
      } else {
       $136 = $$1482661 + -4 | 0; //@line 4294
       SAFE_HEAP_STORE($136 | 0, $$0497654 | 0, 4);
       $$2483$ph = $136; //@line 4296
      }
     }
     $$2500 = $$1499660; //@line 4299
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $138 = $$2500 + -4 | 0; //@line 4305
      if (!(SAFE_HEAP_LOAD($138 | 0, 4, 0) | 0)) {
       $$2500 = $138; //@line 4309
      } else {
       break;
      }
     }
     $142 = (SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0) - $123 | 0; //@line 4315
     SAFE_HEAP_STORE($7 | 0, $142 | 0, 4);
     if (($142 | 0) > 0) {
      $$1482661 = $$2483$ph; //@line 4319
      $$1499660 = $$2500; //@line 4319
      $121 = $142; //@line 4319
     } else {
      $$1482$lcssa = $$2483$ph; //@line 4321
      $$1499$lcssa = $$2500; //@line 4321
      $$pr564 = $142; //@line 4321
      break;
     }
    }
   } else {
    $$1482$lcssa = $$556; //@line 4326
    $$1499$lcssa = $$0498; //@line 4326
    $$pr564 = $$pr; //@line 4326
   }
   if (($$pr564 | 0) < 0) {
    $147 = (($$539 + 25 | 0) / 9 | 0) + 1 | 0; //@line 4332
    $148 = ($40 | 0) == 102; //@line 4333
    $$3484648 = $$1482$lcssa; //@line 4334
    $$3501647 = $$1499$lcssa; //@line 4334
    $150 = $$pr564; //@line 4334
    while (1) {
     $149 = 0 - $150 | 0; //@line 4336
     $152 = ($149 | 0) < 9 ? $149 : 9; //@line 4338
     if ($$3484648 >>> 0 < $$3501647 >>> 0) {
      $158 = (1 << $152) + -1 | 0; //@line 4342
      $159 = 1e9 >>> $152; //@line 4343
      $$0487642 = 0; //@line 4344
      $$1489641 = $$3484648; //@line 4344
      do {
       $160 = SAFE_HEAP_LOAD($$1489641 | 0, 4, 0) | 0 | 0; //@line 4346
       SAFE_HEAP_STORE($$1489641 | 0, ($160 >>> $152) + $$0487642 | 0, 4);
       $$0487642 = Math_imul($160 & $158, $159) | 0; //@line 4351
       $$1489641 = $$1489641 + 4 | 0; //@line 4352
      } while ($$1489641 >>> 0 < $$3501647 >>> 0);
      $$$3484 = (SAFE_HEAP_LOAD($$3484648 | 0, 4, 0) | 0 | 0) == 0 ? $$3484648 + 4 | 0 : $$3484648; //@line 4363
      if (!$$0487642) {
       $$$3484692 = $$$3484; //@line 4366
       $$4502 = $$3501647; //@line 4366
      } else {
       SAFE_HEAP_STORE($$3501647 | 0, $$0487642 | 0, 4);
       $$$3484692 = $$$3484; //@line 4370
       $$4502 = $$3501647 + 4 | 0; //@line 4370
      }
     } else {
      $$$3484692 = (SAFE_HEAP_LOAD($$3484648 | 0, 4, 0) | 0 | 0) == 0 ? $$3484648 + 4 | 0 : $$3484648; //@line 4377
      $$4502 = $$3501647; //@line 4377
     }
     $172 = $148 ? $$556 : $$$3484692; //@line 4379
     $$$4502 = ($$4502 - $172 >> 2 | 0) > ($147 | 0) ? $172 + ($147 << 2) | 0 : $$4502; //@line 4386
     $150 = (SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0) + $152 | 0; //@line 4388
     SAFE_HEAP_STORE($7 | 0, $150 | 0, 4);
     if (($150 | 0) >= 0) {
      $$3484$lcssa = $$$3484692; //@line 4394
      $$3501$lcssa = $$$4502; //@line 4394
      break;
     } else {
      $$3484648 = $$$3484692; //@line 4392
      $$3501647 = $$$4502; //@line 4392
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 4399
    $$3501$lcssa = $$1499$lcssa; //@line 4399
   }
   $183 = $$556; //@line 4402
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $187 = ($183 - $$3484$lcssa >> 2) * 9 | 0; //@line 4407
    $188 = SAFE_HEAP_LOAD($$3484$lcssa | 0, 4, 0) | 0 | 0; //@line 4408
    if ($188 >>> 0 < 10) {
     $$1515 = $187; //@line 4411
    } else {
     $$0514637 = $187; //@line 4413
     $$0530636 = 10; //@line 4413
     while (1) {
      $$0530636 = $$0530636 * 10 | 0; //@line 4415
      $191 = $$0514637 + 1 | 0; //@line 4416
      if ($188 >>> 0 < $$0530636 >>> 0) {
       $$1515 = $191; //@line 4419
       break;
      } else {
       $$0514637 = $191; //@line 4422
      }
     }
    }
   } else {
    $$1515 = 0; //@line 4427
   }
   $196 = ($40 | 0) == 103; //@line 4432
   $197 = ($$539 | 0) != 0; //@line 4433
   $199 = $$539 - (($40 | 0) != 102 ? $$1515 : 0) + (($197 & $196) << 31 >> 31) | 0; //@line 4436
   if (($199 | 0) < ((($$3501$lcssa - $183 >> 2) * 9 | 0) + -9 | 0)) {
    $207 = $199 + 9216 | 0; //@line 4445
    $210 = $$556 + 4 + ((($207 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 4448
    $$0527629 = (($207 | 0) % 9 | 0) + 1 | 0; //@line 4450
    if (($$0527629 | 0) < 9) {
     $$0527631 = $$0527629; //@line 4453
     $$1531630 = 10; //@line 4453
     while (1) {
      $213 = $$1531630 * 10 | 0; //@line 4455
      $$0527631 = $$0527631 + 1 | 0; //@line 4456
      if (($$0527631 | 0) == 9) {
       $$1531$lcssa = $213; //@line 4459
       break;
      } else {
       $$1531630 = $213; //@line 4462
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 4466
    }
    $214 = SAFE_HEAP_LOAD($210 | 0, 4, 0) | 0 | 0; //@line 4468
    $215 = ($214 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 4469
    $218 = ($210 + 4 | 0) == ($$3501$lcssa | 0); //@line 4472
    if ($218 & ($215 | 0) == 0) {
     $$4492 = $210; //@line 4475
     $$4518 = $$1515; //@line 4475
     $$8 = $$3484$lcssa; //@line 4475
    } else {
     $$542 = ((($214 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 4480
     $222 = ($$1531$lcssa | 0) / 2 | 0; //@line 4481
     $$$559 = $215 >>> 0 < $222 >>> 0 ? .5 : $218 & ($215 | 0) == ($222 | 0) ? 1.0 : 1.5; //@line 4486
     if (!$$0520) {
      $$1467 = $$$559; //@line 4489
      $$1469 = $$542; //@line 4489
     } else {
      $227 = (SAFE_HEAP_LOAD($$0521 >> 0 | 0, 1, 0) | 0 | 0) == 45; //@line 4492
      $$1467 = $227 ? -$$$559 : $$$559; //@line 4497
      $$1469 = $227 ? -$$542 : $$542; //@line 4497
     }
     $230 = $214 - $215 | 0; //@line 4499
     SAFE_HEAP_STORE($210 | 0, $230 | 0, 4);
     if ($$1469 + $$1467 != $$1469) {
      $233 = $230 + $$1531$lcssa | 0; //@line 4504
      SAFE_HEAP_STORE($210 | 0, $233 | 0, 4);
      if ($233 >>> 0 > 999999999) {
       $$5486623 = $$3484$lcssa; //@line 4508
       $$sink545622 = $210; //@line 4508
       while (1) {
        $235 = $$sink545622 + -4 | 0; //@line 4510
        SAFE_HEAP_STORE($$sink545622 | 0, 0 | 0, 4);
        if ($235 >>> 0 < $$5486623 >>> 0) {
         $237 = $$5486623 + -4 | 0; //@line 4514
         SAFE_HEAP_STORE($237 | 0, 0 | 0, 4);
         $$6 = $237; //@line 4516
        } else {
         $$6 = $$5486623; //@line 4518
        }
        $239 = (SAFE_HEAP_LOAD($235 | 0, 4, 0) | 0 | 0) + 1 | 0; //@line 4521
        SAFE_HEAP_STORE($235 | 0, $239 | 0, 4);
        if ($239 >>> 0 > 999999999) {
         $$5486623 = $$6; //@line 4525
         $$sink545622 = $235; //@line 4525
        } else {
         $$5486$lcssa = $$6; //@line 4527
         $$sink545$lcssa = $235; //@line 4527
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 4532
       $$sink545$lcssa = $210; //@line 4532
      }
      $244 = ($183 - $$5486$lcssa >> 2) * 9 | 0; //@line 4537
      $245 = SAFE_HEAP_LOAD($$5486$lcssa | 0, 4, 0) | 0 | 0; //@line 4538
      if ($245 >>> 0 < 10) {
       $$4492 = $$sink545$lcssa; //@line 4541
       $$4518 = $244; //@line 4541
       $$8 = $$5486$lcssa; //@line 4541
      } else {
       $$2516618 = $244; //@line 4543
       $$2532617 = 10; //@line 4543
       while (1) {
        $$2532617 = $$2532617 * 10 | 0; //@line 4545
        $248 = $$2516618 + 1 | 0; //@line 4546
        if ($245 >>> 0 < $$2532617 >>> 0) {
         $$4492 = $$sink545$lcssa; //@line 4549
         $$4518 = $248; //@line 4549
         $$8 = $$5486$lcssa; //@line 4549
         break;
        } else {
         $$2516618 = $248; //@line 4552
        }
       }
      }
     } else {
      $$4492 = $210; //@line 4557
      $$4518 = $$1515; //@line 4557
      $$8 = $$3484$lcssa; //@line 4557
     }
    }
    $250 = $$4492 + 4 | 0; //@line 4560
    $$5519$ph = $$4518; //@line 4563
    $$7505$ph = $$3501$lcssa >>> 0 > $250 >>> 0 ? $250 : $$3501$lcssa; //@line 4563
    $$9$ph = $$8; //@line 4563
   } else {
    $$5519$ph = $$1515; //@line 4565
    $$7505$ph = $$3501$lcssa; //@line 4565
    $$9$ph = $$3484$lcssa; //@line 4565
   }
   $$7505 = $$7505$ph; //@line 4567
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa673 = 0; //@line 4571
     break;
    }
    $253 = $$7505 + -4 | 0; //@line 4574
    if (!(SAFE_HEAP_LOAD($253 | 0, 4, 0) | 0)) {
     $$7505 = $253; //@line 4578
    } else {
     $$lcssa673 = 1; //@line 4580
     break;
    }
   }
   $256 = 0 - $$5519$ph | 0; //@line 4584
   do {
    if ($196) {
     $$539$ = (($197 ^ 1) & 1) + $$539 | 0; //@line 4589
     if (($$539$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 4597
      $$2476 = $$539$ + -1 - $$5519$ph | 0; //@line 4597
     } else {
      $$0479 = $5 + -2 | 0; //@line 4601
      $$2476 = $$539$ + -1 | 0; //@line 4601
     }
     $264 = $4 & 8; //@line 4603
     if (!$264) {
      if ($$lcssa673) {
       $267 = SAFE_HEAP_LOAD($$7505 + -4 | 0, 4, 0) | 0 | 0; //@line 4608
       if (!$267) {
        $$2529 = 9; //@line 4611
       } else {
        if (!(($267 >>> 0) % 10 | 0)) {
         $$1528614 = 0; //@line 4616
         $$3533613 = 10; //@line 4616
         while (1) {
          $$3533613 = $$3533613 * 10 | 0; //@line 4618
          $272 = $$1528614 + 1 | 0; //@line 4619
          if (($267 >>> 0) % ($$3533613 >>> 0) | 0 | 0) {
           $$2529 = $272; //@line 4625
           break;
          } else {
           $$1528614 = $272; //@line 4623
          }
         }
        } else {
         $$2529 = 0; //@line 4630
        }
       }
      } else {
       $$2529 = 9; //@line 4634
      }
      $281 = (($$7505 - $183 >> 2) * 9 | 0) + -9 | 0; //@line 4642
      if (($$0479 | 32 | 0) == 102) {
       $282 = $281 - $$2529 | 0; //@line 4644
       $$546 = ($282 | 0) > 0 ? $282 : 0; //@line 4646
       $$1480 = $$0479; //@line 4649
       $$3477 = ($$2476 | 0) < ($$546 | 0) ? $$2476 : $$546; //@line 4649
       $$pre$phi690Z2D = 0; //@line 4649
       break;
      } else {
       $286 = $281 + $$5519$ph - $$2529 | 0; //@line 4653
       $$548 = ($286 | 0) > 0 ? $286 : 0; //@line 4655
       $$1480 = $$0479; //@line 4658
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 4658
       $$pre$phi690Z2D = 0; //@line 4658
       break;
      }
     } else {
      $$1480 = $$0479; //@line 4662
      $$3477 = $$2476; //@line 4662
      $$pre$phi690Z2D = $264; //@line 4662
     }
    } else {
     $$1480 = $5; //@line 4666
     $$3477 = $$539; //@line 4666
     $$pre$phi690Z2D = $4 & 8; //@line 4666
    }
   } while (0);
   $289 = $$3477 | $$pre$phi690Z2D; //@line 4669
   $291 = ($289 | 0) != 0 & 1; //@line 4671
   $293 = ($$1480 | 32 | 0) == 102; //@line 4673
   if ($293) {
    $$2513 = 0; //@line 4677
    $$pn566 = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 4677
   } else {
    $297 = ($$5519$ph | 0) < 0 ? $256 : $$5519$ph; //@line 4680
    $300 = _fmt_u($297, (($297 | 0) < 0) << 31 >> 31, $11) | 0; //@line 4683
    $301 = $11; //@line 4684
    if (($301 - $300 | 0) < 2) {
     $$1512607 = $300; //@line 4689
     while (1) {
      $305 = $$1512607 + -1 | 0; //@line 4691
      SAFE_HEAP_STORE($305 >> 0 | 0, 48 | 0, 1);
      if (($301 - $305 | 0) < 2) {
       $$1512607 = $305; //@line 4697
      } else {
       $$1512$lcssa = $305; //@line 4699
       break;
      }
     }
    } else {
     $$1512$lcssa = $300; //@line 4704
    }
    SAFE_HEAP_STORE($$1512$lcssa + -1 >> 0 | 0, ($$5519$ph >> 31 & 2) + 43 | 0, 1);
    $315 = $$1512$lcssa + -2 | 0; //@line 4713
    SAFE_HEAP_STORE($315 >> 0 | 0, $$1480 | 0, 1);
    $$2513 = $315; //@line 4717
    $$pn566 = $301 - $315 | 0; //@line 4717
   }
   $320 = $$0520 + 1 + $$3477 + $291 + $$pn566 | 0; //@line 4722
   _pad_660($0, 32, $2, $320, $4); //@line 4723
   _out($0, $$0521, $$0520); //@line 4724
   _pad_660($0, 48, $2, $320, $4 ^ 65536); //@line 4726
   if ($293) {
    $$0496$$9 = $$9$ph >>> 0 > $$556 >>> 0 ? $$556 : $$9$ph; //@line 4729
    $323 = $8 + 9 | 0; //@line 4730
    $324 = $323; //@line 4731
    $325 = $8 + 8 | 0; //@line 4732
    $$5493597 = $$0496$$9; //@line 4733
    do {
     $327 = _fmt_u(SAFE_HEAP_LOAD($$5493597 | 0, 4, 0) | 0 | 0, 0, $323) | 0; //@line 4736
     if (($$5493597 | 0) == ($$0496$$9 | 0)) {
      if (($327 | 0) == ($323 | 0)) {
       SAFE_HEAP_STORE($325 >> 0 | 0, 48 | 0, 1);
       $$1465 = $325; //@line 4742
      } else {
       $$1465 = $327; //@line 4744
      }
     } else {
      if ($327 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $327 - $9 | 0) | 0; //@line 4751
       $$0464594 = $327; //@line 4752
       while (1) {
        $332 = $$0464594 + -1 | 0; //@line 4754
        if ($332 >>> 0 > $8 >>> 0) {
         $$0464594 = $332; //@line 4757
        } else {
         $$1465 = $332; //@line 4759
         break;
        }
       }
      } else {
       $$1465 = $327; //@line 4764
      }
     }
     _out($0, $$1465, $324 - $$1465 | 0); //@line 4769
     $$5493597 = $$5493597 + 4 | 0; //@line 4770
    } while ($$5493597 >>> 0 <= $$556 >>> 0);
    if ($289 | 0) {
     _out($0, 10176, 1); //@line 4780
    }
    if ($$5493597 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478590 = $$3477; //@line 4786
     $$6494589 = $$5493597; //@line 4786
     while (1) {
      $344 = _fmt_u(SAFE_HEAP_LOAD($$6494589 | 0, 4, 0) | 0 | 0, 0, $323) | 0; //@line 4789
      if ($344 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $344 - $9 | 0) | 0; //@line 4794
       $$0463584 = $344; //@line 4795
       while (1) {
        $348 = $$0463584 + -1 | 0; //@line 4797
        if ($348 >>> 0 > $8 >>> 0) {
         $$0463584 = $348; //@line 4800
        } else {
         $$0463$lcssa = $348; //@line 4802
         break;
        }
       }
      } else {
       $$0463$lcssa = $344; //@line 4807
      }
      _out($0, $$0463$lcssa, ($$4478590 | 0) < 9 ? $$4478590 : 9); //@line 4811
      $$6494589 = $$6494589 + 4 | 0; //@line 4812
      $353 = $$4478590 + -9 | 0; //@line 4813
      if (!($$6494589 >>> 0 < $$7505 >>> 0 & ($$4478590 | 0) > 9)) {
       $$4478$lcssa = $353; //@line 4820
       break;
      } else {
       $$4478590 = $353; //@line 4818
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 4825
    }
    _pad_660($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 4828
   } else {
    $$7505$ = $$lcssa673 ? $$7505 : $$9$ph + 4 | 0; //@line 4831
    if (($$3477 | 0) > -1) {
     $360 = $8 + 9 | 0; //@line 4834
     $361 = ($$pre$phi690Z2D | 0) == 0; //@line 4835
     $362 = $360; //@line 4836
     $363 = 0 - $9 | 0; //@line 4837
     $364 = $8 + 8 | 0; //@line 4838
     $$5602 = $$3477; //@line 4839
     $$7495601 = $$9$ph; //@line 4839
     while (1) {
      $366 = _fmt_u(SAFE_HEAP_LOAD($$7495601 | 0, 4, 0) | 0 | 0, 0, $360) | 0; //@line 4842
      if (($366 | 0) == ($360 | 0)) {
       SAFE_HEAP_STORE($364 >> 0 | 0, 48 | 0, 1);
       $$0 = $364; //@line 4846
      } else {
       $$0 = $366; //@line 4848
      }
      do {
       if (($$7495601 | 0) == ($$9$ph | 0)) {
        $372 = $$0 + 1 | 0; //@line 4853
        _out($0, $$0, 1); //@line 4854
        if ($361 & ($$5602 | 0) < 1) {
         $$2 = $372; //@line 4858
         break;
        }
        _out($0, 10176, 1); //@line 4861
        $$2 = $372; //@line 4862
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 4866
         break;
        }
        _memset($8 | 0, 48, $$0 + $363 | 0) | 0; //@line 4871
        $$1598 = $$0; //@line 4872
        while (1) {
         $370 = $$1598 + -1 | 0; //@line 4874
         if ($370 >>> 0 > $8 >>> 0) {
          $$1598 = $370; //@line 4877
         } else {
          $$2 = $370; //@line 4879
          break;
         }
        }
       }
      } while (0);
      $375 = $362 - $$2 | 0; //@line 4886
      _out($0, $$2, ($$5602 | 0) > ($375 | 0) ? $375 : $$5602); //@line 4889
      $378 = $$5602 - $375 | 0; //@line 4890
      $$7495601 = $$7495601 + 4 | 0; //@line 4891
      if (!($$7495601 >>> 0 < $$7505$ >>> 0 & ($378 | 0) > -1)) {
       $$5$lcssa = $378; //@line 4898
       break;
      } else {
       $$5602 = $378; //@line 4896
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 4903
    }
    _pad_660($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 4906
    _out($0, $$2513, $11 - $$2513 | 0); //@line 4910
   }
   _pad_660($0, 32, $2, $320, $4 ^ 8192); //@line 4913
   $$sink562 = $320; //@line 4914
  } else {
   $28 = ($5 & 32 | 0) != 0; //@line 4917
   $32 = $$0520 + 3 | 0; //@line 4922
   _pad_660($0, 32, $2, $32, $4 & -65537); //@line 4924
   _out($0, $$0521, $$0520); //@line 4925
   _out($0, $$0471 != $$0471 | 0.0 != 0.0 ? $28 ? 10152 : 10156 : $28 ? 10144 : 10148, 3); //@line 4926
   _pad_660($0, 32, $2, $32, $4 ^ 8192); //@line 4928
   $$sink562 = $32; //@line 4929
  }
 } while (0);
 STACKTOP = sp; //@line 4934
 return (($$sink562 | 0) < ($2 | 0) ? $2 : $$sink562) | 0; //@line 4934
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229322 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa357 = 0, $$0240321 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249306 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262311 = 0, $$0269 = 0, $$1 = 0, $$1230333 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241332 = 0, $$1244320 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242305 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3303 = 0, $$4258355 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa295 = 0, $$pre347 = 0, $$pre349 = 0, $10 = 0, $11 = 0, $112 = 0, $116 = 0, $12 = 0, $123 = 0, $124 = 0, $126 = 0, $128 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $151 = 0, $152 = 0, $157 = 0, $164 = 0, $165 = 0, $176 = 0, $188 = 0, $195 = 0, $197 = 0, $20 = 0, $200 = 0, $202 = 0, $21 = 0, $210 = 0, $212 = 0, $215 = 0, $216 = 0, $220 = 0, $224 = 0, $226 = 0, $229 = 0, $23 = 0, $231 = 0, $232 = 0, $233 = 0, $24 = 0, $242 = 0, $243 = 0, $247 = 0, $249 = 0, $25 = 0, $251 = 0, $257 = 0, $269 = 0, $27 = 0, $272 = 0, $273 = 0, $285 = 0, $287 = 0, $292 = 0, $296 = 0, $298 = 0, $30 = 0, $31 = 0, $310 = 0, $312 = 0, $319 = 0, $329 = 0, $330 = 0, $331 = 0, $36 = 0, $38 = 0, $39 = 0, $44 = 0, $46 = 0, $48 = 0, $5 = 0, $50 = 0, $51 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $91 = 0, $94 = 0, $99 = 0, $isdigittmp = 0, $isdigittmp274 = 0, $isdigittmp276 = 0, $or$cond = 0, $or$cond283 = 0, $storemerge = 0, $storemerge273310 = 0, $storemerge278 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2650
 STACKTOP = STACKTOP + 64 | 0; //@line 2651
 $5 = sp + 16 | 0; //@line 2652
 $6 = sp; //@line 2653
 $7 = sp + 24 | 0; //@line 2654
 $8 = sp + 8 | 0; //@line 2655
 $9 = sp + 20 | 0; //@line 2656
 SAFE_HEAP_STORE($5 | 0, $1 | 0, 4);
 $10 = ($0 | 0) != 0; //@line 2658
 $11 = $7 + 40 | 0; //@line 2659
 $12 = $11; //@line 2660
 $13 = $7 + 39 | 0; //@line 2661
 $14 = $8 + 4 | 0; //@line 2662
 $$0243 = 0; //@line 2663
 $$0247 = 0; //@line 2663
 $$0269 = 0; //@line 2663
 $21 = $1; //@line 2663
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     SAFE_HEAP_STORE(___errno_location() | 0 | 0, 75 | 0, 4);
     $$1248 = -1; //@line 2673
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 2677
     break;
    }
   } else {
    $$1248 = $$0247; //@line 2681
   }
  } while (0);
  $20 = SAFE_HEAP_LOAD($21 >> 0 | 0, 1, 0) | 0 | 0; //@line 2684
  if (!($20 << 24 >> 24)) {
   label = 87; //@line 2687
   break;
  } else {
   $23 = $20; //@line 2690
   $25 = $21; //@line 2690
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249306 = $25; //@line 2695
     $27 = $25; //@line 2695
     label = 9; //@line 2696
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 2701
     $39 = $25; //@line 2701
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 2708
   SAFE_HEAP_STORE($5 | 0, $24 | 0, 4);
   $23 = SAFE_HEAP_LOAD($24 >> 0 | 0, 1, 0) | 0 | 0; //@line 2711
   $25 = $24; //@line 2711
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 2716
     if ((SAFE_HEAP_LOAD($27 + 1 >> 0 | 0, 1, 0) | 0 | 0) != 37) {
      $$0249$lcssa = $$0249306; //@line 2721
      $39 = $27; //@line 2721
      break L12;
     }
     $30 = $$0249306 + 1 | 0; //@line 2724
     $31 = $27 + 2 | 0; //@line 2725
     SAFE_HEAP_STORE($5 | 0, $31 | 0, 4);
     if ((SAFE_HEAP_LOAD($31 >> 0 | 0, 1, 0) | 0 | 0) == 37) {
      $$0249306 = $30; //@line 2730
      $27 = $31; //@line 2730
      label = 9; //@line 2731
     } else {
      $$0249$lcssa = $30; //@line 2733
      $39 = $31; //@line 2733
      break;
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $21 | 0; //@line 2741
  if ($10) {
   _out($0, $21, $36); //@line 2743
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 2747
   $$0247 = $$1248; //@line 2747
   $21 = $39; //@line 2747
   continue;
  }
  $38 = $39 + 1 | 0; //@line 2750
  $isdigittmp = (SAFE_HEAP_LOAD($38 >> 0 | 0, 1, 0) | 0 | 0) + -48 | 0; //@line 2753
  if ($isdigittmp >>> 0 < 10) {
   $44 = (SAFE_HEAP_LOAD($39 + 2 >> 0 | 0, 1, 0) | 0 | 0) == 36; //@line 2758
   $$0253 = $44 ? $isdigittmp : -1; //@line 2763
   $$1270 = $44 ? 1 : $$0269; //@line 2763
   $storemerge = $44 ? $39 + 3 | 0 : $38; //@line 2763
  } else {
   $$0253 = -1; //@line 2765
   $$1270 = $$0269; //@line 2765
   $storemerge = $38; //@line 2765
  }
  SAFE_HEAP_STORE($5 | 0, $storemerge | 0, 4);
  $46 = SAFE_HEAP_LOAD($storemerge >> 0 | 0, 1, 0) | 0 | 0; //@line 2768
  $48 = ($46 << 24 >> 24) + -32 | 0; //@line 2770
  L24 : do {
   if ($48 >>> 0 < 32) {
    $$0262311 = 0; //@line 2774
    $329 = $46; //@line 2774
    $51 = $48; //@line 2774
    $storemerge273310 = $storemerge; //@line 2774
    while (1) {
     $50 = 1 << $51; //@line 2776
     if (!($50 & 75913)) {
      $$0262$lcssa = $$0262311; //@line 2780
      $$lcssa295 = $329; //@line 2780
      $62 = $storemerge273310; //@line 2780
      break L24;
     }
     $54 = $50 | $$0262311; //@line 2783
     $55 = $storemerge273310 + 1 | 0; //@line 2784
     SAFE_HEAP_STORE($5 | 0, $55 | 0, 4);
     $56 = SAFE_HEAP_LOAD($55 >> 0 | 0, 1, 0) | 0 | 0; //@line 2786
     $51 = ($56 << 24 >> 24) + -32 | 0; //@line 2788
     if ($51 >>> 0 >= 32) {
      $$0262$lcssa = $54; //@line 2793
      $$lcssa295 = $56; //@line 2793
      $62 = $55; //@line 2793
      break;
     } else {
      $$0262311 = $54; //@line 2791
      $329 = $56; //@line 2791
      $storemerge273310 = $55; //@line 2791
     }
    }
   } else {
    $$0262$lcssa = 0; //@line 2798
    $$lcssa295 = $46; //@line 2798
    $62 = $storemerge; //@line 2798
   }
  } while (0);
  if ($$lcssa295 << 24 >> 24 == 42) {
   $61 = $62 + 1 | 0; //@line 2803
   $isdigittmp276 = (SAFE_HEAP_LOAD($61 >> 0 | 0, 1, 0) | 0 | 0) + -48 | 0; //@line 2806
   if ($isdigittmp276 >>> 0 < 10) {
    if ((SAFE_HEAP_LOAD($62 + 2 >> 0 | 0, 1, 0) | 0 | 0) == 36) {
     SAFE_HEAP_STORE($4 + ($isdigittmp276 << 2) | 0, 10 | 0, 4);
     $$0259 = SAFE_HEAP_LOAD($3 + ((SAFE_HEAP_LOAD($61 >> 0 | 0, 1, 0) | 0 | 0) + -48 << 3) | 0, 4, 0) | 0 | 0; //@line 2826
     $$2271 = 1; //@line 2826
     $storemerge278 = $62 + 3 | 0; //@line 2826
    } else {
     label = 23; //@line 2828
    }
   } else {
    label = 23; //@line 2831
   }
   if ((label | 0) == 23) {
    label = 0; //@line 2834
    if ($$1270 | 0) {
     $$0 = -1; //@line 2837
     break;
    }
    if ($10) {
     $86 = (SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0) + (4 - 1) & ~(4 - 1); //@line 2852
     $87 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0; //@line 2853
     SAFE_HEAP_STORE($2 | 0, $86 + 4 | 0, 4);
     $$0259 = $87; //@line 2856
     $$2271 = 0; //@line 2856
     $storemerge278 = $61; //@line 2856
    } else {
     $$0259 = 0; //@line 2858
     $$2271 = 0; //@line 2858
     $storemerge278 = $61; //@line 2858
    }
   }
   SAFE_HEAP_STORE($5 | 0, $storemerge278 | 0, 4);
   $88 = ($$0259 | 0) < 0; //@line 2862
   $$1260 = $88 ? 0 - $$0259 | 0 : $$0259; //@line 2867
   $$1263 = $88 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 2867
   $$3272 = $$2271; //@line 2867
   $94 = $storemerge278; //@line 2867
  } else {
   $91 = _getint($5) | 0; //@line 2869
   if (($91 | 0) < 0) {
    $$0 = -1; //@line 2872
    break;
   }
   $$1260 = $91; //@line 2876
   $$1263 = $$0262$lcssa; //@line 2876
   $$3272 = $$1270; //@line 2876
   $94 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0; //@line 2876
  }
  do {
   if ((SAFE_HEAP_LOAD($94 >> 0 | 0, 1, 0) | 0 | 0) == 46) {
    if ((SAFE_HEAP_LOAD($94 + 1 >> 0 | 0, 1, 0) | 0 | 0) != 42) {
     SAFE_HEAP_STORE($5 | 0, $94 + 1 | 0, 4);
     $126 = _getint($5) | 0; //@line 2888
     $$0254 = $126; //@line 2890
     $$pre347 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0; //@line 2890
     break;
    }
    $99 = $94 + 2 | 0; //@line 2893
    $isdigittmp274 = (SAFE_HEAP_LOAD($99 >> 0 | 0, 1, 0) | 0 | 0) + -48 | 0; //@line 2896
    if ($isdigittmp274 >>> 0 < 10) {
     if ((SAFE_HEAP_LOAD($94 + 3 >> 0 | 0, 1, 0) | 0 | 0) == 36) {
      SAFE_HEAP_STORE($4 + ($isdigittmp274 << 2) | 0, 10 | 0, 4);
      $112 = SAFE_HEAP_LOAD($3 + ((SAFE_HEAP_LOAD($99 >> 0 | 0, 1, 0) | 0 | 0) + -48 << 3) | 0, 4, 0) | 0 | 0; //@line 2911
      $116 = $94 + 4 | 0; //@line 2915
      SAFE_HEAP_STORE($5 | 0, $116 | 0, 4);
      $$0254 = $112; //@line 2917
      $$pre347 = $116; //@line 2917
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 2923
     break L1;
    }
    if ($10) {
     $123 = (SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0) + (4 - 1) & ~(4 - 1); //@line 2938
     $124 = SAFE_HEAP_LOAD($123 | 0, 4, 0) | 0 | 0; //@line 2939
     SAFE_HEAP_STORE($2 | 0, $123 + 4 | 0, 4);
     $330 = $124; //@line 2942
    } else {
     $330 = 0; //@line 2944
    }
    SAFE_HEAP_STORE($5 | 0, $99 | 0, 4);
    $$0254 = $330; //@line 2947
    $$pre347 = $99; //@line 2947
   } else {
    $$0254 = -1; //@line 2949
    $$pre347 = $94; //@line 2949
   }
  } while (0);
  $$0252 = 0; //@line 2952
  $128 = $$pre347; //@line 2952
  while (1) {
   if (((SAFE_HEAP_LOAD($128 >> 0 | 0, 1, 0) | 0 | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 2959
    break L1;
   }
   $132 = $128 + 1 | 0; //@line 2962
   SAFE_HEAP_STORE($5 | 0, $132 | 0, 4);
   $137 = SAFE_HEAP_LOAD((SAFE_HEAP_LOAD($128 >> 0 | 0, 1, 0) | 0 | 0) + -65 + (9644 + ($$0252 * 58 | 0)) >> 0 | 0, 1, 0) | 0 | 0; //@line 2968
   $138 = $137 & 255; //@line 2969
   if (($138 + -1 | 0) >>> 0 < 8) {
    $$0252 = $138; //@line 2973
    $128 = $132; //@line 2973
   } else {
    break;
   }
  }
  if (!($137 << 24 >> 24)) {
   $$0 = -1; //@line 2980
   break;
  }
  $143 = ($$0253 | 0) > -1; //@line 2984
  do {
   if ($137 << 24 >> 24 == 19) {
    if ($143) {
     $$0 = -1; //@line 2988
     break L1;
    } else {
     label = 49; //@line 2991
    }
   } else {
    if ($143) {
     SAFE_HEAP_STORE($4 + ($$0253 << 2) | 0, $138 | 0, 4);
     $146 = $3 + ($$0253 << 3) | 0; //@line 2998
     $151 = SAFE_HEAP_LOAD($146 + 4 | 0, 4, 0) | 0 | 0; //@line 3003
     $152 = $6; //@line 3004
     SAFE_HEAP_STORE($152 | 0, SAFE_HEAP_LOAD($146 | 0, 4, 0) | 0 | 0, 4);
     SAFE_HEAP_STORE($152 + 4 | 0, $151 | 0, 4);
     label = 49; //@line 3010
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 3014
     break L1;
    }
    _pop_arg($6, $138, $2); //@line 3017
   }
  } while (0);
  if ((label | 0) == 49) {
   label = 0; //@line 3021
   if (!$10) {
    $$0243 = 0; //@line 3023
    $$0247 = $$1248; //@line 3023
    $$0269 = $$3272; //@line 3023
    $21 = $132; //@line 3023
    continue;
   }
  }
  $157 = SAFE_HEAP_LOAD($128 >> 0 | 0, 1, 0) | 0 | 0; //@line 3028
  $$0235 = ($$0252 | 0) != 0 & ($157 & 15 | 0) == 3 ? $157 & -33 : $157; //@line 3034
  $164 = $$1263 & -65537; //@line 3037
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $164; //@line 3038
  L71 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       SAFE_HEAP_STORE(SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0, $$1248 | 0, 4);
       $$0243 = 0; //@line 3047
       $$0247 = $$1248; //@line 3047
       $$0269 = $$3272; //@line 3047
       $21 = $132; //@line 3047
       continue L1;
       break;
      }
     case 1:
      {
       SAFE_HEAP_STORE(SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0, $$1248 | 0, 4);
       $$0243 = 0; //@line 3054
       $$0247 = $$1248; //@line 3054
       $$0269 = $$3272; //@line 3054
       $21 = $132; //@line 3054
       continue L1;
       break;
      }
     case 2:
      {
       $176 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0; //@line 3062
       SAFE_HEAP_STORE($176 | 0, $$1248 | 0, 4);
       SAFE_HEAP_STORE($176 + 4 | 0, (($$1248 | 0) < 0) << 31 >> 31 | 0, 4);
       $$0243 = 0; //@line 3068
       $$0247 = $$1248; //@line 3068
       $$0269 = $$3272; //@line 3068
       $21 = $132; //@line 3068
       continue L1;
       break;
      }
     case 3:
      {
       SAFE_HEAP_STORE(SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0, $$1248 | 0, 2);
       $$0243 = 0; //@line 3076
       $$0247 = $$1248; //@line 3076
       $$0269 = $$3272; //@line 3076
       $21 = $132; //@line 3076
       continue L1;
       break;
      }
     case 4:
      {
       SAFE_HEAP_STORE((SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0) >> 0 | 0, $$1248 | 0, 1);
       $$0243 = 0; //@line 3084
       $$0247 = $$1248; //@line 3084
       $$0269 = $$3272; //@line 3084
       $21 = $132; //@line 3084
       continue L1;
       break;
      }
     case 6:
      {
       SAFE_HEAP_STORE(SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0, $$1248 | 0, 4);
       $$0243 = 0; //@line 3091
       $$0247 = $$1248; //@line 3091
       $$0269 = $$3272; //@line 3091
       $21 = $132; //@line 3091
       continue L1;
       break;
      }
     case 7:
      {
       $188 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0; //@line 3099
       SAFE_HEAP_STORE($188 | 0, $$1248 | 0, 4);
       SAFE_HEAP_STORE($188 + 4 | 0, (($$1248 | 0) < 0) << 31 >> 31 | 0, 4);
       $$0243 = 0; //@line 3105
       $$0247 = $$1248; //@line 3105
       $$0269 = $$3272; //@line 3105
       $21 = $132; //@line 3105
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 3110
       $$0247 = $$1248; //@line 3110
       $$0269 = $$3272; //@line 3110
       $21 = $132; //@line 3110
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 3120
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 3120
     $$3265 = $$1263$ | 8; //@line 3120
     label = 61; //@line 3121
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 3125
     $$1255 = $$0254; //@line 3125
     $$3265 = $$1263$; //@line 3125
     label = 61; //@line 3126
     break;
    }
   case 111:
    {
     $210 = $6; //@line 3130
     $212 = SAFE_HEAP_LOAD($210 | 0, 4, 0) | 0 | 0; //@line 3132
     $215 = SAFE_HEAP_LOAD($210 + 4 | 0, 4, 0) | 0 | 0; //@line 3135
     $216 = _fmt_o($212, $215, $11) | 0; //@line 3136
     $220 = $12 - $216 | 0; //@line 3140
     $$0228 = $216; //@line 3145
     $$1233 = 0; //@line 3145
     $$1238 = 10108; //@line 3145
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($220 | 0) ? $$0254 : $220 + 1 | 0; //@line 3145
     $$4266 = $$1263$; //@line 3145
     $247 = $212; //@line 3145
     $249 = $215; //@line 3145
     label = 67; //@line 3146
     break;
    }
   case 105:
   case 100:
    {
     $224 = $6; //@line 3150
     $226 = SAFE_HEAP_LOAD($224 | 0, 4, 0) | 0 | 0; //@line 3152
     $229 = SAFE_HEAP_LOAD($224 + 4 | 0, 4, 0) | 0 | 0; //@line 3155
     if (($229 | 0) < 0) {
      $231 = _i64Subtract(0, 0, $226 | 0, $229 | 0) | 0; //@line 3158
      $232 = tempRet0; //@line 3159
      $233 = $6; //@line 3160
      SAFE_HEAP_STORE($233 | 0, $231 | 0, 4);
      SAFE_HEAP_STORE($233 + 4 | 0, $232 | 0, 4);
      $$0232 = 1; //@line 3166
      $$0237 = 10108; //@line 3166
      $242 = $231; //@line 3166
      $243 = $232; //@line 3166
      label = 66; //@line 3167
      break L71;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 3179
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 10108 : 10110 : 10109; //@line 3179
      $242 = $226; //@line 3179
      $243 = $229; //@line 3179
      label = 66; //@line 3180
      break L71;
     }
     break;
    }
   case 117:
    {
     $165 = $6; //@line 3186
     $$0232 = 0; //@line 3192
     $$0237 = 10108; //@line 3192
     $242 = SAFE_HEAP_LOAD($165 | 0, 4, 0) | 0 | 0; //@line 3192
     $243 = SAFE_HEAP_LOAD($165 + 4 | 0, 4, 0) | 0 | 0; //@line 3192
     label = 66; //@line 3193
     break;
    }
   case 99:
    {
     SAFE_HEAP_STORE($13 >> 0 | 0, SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0, 1);
     $$2 = $13; //@line 3205
     $$2234 = 0; //@line 3205
     $$2239 = 10108; //@line 3205
     $$2251 = $11; //@line 3205
     $$5 = 1; //@line 3205
     $$6268 = $164; //@line 3205
     break;
    }
   case 109:
    {
     $$1 = _strerror(SAFE_HEAP_LOAD(___errno_location() | 0 | 0, 4, 0) | 0 | 0) | 0; //@line 3212
     label = 71; //@line 3213
     break;
    }
   case 115:
    {
     $269 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0; //@line 3217
     $$1 = $269 | 0 ? $269 : 10118; //@line 3220
     label = 71; //@line 3221
     break;
    }
   case 67:
    {
     SAFE_HEAP_STORE($8 | 0, SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0, 4);
     SAFE_HEAP_STORE($14 | 0, 0 | 0, 4);
     SAFE_HEAP_STORE($6 | 0, $8 | 0, 4);
     $$4258355 = -1; //@line 3234
     $331 = $8; //@line 3234
     label = 75; //@line 3235
     break;
    }
   case 83:
    {
     $$pre349 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0; //@line 3239
     if (!$$0254) {
      _pad_660($0, 32, $$1260, 0, $$1263$); //@line 3242
      $$0240$lcssa357 = 0; //@line 3243
      label = 84; //@line 3244
     } else {
      $$4258355 = $$0254; //@line 3246
      $331 = $$pre349; //@line 3246
      label = 75; //@line 3247
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +(+SAFE_HEAP_LOAD_D($6 | 0, 8)), $$1260, $$0254, $$1263$, $$0235) | 0; //@line 3254
     $$0247 = $$1248; //@line 3254
     $$0269 = $$3272; //@line 3254
     $21 = $132; //@line 3254
     continue L1;
     break;
    }
   default:
    {
     $$2 = $21; //@line 3259
     $$2234 = 0; //@line 3259
     $$2239 = 10108; //@line 3259
     $$2251 = $11; //@line 3259
     $$5 = $$0254; //@line 3259
     $$6268 = $$1263$; //@line 3259
    }
   }
  } while (0);
  L95 : do {
   if ((label | 0) == 61) {
    label = 0; //@line 3265
    $195 = $6; //@line 3266
    $197 = SAFE_HEAP_LOAD($195 | 0, 4, 0) | 0 | 0; //@line 3268
    $200 = SAFE_HEAP_LOAD($195 + 4 | 0, 4, 0) | 0 | 0; //@line 3271
    $202 = _fmt_x($197, $200, $11, $$1236 & 32) | 0; //@line 3273
    $or$cond283 = ($$3265 & 8 | 0) == 0 | ($197 | 0) == 0 & ($200 | 0) == 0; //@line 3279
    $$0228 = $202; //@line 3284
    $$1233 = $or$cond283 ? 0 : 2; //@line 3284
    $$1238 = $or$cond283 ? 10108 : 10108 + ($$1236 >> 4) | 0; //@line 3284
    $$2256 = $$1255; //@line 3284
    $$4266 = $$3265; //@line 3284
    $247 = $197; //@line 3284
    $249 = $200; //@line 3284
    label = 67; //@line 3285
   } else if ((label | 0) == 66) {
    label = 0; //@line 3288
    $$0228 = _fmt_u($242, $243, $11) | 0; //@line 3290
    $$1233 = $$0232; //@line 3290
    $$1238 = $$0237; //@line 3290
    $$2256 = $$0254; //@line 3290
    $$4266 = $$1263$; //@line 3290
    $247 = $242; //@line 3290
    $249 = $243; //@line 3290
    label = 67; //@line 3291
   } else if ((label | 0) == 71) {
    label = 0; //@line 3294
    $272 = _memchr($$1, 0, $$0254) | 0; //@line 3295
    $273 = ($272 | 0) == 0; //@line 3296
    $$2 = $$1; //@line 3303
    $$2234 = 0; //@line 3303
    $$2239 = 10108; //@line 3303
    $$2251 = $273 ? $$1 + $$0254 | 0 : $272; //@line 3303
    $$5 = $273 ? $$0254 : $272 - $$1 | 0; //@line 3303
    $$6268 = $164; //@line 3303
   } else if ((label | 0) == 75) {
    label = 0; //@line 3306
    $$0229322 = $331; //@line 3307
    $$0240321 = 0; //@line 3307
    $$1244320 = 0; //@line 3307
    while (1) {
     $285 = SAFE_HEAP_LOAD($$0229322 | 0, 4, 0) | 0 | 0; //@line 3309
     if (!$285) {
      $$0240$lcssa = $$0240321; //@line 3312
      $$2245 = $$1244320; //@line 3312
      break;
     }
     $287 = _wctomb($9, $285) | 0; //@line 3315
     if (($287 | 0) < 0 | $287 >>> 0 > ($$4258355 - $$0240321 | 0) >>> 0) {
      $$0240$lcssa = $$0240321; //@line 3321
      $$2245 = $287; //@line 3321
      break;
     }
     $292 = $287 + $$0240321 | 0; //@line 3325
     if ($$4258355 >>> 0 > $292 >>> 0) {
      $$0229322 = $$0229322 + 4 | 0; //@line 3328
      $$0240321 = $292; //@line 3328
      $$1244320 = $287; //@line 3328
     } else {
      $$0240$lcssa = $292; //@line 3330
      $$2245 = $287; //@line 3330
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 3336
     break L1;
    }
    _pad_660($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 3339
    if (!$$0240$lcssa) {
     $$0240$lcssa357 = 0; //@line 3342
     label = 84; //@line 3343
    } else {
     $$1230333 = $331; //@line 3345
     $$1241332 = 0; //@line 3345
     while (1) {
      $296 = SAFE_HEAP_LOAD($$1230333 | 0, 4, 0) | 0 | 0; //@line 3347
      if (!$296) {
       $$0240$lcssa357 = $$0240$lcssa; //@line 3350
       label = 84; //@line 3351
       break L95;
      }
      $298 = _wctomb($9, $296) | 0; //@line 3354
      $$1241332 = $298 + $$1241332 | 0; //@line 3355
      if (($$1241332 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa357 = $$0240$lcssa; //@line 3358
       label = 84; //@line 3359
       break L95;
      }
      _out($0, $9, $298); //@line 3363
      if ($$1241332 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa357 = $$0240$lcssa; //@line 3368
       label = 84; //@line 3369
       break;
      } else {
       $$1230333 = $$1230333 + 4 | 0; //@line 3366
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 67) {
   label = 0; //@line 3377
   $251 = ($247 | 0) != 0 | ($249 | 0) != 0; //@line 3383
   $or$cond = ($$2256 | 0) != 0 | $251; //@line 3385
   $257 = (($251 ^ 1) & 1) + ($12 - $$0228) | 0; //@line 3390
   $$2 = $or$cond ? $$0228 : $11; //@line 3395
   $$2234 = $$1233; //@line 3395
   $$2239 = $$1238; //@line 3395
   $$2251 = $11; //@line 3395
   $$5 = $or$cond ? ($$2256 | 0) > ($257 | 0) ? $$2256 : $257 : $$2256; //@line 3395
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 3395
  } else if ((label | 0) == 84) {
   label = 0; //@line 3398
   _pad_660($0, 32, $$1260, $$0240$lcssa357, $$1263$ ^ 8192); //@line 3400
   $$0243 = ($$1260 | 0) > ($$0240$lcssa357 | 0) ? $$1260 : $$0240$lcssa357; //@line 3403
   $$0247 = $$1248; //@line 3403
   $$0269 = $$3272; //@line 3403
   $21 = $132; //@line 3403
   continue;
  }
  $310 = $$2251 - $$2 | 0; //@line 3408
  $$$5 = ($$5 | 0) < ($310 | 0) ? $310 : $$5; //@line 3410
  $312 = $$$5 + $$2234 | 0; //@line 3411
  $$2261 = ($$1260 | 0) < ($312 | 0) ? $312 : $$1260; //@line 3413
  _pad_660($0, 32, $$2261, $312, $$6268); //@line 3414
  _out($0, $$2239, $$2234); //@line 3415
  _pad_660($0, 48, $$2261, $312, $$6268 ^ 65536); //@line 3417
  _pad_660($0, 48, $$$5, $310, 0); //@line 3418
  _out($0, $$2, $310); //@line 3419
  _pad_660($0, 32, $$2261, $312, $$6268 ^ 8192); //@line 3421
  $$0243 = $$2261; //@line 3422
  $$0247 = $$1248; //@line 3422
  $$0269 = $$3272; //@line 3422
  $21 = $132; //@line 3422
 }
 L114 : do {
  if ((label | 0) == 87) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 3430
    } else {
     $$2242305 = 1; //@line 3432
     while (1) {
      $319 = SAFE_HEAP_LOAD($4 + ($$2242305 << 2) | 0, 4, 0) | 0 | 0; //@line 3435
      if (!$319) {
       $$3303 = $$2242305; //@line 3438
       break;
      }
      _pop_arg($3 + ($$2242305 << 3) | 0, $319, $2); //@line 3442
      $$2242305 = $$2242305 + 1 | 0; //@line 3443
      if (($$2242305 | 0) >= 10) {
       $$0 = 1; //@line 3448
       break L114;
      }
     }
     while (1) {
      if (SAFE_HEAP_LOAD($4 + ($$3303 << 2) | 0, 4, 0) | 0 | 0) {
       $$0 = -1; //@line 3458
       break L114;
      }
      $$3303 = $$3303 + 1 | 0; //@line 3456
      if (($$3303 | 0) >= 10) {
       $$0 = 1; //@line 3465
       break;
      }
     }
    }
   } else {
    $$0 = $$1248; //@line 3471
   }
  }
 } while (0);
 STACKTOP = sp; //@line 3475
 return $$0 | 0; //@line 3475
}
function _parser_compute_indicies($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$ = 0, $$$249 = 0, $$0 = 0, $$0205$be = 0, $$0205266 = 0, $$0208$be = 0, $$0208$lcssa = 0, $$0208265 = 0, $$0210$be = 0, $$0210$lcssa = 0, $$0210264 = 0, $$0212$be = 0, $$0212$lcssa = 0, $$0212263 = 0, $$0216$be = 0, $$0216$lcssa = 0, $$0216262 = 0, $$0219$be = 0, $$0219$lcssa = 0, $$0219261 = 0, $$0224$be = 0, $$0224$lcssa = 0, $$0224278 = 0, $$0225$be = 0, $$0225$lcssa = 0, $$0225277 = 0, $$0226$be = 0, $$0226$lcssa = 0, $$0226276 = 0, $$0229$be = 0, $$0229$lcssa = 0, $$0229275 = 0, $$0231$be = 0, $$0231$lcssa = 0, $$0231274 = 0, $$0234$be = 0, $$0234260 = 0, $$0238 = 0, $$1206 = 0, $$1213 = 0, $$1227 = 0, $$1227$ph = 0, $$1230 = 0, $$1232 = 0, $$1232$ph = 0, $$1239$be = 0, $$1239$lcssa = 0, $$1239273 = 0, $$2 = 0, $$2214 = 0, $$2221 = 0, $$2228 = 0, $$2233 = 0, $$2236 = 0, $$3$be = 0, $$3$lcssa = 0, $$3222 = 0, $$3267 = 0, $$4 = 0, $$4242 = 0, $$4242$ph = 0, $$5243 = 0, $$6244 = 0, $$7 = 0, $$ph = 0, $$pre$phiZ2D = 0, $101 = 0, $107 = 0, $110 = 0, $112 = 0, $12 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $130 = 0, $132 = 0, $133 = 0, $135 = 0, $136 = 0, $14 = 0, $143 = 0, $150 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $175 = 0, $176 = 0, $18 = 0, $183 = 0, $184 = 0, $186 = 0, $189 = 0, $19 = 0, $20 = 0, $201 = 0, $21 = 0, $34 = 0, $35 = 0, $36 = 0, $40 = 0, $41 = 0, $45 = 0, $5 = 0, $50 = 0, $52 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $76 = 0, $78 = 0, $8 = 0, $81 = 0, $82 = 0, $88 = 0, $9 = 0, $90 = 0, $94 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17615
 STACKTOP = STACKTOP + 16 | 0; //@line 17616
 $5 = sp; //@line 17617
 $6 = $0 + 168 | 0; //@line 17618
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0; //@line 17619
 $8 = $0 + 244 | 0; //@line 17620
 $9 = SAFE_HEAP_LOAD($8 | 0, 2, 0) | 0 | 0; //@line 17621
 $12 = $7 & -257; //@line 17624
 if (!($7 & 512)) {
  $$0238 = $7; //@line 17626
 } else {
  SAFE_HEAP_STORE($6 | 0, $12 | 0, 4);
  $$0238 = $12; //@line 17629
 }
 $13 = $0 + 264 | 0; //@line 17631
 _parser_list_iterator_init($13, $5); //@line 17632
 $14 = _parser_list_iterator_next($5) | 0; //@line 17633
 L4 : do {
  if (!$14) {
   $$0224$lcssa = 0; //@line 17638
   $$0225$lcssa = 0; //@line 17638
   $$0226$lcssa = 0; //@line 17638
   $$0229$lcssa = 0; //@line 17638
   $$0231$lcssa = $9; //@line 17638
   $$1239$lcssa = $$0238; //@line 17638
   $$pre$phiZ2D = $0 + 246 | 0; //@line 17638
  } else {
   $16 = $0 + 220 | 0; //@line 17640
   $17 = $0 + 246 | 0; //@line 17641
   $$0224278 = 0; //@line 17642
   $$0225277 = 0; //@line 17642
   $$0226276 = 0; //@line 17642
   $$0229275 = 0; //@line 17642
   $$0231274 = $9; //@line 17642
   $$1239273 = $$0238; //@line 17642
   $19 = $14; //@line 17642
   L7 : while (1) {
    $18 = $19 + 7 | 0; //@line 17644
    $20 = SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0; //@line 17645
    $21 = $20 & 255; //@line 17646
    L9 : do {
     if (!($21 & 32)) {
      $34 = $19 + 6 | 0; //@line 17651
      $35 = SAFE_HEAP_LOAD($34 >> 0 | 0, 1, 0) | 0 | 0; //@line 17652
      if (($35 & 255) < 2) {
       $36 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0; //@line 17655
       if (!($21 & 64)) {
        label = 16; //@line 17659
       } else {
        $40 = SAFE_HEAP_LOAD($19 + 4 | 0, 2, 0) | 0 | 0; //@line 17662
        $41 = $40 & 65535; //@line 17663
        if (($40 & 65535) < 4095) {
         $45 = (SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0) - $36 | 0; //@line 17668
         if ($45 >>> 0 < 1048575) {
          SAFE_HEAP_STORE($19 | 0, $45 | $41 << 20 | 0, 4);
          SAFE_HEAP_STORE($18 >> 0 | 0, $20 | -128 | 0, 1);
          $50 = $$1239273 | 32768; //@line 17676
          SAFE_HEAP_STORE($6 | 0, $50 | 0, 4);
          $$4242$ph = $50; //@line 17678
         } else {
          label = 16; //@line 17680
         }
        } else {
         label = 16; //@line 17683
        }
       }
       if ((label | 0) == 16) {
        label = 0; //@line 17687
        if (!$36) {
         $$4242$ph = $$1239273; //@line 17690
        } else {
         $52 = $19 + 4 | 0; //@line 17692
         SAFE_HEAP_STORE($19 | 0, _ecma_find_or_create_literal_string($36, SAFE_HEAP_LOAD($52 | 0, 2, 1) | 0 | 0) | 0 | 0, 2);
         if (!((SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0) & 64)) {
          _jmem_heap_free_block($36, SAFE_HEAP_LOAD($52 | 0, 2, 1) | 0 | 0); //@line 17703
          $$4242$ph = $$1239273; //@line 17704
         } else {
          $$4242$ph = $$1239273; //@line 17706
         }
        }
       }
       $$4242 = $$4242$ph; //@line 17711
       $61 = SAFE_HEAP_LOAD($34 >> 0 | 0, 1, 0) | 0 | 0; //@line 17711
      } else {
       $$4242 = $$1239273; //@line 17713
       $61 = $35; //@line 17713
      }
      switch ($61 << 24 >> 24) {
      case 0:
       {
        $62 = SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0; //@line 17717
        $63 = $62 & 255; //@line 17718
        if (!($63 & 1)) {
         $$0224$be = $$0224278; //@line 17723
         $$0225$be = $$0225277 + 1 << 16 >> 16; //@line 17723
         $$0226$be = $$0226276; //@line 17723
         $$0229$be = $$0229275; //@line 17723
         $$0231$be = $$0231274; //@line 17723
         $$1239$be = $$4242; //@line 17723
         break L9;
        }
        if (!($$4242 & 2048)) {
         $71 = $62; //@line 17729
        } else {
         $69 = ($63 | 2) & 255; //@line 17732
         SAFE_HEAP_STORE($18 >> 0 | 0, $69 | 0, 1);
         $71 = $69; //@line 17734
        }
        $70 = $71 & 255; //@line 17736
        do {
         if (!($70 & 4)) {
          if (($$0231274 & 65535) < 256 & ($70 & 2 | 0) == 0) {
           $$1230 = $$0229275; //@line 17747
           $$2228 = $$0226276; //@line 17747
           $$2233 = $$0231274 + 1 << 16 >> 16; //@line 17747
           $$6244 = $$4242; //@line 17747
           $110 = $71; //@line 17747
           break;
          } else {
           $107 = $71 | 2; //@line 17750
           SAFE_HEAP_STORE($18 >> 0 | 0, $107 | 0, 1);
           $$1230 = $$0229275 + 1 << 16 >> 16; //@line 17753
           $$2228 = $$0226276; //@line 17753
           $$2233 = $$0231274; //@line 17753
           $$6244 = $$4242; //@line 17753
           $110 = $107; //@line 17753
           break;
          }
         } else {
          if (!($70 & 8)) {
           $$5243 = $$4242; //@line 17760
           $82 = $71; //@line 17760
          } else {
           $76 = $$4242 | 64; //@line 17762
           SAFE_HEAP_STORE($6 | 0, $76 | 0, 4);
           $78 = ($70 | 2) & 255; //@line 17765
           SAFE_HEAP_STORE($18 >> 0 | 0, $78 | 0, 1);
           SAFE_HEAP_STORE($17 | 0, (SAFE_HEAP_LOAD($17 | 0, 2, 0) | 0 | 0) + 1 << 16 >> 16 | 0, 2);
           $$5243 = $76; //@line 17770
           $82 = $78; //@line 17770
          }
          $81 = $82 & 255; //@line 17772
          do {
           if (!($81 & 16)) {
            if (($$0231274 & 65535) < 256 & ($81 & 2 | 0) == 0) {
             $$1227$ph = $$0226276; //@line 17783
             $$1232$ph = $$0231274 + 1 << 16 >> 16; //@line 17783
             $$ph = $82; //@line 17783
             label = 35; //@line 17784
             break;
            } else {
             $99 = $82 | 2; //@line 17787
             SAFE_HEAP_STORE($18 >> 0 | 0, $99 | 0, 1);
             $$1227$ph = $$0226276 + 1 << 16 >> 16; //@line 17790
             $$1232$ph = $$0231274; //@line 17790
             $$ph = $99; //@line 17790
             label = 35; //@line 17791
             break;
            }
           } else {
            if (($$5243 & 257 | 0) == 256) {
             $88 = ($81 | 2) & 255; //@line 17799
             SAFE_HEAP_STORE($18 >> 0 | 0, $88 | 0, 1);
             $90 = $88; //@line 17801
            } else {
             $90 = $82; //@line 17803
            }
            if (!($90 & 2)) {
             $$1227$ph = $$0226276; //@line 17808
             $$1232$ph = $$0231274; //@line 17808
             $$ph = $90; //@line 17808
             label = 35; //@line 17809
            } else {
             $94 = (SAFE_HEAP_LOAD($17 | 0, 2, 0) | 0 | 0) + 1 << 16 >> 16; //@line 17813
             SAFE_HEAP_STORE($17 | 0, $94 | 0, 2);
             $$1227 = $$0226276 + 1 << 16 >> 16; //@line 17815
             $$1232 = $$0231274; //@line 17815
             $101 = $94; //@line 17815
             $201 = $90; //@line 17815
            }
           }
          } while (0);
          if ((label | 0) == 35) {
           label = 0; //@line 17820
           $$1227 = $$1227$ph; //@line 17822
           $$1232 = $$1232$ph; //@line 17822
           $101 = SAFE_HEAP_LOAD($17 | 0, 2, 0) | 0 | 0; //@line 17822
           $201 = $$ph; //@line 17822
          }
          if (($101 & 65535) > 32766) {
           break L7;
          } else {
           $$1230 = $$0229275; //@line 17828
           $$2228 = $$1227; //@line 17828
           $$2233 = $$1232; //@line 17828
           $$6244 = $$5243; //@line 17828
           $110 = $201; //@line 17828
          }
         }
        } while (0);
        $112 = $$6244 | 1024; //@line 17834
        if (!($110 & 2)) {
         $$0224$be = $$0224278; //@line 17836
         $$0225$be = $$0225277; //@line 17836
         $$0226$be = $$2228; //@line 17836
         $$0229$be = $$1230; //@line 17836
         $$0231$be = $$2233; //@line 17836
         $$1239$be = $$6244; //@line 17836
         break L9;
        }
        SAFE_HEAP_STORE($6 | 0, $112 | 0, 4);
        $$0224$be = $$0224278; //@line 17840
        $$0225$be = $$0225277; //@line 17840
        $$0226$be = $$2228; //@line 17840
        $$0229$be = $$1230; //@line 17840
        $$0231$be = $$2233; //@line 17840
        $$1239$be = $112; //@line 17840
        break L9;
        break;
       }
      case 2:
      case 1:
       {
        $$0224$be = $$0224278 + 1 << 16 >> 16; //@line 17846
        $$0225$be = $$0225277; //@line 17846
        $$0226$be = $$0226276; //@line 17846
        $$0229$be = $$0229275; //@line 17846
        $$0231$be = $$0231274; //@line 17846
        $$1239$be = $$4242; //@line 17846
        break L9;
        break;
       }
      case 5:
       {
        if ((SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0) & 16) {
         $$0224$be = $$0224278; //@line 17855
         $$0225$be = $$0225277; //@line 17855
         $$0226$be = $$0226276; //@line 17855
         $$0229$be = $$0229275; //@line 17855
         $$0231$be = $$0231274; //@line 17855
         $$1239$be = $$4242; //@line 17855
         break L9;
        }
        SAFE_HEAP_STORE($17 | 0, (SAFE_HEAP_LOAD($17 | 0, 2, 0) | 0 | 0) + -1 << 16 >> 16 | 0, 2);
        $$0224$be = $$0224278; //@line 17861
        $$0225$be = $$0225277; //@line 17861
        $$0226$be = $$0226276; //@line 17861
        $$0229$be = $$0229275; //@line 17861
        $$0231$be = $$0231274; //@line 17861
        $$1239$be = $$4242; //@line 17861
        break L9;
        break;
       }
      default:
       {
        $$0224$be = $$0224278; //@line 17866
        $$0225$be = $$0225277; //@line 17866
        $$0226$be = $$0226276; //@line 17866
        $$0229$be = $$0229275; //@line 17866
        $$0231$be = $$0231274; //@line 17866
        $$1239$be = $$4242; //@line 17866
        break L9;
       }
      }
     } else {
      if (!($21 & 64)) {
       _jmem_heap_free_block(SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0, SAFE_HEAP_LOAD($19 + 4 | 0, 2, 1) | 0 | 0); //@line 17878
      }
      SAFE_HEAP_STORE($17 | 0, (SAFE_HEAP_LOAD($17 | 0, 2, 0) | 0 | 0) + -1 << 16 >> 16 | 0, 2);
      $$0224$be = $$0224278; //@line 17883
      $$0225$be = $$0225277; //@line 17883
      $$0226$be = $$0226276; //@line 17883
      $$0229$be = $$0229275; //@line 17883
      $$0231$be = $$0231274; //@line 17883
      $$1239$be = $$1239273; //@line 17883
     }
    } while (0);
    $19 = _parser_list_iterator_next($5) | 0; //@line 17886
    if (!$19) {
     $$0224$lcssa = $$0224$be; //@line 17889
     $$0225$lcssa = $$0225$be; //@line 17889
     $$0226$lcssa = $$0226$be; //@line 17889
     $$0229$lcssa = $$0229$be; //@line 17889
     $$0231$lcssa = $$0231$be; //@line 17889
     $$1239$lcssa = $$1239$be; //@line 17889
     $$pre$phiZ2D = $17; //@line 17889
     break L4;
    } else {
     $$0224278 = $$0224$be; //@line 17892
     $$0225277 = $$0225$be; //@line 17892
     $$0226276 = $$0226$be; //@line 17892
     $$0229275 = $$0229$be; //@line 17892
     $$0231274 = $$0231$be; //@line 17892
     $$1239273 = $$1239$be; //@line 17892
    }
   }
   _parser_raise_error($0, 2); //@line 17895
  }
 } while (0);
 $$ = (SAFE_HEAP_LOAD($$pre$phiZ2D | 0, 2, 1) | 0 | 0) < 511 ? 254 : 127; //@line 17901
 $125 = ($$0229$lcssa & 65535) + ($$0231$lcssa & 65535) | 0; //@line 17905
 $127 = $$ & 65535; //@line 17907
 $$$249 = $$0229$lcssa << 16 >> 16 == 0 ? 0 : ($125 + -1 | 0) > ($127 | 0) ? 3 : 2; //@line 17910
 $129 = SAFE_HEAP_LOAD($8 | 0, 2, 0) | 0 | 0; //@line 17911
 $130 = $125 & 65535; //@line 17912
 $132 = $125 + ($$0226$lcssa & 65535) | 0; //@line 17914
 $133 = $132 & 65535; //@line 17915
 $135 = $132 + ($$0225$lcssa & 65535) | 0; //@line 17917
 $136 = $135 & 65535; //@line 17918
 if (($$0226$lcssa & 65535) > 2) {
  $143 = $$1239$lcssa | 16384; //@line 17926
  SAFE_HEAP_STORE($6 | 0, $143 | 0, 4);
  $$2 = (($125 & 65535) >>> 0 > $127 >>> 0 ? $$$249 | 4 : $$$249 + 3 | 0) + ((($132 & 65535) + -1 | 0) > ($127 | 0) & 1) | 0; //@line 17936
  $$7 = $143; //@line 17936
 } else {
  $$2 = $$$249; //@line 17938
  $$7 = $$1239$lcssa; //@line 17938
 }
 _parser_list_iterator_init($13, $5); //@line 17940
 $150 = _parser_list_iterator_next($5) | 0; //@line 17941
 if (!$150) {
  $$0208$lcssa = $136; //@line 17944
  $$0210$lcssa = $133; //@line 17944
  $$0212$lcssa = $130; //@line 17944
  $$0216$lcssa = $$0231$lcssa; //@line 17944
  $$0219$lcssa = $129; //@line 17944
  $$3$lcssa = $$2; //@line 17944
 } else {
  $153 = ($$7 & 16384 | 0) == 0; //@line 17947
  $$0205266 = $135 + ($$0224$lcssa & 65535) & 65535; //@line 17948
  $$0208265 = $136; //@line 17948
  $$0210264 = $133; //@line 17948
  $$0212263 = $130; //@line 17948
  $$0216262 = $$0231$lcssa; //@line 17948
  $$0219261 = $129; //@line 17948
  $$0234260 = 0; //@line 17948
  $$3267 = $$2; //@line 17948
  $155 = $150; //@line 17948
  while (1) {
   $154 = $155 + 7 | 0; //@line 17950
   $156 = SAFE_HEAP_LOAD($154 >> 0 | 0, 1, 0) | 0 | 0; //@line 17951
   $157 = $156 & 255; //@line 17952
   L72 : do {
    if (!($157 & 32)) {
     switch (SAFE_HEAP_LOAD($155 + 6 >> 0 | 0, 1, 0) | 0 | 0) {
     case 0:
      {
       if (!($157 & 1)) {
        SAFE_HEAP_STORE($155 + 4 | 0, $$0210264 | 0, 2);
        $$0205$be = $$0205266; //@line 17967
        $$0208$be = $$0208265; //@line 17967
        $$0210$be = $$0210264 + 1 << 16 >> 16; //@line 17967
        $$0212$be = $$0212263; //@line 17967
        $$0216$be = $$0216262; //@line 17967
        $$0219$be = $$0219261; //@line 17967
        $$0234$be = $$0234260; //@line 17967
        $$3$be = $$3267; //@line 17967
        break L72;
       }
       $175 = ($157 & 2 | 0) != 0; //@line 17973
       if (!($157 & 4)) {
        $176 = $155 + 4 | 0; //@line 17975
        if ($175) {
         SAFE_HEAP_STORE($176 | 0, $$0216262 | 0, 2);
         $$0205$be = $$0205266; //@line 17979
         $$0208$be = $$0208265; //@line 17979
         $$0210$be = $$0210264; //@line 17979
         $$0212$be = $$0212263; //@line 17979
         $$0216$be = $$0216262 + 1 << 16 >> 16; //@line 17979
         $$0219$be = $$0219261; //@line 17979
         $$0234$be = $$0234260; //@line 17979
         $$3$be = $$3267; //@line 17979
         break L72;
        } else {
         SAFE_HEAP_STORE($176 | 0, $$0219261 | 0, 2);
         $$0205$be = $$0205266; //@line 17984
         $$0208$be = $$0208265; //@line 17984
         $$0210$be = $$0210264; //@line 17984
         $$0212$be = $$0212263; //@line 17984
         $$0216$be = $$0216262; //@line 17984
         $$0219$be = $$0219261 + 1 << 16 >> 16; //@line 17984
         $$0234$be = $$0234260; //@line 17984
         $$3$be = $$3267; //@line 17984
         break L72;
        }
       }
       do {
        if (!($157 & 16)) {
         $186 = $155 + 4 | 0; //@line 17992
         if ($175) {
          SAFE_HEAP_STORE($186 | 0, $$0212263 | 0, 2);
          $$1213 = $$0212263 + 1 << 16 >> 16; //@line 17996
          $$2221 = $$0219261; //@line 17996
         } else {
          SAFE_HEAP_STORE($186 | 0, $$0219261 | 0, 2);
          $$1213 = $$0212263; //@line 18000
          $$2221 = $$0219261 + 1 << 16 >> 16; //@line 18000
         }
         $189 = $$0205266 + 1 << 16 >> 16; //@line 18002
         if (!($156 & 8)) {
          SAFE_HEAP_STORE((_parser_list_iterator_next($5) | 0) + 4 | 0, $$0205266 | 0, 2);
          $$0 = $$0205266; //@line 18009
          $$1206 = $189; //@line 18009
          $$2214 = $$1213; //@line 18009
          $$2236 = $$0234260; //@line 18009
          $$3222 = $$2221; //@line 18009
         } else {
          $$0 = $$0205266; //@line 18011
          $$1206 = $189; //@line 18011
          $$2214 = $$1213; //@line 18011
          $$2236 = $$0234260; //@line 18011
          $$3222 = $$2221; //@line 18011
         }
        } else {
         $183 = $$0234260 + 1 << 16 >> 16; //@line 18014
         $184 = $155 + 4 | 0; //@line 18015
         if ($175) {
          SAFE_HEAP_STORE($184 | 0, $$0212263 | 0, 2);
          $$0 = $$0234260; //@line 18019
          $$1206 = $$0205266; //@line 18019
          $$2214 = $$0212263 + 1 << 16 >> 16; //@line 18019
          $$2236 = $183; //@line 18019
          $$3222 = $$0219261; //@line 18019
          break;
         } else {
          SAFE_HEAP_STORE($184 | 0, $$0234260 | 0, 2);
          $$0205$be = $$0205266; //@line 18023
          $$0208$be = $$0208265; //@line 18023
          $$0210$be = $$0210264; //@line 18023
          $$0212$be = $$0212263; //@line 18023
          $$0216$be = $$0216262; //@line 18023
          $$0219$be = $$0219261; //@line 18023
          $$0234$be = $183; //@line 18023
          $$3$be = $$3267; //@line 18023
          break L72;
         }
        }
       } while (0);
       if ($153) {
        label = 74; //@line 18029
       } else {
        if (!((SAFE_HEAP_LOAD($154 >> 0 | 0, 1, 0) | 0) & 2)) {
         label = 74; //@line 18035
        } else {
         $$4 = $$3267; //@line 18037
        }
       }
       if ((label | 0) == 74) {
        label = 0; //@line 18041
        $$4 = ((SAFE_HEAP_LOAD($155 + 4 | 0, 2, 1) | 0 | 0) > ($$ & 65535) ? 3 : 2) + $$3267 | 0; //@line 18047
       }
       $$0205$be = $$1206; //@line 18052
       $$0208$be = $$0208265; //@line 18052
       $$0210$be = $$0210264; //@line 18052
       $$0212$be = $$2214; //@line 18052
       $$0216$be = $$0216262; //@line 18052
       $$0219$be = $$3222; //@line 18052
       $$0234$be = $$2236; //@line 18052
       $$3$be = $$4 + (($$0 & 65535) > ($$ & 65535) ? 2 : 1) | 0; //@line 18052
       break L72;
       break;
      }
     case 2:
     case 1:
      {
       SAFE_HEAP_STORE($155 + 4 | 0, $$0208265 | 0, 2);
       $$0205$be = $$0205266; //@line 18060
       $$0208$be = $$0208265 + 1 << 16 >> 16; //@line 18060
       $$0210$be = $$0210264; //@line 18060
       $$0212$be = $$0212263; //@line 18060
       $$0216$be = $$0216262; //@line 18060
       $$0219$be = $$0219261; //@line 18060
       $$0234$be = $$0234260; //@line 18060
       $$3$be = $$3267; //@line 18060
       break L72;
       break;
      }
     case 5:
      {
       $$0205$be = $$0205266; //@line 18069
       $$0208$be = $$0208265; //@line 18069
       $$0210$be = $$0210264; //@line 18069
       $$0212$be = $$0212263; //@line 18069
       $$0216$be = $$0216262; //@line 18069
       $$0219$be = $$0219261; //@line 18069
       $$0234$be = ($157 >>> 4 & 1) + $$0234260 << 16 >> 16; //@line 18069
       $$3$be = $$3267; //@line 18069
       break L72;
       break;
      }
     default:
      {
       SAFE_HEAP_STORE($155 + 4 | 0, $$0205266 | 0, 2);
       $$0205$be = $$0205266 + 1 << 16 >> 16; //@line 18077
       $$0208$be = $$0208265; //@line 18077
       $$0210$be = $$0210264; //@line 18077
       $$0212$be = $$0212263; //@line 18077
       $$0216$be = $$0216262; //@line 18077
       $$0219$be = $$0219261; //@line 18077
       $$0234$be = $$0234260; //@line 18077
       $$3$be = $$3267; //@line 18077
       break L72;
      }
     }
    } else {
     $$0205$be = $$0205266; //@line 18082
     $$0208$be = $$0208265; //@line 18082
     $$0210$be = $$0210264; //@line 18082
     $$0212$be = $$0212263; //@line 18082
     $$0216$be = $$0216262; //@line 18082
     $$0219$be = $$0219261; //@line 18082
     $$0234$be = $$0234260; //@line 18082
     $$3$be = $$3267; //@line 18082
    }
   } while (0);
   $155 = _parser_list_iterator_next($5) | 0; //@line 18085
   if (!$155) {
    $$0208$lcssa = $$0208$be; //@line 18088
    $$0210$lcssa = $$0210$be; //@line 18088
    $$0212$lcssa = $$0212$be; //@line 18088
    $$0216$lcssa = $$0216$be; //@line 18088
    $$0219$lcssa = $$0219$be; //@line 18088
    $$3$lcssa = $$3$be; //@line 18088
    break;
   } else {
    $$0205266 = $$0205$be; //@line 18091
    $$0208265 = $$0208$be; //@line 18091
    $$0210264 = $$0210$be; //@line 18091
    $$0212263 = $$0212$be; //@line 18091
    $$0216262 = $$0216$be; //@line 18091
    $$0219261 = $$0219$be; //@line 18091
    $$0234260 = $$0234$be; //@line 18091
    $$3267 = $$3$be; //@line 18091
   }
  }
 }
 SAFE_HEAP_STORE($1 | 0, $$0210$lcssa | 0, 2);
 SAFE_HEAP_STORE($2 | 0, $$0216$lcssa | 0, 2);
 SAFE_HEAP_STORE($3 | 0, $$0212$lcssa | 0, 2);
 SAFE_HEAP_STORE($4 | 0, $$0208$lcssa | 0, 2);
 SAFE_HEAP_STORE($8 | 0, $$0219$lcssa | 0, 2);
 STACKTOP = sp; //@line 18100
 return $$3$lcssa | 0; //@line 18100
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi443Z2D = 0, $$pre$phi445Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $104 = 0, $105 = 0, $112 = 0, $114 = 0, $115 = 0, $122 = 0, $124 = 0, $13 = 0, $130 = 0, $135 = 0, $136 = 0, $139 = 0, $141 = 0, $143 = 0, $158 = 0, $16 = 0, $163 = 0, $165 = 0, $168 = 0, $17 = 0, $171 = 0, $174 = 0, $177 = 0, $178 = 0, $179 = 0, $181 = 0, $183 = 0, $184 = 0, $186 = 0, $187 = 0, $193 = 0, $194 = 0, $2 = 0, $207 = 0, $21 = 0, $210 = 0, $211 = 0, $217 = 0, $232 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $241 = 0, $242 = 0, $248 = 0, $253 = 0, $254 = 0, $257 = 0, $259 = 0, $26 = 0, $262 = 0, $267 = 0, $273 = 0, $277 = 0, $278 = 0, $28 = 0, $296 = 0, $298 = 0, $3 = 0, $305 = 0, $306 = 0, $307 = 0, $315 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $88 = 0, $9 = 0, $91 = 0, $92 = 0, $98 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 25
 $3 = SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0; //@line 26
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 29
 }
 $6 = SAFE_HEAP_LOAD($0 + -4 | 0, 4, 0) | 0 | 0; //@line 33
 $7 = $6 & 3; //@line 34
 if (($7 | 0) == 1) {
  _abort(); //@line 37
 }
 $9 = $6 & -8; //@line 40
 $10 = $2 + $9 | 0; //@line 41
 L10 : do {
  if (!($6 & 1)) {
   $13 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 46
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 52
   $17 = $13 + $9 | 0; //@line 53
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 56
   }
   if (($16 | 0) == (SAFE_HEAP_LOAD(134655 * 4 | 0, 4, 0) | 0 | 0)) {
    $104 = $10 + 4 | 0; //@line 62
    $105 = SAFE_HEAP_LOAD($104 | 0, 4, 0) | 0 | 0; //@line 63
    if (($105 & 3 | 0) != 3) {
     $$1 = $16; //@line 67
     $$1382 = $17; //@line 67
     $112 = $16; //@line 67
     break;
    }
    SAFE_HEAP_STORE(134652 * 4 | 0, $17 | 0, 4);
    SAFE_HEAP_STORE($104 | 0, $105 & -2 | 0, 4);
    SAFE_HEAP_STORE($16 + 4 | 0, $17 | 1 | 0, 4);
    SAFE_HEAP_STORE($16 + $17 | 0, $17 | 0, 4);
    return;
   }
   $21 = $13 >>> 3; //@line 80
   if ($13 >>> 0 < 256) {
    $24 = SAFE_HEAP_LOAD($16 + 8 | 0, 4, 0) | 0 | 0; //@line 84
    $26 = SAFE_HEAP_LOAD($16 + 12 | 0, 4, 0) | 0 | 0; //@line 86
    $28 = 538640 + ($21 << 1 << 2) | 0; //@line 88
    if (($24 | 0) != ($28 | 0)) {
     if ($24 >>> 0 < $3 >>> 0) {
      _abort(); //@line 93
     }
     if ((SAFE_HEAP_LOAD($24 + 12 | 0, 4, 0) | 0 | 0) != ($16 | 0)) {
      _abort(); //@line 100
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     SAFE_HEAP_STORE(134650 * 4 | 0, (SAFE_HEAP_LOAD(134650 * 4 | 0, 4, 0) | 0) & ~(1 << $21) | 0, 4);
     $$1 = $16; //@line 111
     $$1382 = $17; //@line 111
     $112 = $16; //@line 111
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi445Z2D = $26 + 8 | 0; //@line 117
    } else {
     if ($26 >>> 0 < $3 >>> 0) {
      _abort(); //@line 121
     }
     $41 = $26 + 8 | 0; //@line 124
     if ((SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0) == ($16 | 0)) {
      $$pre$phi445Z2D = $41; //@line 128
     } else {
      _abort(); //@line 130
     }
    }
    SAFE_HEAP_STORE($24 + 12 | 0, $26 | 0, 4);
    SAFE_HEAP_STORE($$pre$phi445Z2D | 0, $24 | 0, 4);
    $$1 = $16; //@line 137
    $$1382 = $17; //@line 137
    $112 = $16; //@line 137
    break;
   }
   $46 = SAFE_HEAP_LOAD($16 + 24 | 0, 4, 0) | 0 | 0; //@line 141
   $48 = SAFE_HEAP_LOAD($16 + 12 | 0, 4, 0) | 0 | 0; //@line 143
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 147
     $60 = $59 + 4 | 0; //@line 148
     $61 = SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0; //@line 149
     if (!$61) {
      $63 = SAFE_HEAP_LOAD($59 | 0, 4, 0) | 0 | 0; //@line 152
      if (!$63) {
       $$3 = 0; //@line 155
       break;
      } else {
       $$1387 = $63; //@line 158
       $$1390 = $59; //@line 158
      }
     } else {
      $$1387 = $61; //@line 161
      $$1390 = $60; //@line 161
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 164
      $66 = SAFE_HEAP_LOAD($65 | 0, 4, 0) | 0 | 0; //@line 165
      if ($66 | 0) {
       $$1387 = $66; //@line 168
       $$1390 = $65; //@line 168
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 171
      $69 = SAFE_HEAP_LOAD($68 | 0, 4, 0) | 0 | 0; //@line 172
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 177
       $$1390 = $68; //@line 177
      }
     }
     if ($$1390 >>> 0 < $3 >>> 0) {
      _abort(); //@line 182
     } else {
      SAFE_HEAP_STORE($$1390 | 0, 0 | 0, 4);
      $$3 = $$1387; //@line 186
      break;
     }
    } else {
     $51 = SAFE_HEAP_LOAD($16 + 8 | 0, 4, 0) | 0 | 0; //@line 191
     if ($51 >>> 0 < $3 >>> 0) {
      _abort(); //@line 194
     }
     $53 = $51 + 12 | 0; //@line 197
     if ((SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0) != ($16 | 0)) {
      _abort(); //@line 201
     }
     $56 = $48 + 8 | 0; //@line 204
     if ((SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0) == ($16 | 0)) {
      SAFE_HEAP_STORE($53 | 0, $48 | 0, 4);
      SAFE_HEAP_STORE($56 | 0, $51 | 0, 4);
      $$3 = $48; //@line 210
      break;
     } else {
      _abort(); //@line 213
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 220
    $$1382 = $17; //@line 220
    $112 = $16; //@line 220
   } else {
    $74 = SAFE_HEAP_LOAD($16 + 28 | 0, 4, 0) | 0 | 0; //@line 223
    $75 = 538904 + ($74 << 2) | 0; //@line 224
    do {
     if (($16 | 0) == (SAFE_HEAP_LOAD($75 | 0, 4, 0) | 0 | 0)) {
      SAFE_HEAP_STORE($75 | 0, $$3 | 0, 4);
      if (!$$3) {
       SAFE_HEAP_STORE(134651 * 4 | 0, (SAFE_HEAP_LOAD(134651 * 4 | 0, 4, 0) | 0) & ~(1 << $74) | 0, 4);
       $$1 = $16; //@line 237
       $$1382 = $17; //@line 237
       $112 = $16; //@line 237
       break L10;
      }
     } else {
      if ($46 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
       _abort(); //@line 244
      } else {
       SAFE_HEAP_STORE($46 + 16 + (((SAFE_HEAP_LOAD($46 + 16 | 0, 4, 0) | 0 | 0) != ($16 | 0) & 1) << 2) | 0, $$3 | 0, 4);
       if (!$$3) {
        $$1 = $16; //@line 255
        $$1382 = $17; //@line 255
        $112 = $16; //@line 255
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $88 = SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0; //@line 263
    if ($$3 >>> 0 < $88 >>> 0) {
     _abort(); //@line 266
    }
    SAFE_HEAP_STORE($$3 + 24 | 0, $46 | 0, 4);
    $91 = $16 + 16 | 0; //@line 271
    $92 = SAFE_HEAP_LOAD($91 | 0, 4, 0) | 0 | 0; //@line 272
    do {
     if ($92 | 0) {
      if ($92 >>> 0 < $88 >>> 0) {
       _abort(); //@line 278
      } else {
       SAFE_HEAP_STORE($$3 + 16 | 0, $92 | 0, 4);
       SAFE_HEAP_STORE($92 + 24 | 0, $$3 | 0, 4);
       break;
      }
     }
    } while (0);
    $98 = SAFE_HEAP_LOAD($91 + 4 | 0, 4, 0) | 0 | 0; //@line 290
    if (!$98) {
     $$1 = $16; //@line 293
     $$1382 = $17; //@line 293
     $112 = $16; //@line 293
    } else {
     if ($98 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
      _abort(); //@line 298
     } else {
      SAFE_HEAP_STORE($$3 + 20 | 0, $98 | 0, 4);
      SAFE_HEAP_STORE($98 + 24 | 0, $$3 | 0, 4);
      $$1 = $16; //@line 305
      $$1382 = $17; //@line 305
      $112 = $16; //@line 305
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 311
   $$1382 = $9; //@line 311
   $112 = $2; //@line 311
  }
 } while (0);
 if ($112 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 316
 }
 $114 = $10 + 4 | 0; //@line 319
 $115 = SAFE_HEAP_LOAD($114 | 0, 4, 0) | 0 | 0; //@line 320
 if (!($115 & 1)) {
  _abort(); //@line 324
 }
 if (!($115 & 2)) {
  $122 = SAFE_HEAP_LOAD(134655 * 4 | 0, 4, 0) | 0 | 0; //@line 332
  if (($10 | 0) == (SAFE_HEAP_LOAD(134656 * 4 | 0, 4, 0) | 0 | 0)) {
   $124 = (SAFE_HEAP_LOAD(134653 * 4 | 0, 4, 0) | 0 | 0) + $$1382 | 0; //@line 335
   SAFE_HEAP_STORE(134653 * 4 | 0, $124 | 0, 4);
   SAFE_HEAP_STORE(134656 * 4 | 0, $$1 | 0, 4);
   SAFE_HEAP_STORE($$1 + 4 | 0, $124 | 1 | 0, 4);
   if (($$1 | 0) != ($122 | 0)) {
    return;
   }
   SAFE_HEAP_STORE(134655 * 4 | 0, 0 | 0, 4);
   SAFE_HEAP_STORE(134652 * 4 | 0, 0 | 0, 4);
   return;
  }
  if (($10 | 0) == ($122 | 0)) {
   $130 = (SAFE_HEAP_LOAD(134652 * 4 | 0, 4, 0) | 0 | 0) + $$1382 | 0; //@line 352
   SAFE_HEAP_STORE(134652 * 4 | 0, $130 | 0, 4);
   SAFE_HEAP_STORE(134655 * 4 | 0, $112 | 0, 4);
   SAFE_HEAP_STORE($$1 + 4 | 0, $130 | 1 | 0, 4);
   SAFE_HEAP_STORE($112 + $130 | 0, $130 | 0, 4);
   return;
  }
  $135 = ($115 & -8) + $$1382 | 0; //@line 363
  $136 = $115 >>> 3; //@line 364
  L108 : do {
   if ($115 >>> 0 < 256) {
    $139 = SAFE_HEAP_LOAD($10 + 8 | 0, 4, 0) | 0 | 0; //@line 369
    $141 = SAFE_HEAP_LOAD($10 + 12 | 0, 4, 0) | 0 | 0; //@line 371
    $143 = 538640 + ($136 << 1 << 2) | 0; //@line 373
    if (($139 | 0) != ($143 | 0)) {
     if ($139 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
      _abort(); //@line 379
     }
     if ((SAFE_HEAP_LOAD($139 + 12 | 0, 4, 0) | 0 | 0) != ($10 | 0)) {
      _abort(); //@line 386
     }
    }
    if (($141 | 0) == ($139 | 0)) {
     SAFE_HEAP_STORE(134650 * 4 | 0, (SAFE_HEAP_LOAD(134650 * 4 | 0, 4, 0) | 0) & ~(1 << $136) | 0, 4);
     break;
    }
    if (($141 | 0) == ($143 | 0)) {
     $$pre$phi443Z2D = $141 + 8 | 0; //@line 402
    } else {
     if ($141 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
      _abort(); //@line 407
     }
     $158 = $141 + 8 | 0; //@line 410
     if ((SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0) == ($10 | 0)) {
      $$pre$phi443Z2D = $158; //@line 414
     } else {
      _abort(); //@line 416
     }
    }
    SAFE_HEAP_STORE($139 + 12 | 0, $141 | 0, 4);
    SAFE_HEAP_STORE($$pre$phi443Z2D | 0, $139 | 0, 4);
   } else {
    $163 = SAFE_HEAP_LOAD($10 + 24 | 0, 4, 0) | 0 | 0; //@line 425
    $165 = SAFE_HEAP_LOAD($10 + 12 | 0, 4, 0) | 0 | 0; //@line 427
    do {
     if (($165 | 0) == ($10 | 0)) {
      $177 = $10 + 16 | 0; //@line 431
      $178 = $177 + 4 | 0; //@line 432
      $179 = SAFE_HEAP_LOAD($178 | 0, 4, 0) | 0 | 0; //@line 433
      if (!$179) {
       $181 = SAFE_HEAP_LOAD($177 | 0, 4, 0) | 0 | 0; //@line 436
       if (!$181) {
        $$3400 = 0; //@line 439
        break;
       } else {
        $$1398 = $181; //@line 442
        $$1402 = $177; //@line 442
       }
      } else {
       $$1398 = $179; //@line 445
       $$1402 = $178; //@line 445
      }
      while (1) {
       $183 = $$1398 + 20 | 0; //@line 448
       $184 = SAFE_HEAP_LOAD($183 | 0, 4, 0) | 0 | 0; //@line 449
       if ($184 | 0) {
        $$1398 = $184; //@line 452
        $$1402 = $183; //@line 452
        continue;
       }
       $186 = $$1398 + 16 | 0; //@line 455
       $187 = SAFE_HEAP_LOAD($186 | 0, 4, 0) | 0 | 0; //@line 456
       if (!$187) {
        break;
       } else {
        $$1398 = $187; //@line 461
        $$1402 = $186; //@line 461
       }
      }
      if ($$1402 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
       _abort(); //@line 467
      } else {
       SAFE_HEAP_STORE($$1402 | 0, 0 | 0, 4);
       $$3400 = $$1398; //@line 471
       break;
      }
     } else {
      $168 = SAFE_HEAP_LOAD($10 + 8 | 0, 4, 0) | 0 | 0; //@line 476
      if ($168 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
       _abort(); //@line 480
      }
      $171 = $168 + 12 | 0; //@line 483
      if ((SAFE_HEAP_LOAD($171 | 0, 4, 0) | 0 | 0) != ($10 | 0)) {
       _abort(); //@line 487
      }
      $174 = $165 + 8 | 0; //@line 490
      if ((SAFE_HEAP_LOAD($174 | 0, 4, 0) | 0 | 0) == ($10 | 0)) {
       SAFE_HEAP_STORE($171 | 0, $165 | 0, 4);
       SAFE_HEAP_STORE($174 | 0, $168 | 0, 4);
       $$3400 = $165; //@line 496
       break;
      } else {
       _abort(); //@line 499
      }
     }
    } while (0);
    if ($163 | 0) {
     $193 = SAFE_HEAP_LOAD($10 + 28 | 0, 4, 0) | 0 | 0; //@line 507
     $194 = 538904 + ($193 << 2) | 0; //@line 508
     do {
      if (($10 | 0) == (SAFE_HEAP_LOAD($194 | 0, 4, 0) | 0 | 0)) {
       SAFE_HEAP_STORE($194 | 0, $$3400 | 0, 4);
       if (!$$3400) {
        SAFE_HEAP_STORE(134651 * 4 | 0, (SAFE_HEAP_LOAD(134651 * 4 | 0, 4, 0) | 0) & ~(1 << $193) | 0, 4);
        break L108;
       }
      } else {
       if ($163 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
        _abort(); //@line 527
       } else {
        SAFE_HEAP_STORE($163 + 16 + (((SAFE_HEAP_LOAD($163 + 16 | 0, 4, 0) | 0 | 0) != ($10 | 0) & 1) << 2) | 0, $$3400 | 0, 4);
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $207 = SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0; //@line 545
     if ($$3400 >>> 0 < $207 >>> 0) {
      _abort(); //@line 548
     }
     SAFE_HEAP_STORE($$3400 + 24 | 0, $163 | 0, 4);
     $210 = $10 + 16 | 0; //@line 553
     $211 = SAFE_HEAP_LOAD($210 | 0, 4, 0) | 0 | 0; //@line 554
     do {
      if ($211 | 0) {
       if ($211 >>> 0 < $207 >>> 0) {
        _abort(); //@line 560
       } else {
        SAFE_HEAP_STORE($$3400 + 16 | 0, $211 | 0, 4);
        SAFE_HEAP_STORE($211 + 24 | 0, $$3400 | 0, 4);
        break;
       }
      }
     } while (0);
     $217 = SAFE_HEAP_LOAD($210 + 4 | 0, 4, 0) | 0 | 0; //@line 572
     if ($217 | 0) {
      if ($217 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
       _abort(); //@line 578
      } else {
       SAFE_HEAP_STORE($$3400 + 20 | 0, $217 | 0, 4);
       SAFE_HEAP_STORE($217 + 24 | 0, $$3400 | 0, 4);
       break;
      }
     }
    }
   }
  } while (0);
  SAFE_HEAP_STORE($$1 + 4 | 0, $135 | 1 | 0, 4);
  SAFE_HEAP_STORE($112 + $135 | 0, $135 | 0, 4);
  if (($$1 | 0) == (SAFE_HEAP_LOAD(134655 * 4 | 0, 4, 0) | 0 | 0)) {
   SAFE_HEAP_STORE(134652 * 4 | 0, $135 | 0, 4);
   return;
  } else {
   $$2 = $135; //@line 602
  }
 } else {
  SAFE_HEAP_STORE($114 | 0, $115 & -2 | 0, 4);
  SAFE_HEAP_STORE($$1 + 4 | 0, $$1382 | 1 | 0, 4);
  SAFE_HEAP_STORE($112 + $$1382 | 0, $$1382 | 0, 4);
  $$2 = $$1382; //@line 612
 }
 $232 = $$2 >>> 3; //@line 614
 if ($$2 >>> 0 < 256) {
  $235 = 538640 + ($232 << 1 << 2) | 0; //@line 618
  $236 = SAFE_HEAP_LOAD(134650 * 4 | 0, 4, 0) | 0 | 0; //@line 619
  $237 = 1 << $232; //@line 620
  if (!($236 & $237)) {
   SAFE_HEAP_STORE(134650 * 4 | 0, $236 | $237 | 0, 4);
   $$0403 = $235; //@line 627
   $$pre$phiZ2D = $235 + 8 | 0; //@line 627
  } else {
   $241 = $235 + 8 | 0; //@line 629
   $242 = SAFE_HEAP_LOAD($241 | 0, 4, 0) | 0 | 0; //@line 630
   if ($242 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
    _abort(); //@line 634
   } else {
    $$0403 = $242; //@line 637
    $$pre$phiZ2D = $241; //@line 637
   }
  }
  SAFE_HEAP_STORE($$pre$phiZ2D | 0, $$1 | 0, 4);
  SAFE_HEAP_STORE($$0403 + 12 | 0, $$1 | 0, 4);
  SAFE_HEAP_STORE($$1 + 8 | 0, $$0403 | 0, 4);
  SAFE_HEAP_STORE($$1 + 12 | 0, $235 | 0, 4);
  return;
 }
 $248 = $$2 >>> 8; //@line 649
 if (!$248) {
  $$0396 = 0; //@line 652
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 656
  } else {
   $253 = ($248 + 1048320 | 0) >>> 16 & 8; //@line 660
   $254 = $248 << $253; //@line 661
   $257 = ($254 + 520192 | 0) >>> 16 & 4; //@line 664
   $259 = $254 << $257; //@line 666
   $262 = ($259 + 245760 | 0) >>> 16 & 2; //@line 669
   $267 = 14 - ($257 | $253 | $262) + ($259 << $262 >>> 15) | 0; //@line 674
   $$0396 = $$2 >>> ($267 + 7 | 0) & 1 | $267 << 1; //@line 680
  }
 }
 $273 = 538904 + ($$0396 << 2) | 0; //@line 683
 SAFE_HEAP_STORE($$1 + 28 | 0, $$0396 | 0, 4);
 SAFE_HEAP_STORE($$1 + 20 | 0, 0 | 0, 4);
 SAFE_HEAP_STORE($$1 + 16 | 0, 0 | 0, 4);
 $277 = SAFE_HEAP_LOAD(134651 * 4 | 0, 4, 0) | 0 | 0; //@line 690
 $278 = 1 << $$0396; //@line 691
 do {
  if (!($277 & $278)) {
   SAFE_HEAP_STORE(134651 * 4 | 0, $277 | $278 | 0, 4);
   SAFE_HEAP_STORE($273 | 0, $$1 | 0, 4);
   SAFE_HEAP_STORE($$1 + 24 | 0, $273 | 0, 4);
   SAFE_HEAP_STORE($$1 + 12 | 0, $$1 | 0, 4);
   SAFE_HEAP_STORE($$1 + 8 | 0, $$1 | 0, 4);
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 712
   $$0384 = SAFE_HEAP_LOAD($273 | 0, 4, 0) | 0 | 0; //@line 712
   while (1) {
    if (((SAFE_HEAP_LOAD($$0384 + 4 | 0, 4, 0) | 0) & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 719
     break;
    }
    $296 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 723
    $298 = SAFE_HEAP_LOAD($296 | 0, 4, 0) | 0 | 0; //@line 725
    if (!$298) {
     label = 121; //@line 728
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 731
     $$0384 = $298; //@line 731
    }
   }
   if ((label | 0) == 121) {
    if ($296 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
     _abort(); //@line 738
    } else {
     SAFE_HEAP_STORE($296 | 0, $$1 | 0, 4);
     SAFE_HEAP_STORE($$1 + 24 | 0, $$0384 | 0, 4);
     SAFE_HEAP_STORE($$1 + 12 | 0, $$1 | 0, 4);
     SAFE_HEAP_STORE($$1 + 8 | 0, $$1 | 0, 4);
     break;
    }
   } else if ((label | 0) == 124) {
    $305 = $$0384 + 8 | 0; //@line 752
    $306 = SAFE_HEAP_LOAD($305 | 0, 4, 0) | 0 | 0; //@line 753
    $307 = SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0; //@line 754
    if ($306 >>> 0 >= $307 >>> 0 & $$0384 >>> 0 >= $307 >>> 0) {
     SAFE_HEAP_STORE($306 + 12 | 0, $$1 | 0, 4);
     SAFE_HEAP_STORE($305 | 0, $$1 | 0, 4);
     SAFE_HEAP_STORE($$1 + 8 | 0, $306 | 0, 4);
     SAFE_HEAP_STORE($$1 + 12 | 0, $$0384 | 0, 4);
     SAFE_HEAP_STORE($$1 + 24 | 0, 0 | 0, 4);
     break;
    } else {
     _abort(); //@line 770
    }
   }
  }
 } while (0);
 $315 = (SAFE_HEAP_LOAD(134658 * 4 | 0, 4, 0) | 0 | 0) + -1 | 0; //@line 777
 SAFE_HEAP_STORE(134658 * 4 | 0, $315 | 0, 4);
 if (!$315) {
  $$0212$in$i = 539056; //@line 781
 } else {
  return;
 }
 while (1) {
  $$0212$i = SAFE_HEAP_LOAD($$0212$in$i | 0, 4, 0) | 0 | 0; //@line 786
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 792
  }
 }
 SAFE_HEAP_STORE(134658 * 4 | 0, -1 | 0, 4);
 return;
}
function _dispose_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0419 = 0, $$0420 = 0, $$0431 = 0, $$0438 = 0, $$1 = 0, $$1418 = 0, $$1426 = 0, $$1429 = 0, $$1433 = 0, $$1437 = 0, $$2 = 0, $$3 = 0, $$3435 = 0, $$pre$phi24Z2D = 0, $$pre$phi26Z2D = 0, $$pre$phiZ2D = 0, $100 = 0, $101 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $116 = 0, $118 = 0, $12 = 0, $124 = 0, $129 = 0, $13 = 0, $130 = 0, $133 = 0, $135 = 0, $137 = 0, $150 = 0, $155 = 0, $157 = 0, $160 = 0, $162 = 0, $165 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $183 = 0, $184 = 0, $197 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $207 = 0, $22 = 0, $222 = 0, $225 = 0, $226 = 0, $227 = 0, $231 = 0, $232 = 0, $238 = 0, $24 = 0, $243 = 0, $244 = 0, $247 = 0, $249 = 0, $252 = 0, $257 = 0, $263 = 0, $267 = 0, $268 = 0, $286 = 0, $288 = 0, $295 = 0, $296 = 0, $297 = 0, $37 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $84 = 0, $87 = 0, $88 = 0, $94 = 0, label = 0;
 $2 = $0 + $1 | 0; //@line 1291
 $4 = SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0; //@line 1293
 L1 : do {
  if (!($4 & 1)) {
   $7 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0; //@line 1298
   if (!($4 & 3)) {
    return;
   }
   $11 = $0 + (0 - $7) | 0; //@line 1305
   $12 = $7 + $1 | 0; //@line 1306
   $13 = SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0; //@line 1307
   if ($11 >>> 0 < $13 >>> 0) {
    _abort(); //@line 1310
   }
   if (($11 | 0) == (SAFE_HEAP_LOAD(134655 * 4 | 0, 4, 0) | 0 | 0)) {
    $100 = $2 + 4 | 0; //@line 1316
    $101 = SAFE_HEAP_LOAD($100 | 0, 4, 0) | 0 | 0; //@line 1317
    if (($101 & 3 | 0) != 3) {
     $$1 = $11; //@line 1321
     $$1418 = $12; //@line 1321
     break;
    }
    SAFE_HEAP_STORE(134652 * 4 | 0, $12 | 0, 4);
    SAFE_HEAP_STORE($100 | 0, $101 & -2 | 0, 4);
    SAFE_HEAP_STORE($11 + 4 | 0, $12 | 1 | 0, 4);
    SAFE_HEAP_STORE($11 + $12 | 0, $12 | 0, 4);
    return;
   }
   $17 = $7 >>> 3; //@line 1334
   if ($7 >>> 0 < 256) {
    $20 = SAFE_HEAP_LOAD($11 + 8 | 0, 4, 0) | 0 | 0; //@line 1338
    $22 = SAFE_HEAP_LOAD($11 + 12 | 0, 4, 0) | 0 | 0; //@line 1340
    $24 = 538640 + ($17 << 1 << 2) | 0; //@line 1342
    if (($20 | 0) != ($24 | 0)) {
     if ($20 >>> 0 < $13 >>> 0) {
      _abort(); //@line 1347
     }
     if ((SAFE_HEAP_LOAD($20 + 12 | 0, 4, 0) | 0 | 0) != ($11 | 0)) {
      _abort(); //@line 1354
     }
    }
    if (($22 | 0) == ($20 | 0)) {
     SAFE_HEAP_STORE(134650 * 4 | 0, (SAFE_HEAP_LOAD(134650 * 4 | 0, 4, 0) | 0) & ~(1 << $17) | 0, 4);
     $$1 = $11; //@line 1365
     $$1418 = $12; //@line 1365
     break;
    }
    if (($22 | 0) == ($24 | 0)) {
     $$pre$phi26Z2D = $22 + 8 | 0; //@line 1371
    } else {
     if ($22 >>> 0 < $13 >>> 0) {
      _abort(); //@line 1375
     }
     $37 = $22 + 8 | 0; //@line 1378
     if ((SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0) == ($11 | 0)) {
      $$pre$phi26Z2D = $37; //@line 1382
     } else {
      _abort(); //@line 1384
     }
    }
    SAFE_HEAP_STORE($20 + 12 | 0, $22 | 0, 4);
    SAFE_HEAP_STORE($$pre$phi26Z2D | 0, $20 | 0, 4);
    $$1 = $11; //@line 1391
    $$1418 = $12; //@line 1391
    break;
   }
   $42 = SAFE_HEAP_LOAD($11 + 24 | 0, 4, 0) | 0 | 0; //@line 1395
   $44 = SAFE_HEAP_LOAD($11 + 12 | 0, 4, 0) | 0 | 0; //@line 1397
   do {
    if (($44 | 0) == ($11 | 0)) {
     $55 = $11 + 16 | 0; //@line 1401
     $56 = $55 + 4 | 0; //@line 1402
     $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0; //@line 1403
     if (!$57) {
      $59 = SAFE_HEAP_LOAD($55 | 0, 4, 0) | 0 | 0; //@line 1406
      if (!$59) {
       $$3 = 0; //@line 1409
       break;
      } else {
       $$1426 = $59; //@line 1412
       $$1429 = $55; //@line 1412
      }
     } else {
      $$1426 = $57; //@line 1415
      $$1429 = $56; //@line 1415
     }
     while (1) {
      $61 = $$1426 + 20 | 0; //@line 1418
      $62 = SAFE_HEAP_LOAD($61 | 0, 4, 0) | 0 | 0; //@line 1419
      if ($62 | 0) {
       $$1426 = $62; //@line 1422
       $$1429 = $61; //@line 1422
       continue;
      }
      $64 = $$1426 + 16 | 0; //@line 1425
      $65 = SAFE_HEAP_LOAD($64 | 0, 4, 0) | 0 | 0; //@line 1426
      if (!$65) {
       break;
      } else {
       $$1426 = $65; //@line 1431
       $$1429 = $64; //@line 1431
      }
     }
     if ($$1429 >>> 0 < $13 >>> 0) {
      _abort(); //@line 1436
     } else {
      SAFE_HEAP_STORE($$1429 | 0, 0 | 0, 4);
      $$3 = $$1426; //@line 1440
      break;
     }
    } else {
     $47 = SAFE_HEAP_LOAD($11 + 8 | 0, 4, 0) | 0 | 0; //@line 1445
     if ($47 >>> 0 < $13 >>> 0) {
      _abort(); //@line 1448
     }
     $49 = $47 + 12 | 0; //@line 1451
     if ((SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0) != ($11 | 0)) {
      _abort(); //@line 1455
     }
     $52 = $44 + 8 | 0; //@line 1458
     if ((SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0) == ($11 | 0)) {
      SAFE_HEAP_STORE($49 | 0, $44 | 0, 4);
      SAFE_HEAP_STORE($52 | 0, $47 | 0, 4);
      $$3 = $44; //@line 1464
      break;
     } else {
      _abort(); //@line 1467
     }
    }
   } while (0);
   if (!$42) {
    $$1 = $11; //@line 1474
    $$1418 = $12; //@line 1474
   } else {
    $70 = SAFE_HEAP_LOAD($11 + 28 | 0, 4, 0) | 0 | 0; //@line 1477
    $71 = 538904 + ($70 << 2) | 0; //@line 1478
    do {
     if (($11 | 0) == (SAFE_HEAP_LOAD($71 | 0, 4, 0) | 0 | 0)) {
      SAFE_HEAP_STORE($71 | 0, $$3 | 0, 4);
      if (!$$3) {
       SAFE_HEAP_STORE(134651 * 4 | 0, (SAFE_HEAP_LOAD(134651 * 4 | 0, 4, 0) | 0) & ~(1 << $70) | 0, 4);
       $$1 = $11; //@line 1491
       $$1418 = $12; //@line 1491
       break L1;
      }
     } else {
      if ($42 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
       _abort(); //@line 1498
      } else {
       SAFE_HEAP_STORE($42 + 16 + (((SAFE_HEAP_LOAD($42 + 16 | 0, 4, 0) | 0 | 0) != ($11 | 0) & 1) << 2) | 0, $$3 | 0, 4);
       if (!$$3) {
        $$1 = $11; //@line 1509
        $$1418 = $12; //@line 1509
        break L1;
       } else {
        break;
       }
      }
     }
    } while (0);
    $84 = SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0; //@line 1517
    if ($$3 >>> 0 < $84 >>> 0) {
     _abort(); //@line 1520
    }
    SAFE_HEAP_STORE($$3 + 24 | 0, $42 | 0, 4);
    $87 = $11 + 16 | 0; //@line 1525
    $88 = SAFE_HEAP_LOAD($87 | 0, 4, 0) | 0 | 0; //@line 1526
    do {
     if ($88 | 0) {
      if ($88 >>> 0 < $84 >>> 0) {
       _abort(); //@line 1532
      } else {
       SAFE_HEAP_STORE($$3 + 16 | 0, $88 | 0, 4);
       SAFE_HEAP_STORE($88 + 24 | 0, $$3 | 0, 4);
       break;
      }
     }
    } while (0);
    $94 = SAFE_HEAP_LOAD($87 + 4 | 0, 4, 0) | 0 | 0; //@line 1544
    if (!$94) {
     $$1 = $11; //@line 1547
     $$1418 = $12; //@line 1547
    } else {
     if ($94 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
      _abort(); //@line 1552
     } else {
      SAFE_HEAP_STORE($$3 + 20 | 0, $94 | 0, 4);
      SAFE_HEAP_STORE($94 + 24 | 0, $$3 | 0, 4);
      $$1 = $11; //@line 1559
      $$1418 = $12; //@line 1559
      break;
     }
    }
   }
  } else {
   $$1 = $0; //@line 1565
   $$1418 = $1; //@line 1565
  }
 } while (0);
 $108 = SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0; //@line 1568
 if ($2 >>> 0 < $108 >>> 0) {
  _abort(); //@line 1571
 }
 $110 = $2 + 4 | 0; //@line 1574
 $111 = SAFE_HEAP_LOAD($110 | 0, 4, 0) | 0 | 0; //@line 1575
 if (!($111 & 2)) {
  $116 = SAFE_HEAP_LOAD(134655 * 4 | 0, 4, 0) | 0 | 0; //@line 1581
  if (($2 | 0) == (SAFE_HEAP_LOAD(134656 * 4 | 0, 4, 0) | 0 | 0)) {
   $118 = (SAFE_HEAP_LOAD(134653 * 4 | 0, 4, 0) | 0 | 0) + $$1418 | 0; //@line 1584
   SAFE_HEAP_STORE(134653 * 4 | 0, $118 | 0, 4);
   SAFE_HEAP_STORE(134656 * 4 | 0, $$1 | 0, 4);
   SAFE_HEAP_STORE($$1 + 4 | 0, $118 | 1 | 0, 4);
   if (($$1 | 0) != ($116 | 0)) {
    return;
   }
   SAFE_HEAP_STORE(134655 * 4 | 0, 0 | 0, 4);
   SAFE_HEAP_STORE(134652 * 4 | 0, 0 | 0, 4);
   return;
  }
  if (($2 | 0) == ($116 | 0)) {
   $124 = (SAFE_HEAP_LOAD(134652 * 4 | 0, 4, 0) | 0 | 0) + $$1418 | 0; //@line 1601
   SAFE_HEAP_STORE(134652 * 4 | 0, $124 | 0, 4);
   SAFE_HEAP_STORE(134655 * 4 | 0, $$1 | 0, 4);
   SAFE_HEAP_STORE($$1 + 4 | 0, $124 | 1 | 0, 4);
   SAFE_HEAP_STORE($$1 + $124 | 0, $124 | 0, 4);
   return;
  }
  $129 = ($111 & -8) + $$1418 | 0; //@line 1612
  $130 = $111 >>> 3; //@line 1613
  L96 : do {
   if ($111 >>> 0 < 256) {
    $133 = SAFE_HEAP_LOAD($2 + 8 | 0, 4, 0) | 0 | 0; //@line 1618
    $135 = SAFE_HEAP_LOAD($2 + 12 | 0, 4, 0) | 0 | 0; //@line 1620
    $137 = 538640 + ($130 << 1 << 2) | 0; //@line 1622
    if (($133 | 0) != ($137 | 0)) {
     if ($133 >>> 0 < $108 >>> 0) {
      _abort(); //@line 1627
     }
     if ((SAFE_HEAP_LOAD($133 + 12 | 0, 4, 0) | 0 | 0) != ($2 | 0)) {
      _abort(); //@line 1634
     }
    }
    if (($135 | 0) == ($133 | 0)) {
     SAFE_HEAP_STORE(134650 * 4 | 0, (SAFE_HEAP_LOAD(134650 * 4 | 0, 4, 0) | 0) & ~(1 << $130) | 0, 4);
     break;
    }
    if (($135 | 0) == ($137 | 0)) {
     $$pre$phi24Z2D = $135 + 8 | 0; //@line 1650
    } else {
     if ($135 >>> 0 < $108 >>> 0) {
      _abort(); //@line 1654
     }
     $150 = $135 + 8 | 0; //@line 1657
     if ((SAFE_HEAP_LOAD($150 | 0, 4, 0) | 0 | 0) == ($2 | 0)) {
      $$pre$phi24Z2D = $150; //@line 1661
     } else {
      _abort(); //@line 1663
     }
    }
    SAFE_HEAP_STORE($133 + 12 | 0, $135 | 0, 4);
    SAFE_HEAP_STORE($$pre$phi24Z2D | 0, $133 | 0, 4);
   } else {
    $155 = SAFE_HEAP_LOAD($2 + 24 | 0, 4, 0) | 0 | 0; //@line 1672
    $157 = SAFE_HEAP_LOAD($2 + 12 | 0, 4, 0) | 0 | 0; //@line 1674
    do {
     if (($157 | 0) == ($2 | 0)) {
      $168 = $2 + 16 | 0; //@line 1678
      $169 = $168 + 4 | 0; //@line 1679
      $170 = SAFE_HEAP_LOAD($169 | 0, 4, 0) | 0 | 0; //@line 1680
      if (!$170) {
       $172 = SAFE_HEAP_LOAD($168 | 0, 4, 0) | 0 | 0; //@line 1683
       if (!$172) {
        $$3435 = 0; //@line 1686
        break;
       } else {
        $$1433 = $172; //@line 1689
        $$1437 = $168; //@line 1689
       }
      } else {
       $$1433 = $170; //@line 1692
       $$1437 = $169; //@line 1692
      }
      while (1) {
       $174 = $$1433 + 20 | 0; //@line 1695
       $175 = SAFE_HEAP_LOAD($174 | 0, 4, 0) | 0 | 0; //@line 1696
       if ($175 | 0) {
        $$1433 = $175; //@line 1699
        $$1437 = $174; //@line 1699
        continue;
       }
       $177 = $$1433 + 16 | 0; //@line 1702
       $178 = SAFE_HEAP_LOAD($177 | 0, 4, 0) | 0 | 0; //@line 1703
       if (!$178) {
        break;
       } else {
        $$1433 = $178; //@line 1708
        $$1437 = $177; //@line 1708
       }
      }
      if ($$1437 >>> 0 < $108 >>> 0) {
       _abort(); //@line 1713
      } else {
       SAFE_HEAP_STORE($$1437 | 0, 0 | 0, 4);
       $$3435 = $$1433; //@line 1717
       break;
      }
     } else {
      $160 = SAFE_HEAP_LOAD($2 + 8 | 0, 4, 0) | 0 | 0; //@line 1722
      if ($160 >>> 0 < $108 >>> 0) {
       _abort(); //@line 1725
      }
      $162 = $160 + 12 | 0; //@line 1728
      if ((SAFE_HEAP_LOAD($162 | 0, 4, 0) | 0 | 0) != ($2 | 0)) {
       _abort(); //@line 1732
      }
      $165 = $157 + 8 | 0; //@line 1735
      if ((SAFE_HEAP_LOAD($165 | 0, 4, 0) | 0 | 0) == ($2 | 0)) {
       SAFE_HEAP_STORE($162 | 0, $157 | 0, 4);
       SAFE_HEAP_STORE($165 | 0, $160 | 0, 4);
       $$3435 = $157; //@line 1741
       break;
      } else {
       _abort(); //@line 1744
      }
     }
    } while (0);
    if ($155 | 0) {
     $183 = SAFE_HEAP_LOAD($2 + 28 | 0, 4, 0) | 0 | 0; //@line 1752
     $184 = 538904 + ($183 << 2) | 0; //@line 1753
     do {
      if (($2 | 0) == (SAFE_HEAP_LOAD($184 | 0, 4, 0) | 0 | 0)) {
       SAFE_HEAP_STORE($184 | 0, $$3435 | 0, 4);
       if (!$$3435) {
        SAFE_HEAP_STORE(134651 * 4 | 0, (SAFE_HEAP_LOAD(134651 * 4 | 0, 4, 0) | 0) & ~(1 << $183) | 0, 4);
        break L96;
       }
      } else {
       if ($155 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
        _abort(); //@line 1772
       } else {
        SAFE_HEAP_STORE($155 + 16 + (((SAFE_HEAP_LOAD($155 + 16 | 0, 4, 0) | 0 | 0) != ($2 | 0) & 1) << 2) | 0, $$3435 | 0, 4);
        if (!$$3435) {
         break L96;
        } else {
         break;
        }
       }
      }
     } while (0);
     $197 = SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0; //@line 1790
     if ($$3435 >>> 0 < $197 >>> 0) {
      _abort(); //@line 1793
     }
     SAFE_HEAP_STORE($$3435 + 24 | 0, $155 | 0, 4);
     $200 = $2 + 16 | 0; //@line 1798
     $201 = SAFE_HEAP_LOAD($200 | 0, 4, 0) | 0 | 0; //@line 1799
     do {
      if ($201 | 0) {
       if ($201 >>> 0 < $197 >>> 0) {
        _abort(); //@line 1805
       } else {
        SAFE_HEAP_STORE($$3435 + 16 | 0, $201 | 0, 4);
        SAFE_HEAP_STORE($201 + 24 | 0, $$3435 | 0, 4);
        break;
       }
      }
     } while (0);
     $207 = SAFE_HEAP_LOAD($200 + 4 | 0, 4, 0) | 0 | 0; //@line 1817
     if ($207 | 0) {
      if ($207 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
       _abort(); //@line 1823
      } else {
       SAFE_HEAP_STORE($$3435 + 20 | 0, $207 | 0, 4);
       SAFE_HEAP_STORE($207 + 24 | 0, $$3435 | 0, 4);
       break;
      }
     }
    }
   }
  } while (0);
  SAFE_HEAP_STORE($$1 + 4 | 0, $129 | 1 | 0, 4);
  SAFE_HEAP_STORE($$1 + $129 | 0, $129 | 0, 4);
  if (($$1 | 0) == (SAFE_HEAP_LOAD(134655 * 4 | 0, 4, 0) | 0 | 0)) {
   SAFE_HEAP_STORE(134652 * 4 | 0, $129 | 0, 4);
   return;
  } else {
   $$2 = $129; //@line 1847
  }
 } else {
  SAFE_HEAP_STORE($110 | 0, $111 & -2 | 0, 4);
  SAFE_HEAP_STORE($$1 + 4 | 0, $$1418 | 1 | 0, 4);
  SAFE_HEAP_STORE($$1 + $$1418 | 0, $$1418 | 0, 4);
  $$2 = $$1418; //@line 1857
 }
 $222 = $$2 >>> 3; //@line 1859
 if ($$2 >>> 0 < 256) {
  $225 = 538640 + ($222 << 1 << 2) | 0; //@line 1863
  $226 = SAFE_HEAP_LOAD(134650 * 4 | 0, 4, 0) | 0 | 0; //@line 1864
  $227 = 1 << $222; //@line 1865
  if (!($226 & $227)) {
   SAFE_HEAP_STORE(134650 * 4 | 0, $226 | $227 | 0, 4);
   $$0438 = $225; //@line 1872
   $$pre$phiZ2D = $225 + 8 | 0; //@line 1872
  } else {
   $231 = $225 + 8 | 0; //@line 1874
   $232 = SAFE_HEAP_LOAD($231 | 0, 4, 0) | 0 | 0; //@line 1875
   if ($232 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
    _abort(); //@line 1879
   } else {
    $$0438 = $232; //@line 1882
    $$pre$phiZ2D = $231; //@line 1882
   }
  }
  SAFE_HEAP_STORE($$pre$phiZ2D | 0, $$1 | 0, 4);
  SAFE_HEAP_STORE($$0438 + 12 | 0, $$1 | 0, 4);
  SAFE_HEAP_STORE($$1 + 8 | 0, $$0438 | 0, 4);
  SAFE_HEAP_STORE($$1 + 12 | 0, $225 | 0, 4);
  return;
 }
 $238 = $$2 >>> 8; //@line 1894
 if (!$238) {
  $$0431 = 0; //@line 1897
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0431 = 31; //@line 1901
  } else {
   $243 = ($238 + 1048320 | 0) >>> 16 & 8; //@line 1905
   $244 = $238 << $243; //@line 1906
   $247 = ($244 + 520192 | 0) >>> 16 & 4; //@line 1909
   $249 = $244 << $247; //@line 1911
   $252 = ($249 + 245760 | 0) >>> 16 & 2; //@line 1914
   $257 = 14 - ($247 | $243 | $252) + ($249 << $252 >>> 15) | 0; //@line 1919
   $$0431 = $$2 >>> ($257 + 7 | 0) & 1 | $257 << 1; //@line 1925
  }
 }
 $263 = 538904 + ($$0431 << 2) | 0; //@line 1928
 SAFE_HEAP_STORE($$1 + 28 | 0, $$0431 | 0, 4);
 SAFE_HEAP_STORE($$1 + 20 | 0, 0 | 0, 4);
 SAFE_HEAP_STORE($$1 + 16 | 0, 0 | 0, 4);
 $267 = SAFE_HEAP_LOAD(134651 * 4 | 0, 4, 0) | 0 | 0; //@line 1935
 $268 = 1 << $$0431; //@line 1936
 if (!($267 & $268)) {
  SAFE_HEAP_STORE(134651 * 4 | 0, $267 | $268 | 0, 4);
  SAFE_HEAP_STORE($263 | 0, $$1 | 0, 4);
  SAFE_HEAP_STORE($$1 + 24 | 0, $263 | 0, 4);
  SAFE_HEAP_STORE($$1 + 12 | 0, $$1 | 0, 4);
  SAFE_HEAP_STORE($$1 + 8 | 0, $$1 | 0, 4);
  return;
 }
 $$0419 = $$2 << (($$0431 | 0) == 31 ? 0 : 25 - ($$0431 >>> 1) | 0); //@line 1957
 $$0420 = SAFE_HEAP_LOAD($263 | 0, 4, 0) | 0 | 0; //@line 1957
 while (1) {
  if (((SAFE_HEAP_LOAD($$0420 + 4 | 0, 4, 0) | 0) & -8 | 0) == ($$2 | 0)) {
   label = 121; //@line 1964
   break;
  }
  $286 = $$0420 + 16 + ($$0419 >>> 31 << 2) | 0; //@line 1968
  $288 = SAFE_HEAP_LOAD($286 | 0, 4, 0) | 0 | 0; //@line 1970
  if (!$288) {
   label = 118; //@line 1973
   break;
  } else {
   $$0419 = $$0419 << 1; //@line 1976
   $$0420 = $288; //@line 1976
  }
 }
 if ((label | 0) == 118) {
  if ($286 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
   _abort(); //@line 1983
  }
  SAFE_HEAP_STORE($286 | 0, $$1 | 0, 4);
  SAFE_HEAP_STORE($$1 + 24 | 0, $$0420 | 0, 4);
  SAFE_HEAP_STORE($$1 + 12 | 0, $$1 | 0, 4);
  SAFE_HEAP_STORE($$1 + 8 | 0, $$1 | 0, 4);
  return;
 } else if ((label | 0) == 121) {
  $295 = $$0420 + 8 | 0; //@line 1996
  $296 = SAFE_HEAP_LOAD($295 | 0, 4, 0) | 0 | 0; //@line 1997
  $297 = SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0; //@line 1998
  if (!($296 >>> 0 >= $297 >>> 0 & $$0420 >>> 0 >= $297 >>> 0)) {
   _abort(); //@line 2003
  }
  SAFE_HEAP_STORE($296 + 12 | 0, $$1 | 0, 4);
  SAFE_HEAP_STORE($295 | 0, $$1 | 0, 4);
  SAFE_HEAP_STORE($$1 + 8 | 0, $296 | 0, 4);
  SAFE_HEAP_STORE($$1 + 12 | 0, $$0420 | 0, 4);
  SAFE_HEAP_STORE($$1 + 24 | 0, 0 | 0, 4);
  return;
 }
}
function _parser_parse_statements($0) {
 $0 = $0 | 0;
 var $$0174 = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $105 = 0, $13 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $32 = 0, $4 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $90 = 0, $91 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10407
 STACKTOP = STACKTOP + 32 | 0; //@line 10408
 $1 = sp; //@line 10409
 $2 = sp + 12 | 0; //@line 10410
 _parser_stack_push_uint8($0, 0); //@line 10411
 $3 = $0 + 180 | 0; //@line 10412
 _parser_stack_iterator_init($0, $3); //@line 10413
 $4 = $0 + 188 | 0; //@line 10414
 L1 : do {
  if ((SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0 | 0) == 1) {
   $7 = $0 + 206 | 0; //@line 10419
   $8 = $0 + 200 | 0; //@line 10420
   $9 = $0 + 168 | 0; //@line 10421
   $10 = $0 + 191 | 0; //@line 10422
   L3 : while (1) {
    if ((SAFE_HEAP_LOAD($7 >> 0 | 0, 1, 0) | 0 | 0) != 1) {
     $$pre$phiZ2D = $9; //@line 10427
     break L1;
    }
    $13 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0; //@line 10430
    $14 = $8; //@line 10431
    $16 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0; //@line 10433
    $19 = SAFE_HEAP_LOAD($14 + 4 | 0, 4, 0) | 0 | 0; //@line 10436
    $20 = $1; //@line 10437
    SAFE_HEAP_STORE($20 | 0, $16 | 0, 4);
    SAFE_HEAP_STORE($20 + 4 | 0, $19 | 0, 4);
    if (0 == 0 & ($19 & -16711681 | 0) == 10) {
     if (!(_memcmp(7167, $16, 10) | 0)) {
      SAFE_HEAP_STORE($9 | 0, $13 | 1 | 0, 4);
     }
    }
    _lexer_next_token($0); //@line 10456
    $32 = SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0 | 0; //@line 10457
    switch ($32 << 24 >> 24) {
    case 58:
     {
      label = 12; //@line 10460
      break;
     }
    case 54:
     {
      break;
     }
    default:
     {
      if (($32 + -15 & 255) < 36 | ((SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0) & 1) == 0) {
       break L3;
      }
      switch ($32 << 24 >> 24) {
      case 57:
      case 53:
      case 52:
       {
        break L3;
        break;
       }
      case 58:
       {
        label = 12; //@line 10482
        break;
       }
      default:
       {}
      }
     }
    }
    if ((label | 0) == 12) {
     label = 0; //@line 10491
     _lexer_next_token($0); //@line 10492
    }
    do {
     if (!((SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0) & 2)) {
      if ((SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0 | 0) == 1) {
       if ((SAFE_HEAP_LOAD($7 >> 0 | 0, 1, 0) | 0 | 0) == 1) {
        break;
       }
      }
      _lexer_construct_literal_object($0, $1, 1); //@line 10508
      _parser_emit_cbc_literal_from_token($0, 40); //@line 10509
      _parser_emit_cbc($0, 8); //@line 10510
      _parser_flush_cbc($0); //@line 10511
     }
    } while (0);
    if ((SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0 | 0) != 1) {
     $$pre$phiZ2D = $9; //@line 10517
     break L1;
    }
   }
   SAFE_HEAP_STORE($9 | 0, $13 | 0, 4);
   _lexer_construct_literal_object($0, $1, 1); //@line 10522
   _parser_emit_cbc_literal_from_token($0, 40); //@line 10523
   SAFE_HEAP_STORE($0 + 190 >> 0 | 0, SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($4 >> 0 | 0, 81 | 0, 1);
   $$pre$phiZ2D = $9; //@line 10528
  } else {
   $$pre$phiZ2D = $0 + 168 | 0; //@line 10531
  }
 } while (0);
 if (((SAFE_HEAP_LOAD($$pre$phiZ2D | 0, 4, 0) | 0) & 129 | 0) == 129) {
  _parser_raise_error($0, 69); //@line 10538
 }
 $51 = $0 + 190 | 0; //@line 10541
 $52 = $0 + 191 | 0; //@line 10542
 $53 = $0 + 304 | 0; //@line 10543
 $54 = $1 + 8 | 0; //@line 10544
 $55 = $0 + 172 | 0; //@line 10545
 $56 = $1 + 8 | 0; //@line 10546
 $57 = $0 + 260 | 0; //@line 10547
 $58 = $1 + 4 | 0; //@line 10548
 $59 = $0 + 240 | 0; //@line 10549
 $60 = $0 + 206 | 0; //@line 10550
 L28 : while (1) {
  $61 = SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0 | 0; //@line 10552
  L30 : do {
   switch ($61 << 24 >> 24) {
   case 0:
    {
     if (!(SAFE_HEAP_LOAD($53 >> 0 | 0, 1, 0) | 0)) {
      label = 85; //@line 10559
      break L28;
     } else {
      label = 57; //@line 10562
     }
     break;
    }
   case 58:
    {
     break;
    }
   case 54:
    {
     switch (SAFE_HEAP_LOAD($53 >> 0 | 0, 1, 0) | 0 | 0) {
     case 11:
     case 10:
     case 9:
     case 8:
     case 7:
     case 4:
     case 3:
     case 2:
      {
       label = 24; //@line 10573
       break L28;
       break;
      }
     default:
      {}
     }
     break;
    }
   case 51:
    {
     _parser_stack_push_uint8($0, 1); //@line 10583
     _parser_stack_iterator_init($0, $3); //@line 10584
     _lexer_next_token($0); //@line 10585
     continue L28;
     break;
    }
   case 66:
    {
     _parser_parse_var_statement($0); //@line 10590
     break;
    }
   case 75:
    {
     _parser_parse_function_statement($0); //@line 10594
     continue L28;
     break;
    }
   case 78:
    {
     _parser_parse_if_statement_start($0); //@line 10599
     continue L28;
     break;
    }
   case 72:
    {
     _parser_parse_switch_statement_start($0); //@line 10604
     continue L28;
     break;
    }
   case 62:
    {
     SAFE_HEAP_STORE($1 | 0, SAFE_HEAP_LOAD($57 | 0, 4, 0) | 0 | 0, 4);
     SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
     _parser_stack_push($0, $1, 4); //@line 10612
     _parser_stack_push($0, $2, 4); //@line 10613
     _parser_stack_push_uint8($0, 7); //@line 10614
     _parser_stack_iterator_init($0, $3); //@line 10615
     _lexer_next_token($0); //@line 10616
     continue L28;
     break;
    }
   case 73:
    {
     _parser_parse_while_statement_start($0); //@line 10621
     continue L28;
     break;
    }
   case 71:
    {
     _parser_parse_for_statement_start($0); //@line 10626
     continue L28;
     break;
    }
   case 76:
    {
     _parser_parse_with_statement_start($0); //@line 10631
     continue L28;
     break;
    }
   case 80:
    {
     _lexer_next_token($0); //@line 10636
     if ((SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0 | 0) != 51) {
      label = 35; //@line 10640
      break L28;
     }
     SAFE_HEAP_STORE($1 | 0, 0 | 0, 4);
     _parser_emit_cbc_forward_branch($0, 269, $58); //@line 10644
     _parser_stack_push($0, $1, 12); //@line 10645
     _parser_stack_push_uint8($0, 12); //@line 10646
     _parser_stack_iterator_init($0, $3); //@line 10647
     _lexer_next_token($0); //@line 10648
     continue L28;
     break;
    }
   case 77:
    {
     _parser_parse_default_statement($0); //@line 10653
     continue L28;
     break;
    }
   case 63:
    {
     _parser_parse_case_statement($0); //@line 10658
     continue L28;
     break;
    }
   case 61:
    {
     _parser_parse_break_statement($0); //@line 10663
     break;
    }
   case 70:
    {
     _parser_parse_continue_statement($0); //@line 10667
     break;
    }
   case 79:
    {
     _lexer_next_token($0); //@line 10671
     if ((SAFE_HEAP_LOAD($52 >> 0 | 0, 1, 0) | 0) & 1) {
      label = 42; //@line 10676
      break L28;
     }
     _parser_parse_expression($0, 0); //@line 10679
     _parser_emit_cbc($0, 12); //@line 10680
     break;
    }
   case 69:
    {
     if (!((SAFE_HEAP_LOAD($$pre$phiZ2D | 0, 4, 0) | 0) & 2)) {
      label = 45; //@line 10688
      break L28;
     }
     _lexer_next_token($0); //@line 10691
     L52 : do {
      if (!((SAFE_HEAP_LOAD($52 >> 0 | 0, 1, 0) | 0) & 1)) {
       switch (SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0 | 0) {
       case 54:
       case 58:
        {
         break L52;
         break;
        }
       default:
        {}
       }
       _parser_parse_expression($0, 0); //@line 10706
       if ((SAFE_HEAP_LOAD($59 | 0, 2, 0) | 0 | 0) == 40) {
        SAFE_HEAP_STORE($59 | 0, 71 | 0, 2);
        break L30;
       } else {
        _parser_emit_cbc($0, 69); //@line 10713
        break L30;
       }
      }
     } while (0);
     _parser_emit_cbc($0, 70); //@line 10718
     break;
    }
   case 74:
    {
     _parser_emit_cbc($0, 280); //@line 10722
     _lexer_next_token($0); //@line 10723
     break;
    }
   case 1:
    {
     if (!(SAFE_HEAP_LOAD($60 >> 0 | 0, 1, 0) | 0)) {
      if (_lexer_check_colon($0) | 0) {
       _parser_parse_label($0); //@line 10732
       _lexer_next_token($0); //@line 10733
       _lexer_next_token($0); //@line 10734
       continue L28;
      } else {
       $91 = SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0 | 0; //@line 10738
       label = 58; //@line 10739
       break L30;
      }
     } else {
      label = 57; //@line 10743
     }
     break;
    }
   default:
    {
     $91 = $61; //@line 10748
     label = 58; //@line 10749
    }
   }
  } while (0);
  if ((label | 0) == 57) {
   label = 0; //@line 10754
   $$0174 = 2 - ((SAFE_HEAP_LOAD($$pre$phiZ2D | 0, 4, 0) | 0 | 0) >>> 1 & 1) | 0; //@line 10759
   label = 60; //@line 10760
  } else if ((label | 0) == 58) {
   label = 0; //@line 10763
   $90 = 2 - ((SAFE_HEAP_LOAD($$pre$phiZ2D | 0, 4, 0) | 0 | 0) >>> 1 & 1) | 0; //@line 10767
   if ($91 << 24 >> 24 == 81) {
    SAFE_HEAP_STORE($4 >> 0 | 0, SAFE_HEAP_LOAD($51 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
    $$0174 = $90 | 8; //@line 10773
    label = 60; //@line 10774
   } else {
    $$0174 = $90; //@line 10776
    label = 60; //@line 10777
   }
  }
  if ((label | 0) == 60) {
   label = 0; //@line 10781
   _parser_parse_expression($0, $$0174); //@line 10782
  }
  _parser_flush_cbc($0); //@line 10784
  L72 : do {
   switch (SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0 | 0) {
   case 54:
    {
     $96 = SAFE_HEAP_LOAD($53 >> 0 | 0, 1, 0) | 0 | 0; //@line 10789
     switch ($96 << 24 >> 24) {
     case 0:
      {
       label = 68; //@line 10792
       break L28;
       break;
      }
     case 1:
      {
       _parser_stack_pop_uint8($0); //@line 10797
       _parser_stack_iterator_init($0, $3); //@line 10798
       _lexer_next_token($0); //@line 10799
       label = 74; //@line 10800
       break L72;
       break;
      }
     case 6:
     case 5:
      {
       _parser_stack_pop_uint8($0); //@line 10806
       _parser_stack_pop($0, $1, 4); //@line 10807
       _parser_stack_pop($0, $2, 12); //@line 10808
       _parser_stack_iterator_init($0, $3); //@line 10809
       if ($96 << 24 >> 24 != 5) {
        _parser_set_branch_to_current_position($0, $2); //@line 10811
       }
       _parser_set_breaks_to_current_position($0, SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0); //@line 10814
       _lexer_next_token($0); //@line 10815
       label = 74; //@line 10816
       break L72;
       break;
      }
     case 12:
      {
       _parser_parse_try_statement_end($0); //@line 10821
       label = 74; //@line 10822
       break L72;
       break;
      }
     default:
      {
       $105 = $96; //@line 10827
       break L72;
      }
     }
     break;
    }
   case 58:
    {
     _lexer_next_token($0); //@line 10834
     label = 74; //@line 10835
     break;
    }
   case 0:
    {
     label = 74; //@line 10839
     break;
    }
   default:
    {
     if (!((SAFE_HEAP_LOAD($52 >> 0 | 0, 1, 0) | 0) & 1)) {
      label = 73; //@line 10847
      break L28;
     } else {
      label = 74; //@line 10850
     }
    }
   }
  } while (0);
  L83 : while (1) {
   if ((label | 0) == 74) {
    label = 0; //@line 10857
    $105 = SAFE_HEAP_LOAD($53 >> 0 | 0, 1, 0) | 0 | 0; //@line 10859
   }
   switch ($105 << 24 >> 24) {
   case 2:
    {
     _parser_stack_pop_uint8($0); //@line 10863
     _parser_stack_pop($0, $1, 12); //@line 10864
     _parser_stack_iterator_init($0, $3); //@line 10865
     _parser_set_breaks_to_current_position($0, SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0); //@line 10867
     label = 74; //@line 10868
     continue L83;
     break;
    }
   case 3:
    {
     if (_parser_parse_if_statement_end($0) | 0) {
      continue L28;
     } else {
      label = 74; //@line 10877
      continue L83;
     }
     break;
    }
   case 4:
    {
     _parser_stack_pop_uint8($0); //@line 10883
     _parser_stack_pop($0, $1, 8); //@line 10884
     _parser_stack_iterator_init($0, $3); //@line 10885
     _parser_set_branch_to_current_position($0, $1); //@line 10886
     label = 74; //@line 10887
     continue L83;
     break;
    }
   case 7:
    {
     _parser_parse_do_while_statement_end($0); //@line 10892
     if ((SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0 | 0) != 58) {
      label = 74; //@line 10896
      continue L83;
     }
     _lexer_next_token($0); //@line 10899
     label = 74; //@line 10900
     continue L83;
     break;
    }
   case 8:
    {
     _parser_parse_while_statement_end($0); //@line 10905
     label = 74; //@line 10906
     continue L83;
     break;
    }
   case 9:
    {
     _parser_parse_for_statement_end($0); //@line 10911
     label = 74; //@line 10912
     continue L83;
     break;
    }
   case 10:
    {
     _parser_stack_pop_uint8($0); //@line 10917
     _parser_stack_pop($0, $2, 4); //@line 10918
     _parser_stack_pop($0, $1, 12); //@line 10919
     _parser_stack_iterator_init($0, $3); //@line 10920
     _parser_set_continues_to_current_position($0, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0); //@line 10922
     _parser_flush_cbc($0); //@line 10923
     SAFE_HEAP_STORE($55 | 0, (SAFE_HEAP_LOAD($55 | 0, 2, 1) | 0 | 0) + 65532 | 0, 2);
     _parser_emit_cbc_backward_branch($0, 265, SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0); //@line 10930
     _parser_set_breaks_to_current_position($0, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0); //@line 10932
     _parser_set_branch_to_current_position($0, $1); //@line 10933
     label = 74; //@line 10934
     continue L83;
     break;
    }
   case 11:
    {
     _parser_parse_with_statement_end($0); //@line 10939
     label = 74; //@line 10940
     continue L83;
     break;
    }
   default:
    {
     continue L28;
    }
   }
  }
 }
 do {
  if ((label | 0) == 24) {
   _parser_raise_error($0, 54); //@line 10952
  } else if ((label | 0) == 35) {
   _parser_raise_error($0, 40); //@line 10956
  } else if ((label | 0) == 42) {
   _parser_raise_error($0, 52); //@line 10960
  } else if ((label | 0) == 45) {
   _parser_raise_error($0, 65); //@line 10964
  } else if ((label | 0) == 68) {
   if (!((SAFE_HEAP_LOAD($$pre$phiZ2D | 0, 4, 0) | 0) & 4)) {
    _parser_raise_error($0, 66); //@line 10972
   } else {
    _parser_stack_pop_uint8($0); //@line 10975
    SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
    break;
   }
  } else if ((label | 0) == 73) {
   _parser_raise_error($0, 45); //@line 10981
  } else if ((label | 0) == 85) {
   _parser_stack_pop_uint8($0); //@line 10985
   SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
   if ((SAFE_HEAP_LOAD($$pre$phiZ2D | 0, 4, 0) | 0) & 4 | 0) {
    _parser_raise_error($0, 54); //@line 10991
   }
  }
 } while (0);
 STACKTOP = sp; //@line 10996
 return;
}
function _ecma_op_object_get_property_names($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0276$ = 0, $$0276$lcssa = 0, $$0276$ph364 = 0, $$0276356 = 0, $$0278$ph$lcssa = 0, $$0278$ph363 = 0, $$0280351 = 0, $$0285353 = 0, $$0286 = 0, $$0292378 = 0, $$0293375 = 0, $$0294372 = 0, $$0295$lcssa = 0, $$0295$sink = 0, $$0295367 = 0, $$0296352 = 0, $$0297 = 0, $$0300$ph = 0, $$0300$ph336 = 0, $$0303$ph = 0, $$0382 = 0, $$1281 = 0, $$2282$ph362 = 0, $$2282355 = 0, $$2305374 = 0, $$3283 = 0, $$3283$ph = 0, $$3283$ph337 = 0, $$3289$off0 = 0, $$4284 = 0, $$5 = 0, $10 = 0, $100 = 0, $105 = 0, $107 = 0, $11 = 0, $113 = 0, $116 = 0, $12 = 0, $124 = 0, $135 = 0, $136 = 0, $138 = 0, $143 = 0, $144 = 0, $145 = 0, $149 = 0, $15 = 0, $151 = 0, $153 = 0, $156 = 0, $158 = 0, $16 = 0, $17 = 0, $20 = 0, $23 = 0, $28 = 0, $29 = 0, $30 = 0, $35 = 0, $4 = 0, $40 = 0, $43 = 0, $45 = 0, $47 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $58 = 0, $6 = 0, $60 = 0, $64 = 0, $69 = 0, $7 = 0, $71 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $86 = 0, $89 = 0, $93 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$327 = 0, label = 0, sp = 0, $$0294372$looptemp = 0;
 sp = STACKTOP; //@line 13294
 STACKTOP = STACKTOP + 32 | 0; //@line 13295
 $4 = _ecma_new_values_collection(0, 0, 0) | 0; //@line 13296
 $5 = _ecma_new_values_collection(0, 0, 0) | 0; //@line 13297
 $6 = _ecma_get_object_type($0) | 0; //@line 13298
 $7 = _ecma_get_object_is_builtin($0) | 0; //@line 13299
 $8 = sp; //@line 13300
 _memset($8 | 0, 0, 32) | 0; //@line 13301
 L1 : do {
  if ($0 | 0) {
   $10 = ($1 ^ 1) & 1; //@line 13306
   $11 = $0 + 8 | 0; //@line 13307
   $$0382 = $0; //@line 13308
   L3 : while (1) {
    $12 = _ecma_new_values_collection(0, 0, 0) | 0; //@line 13310
    L5 : do {
     if ($7) {
      _ecma_builtin_list_lazy_property_names($0, $2, $12, $5); //@line 13313
     } else {
      switch ($6 | 0) {
      case 6:
      case 0:
       {
        break L5;
        break;
       }
      case 2:
       {
        _ecma_op_function_list_lazy_property_names($0, $2, $12, $5); //@line 13321
        break L5;
        break;
       }
      case 3:
       {
        _ecma_op_external_function_list_lazy_property_names($2, $12, $5); //@line 13326
        break L5;
        break;
       }
      case 5:
       {
        _ecma_op_bound_function_list_lazy_property_names($2, $12, $5); //@line 13331
        break L5;
        break;
       }
      case 1:
       {
        if ((SAFE_HEAP_LOAD($11 | 0, 2, 0) | 0 | 0) != 28) {
         break L5;
        }
        _ecma_op_string_list_lazy_property_names($0, $2, $12, $5); //@line 13341
        break L5;
        break;
       }
      case 4:
       {
        _ecma_op_array_list_lazy_property_names($0, $2, $12, $5); //@line 13346
        break L5;
        break;
       }
      default:
       {
        break L3;
       }
      }
     }
    } while (0);
    $15 = _ecma_collection_iterator_init($12) | 0; //@line 13356
    $16 = _llvm_stacksave() | 0; //@line 13357
    $17 = STACKTOP; //@line 13358
    STACKTOP = STACKTOP + 32 | 0; //@line 13358
    _memset($17 | 0, 0, 32) | 0; //@line 13359
    if ($15 | 0) {
     $$0280351 = $15; //@line 13362
     do {
      $20 = _ecma_get_string_from_value(SAFE_HEAP_LOAD($$0280351 | 0, 4, 0) | 0 | 0) | 0; //@line 13365
      $$0280351 = _ecma_collection_iterator_next($$0280351) | 0; //@line 13366
      $23 = SAFE_HEAP_LOAD($20 + 2 | 0, 2, 0) | 0 | 0; //@line 13368
      $28 = $17 + ((($23 & 65535) >>> 5 & 7) << 2) | 0; //@line 13374
      $29 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0; //@line 13375
      $30 = 1 << ($23 & 31); //@line 13376
      if (!($30 & $29)) {
       SAFE_HEAP_STORE($28 | 0, $30 | $29 | 0, 4);
      }
     } while (($$0280351 | 0) != 0);
    }
    $35 = _ecma_get_property_list($$0382) | 0; //@line 13391
    L23 : do {
     if ($35 | 0) {
      if ((SAFE_HEAP_LOAD($35 >> 0 | 0, 1, 0) | 0 | 0) == 4) {
       $40 = SAFE_HEAP_LOAD($35 + 2 | 0, 2, 0) | 0 | 0; //@line 13399
       if (!($40 << 16 >> 16)) {
        break;
       }
       $43 = _jmem_decompress_pointer($40 & 65535) | 0; //@line 13405
       if (!$43) {
        break;
       } else {
        $$0285353 = $43; //@line 13410
       }
      } else {
       $$0285353 = $35; //@line 13413
      }
      do {
       $45 = $$0285353 + 12 | 0; //@line 13416
       $$0296352 = 0; //@line 13417
       do {
        $52 = $$0285353 + $$0296352 | 0; //@line 13419
        $53 = SAFE_HEAP_LOAD($52 >> 0 | 0, 1, 0) | 0 | 0; //@line 13420
        $54 = $53 & 255; //@line 13421
        if ((($54 & 3) + -1 | 0) >>> 0 < 2) {
         $58 = SAFE_HEAP_LOAD($45 + ($$0296352 << 1) | 0, 2, 0) | 0 | 0; //@line 13429
         if (!(($54 & 192 | 0) == 64 & ($58 & 65535) > 75)) {
          $60 = _ecma_string_from_property_name($53, $58) | 0; //@line 13433
          if ($2) {
           if (_ecma_is_property_enumerable(SAFE_HEAP_LOAD($52 >> 0 | 0, 1, 0) | 0 | 0) | 0) {
            label = 29; //@line 13438
           } else {
            _ecma_append_to_values_collection($5, _ecma_make_string_value($60) | 0, 1); //@line 13441
           }
          } else {
           label = 29; //@line 13444
          }
          do {
           if ((label | 0) == 29) {
            label = 0; //@line 13448
            $64 = SAFE_HEAP_LOAD($60 + 2 | 0, 2, 0) | 0 | 0; //@line 13450
            $69 = $17 + ((($64 & 65535) >>> 5 & 7) << 2) | 0; //@line 13456
            $71 = 1 << ($64 & 31); //@line 13458
            if ($71 & (SAFE_HEAP_LOAD($69 | 0, 4, 0) | 0) | 0) {
             $74 = _ecma_collection_iterator_init($12) | 0; //@line 13462
             if ($74 | 0) {
              $$0297 = 1; //@line 13465
              $$1281 = $74; //@line 13465
              do {
               $76 = _ecma_get_string_from_value(SAFE_HEAP_LOAD($$1281 | 0, 4, 0) | 0 | 0) | 0; //@line 13468
               $$1281 = _ecma_collection_iterator_next($$1281) | 0; //@line 13469
               $78 = _ecma_compare_ecma_strings($60, $76) | 0; //@line 13470
               $$0297 = $78 ? 0 : $$0297; //@line 13471
              } while (($$1281 | 0) != 0 & ($78 ^ 1));
              if (!($$0297 & 1)) {
               break;
              }
             }
            }
            SAFE_HEAP_STORE($69 | 0, SAFE_HEAP_LOAD($69 | 0, 4, 0) | 0 | $71 | 0, 4);
            _ecma_append_to_values_collection($12, _ecma_make_string_value($60) | 0, 1); //@line 13492
           }
          } while (0);
          _ecma_deref_ecma_string($60); //@line 13495
         }
        }
        $$0296352 = $$0296352 + 1 | 0; //@line 13498
       } while (($$0296352 | 0) != 2);
       $47 = SAFE_HEAP_LOAD($$0285353 + 2 | 0, 2, 0) | 0 | 0; //@line 13507
       if (!($47 << 16 >> 16)) {
        break L23;
       }
       $$0285353 = _jmem_decompress_pointer($47 & 65535) | 0; //@line 13513
      } while (($$0285353 | 0) != 0);
     }
    } while (0);
    $86 = _ecma_collection_iterator_init($12) | 0; //@line 13523
    L51 : do {
     if (!$86) {
      $$0276$lcssa = 0; //@line 13527
      $$0278$ph$lcssa = 0; //@line 13527
     } else {
      $$0276$ph364 = 0; //@line 13529
      $$0278$ph363 = 0; //@line 13529
      $$2282$ph362 = $86; //@line 13529
      while (1) {
       $$0276356 = $$0276$ph364; //@line 13531
       $$2282355 = $$2282$ph362; //@line 13531
       while (1) {
        $89 = _ecma_get_string_from_value(SAFE_HEAP_LOAD($$2282355 | 0, 4, 0) | 0 | 0) | 0; //@line 13534
        $$2282355 = _ecma_collection_iterator_next($$2282355) | 0; //@line 13535
        if ((_ecma_string_get_array_index($89) | 0) != -1) {
         break;
        }
        $$0276$ = $$0276356 + $10 | 0; //@line 13541
        if (!$$2282355) {
         $$0276$lcssa = $$0276$; //@line 13544
         $$0278$ph$lcssa = $$0278$ph363; //@line 13544
         break L51;
        } else {
         $$0276356 = $$0276$; //@line 13547
        }
       }
       $93 = $$0278$ph363 + 1 | 0; //@line 13550
       if (!$$2282355) {
        $$0276$lcssa = $$0276356; //@line 13553
        $$0278$ph$lcssa = $93; //@line 13553
        break;
       } else {
        $$0276$ph364 = $$0276356; //@line 13556
        $$0278$ph363 = $93; //@line 13556
        $$2282$ph362 = $$2282355; //@line 13556
       }
      }
     }
    } while (0);
    $96 = $$0276$lcssa + $$0278$ph$lcssa | 0; //@line 13561
    $97 = $96 << 2; //@line 13562
    $98 = _jmem_heap_alloc_block($97) | 0; //@line 13563
    $99 = $$0278$ph$lcssa << 2; //@line 13564
    $100 = _jmem_heap_alloc_block($99) | 0; //@line 13565
    $$0300$ph = 0; //@line 13567
    $$0303$ph = $96; //@line 13567
    $$3283$ph = _ecma_collection_iterator_init($12) | 0; //@line 13567
    L59 : while (1) {
     $$0300$ph336 = $$0300$ph; //@line 13569
     $$3283$ph337 = $$3283$ph; //@line 13569
     L61 : while (1) {
      $$3283 = $$3283$ph337; //@line 13571
      while (1) {
       if (!$$3283) {
        break L59;
       }
       $105 = _ecma_get_string_from_value(SAFE_HEAP_LOAD($$3283 | 0, 4, 0) | 0 | 0) | 0; //@line 13578
       $$3283 = _ecma_collection_iterator_next($$3283) | 0; //@line 13579
       $107 = _ecma_string_get_array_index($105) | 0; //@line 13580
       if (($107 | 0) != -1) {
        break;
       }
       if (!$1) {
        break L61;
       }
      }
      L68 : do {
       if (!$$0300$ph336) {
        $$0295$lcssa = 0; //@line 13594
       } else {
        $$0295367 = 0; //@line 13596
        while (1) {
         if ($107 >>> 0 >= (SAFE_HEAP_LOAD($100 + ($$0295367 << 2) | 0, 4, 0) | 0 | 0) >>> 0) {
          $$0295$lcssa = $$0295367; //@line 13602
          break L68;
         }
         $113 = $$0295367 + 1 | 0; //@line 13605
         if ($113 >>> 0 < $$0300$ph336 >>> 0) {
          $$0295367 = $113; //@line 13608
         } else {
          $$0295$lcssa = $113; //@line 13610
          break;
         }
        }
       }
      } while (0);
      $116 = $$0300$ph336 + 1 | 0; //@line 13617
      if (($$0295$lcssa | 0) == ($$0300$ph336 | 0)) {
       $$0295$sink = $$0300$ph336; //@line 13619
      } else {
       if ($$0300$ph336 >>> 0 > $$0295$lcssa >>> 0) {
        $$0294372 = $$0300$ph336; //@line 13623
        do {
         $$0294372$looptemp = $$0294372;
         $$0294372 = $$0294372 + -1 | 0; //@line 13625
         SAFE_HEAP_STORE($100 + ($$0294372$looptemp << 2) | 0, SAFE_HEAP_LOAD($100 + ($$0294372 << 2) | 0, 4, 0) | 0 | 0, 4);
        } while ($$0294372 >>> 0 > $$0295$lcssa >>> 0);
        $$0295$sink = $$0295$lcssa; //@line 13634
       } else {
        $$0295$sink = $$0295$lcssa; //@line 13639
       }
      }
      SAFE_HEAP_STORE($100 + ($$0295$sink << 2) | 0, $107 | 0, 4);
      $$0300$ph336 = $116; //@line 13644
      $$3283$ph337 = $$3283; //@line 13644
     }
     $124 = $$0303$ph + -1 | 0; //@line 13646
     _ecma_ref_ecma_string($105); //@line 13648
     SAFE_HEAP_STORE($98 + ($124 << 2) | 0, $105 | 0, 4);
     $$0300$ph = $$0300$ph336; //@line 13650
     $$0303$ph = $124; //@line 13650
     $$3283$ph = $$3283; //@line 13650
    }
    if (!$$0278$ph$lcssa) {
     if ($100 | 0) {
      label = 59; //@line 13656
     }
    } else {
     $$0293375 = 0; //@line 13659
     $$2305374 = $$0303$ph; //@line 13659
     do {
      $$2305374 = $$2305374 + -1 | 0; //@line 13664
      SAFE_HEAP_STORE($98 + ($$2305374 << 2) | 0, _ecma_new_ecma_string_from_uint32(SAFE_HEAP_LOAD($100 + ($$0293375 << 2) | 0, 4, 0) | 0 | 0) | 0 | 0, 4);
      $$0293375 = $$0293375 + 1 | 0; //@line 13667
     } while (($$0293375 | 0) != ($$0278$ph$lcssa | 0));
     label = 59; //@line 13670
    }
    if ((label | 0) == 59) {
     label = 0; //@line 13678
     _jmem_heap_free_block($100, $99); //@line 13679
    }
    _ecma_free_values_collection($12, 1); //@line 13681
    if ($96 | 0) {
     $$0292378 = 0; //@line 13684
     do {
      $135 = $98 + ($$0292378 << 2) | 0; //@line 13686
      $136 = SAFE_HEAP_LOAD($135 | 0, 4, 0) | 0 | 0; //@line 13687
      $138 = SAFE_HEAP_LOAD($136 + 2 | 0, 2, 0) | 0 | 0; //@line 13689
      $143 = $8 + ((($138 & 65535) >>> 5 & 7) << 2) | 0; //@line 13695
      $144 = SAFE_HEAP_LOAD($143 | 0, 4, 0) | 0 | 0; //@line 13696
      $145 = 1 << ($138 & 31); //@line 13697
      if (!($145 & $144)) {
       SAFE_HEAP_STORE($143 | 0, $145 | $144 | 0, 4);
       label = 67; //@line 13703
      } else {
       $149 = _ecma_collection_iterator_init($4) | 0; //@line 13705
       if (!$149) {
        label = 67; //@line 13708
       } else {
        $$0286 = 1; //@line 13710
        $$4284 = $149; //@line 13710
        do {
         $151 = _ecma_get_string_from_value(SAFE_HEAP_LOAD($$4284 | 0, 4, 0) | 0 | 0) | 0; //@line 13713
         $$4284 = _ecma_collection_iterator_next($$4284) | 0; //@line 13714
         $153 = _ecma_compare_ecma_strings($136, $151) | 0; //@line 13715
         $$0286 = $153 ? 0 : $$0286; //@line 13716
        } while (($$4284 | 0) != 0 & ($153 ^ 1));
        if ($$0286 & 1) {
         label = 67; //@line 13729
        }
       }
      }
      do {
       if ((label | 0) == 67) {
        label = 0; //@line 13735
        $156 = _ecma_collection_iterator_init($5) | 0; //@line 13736
        if ($156 | 0) {
         $$3289$off0 = 1; //@line 13739
         $$5 = $156; //@line 13739
         do {
          $158 = _ecma_get_string_from_value(SAFE_HEAP_LOAD($$5 | 0, 4, 0) | 0 | 0) | 0; //@line 13742
          $$5 = _ecma_collection_iterator_next($$5) | 0; //@line 13743
          $not$327 = (_ecma_compare_ecma_strings($136, $158) | 0) ^ 1; //@line 13745
          $$3289$off0 = $$3289$off0 & $not$327; //@line 13746
         } while (($$5 | 0) != 0 & $not$327);
         if (!$$3289$off0) {
          break;
         }
        }
        _ecma_append_to_values_collection($4, _ecma_make_string_value(SAFE_HEAP_LOAD($135 | 0, 4, 0) | 0 | 0) | 0, 1); //@line 13761
       }
      } while (0);
      _ecma_deref_ecma_string($136); //@line 13764
      $$0292378 = $$0292378 + 1 | 0; //@line 13765
     } while (($$0292378 | 0) != ($96 | 0));
    }
    if ($98 | 0) {
     _jmem_heap_free_block($98, $97); //@line 13776
    }
    _llvm_stackrestore($16 | 0); //@line 13778
    if (!$3) {
     break L1;
    }
    $$0382 = _ecma_get_object_prototype($$0382) | 0; //@line 13782
    if (!$$0382) {
     break L1;
    }
   }
  }
 } while (0);
 _ecma_free_values_collection($5, 1); //@line 13793
 STACKTOP = sp; //@line 13794
 return $4 | 0; //@line 13794
}
function _parser_parse_source($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$reg2mem93$0 = 0, $$byval_copy = 0, $$reg2mem42$0 = 0, $$reg2mem42$0$phi = 0, $$reg2mem95$0 = 0, $$reg2mem97$0 = 0, $$sink$reg2mem$0 = 0, $$sink20$reg2mem$0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $68 = 0, $69 = 0, $7 = 0, $71 = 0, $75 = 0, $76 = 0, $8 = 0, $85 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, _setjmpTable = 0, _setjmpTableSize = 0, sp = 0;
 sp = STACKTOP; //@line 18705
 STACKTOP = STACKTOP + 320 | 0; //@line 18706
 $$byval_copy = sp + 312 | 0; //@line 18707
 _setjmpTableSize = 4; //@line 18708
 _setjmpTable = _malloc(40) | 0; //@line 18708
 SAFE_HEAP_STORE(_setjmpTable | 0, 0 | 0, 4);
 $6 = sp; //@line 18709
 $7 = $6 + 156 | 0; //@line 18710
 SAFE_HEAP_STORE($7 | 0, 0 | 0, 4);
 $8 = $6 + 160 | 0; //@line 18712
 SAFE_HEAP_STORE($8 | 0, 0 | 0, 4);
 $9 = ($5 | 0) != 0; //@line 18714
 if ($9) {
  SAFE_HEAP_STORE($5 | 0, 0 | 0, 4);
 }
 $10 = ($0 | 0) == 0; //@line 18718
 $11 = $6 + 168 | 0; //@line 18719
 if ($10) {
  SAFE_HEAP_STORE($11 | 0, 3584 | 0, 4);
  $$reg2mem97$0 = 3585; //@line 18723
  $$sink$reg2mem$0 = $2 + $3 | 0; //@line 18723
  $$sink20$reg2mem$0 = $2; //@line 18723
 } else {
  SAFE_HEAP_STORE($11 | 0, 2 | 0, 4);
  $$reg2mem97$0 = 3; //@line 18727
  $$sink$reg2mem$0 = $0 + $1 | 0; //@line 18727
  $$sink20$reg2mem$0 = $0; //@line 18727
 }
 $14 = $6 + 216 | 0; //@line 18729
 SAFE_HEAP_STORE($14 | 0, $$sink20$reg2mem$0 | 0, 4);
 $15 = $6 + 220 | 0; //@line 18731
 SAFE_HEAP_STORE($15 | 0, $$sink$reg2mem$0 | 0, 4);
 $16 = $6 + 172 | 0; //@line 18733
 $17 = $6 + 180 | 0; //@line 18734
 $18 = ($4 | 0) == 0; //@line 18735
 SAFE_HEAP_STORE($16 | 0, 0 | 0, 4);
 SAFE_HEAP_STORE($16 + 4 | 0, 0 | 0, 4);
 SAFE_HEAP_STORE($16 + 8 | 0, 0 | 0, 4);
 if (!$18) {
  SAFE_HEAP_STORE($11 | 0, $$reg2mem97$0 | 0, 4);
 }
 SAFE_HEAP_STORE($6 + 191 >> 0 | 0, 0 | 0, 1);
 $20 = $6 + 224 | 0; //@line 18742
 SAFE_HEAP_STORE($20 | 0, 1 | 0, 4);
 $21 = $6 + 228 | 0; //@line 18744
 SAFE_HEAP_STORE($21 | 0, 1 | 0, 4);
 $23 = $6 + 248 | 0; //@line 18747
 $24 = $6 + 240 | 0; //@line 18748
 SAFE_HEAP_STORE($24 | 0, 0 | 0, 4);
 SAFE_HEAP_STORE($24 + 4 | 0, 0 | 0, 4);
 __THREW__ = 0; //@line 18754
 invoke_vi(2, $23 | 0); //@line 18755
 $28 = __THREW__; //@line 18756
 __THREW__ = 0; //@line 18756
 if (($28 | 0) != 0 & (threwValue | 0) != 0) {
  $29 = _testSetjmp(SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0; //@line 18757
  if (!$29) {
   _longjmp($28 | 0, threwValue | 0); //@line 18757
  }
  tempRet0 = threwValue; //@line 18757
 } else {
  $29 = -1; //@line 18757
 }
 if (($29 | 0) == 1) {
  $$reg2mem42$0 = 0; //@line 18761
  $$reg2mem95$0 = tempRet0; //@line 18761
 } else {
  SAFE_HEAP_STORE($6 + 260 | 0, 0 | 0, 4);
  $32 = $6 + 264 | 0; //@line 18765
  __THREW__ = 0; //@line 18766
  invoke_viii(1, $32 | 0, 8, 15); //@line 18767
  $33 = __THREW__; //@line 18768
  __THREW__ = 0; //@line 18768
  if (($33 | 0) != 0 & (threwValue | 0) != 0) {
   $34 = _testSetjmp(SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0; //@line 18769
   if (!$34) {
    _longjmp($33 | 0, threwValue | 0); //@line 18769
   }
   tempRet0 = threwValue; //@line 18769
  } else {
   $34 = -1; //@line 18769
  }
  if (($34 | 0) == 1) {
   $$reg2mem42$0 = $32; //@line 18773
   $$reg2mem95$0 = tempRet0; //@line 18773
  } else {
   __THREW__ = 0; //@line 18775
   invoke_vi(3, $6 | 0); //@line 18776
   $36 = __THREW__; //@line 18777
   __THREW__ = 0; //@line 18777
   if (($36 | 0) != 0 & (threwValue | 0) != 0) {
    $37 = _testSetjmp(SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0; //@line 18778
    if (!$37) {
     _longjmp($36 | 0, threwValue | 0); //@line 18778
    }
    tempRet0 = threwValue; //@line 18778
   } else {
    $37 = -1; //@line 18778
   }
   if (($37 | 0) == 1) {
    $$reg2mem42$0 = $32; //@line 18782
    $$reg2mem95$0 = tempRet0; //@line 18782
   } else {
    _setjmpTable = _saveSetjmp($6, 1, _setjmpTable | 0, _setjmpTableSize | 0) | 0; //@line 18784
    _setjmpTableSize = tempRet0; //@line 18784
    __THREW__ = 0; //@line 18785
    $39 = __THREW__; //@line 18786
    __THREW__ = 0; //@line 18786
    if (($39 | 0) != 0 & (threwValue | 0) != 0) {
     $40 = _testSetjmp(SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0; //@line 18787
     if (!$40) {
      _longjmp($39 | 0, threwValue | 0); //@line 18787
     }
     tempRet0 = threwValue; //@line 18787
    } else {
     $40 = -1; //@line 18787
    }
    if (($40 | 0) == 1) {
     $$reg2mem42$0 = $32; //@line 18791
     $$reg2mem95$0 = tempRet0; //@line 18791
    } else {
     $$reg2mem42$0 = $32; //@line 18793
     $$reg2mem95$0 = 0; //@line 18793
    }
   }
  }
 }
 while (1) {
  if (!$$reg2mem95$0) {
   __THREW__ = 0; //@line 18801
   invoke_vii(1, $6 | 0, -1); //@line 18802
   $43 = __THREW__; //@line 18803
   __THREW__ = 0; //@line 18803
   if (($43 | 0) != 0 & (threwValue | 0) != 0) {
    $44 = _testSetjmp(SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0; //@line 18804
    if (!$44) {
     _longjmp($43 | 0, threwValue | 0); //@line 18804
    }
    tempRet0 = threwValue; //@line 18804
   } else {
    $44 = -1; //@line 18804
   }
   if (($44 | 0) == 1) {
    $$reg2mem42$0$phi = $$reg2mem42$0; //@line 18808
    $$reg2mem95$0 = tempRet0; //@line 18808
    $$reg2mem42$0 = $$reg2mem42$0$phi; //@line 18808
    continue;
   }
   __THREW__ = 0; //@line 18811
   invoke_vi(4, $6 | 0); //@line 18812
   $46 = __THREW__; //@line 18813
   __THREW__ = 0; //@line 18813
   if (($46 | 0) != 0 & (threwValue | 0) != 0) {
    $47 = _testSetjmp(SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0; //@line 18814
    if (!$47) {
     _longjmp($46 | 0, threwValue | 0); //@line 18814
    }
    tempRet0 = threwValue; //@line 18814
   } else {
    $47 = -1; //@line 18814
   }
   if (($47 | 0) == 1) {
    $$reg2mem42$0$phi = $$reg2mem42$0; //@line 18818
    $$reg2mem95$0 = tempRet0; //@line 18818
    $$reg2mem42$0 = $$reg2mem42$0$phi; //@line 18818
    continue;
   }
   if (!$10) {
    __THREW__ = 0; //@line 18822
    invoke_vii(2, $6 | 0, 0); //@line 18823
    $49 = __THREW__; //@line 18824
    __THREW__ = 0; //@line 18824
    if (($49 | 0) != 0 & (threwValue | 0) != 0) {
     $50 = _testSetjmp(SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0; //@line 18825
     if (!$50) {
      _longjmp($49 | 0, threwValue | 0); //@line 18825
     }
     tempRet0 = threwValue; //@line 18825
    } else {
     $50 = -1; //@line 18825
    }
    if (($50 | 0) == 1) {
     $$reg2mem42$0$phi = $$reg2mem42$0; //@line 18829
     $$reg2mem95$0 = tempRet0; //@line 18829
     $$reg2mem42$0 = $$reg2mem42$0$phi; //@line 18829
     continue;
    }
    SAFE_HEAP_STORE($14 | 0, $2 | 0, 4);
    SAFE_HEAP_STORE($15 | 0, $2 + $3 | 0, 4);
    SAFE_HEAP_STORE($20 | 0, 1 | 0, 4);
    SAFE_HEAP_STORE($21 | 0, 1 | 0, 4);
    __THREW__ = 0; //@line 18837
    invoke_vi(4, $6 | 0); //@line 18838
    $53 = __THREW__; //@line 18839
    __THREW__ = 0; //@line 18839
    if (($53 | 0) != 0 & (threwValue | 0) != 0) {
     $54 = _testSetjmp(SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0; //@line 18840
     if (!$54) {
      _longjmp($53 | 0, threwValue | 0); //@line 18840
     }
     tempRet0 = threwValue; //@line 18840
    } else {
     $54 = -1; //@line 18840
    }
    if (($54 | 0) == 1) {
     $$reg2mem42$0$phi = $$reg2mem42$0; //@line 18844
     $$reg2mem95$0 = tempRet0; //@line 18844
     $$reg2mem42$0 = $$reg2mem42$0$phi; //@line 18844
     continue;
    }
   }
   __THREW__ = 0; //@line 18848
   invoke_vi(5, $6 | 0); //@line 18849
   $56 = __THREW__; //@line 18850
   __THREW__ = 0; //@line 18850
   if (($56 | 0) != 0 & (threwValue | 0) != 0) {
    $57 = _testSetjmp(SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0; //@line 18851
    if (!$57) {
     _longjmp($56 | 0, threwValue | 0); //@line 18851
    }
    tempRet0 = threwValue; //@line 18851
   } else {
    $57 = -1; //@line 18851
   }
   if (($57 | 0) == 1) {
    $$reg2mem42$0$phi = $$reg2mem42$0; //@line 18855
    $$reg2mem95$0 = tempRet0; //@line 18855
    $$reg2mem42$0 = $$reg2mem42$0$phi; //@line 18855
    continue;
   }
   __THREW__ = 0; //@line 18858
   $59 = invoke_ii(2, $6 | 0) | 0; //@line 18859
   $60 = __THREW__; //@line 18860
   __THREW__ = 0; //@line 18860
   if (($60 | 0) != 0 & (threwValue | 0) != 0) {
    $61 = _testSetjmp(SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0; //@line 18861
    if (!$61) {
     _longjmp($60 | 0, threwValue | 0); //@line 18861
    }
    tempRet0 = threwValue; //@line 18861
   } else {
    $61 = -1; //@line 18861
   }
   if (($61 | 0) == 1) {
    $$reg2mem42$0$phi = $$reg2mem42$0; //@line 18865
    $$reg2mem95$0 = tempRet0; //@line 18865
    $$reg2mem42$0 = $$reg2mem42$0$phi; //@line 18865
    continue;
   }
   __THREW__ = 0; //@line 18868
   invoke_vi(6, $$reg2mem42$0 | 0); //@line 18869
   $63 = __THREW__; //@line 18870
   __THREW__ = 0; //@line 18870
   if (($63 | 0) != 0 & (threwValue | 0) != 0) {
    $64 = _testSetjmp(SAFE_HEAP_LOAD($63 | 0, 4, 0) | 0 | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0; //@line 18871
    if (!$64) {
     _longjmp($63 | 0, threwValue | 0); //@line 18871
    }
    tempRet0 = threwValue; //@line 18871
   } else {
    $64 = -1; //@line 18871
   }
   if (($64 | 0) == 1) {
    $$reg2mem42$0$phi = $$reg2mem42$0; //@line 18875
    $$reg2mem95$0 = tempRet0; //@line 18875
    $$reg2mem42$0 = $$reg2mem42$0$phi; //@line 18875
    continue;
   }
   $$0$reg2mem93$0 = $59; //@line 18878
  } else {
   if (SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0) {
    __THREW__ = 0; //@line 18883
    SAFE_HEAP_STORE($$byval_copy | 0, SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0, 4);
    SAFE_HEAP_STORE($$byval_copy + 4 | 0, SAFE_HEAP_LOAD($17 + 4 | 0, 4, 0) | 0 | 0, 4);
    invoke_vi(7, $$byval_copy | 0); //@line 18885
    $68 = __THREW__; //@line 18886
    __THREW__ = 0; //@line 18886
    if (($68 | 0) != 0 & (threwValue | 0) != 0) {
     $69 = _testSetjmp(SAFE_HEAP_LOAD($68 | 0, 4, 0) | 0 | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0; //@line 18887
     if (!$69) {
      _longjmp($68 | 0, threwValue | 0); //@line 18887
     }
     tempRet0 = threwValue; //@line 18887
    } else {
     $69 = -1; //@line 18887
    }
    if (($69 | 0) == 1) {
     $$reg2mem42$0$phi = $$reg2mem42$0; //@line 18891
     $$reg2mem95$0 = tempRet0; //@line 18891
     $$reg2mem42$0 = $$reg2mem42$0$phi; //@line 18891
     continue;
    }
   }
   $71 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0; //@line 18895
   if ($71 | 0) {
    __THREW__ = 0; //@line 18900
    invoke_vii(3, $71 | 0, SAFE_HEAP_LOAD($6 + 164 | 0, 4, 0) | 0 | 0); //@line 18901
    $75 = __THREW__; //@line 18902
    __THREW__ = 0; //@line 18902
    if (($75 | 0) != 0 & (threwValue | 0) != 0) {
     $76 = _testSetjmp(SAFE_HEAP_LOAD($75 | 0, 4, 0) | 0 | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0; //@line 18903
     if (!$76) {
      _longjmp($75 | 0, threwValue | 0); //@line 18903
     }
     tempRet0 = threwValue; //@line 18903
    } else {
     $76 = -1; //@line 18903
    }
    if (($76 | 0) == 1) {
     $$reg2mem42$0$phi = $$reg2mem42$0; //@line 18907
     $$reg2mem95$0 = tempRet0; //@line 18907
     $$reg2mem42$0 = $$reg2mem42$0$phi; //@line 18907
     continue;
    }
   }
   if ($9) {
    SAFE_HEAP_STORE($5 | 0, SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0, 4);
    SAFE_HEAP_STORE($5 + 4 | 0, SAFE_HEAP_LOAD($6 + 192 | 0, 4, 0) | 0 | 0, 4);
    SAFE_HEAP_STORE($5 + 8 | 0, SAFE_HEAP_LOAD($6 + 196 | 0, 4, 0) | 0 | 0, 4);
   }
   __THREW__ = 0; //@line 18923
   invoke_vi(8, $$reg2mem42$0 | 0); //@line 18924
   $85 = __THREW__; //@line 18925
   __THREW__ = 0; //@line 18925
   if (($85 | 0) != 0 & (threwValue | 0) != 0) {
    $86 = _testSetjmp(SAFE_HEAP_LOAD($85 | 0, 4, 0) | 0 | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0; //@line 18926
    if (!$86) {
     _longjmp($85 | 0, threwValue | 0); //@line 18926
    }
    tempRet0 = threwValue; //@line 18926
   } else {
    $86 = -1; //@line 18926
   }
   if (($86 | 0) == 1) {
    $$reg2mem42$0$phi = $$reg2mem42$0; //@line 18930
    $$reg2mem95$0 = tempRet0; //@line 18930
    $$reg2mem42$0 = $$reg2mem42$0$phi; //@line 18930
    continue;
   }
   __THREW__ = 0; //@line 18933
   invoke_vi(9, $23 | 0); //@line 18934
   $88 = __THREW__; //@line 18935
   __THREW__ = 0; //@line 18935
   if (($88 | 0) != 0 & (threwValue | 0) != 0) {
    $89 = _testSetjmp(SAFE_HEAP_LOAD($88 | 0, 4, 0) | 0 | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0; //@line 18936
    if (!$89) {
     _longjmp($88 | 0, threwValue | 0); //@line 18936
    }
    tempRet0 = threwValue; //@line 18936
   } else {
    $89 = -1; //@line 18936
   }
   if (($89 | 0) == 1) {
    $$reg2mem42$0$phi = $$reg2mem42$0; //@line 18940
    $$reg2mem95$0 = tempRet0; //@line 18940
    $$reg2mem42$0 = $$reg2mem42$0$phi; //@line 18940
    continue;
   }
   $$0$reg2mem93$0 = 0; //@line 18943
  }
  __THREW__ = 0; //@line 18945
  invoke_vi(10, $6 | 0); //@line 18946
  $91 = __THREW__; //@line 18947
  __THREW__ = 0; //@line 18947
  if (($91 | 0) != 0 & (threwValue | 0) != 0) {
   $92 = _testSetjmp(SAFE_HEAP_LOAD($91 | 0, 4, 0) | 0 | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0; //@line 18948
   if (!$92) {
    _longjmp($91 | 0, threwValue | 0); //@line 18948
   }
   tempRet0 = threwValue; //@line 18948
  } else {
   $92 = -1; //@line 18948
  }
  if (($92 | 0) == 1) {
   $$reg2mem42$0$phi = $$reg2mem42$0; //@line 18952
   $$reg2mem95$0 = tempRet0; //@line 18952
   $$reg2mem42$0 = $$reg2mem42$0$phi; //@line 18952
  } else {
   break;
  }
 }
 _free(_setjmpTable | 0); //@line 18957
 STACKTOP = sp; //@line 18958
 return $$0$reg2mem93$0 | 0; //@line 18958
}
function _lexer_construct_literal_object($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0154 = 0, $$0157 = 0, $$0159 = 0, $$0160 = 0, $$1 = 0, $$10 = 0, $$1155 = 0, $$1155179 = 0, $$1155181 = 0, $$1161 = 0, $$1161180 = 0, $$1161182 = 0, $$2 = 0, $$2162 = 0, $$3$be = 0, $$3163$be = 0, $$3163194 = 0, $$3195 = 0, $$5 = 0, $$6166 = 0, $$6166188 = 0, $$6166190 = 0, $$8 = 0, $$9 = 0, $$9187 = 0, $$9189 = 0, $$pre = 0, $106 = 0, $11 = 0, $113 = 0, $135 = 0, $140 = 0, $149 = 0, $152 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $167 = 0, $171 = 0, $198 = 0, $20 = 0, $21 = 0, $29 = 0, $3 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $59 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $70 = 0, $71 = 0, $72 = 0, $75 = 0, $8 = 0, $83 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $91 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8601
 STACKTOP = STACKTOP + 48 | 0; //@line 8602
 $3 = sp; //@line 8603
 $4 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 8604
 $5 = $1 + 7 | 0; //@line 8605
 $$pre = $1 + 4 | 0; //@line 8608
 L1 : do {
  if (!(SAFE_HEAP_LOAD($5 >> 0 | 0, 1, 0) | 0)) {
   $$1 = $3; //@line 8611
   $$10 = $4; //@line 8611
  } else {
   $8 = SAFE_HEAP_LOAD($$pre | 0, 2, 0) | 0 | 0; //@line 8613
   if (($8 & 65535) > 48) {
    $11 = _parser_malloc_local($0, $8 & 65535) | 0; //@line 8617
    SAFE_HEAP_STORE($0 + 160 | 0, $11 | 0, 4);
    SAFE_HEAP_STORE($0 + 164 | 0, SAFE_HEAP_LOAD($$pre | 0, 2, 1) | 0 | 0, 4);
    $$0 = $11; //@line 8624
   } else {
    $$0 = $3; //@line 8626
   }
   if (!(SAFE_HEAP_LOAD($1 + 6 >> 0 | 0, 1, 0) | 0)) {
    $20 = SAFE_HEAP_LOAD($0 + 220 | 0, 4, 0) | 0 | 0; //@line 8633
    $$0154 = $4; //@line 8634
    $$0160 = $$0; //@line 8634
    while (1) {
     $21 = SAFE_HEAP_LOAD($$0154 >> 0 | 0, 1, 0) | 0 | 0; //@line 8636
     L10 : do {
      if ($21 << 24 >> 24 == 92) {
       $$2 = $$0154 + 6 | 0; //@line 8645
       $$2162 = $$0160 + (_lit_char_to_utf8_bytes($$0160, _lexer_hex_to_character($0, $$0154 + 2 | 0, 4) | 0) | 0) | 0; //@line 8645
      } else {
       SAFE_HEAP_STORE($$0160 >> 0 | 0, $21 | 0, 1);
       $$1155179 = $$0154 + 1 | 0; //@line 8648
       $$1161180 = $$0160 + 1 | 0; //@line 8649
       if ($$1155179 >>> 0 < $20 >>> 0) {
        $$1155181 = $$1155179; //@line 8652
        $$1161182 = $$1161180; //@line 8652
        while (1) {
         $29 = SAFE_HEAP_LOAD($$1155181 >> 0 | 0, 1, 0) | 0 | 0; //@line 8654
         if (($29 & -64) << 24 >> 24 != -128) {
          $$2 = $$1155181; //@line 8658
          $$2162 = $$1161182; //@line 8658
          break L10;
         }
         SAFE_HEAP_STORE($$1161182 >> 0 | 0, $29 | 0, 1);
         $$1155 = $$1155181 + 1 | 0; //@line 8662
         $$1161 = $$1161182 + 1 | 0; //@line 8663
         if ($$1155 >>> 0 < $20 >>> 0) {
          $$1155181 = $$1155; //@line 8666
          $$1161182 = $$1161; //@line 8666
         } else {
          $$2 = $$1155; //@line 8668
          $$2162 = $$1161; //@line 8668
          break;
         }
        }
       } else {
        $$2 = $$1155179; //@line 8673
        $$2162 = $$1161180; //@line 8673
       }
      }
     } while (0);
     if ($$2 >>> 0 >= $20 >>> 0) {
      $$1 = $$0; //@line 8679
      $$10 = $$0; //@line 8679
      break L1;
     }
     if (_lit_char_is_identifier_part($$2) | 0) {
      $$0154 = $$2; //@line 8684
      $$0160 = $$2162; //@line 8684
      continue;
     }
     if ((SAFE_HEAP_LOAD($$2 >> 0 | 0, 1, 0) | 0 | 0) == 92) {
      $$0154 = $$2; //@line 8690
      $$0160 = $$2162; //@line 8690
     } else {
      $$1 = $$0; //@line 8692
      $$10 = $$0; //@line 8692
      break L1;
     }
    }
   }
   $38 = SAFE_HEAP_LOAD($4 + -1 >> 0 | 0, 1, 0) | 0 | 0; //@line 8698
   $39 = SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0 | 0; //@line 8699
   if ($39 << 24 >> 24 == $38 << 24 >> 24) {
    $$1 = $$0; //@line 8702
    $$10 = $$0; //@line 8702
   } else {
    $$3163194 = $$0; //@line 8704
    $$3195 = $4; //@line 8704
    $41 = $39; //@line 8704
    while (1) {
     L22 : do {
      if ($41 << 24 >> 24 == 92) {
       $43 = $$3195 + 1 | 0; //@line 8709
       $44 = SAFE_HEAP_LOAD($43 >> 0 | 0, 1, 0) | 0 | 0; //@line 8710
       switch ($44 << 24 >> 24) {
       case 13:
        {
         $45 = $$3195 + 2 | 0; //@line 8713
         $$3$be = (SAFE_HEAP_LOAD($45 >> 0 | 0, 1, 0) | 0 | 0) == 10 ? $$3195 + 3 | 0 : $45; //@line 8718
         $$3163$be = $$3163194; //@line 8718
         break L22;
         break;
        }
       case 10:
        {
         $$3$be = $$3195 + 2 | 0; //@line 8724
         $$3163$be = $$3163194; //@line 8724
         break L22;
         break;
        }
       case -30:
        {
         if ((SAFE_HEAP_LOAD($$3195 + 2 >> 0 | 0, 1, 0) | 0 | 0) == -128) {
          if ((SAFE_HEAP_LOAD($$3195 + 3 >> 0 | 0, 1, 0) | 0 | 1) << 24 >> 24 == -87) {
           $$3$be = $$3195 + 4 | 0; //@line 8739
           $$3163$be = $$3163194; //@line 8739
           break L22;
          }
         }
         $83 = $44 & -4; //@line 8744
         $86 = 226; //@line 8744
         break;
        }
       default:
        {
         $59 = $44 & 255; //@line 8748
         $60 = $44 & -4; //@line 8749
         if ($60 << 24 >> 24 == 48) {
          $62 = $59 + -48 | 0; //@line 8752
          $63 = $$3195 + 2 | 0; //@line 8753
          $64 = SAFE_HEAP_LOAD($63 >> 0 | 0, 1, 0) | 0 | 0; //@line 8754
          if (($64 & -8) << 24 >> 24 == 48) {
           $70 = ($62 << 3) + -48 + ($64 & 255) | 0; //@line 8761
           $71 = $$3195 + 3 | 0; //@line 8762
           $72 = SAFE_HEAP_LOAD($71 >> 0 | 0, 1, 0) | 0 | 0; //@line 8763
           $75 = ($72 & -8) << 24 >> 24 == 48; //@line 8766
           $$0157 = $75 ? ($70 << 3) + -48 + ($72 & 255) | 0 : $70; //@line 8773
           $$5 = $75 ? $$3195 + 4 | 0 : $71; //@line 8773
          } else {
           $$0157 = $62; //@line 8775
           $$5 = $63; //@line 8775
          }
          $$3$be = $$5; //@line 8780
          $$3163$be = $$3163194 + (_lit_char_to_utf8_bytes($$3163194, $$0157 & 65535) | 0) | 0; //@line 8780
          break L22;
         } else {
          $83 = $60; //@line 8783
          $86 = $59; //@line 8783
         }
        }
       }
       if ($83 << 24 >> 24 == 52) {
        $85 = $86 + -48 | 0; //@line 8789
        $87 = $$3195 + 2 | 0; //@line 8790
        $88 = SAFE_HEAP_LOAD($87 >> 0 | 0, 1, 0) | 0 | 0; //@line 8791
        $91 = ($88 & -8) << 24 >> 24 == 48; //@line 8794
        SAFE_HEAP_STORE($$3163194 >> 0 | 0, ($91 ? ($85 << 3) + 208 + ($88 & 255) | 0 : $85) | 0, 1);
        $$3$be = $91 ? $$3195 + 3 | 0 : $87; //@line 8804
        $$3163$be = $$3163194 + 1 | 0; //@line 8804
        break;
       }
       switch ($44 << 24 >> 24) {
       case 117:
       case 120:
        {
         $99 = $44 << 24 >> 24 == 120 ? 2 : 4; //@line 8810
         $$3$be = $43 + ($99 | 1) | 0; //@line 8817
         $$3163$be = $$3163194 + (_lit_char_to_utf8_bytes($$3163194, _lexer_hex_to_character($0, $$3195 + 2 | 0, $99) | 0) | 0) | 0; //@line 8817
         break L22;
         break;
        }
       default:
        {}
       }
       $106 = $86 + -98 | 0; //@line 8824
       switch ($106 >>> 1 | $106 << 31 | 0) {
       case 0:
        {
         $$0159 = 8; //@line 8830
         break;
        }
       case 9:
        {
         $$0159 = 9; //@line 8834
         break;
        }
       case 6:
        {
         $$0159 = 10; //@line 8838
         break;
        }
       case 10:
        {
         $$0159 = 11; //@line 8842
         break;
        }
       case 2:
        {
         $$0159 = 12; //@line 8846
         break;
        }
       case 8:
        {
         $$0159 = 13; //@line 8850
         break;
        }
       default:
        {
         $$8 = $43; //@line 8854
         $113 = $44; //@line 8854
         label = 39; //@line 8855
         break L22;
        }
       }
       if ($$0159 << 24 >> 24 == $44 << 24 >> 24) {
        $$8 = $43; //@line 8861
        $113 = $44; //@line 8861
        label = 39; //@line 8862
       } else {
        SAFE_HEAP_STORE($$3163194 >> 0 | 0, $$0159 | 0, 1);
        $$3$be = $$3195 + 2 | 0; //@line 8867
        $$3163$be = $$3163194 + 1 | 0; //@line 8867
       }
      } else {
       $$8 = $$3195; //@line 8870
       $113 = $41; //@line 8870
       label = 39; //@line 8871
      }
     } while (0);
     do {
      if ((label | 0) == 39) {
       label = 0; //@line 8876
       if (($113 & 255) > 239) {
        $135 = (((SAFE_HEAP_LOAD($$8 + 1 >> 0 | 0, 1, 0) | 0) & 63) << 12 | ($113 & 7) << 18 | ((SAFE_HEAP_LOAD($$8 + 2 >> 0 | 0, 1, 0) | 0) & 63) << 6 | (SAFE_HEAP_LOAD($$8 + 3 >> 0 | 0, 1, 0) | 0) & 63) + -65536 | 0; //@line 8899
        $140 = $$3163194 + (_lit_char_to_utf8_bytes($$3163194, ($135 >>> 10 | 55296) & 65535) | 0) | 0; //@line 8904
        $$3$be = $$8 + 4 | 0; //@line 8911
        $$3163$be = $140 + (_lit_char_to_utf8_bytes($140, ($135 & 1023 | 56320) & 65535) | 0) | 0; //@line 8911
        break;
       }
       SAFE_HEAP_STORE($$3163194 >> 0 | 0, $113 | 0, 1);
       $$9187 = $$8 + 1 | 0; //@line 8915
       $$6166188 = $$3163194 + 1 | 0; //@line 8916
       $149 = SAFE_HEAP_LOAD($$9187 >> 0 | 0, 1, 0) | 0 | 0; //@line 8917
       if (($149 & -64) << 24 >> 24 == -128) {
        $$6166190 = $$6166188; //@line 8921
        $$9189 = $$9187; //@line 8921
        $152 = $149; //@line 8921
        while (1) {
         SAFE_HEAP_STORE($$6166190 >> 0 | 0, $152 | 0, 1);
         $$9 = $$9189 + 1 | 0; //@line 8924
         $$6166 = $$6166190 + 1 | 0; //@line 8925
         $152 = SAFE_HEAP_LOAD($$9 >> 0 | 0, 1, 0) | 0 | 0; //@line 8926
         if (($152 & -64) << 24 >> 24 != -128) {
          $$3$be = $$9; //@line 8932
          $$3163$be = $$6166; //@line 8932
          break;
         } else {
          $$6166190 = $$6166; //@line 8930
          $$9189 = $$9; //@line 8930
         }
        }
       } else {
        $$3$be = $$9187; //@line 8937
        $$3163$be = $$6166188; //@line 8937
       }
      }
     } while (0);
     $41 = SAFE_HEAP_LOAD($$3$be >> 0 | 0, 1, 0) | 0 | 0; //@line 8941
     if ($41 << 24 >> 24 == $38 << 24 >> 24) {
      $$1 = $$0; //@line 8944
      $$10 = $$0; //@line 8944
      break;
     } else {
      $$3163194 = $$3163$be; //@line 8947
      $$3195 = $$3$be; //@line 8947
     }
    }
   }
  }
 } while (0);
 _lexer_process_char_literal($0, $$10, SAFE_HEAP_LOAD($$pre | 0, 2, 1) | 0 | 0, $2, (SAFE_HEAP_LOAD($5 >> 0 | 0, 1, 0) | 0 | 0) != 0); //@line 8957
 $160 = $0 + 208 | 0; //@line 8958
 $161 = $0 + 214 | 0; //@line 8959
 SAFE_HEAP_STORE($161 >> 0 | 0, 0 | 0, 1);
 L61 : do {
  if (!($2 << 24 >> 24)) {
   $163 = $0 + 168 | 0; //@line 8964
   $164 = SAFE_HEAP_LOAD($163 | 0, 4, 0) | 0 | 0; //@line 8965
   if ($164 & 4096 | 0) {
    $167 = SAFE_HEAP_LOAD($160 | 0, 4, 0) | 0 | 0; //@line 8969
    if (!(SAFE_HEAP_LOAD($167 + 6 >> 0 | 0, 1, 0) | 0)) {
     $171 = $167 + 7 | 0; //@line 8974
     SAFE_HEAP_STORE($171 >> 0 | 0, SAFE_HEAP_LOAD($171 >> 0 | 0, 1, 0) | 0 | 2 | 0, 1);
    }
   }
   switch (SAFE_HEAP_LOAD($$pre | 0, 2, 0) | 0 | 0) {
   case 4:
    {
     if ((SAFE_HEAP_LOAD($$10 >> 0 | 0, 1, 0) | 0 | 0) != 101) {
      break L61;
     }
     if ((SAFE_HEAP_LOAD($$10 + 3 >> 0 | 0, 1, 0) | 0 | 0) != 108) {
      break L61;
     }
     if ((SAFE_HEAP_LOAD($$10 + 1 >> 0 | 0, 1, 0) | 0 | 0) != 118) {
      break L61;
     }
     if ((SAFE_HEAP_LOAD($$10 + 2 >> 0 | 0, 1, 0) | 0 | 0) != 97) {
      break L61;
     }
     SAFE_HEAP_STORE($161 >> 0 | 0, 1 | 0, 1);
     break L61;
     break;
    }
   case 9:
    {
     if ((SAFE_HEAP_LOAD($$10 >> 0 | 0, 1, 0) | 0 | 0) != 97) {
      break L61;
     }
     if ((SAFE_HEAP_LOAD($$10 + 8 >> 0 | 0, 1, 0) | 0 | 0) != 115) {
      break L61;
     }
     if (_memcmp($$10 + 1 | 0, 7151, 7) | 0) {
      break L61;
     }
     SAFE_HEAP_STORE($161 >> 0 | 0, 2 | 0, 1);
     if ($164 & 512 | 0) {
      break L61;
     }
     SAFE_HEAP_STORE($163 | 0, $164 | 1280 | 0, 4);
     $198 = (SAFE_HEAP_LOAD($160 | 0, 4, 0) | 0 | 0) + 7 | 0; //@line 9037
     SAFE_HEAP_STORE($198 >> 0 | 0, SAFE_HEAP_LOAD($198 >> 0 | 0, 1, 0) | 0 | 2 | 0, 1);
     break L61;
     break;
    }
   default:
    {
     break L61;
    }
   }
  }
 } while (0);
 if (($$1 | 0) != ($3 | 0)) {
  SAFE_HEAP_STORE($0 + 160 | 0, 0 | 0, 4);
  _parser_free_local($$1, SAFE_HEAP_LOAD($0 + 164 | 0, 4, 0) | 0 | 0); //@line 9056
 }
 STACKTOP = sp; //@line 9058
 return;
}
function _lexer_next_token($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$sink = 0, $10 = 0, $11 = 0, $13 = 0, $16 = 0, $17 = 0, $3 = 0, $5 = 0;
 _lexer_skip_spaces($0); //@line 7342
 $3 = $0 + 188 | 0; //@line 7345
 SAFE_HEAP_STORE($0 + 192 | 0, SAFE_HEAP_LOAD($0 + 224 | 0, 4, 0) | 0 | 0, 4);
 $5 = $0 + 228 | 0; //@line 7348
 SAFE_HEAP_STORE($0 + 196 | 0, SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0, 4);
 $10 = $0 + 216 | 0; //@line 7354
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0; //@line 7355
 $13 = (SAFE_HEAP_LOAD($0 + 220 | 0, 4, 0) | 0 | 0) - $11 | 0; //@line 7357
 L1 : do {
  if (!$13) {
   SAFE_HEAP_STORE($3 >> 0 | 0, 0 | 0, 1);
  } else {
   if (!(_lit_char_is_identifier_start($11) | 0)) {
    $16 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0; //@line 7365
    $17 = SAFE_HEAP_LOAD($16 >> 0 | 0, 1, 0) | 0 | 0; //@line 7366
    if ($17 << 24 >> 24 != 92) {
     if (($17 + -48 & 255) < 10) {
      _lexer_parse_number($0); //@line 7372
      break;
     }
     L10 : do {
      switch ($17 << 24 >> 24) {
      case 123:
       {
        $$0 = 1; //@line 7378
        $$sink = 51; //@line 7378
        break;
       }
      case 40:
       {
        $$0 = 1; //@line 7382
        $$sink = 52; //@line 7382
        break;
       }
      case 91:
       {
        $$0 = 1; //@line 7386
        $$sink = 53; //@line 7386
        break;
       }
      case 125:
       {
        $$0 = 1; //@line 7390
        $$sink = 54; //@line 7390
        break;
       }
      case 41:
       {
        $$0 = 1; //@line 7394
        $$sink = 55; //@line 7394
        break;
       }
      case 93:
       {
        $$0 = 1; //@line 7398
        $$sink = 56; //@line 7398
        break;
       }
      case 59:
       {
        $$0 = 1; //@line 7402
        $$sink = 58; //@line 7402
        break;
       }
      case 44:
       {
        $$0 = 1; //@line 7406
        $$sink = 60; //@line 7406
        break;
       }
      case 46:
       {
        if ($13 >>> 0 > 1) {
         if (((SAFE_HEAP_LOAD($16 + 1 >> 0 | 0, 1, 0) | 0 | 0) + -48 & 255) < 10) {
          _lexer_parse_number($0); //@line 7417
          break L1;
         } else {
          $$0 = 1; //@line 7420
          $$sink = 57; //@line 7420
         }
        } else {
         $$0 = 1; //@line 7423
         $$sink = 57; //@line 7423
        }
        break;
       }
      case 60:
       {
        L23 : do {
         if ($13 >>> 0 > 1) {
          switch (SAFE_HEAP_LOAD($16 + 1 >> 0 | 0, 1, 0) | 0 | 0) {
          case 61:
           {
            $$0 = 2; //@line 7435
            $$sink = 39; //@line 7435
            break L10;
            break;
           }
          case 60:
           {
            break;
           }
          default:
           {
            break L23;
           }
          }
          if ($13 >>> 0 > 2) {
           if ((SAFE_HEAP_LOAD($16 + 2 >> 0 | 0, 1, 0) | 0 | 0) == 61) {
            $$0 = 3; //@line 7452
            $$sink = 21; //@line 7452
            break L10;
           }
          }
          $$0 = 2; //@line 7456
          $$sink = 43; //@line 7456
          break L10;
         }
        } while (0);
        $$0 = 1; //@line 7460
        $$sink = 37; //@line 7460
        break;
       }
      case 62:
       {
        L31 : do {
         if ($13 >>> 0 > 1) {
          switch (SAFE_HEAP_LOAD($16 + 1 >> 0 | 0, 1, 0) | 0 | 0) {
          case 61:
           {
            $$0 = 2; //@line 7471
            $$sink = 40; //@line 7471
            break L10;
            break;
           }
          case 62:
           {
            break;
           }
          default:
           {
            break L31;
           }
          }
          L34 : do {
           if ($13 >>> 0 > 2) {
            switch (SAFE_HEAP_LOAD($16 + 2 >> 0 | 0, 1, 0) | 0 | 0) {
            case 61:
             {
              $$0 = 3; //@line 7489
              $$sink = 22; //@line 7489
              break L10;
              break;
             }
            case 62:
             {
              break;
             }
            default:
             {
              break L34;
             }
            }
            if ($13 >>> 0 > 3) {
             if ((SAFE_HEAP_LOAD($16 + 3 >> 0 | 0, 1, 0) | 0 | 0) == 61) {
              $$0 = 4; //@line 7506
              $$sink = 23; //@line 7506
              break L10;
             }
            }
            $$0 = 3; //@line 7510
            $$sink = 45; //@line 7510
            break L10;
           }
          } while (0);
          $$0 = 2; //@line 7514
          $$sink = 44; //@line 7514
          break L10;
         }
        } while (0);
        $$0 = 1; //@line 7518
        $$sink = 38; //@line 7518
        break;
       }
      case 61:
       {
        if ($13 >>> 0 > 1) {
         if ((SAFE_HEAP_LOAD($16 + 1 >> 0 | 0, 1, 0) | 0 | 0) == 61) {
          if ($13 >>> 0 > 2) {
           if ((SAFE_HEAP_LOAD($16 + 2 >> 0 | 0, 1, 0) | 0 | 0) == 61) {
            $$0 = 3; //@line 7534
            $$sink = 35; //@line 7534
            break L10;
           }
          }
          $$0 = 2; //@line 7538
          $$sink = 33; //@line 7538
         } else {
          $$0 = 1; //@line 7540
          $$sink = 15; //@line 7540
         }
        } else {
         $$0 = 1; //@line 7543
         $$sink = 15; //@line 7543
        }
        break;
       }
      case 33:
       {
        if ($13 >>> 0 > 1) {
         if ((SAFE_HEAP_LOAD($16 + 1 >> 0 | 0, 1, 0) | 0 | 0) == 61) {
          if ($13 >>> 0 > 2) {
           if ((SAFE_HEAP_LOAD($16 + 2 >> 0 | 0, 1, 0) | 0 | 0) == 61) {
            $$0 = 3; //@line 7560
            $$sink = 36; //@line 7560
            break L10;
           }
          }
          $$0 = 2; //@line 7564
          $$sink = 34; //@line 7564
         } else {
          $$0 = 1; //@line 7566
          $$sink = 8; //@line 7566
         }
        } else {
         $$0 = 1; //@line 7569
         $$sink = 8; //@line 7569
        }
        break;
       }
      case 43:
       {
        L55 : do {
         if ($13 >>> 0 > 1) {
          switch (SAFE_HEAP_LOAD($16 + 1 >> 0 | 0, 1, 0) | 0 | 0) {
          case 61:
           {
            $$0 = 2; //@line 7581
            $$sink = 16; //@line 7581
            break L10;
            break;
           }
          case 43:
           {
            break;
           }
          default:
           {
            break L55;
           }
          }
          $$0 = 2; //@line 7592
          $$sink = 13; //@line 7592
          break L10;
         }
        } while (0);
        $$0 = 1; //@line 7596
        $$sink = 46; //@line 7596
        break;
       }
      case 45:
       {
        L60 : do {
         if ($13 >>> 0 > 1) {
          switch (SAFE_HEAP_LOAD($16 + 1 >> 0 | 0, 1, 0) | 0 | 0) {
          case 61:
           {
            $$0 = 2; //@line 7607
            $$sink = 17; //@line 7607
            break L10;
            break;
           }
          case 45:
           {
            break;
           }
          default:
           {
            break L60;
           }
          }
          $$0 = 2; //@line 7618
          $$sink = 14; //@line 7618
          break L10;
         }
        } while (0);
        $$0 = 1; //@line 7622
        $$sink = 47; //@line 7622
        break;
       }
      case 42:
       {
        if ($13 >>> 0 > 1) {
         if ((SAFE_HEAP_LOAD($16 + 1 >> 0 | 0, 1, 0) | 0 | 0) == 61) {
          $$0 = 2; //@line 7632
          $$sink = 18; //@line 7632
          break L10;
         }
        }
        $$0 = 1; //@line 7636
        $$sink = 48; //@line 7636
        break;
       }
      case 47:
       {
        if ($13 >>> 0 > 1) {
         if ((SAFE_HEAP_LOAD($16 + 1 >> 0 | 0, 1, 0) | 0 | 0) == 61) {
          $$0 = 2; //@line 7646
          $$sink = 19; //@line 7646
          break L10;
         }
        }
        $$0 = 1; //@line 7650
        $$sink = 49; //@line 7650
        break;
       }
      case 37:
       {
        if ($13 >>> 0 > 1) {
         if ((SAFE_HEAP_LOAD($16 + 1 >> 0 | 0, 1, 0) | 0 | 0) == 61) {
          $$0 = 2; //@line 7660
          $$sink = 20; //@line 7660
          break L10;
         }
        }
        $$0 = 1; //@line 7664
        $$sink = 50; //@line 7664
        break;
       }
      case 38:
       {
        L77 : do {
         if ($13 >>> 0 > 1) {
          switch (SAFE_HEAP_LOAD($16 + 1 >> 0 | 0, 1, 0) | 0 | 0) {
          case 61:
           {
            $$0 = 2; //@line 7675
            $$sink = 24; //@line 7675
            break L10;
            break;
           }
          case 38:
           {
            break;
           }
          default:
           {
            break L77;
           }
          }
          $$0 = 2; //@line 7686
          $$sink = 29; //@line 7686
          break L10;
         }
        } while (0);
        $$0 = 1; //@line 7690
        $$sink = 32; //@line 7690
        break;
       }
      case 124:
       {
        L82 : do {
         if ($13 >>> 0 > 1) {
          switch (SAFE_HEAP_LOAD($16 + 1 >> 0 | 0, 1, 0) | 0 | 0) {
          case 61:
           {
            $$0 = 2; //@line 7701
            $$sink = 25; //@line 7701
            break L10;
            break;
           }
          case 124:
           {
            break;
           }
          default:
           {
            break L82;
           }
          }
          $$0 = 2; //@line 7712
          $$sink = 28; //@line 7712
          break L10;
         }
        } while (0);
        $$0 = 1; //@line 7716
        $$sink = 30; //@line 7716
        break;
       }
      case 94:
       {
        if ($13 >>> 0 > 1) {
         if ((SAFE_HEAP_LOAD($16 + 1 >> 0 | 0, 1, 0) | 0 | 0) == 61) {
          $$0 = 2; //@line 7726
          $$sink = 26; //@line 7726
          break L10;
         }
        }
        $$0 = 1; //@line 7730
        $$sink = 31; //@line 7730
        break;
       }
      case 126:
       {
        $$0 = 1; //@line 7734
        $$sink = 9; //@line 7734
        break;
       }
      case 63:
       {
        $$0 = 1; //@line 7738
        $$sink = 27; //@line 7738
        break;
       }
      case 58:
       {
        $$0 = 1; //@line 7742
        $$sink = 59; //@line 7742
        break;
       }
      case 34:
      case 39:
       {
        _lexer_parse_string($0); //@line 7746
        break L1;
        break;
       }
      default:
       {
        _parser_raise_error($0, 6); //@line 7751
       }
      }
     } while (0);
     SAFE_HEAP_STORE($3 >> 0 | 0, $$sink | 0, 1);
     SAFE_HEAP_STORE($10 | 0, $16 + $$0 | 0, 4);
     SAFE_HEAP_STORE($5 | 0, (SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0) + $$0 | 0, 4);
     break;
    }
   }
   _lexer_parse_identifier($0, 1); //@line 7765
  }
 } while (0);
 return;
}
function _parser_process_unary_expression($0) {
 $0 = $0 | 0;
 var $$0122 = 0, $$0124$off0144 = 0, $$0126 = 0, $$1 = 0, $$1125$off0 = 0, $1 = 0, $10 = 0, $11 = 0, $19 = 0, $2 = 0, $3 = 0, $33 = 0, $38 = 0, $4 = 0, $46 = 0, $49 = 0, $5 = 0, $53 = 0, $56 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $1 = $0 + 304 | 0; //@line 15058
 $2 = $0 + 188 | 0; //@line 15059
 $3 = $0 + 240 | 0; //@line 15060
 $4 = $0 + 212 | 0; //@line 15061
 $5 = $0 + 234 | 0; //@line 15062
 $6 = $0 + 172 | 0; //@line 15063
 $7 = $0 + 168 | 0; //@line 15064
 $8 = $0 + 238 | 0; //@line 15065
 $9 = $0 + 236 | 0; //@line 15066
 $10 = $0 + 239 | 0; //@line 15067
 L1 : while (1) {
  $11 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0; //@line 15069
  switch ($11 << 24 >> 24) {
  case 57:
   {
    _parser_push_result($0); //@line 15072
    _lexer_expect_identifier($0, 1); //@line 15073
    switch (SAFE_HEAP_LOAD($3 | 0, 2, 0) | 0 | 0) {
    case 40:
     {
      SAFE_HEAP_STORE($3 | 0, 54 | 0, 2);
      SAFE_HEAP_STORE($5 | 0, SAFE_HEAP_LOAD($4 | 0, 2, 0) | 0 | 0 | 0, 2);
      break;
     }
    case 47:
     {
      SAFE_HEAP_STORE($3 | 0, 0 | 0, 2);
      _parser_emit_cbc_literal_from_token($0, 55); //@line 15084
      break;
     }
    default:
     {
      _parser_emit_cbc_literal_from_token($0, 53); //@line 15088
     }
    }
    _lexer_next_token($0); //@line 15091
    continue L1;
    break;
   }
  case 53:
   {
    _parser_push_result($0); //@line 15096
    _lexer_next_token($0); //@line 15097
    _parser_parse_expression($0, 0); //@line 15098
    if ((SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0) != 56) {
     label = 9; //@line 15102
     break L1;
    }
    _lexer_next_token($0); //@line 15105
    switch (SAFE_HEAP_LOAD($3 | 0, 2, 0) | 0 | 0) {
    case 40:
     {
      SAFE_HEAP_STORE($3 | 0, 53 | 0, 2);
      continue L1;
      break;
     }
    case 41:
     {
      SAFE_HEAP_STORE($3 | 0, 54 | 0, 2);
      continue L1;
      break;
     }
    case 48:
     {
      SAFE_HEAP_STORE($3 | 0, 55 | 0, 2);
      continue L1;
      break;
     }
    default:
     {
      _parser_emit_cbc($0, 52); //@line 15124
      continue L1;
     }
    }
    break;
   }
  case 52:
   {
    _parser_push_result($0); //@line 15131
    L20 : do {
     if ((SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0) == 65) {
      _parser_stack_pop_uint8($0); //@line 15136
      $$0126 = 61; //@line 15137
      $$1125$off0 = 0; //@line 15137
     } else {
      $19 = SAFE_HEAP_LOAD($3 | 0, 2, 0) | 0 | 0; //@line 15139
      switch ($19 << 16 >> 16) {
      case 40:
       {
        if ((SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0) == 1) {
         SAFE_HEAP_STORE($7 | 0, SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 3328 | 0, 4);
         $$0124$off0144 = 1; //@line 15148
        } else {
         $$0124$off0144 = 0; //@line 15150
        }
        break;
       }
      case 52:
       {
        SAFE_HEAP_STORE($3 | 0, 57 | 0, 2);
        $$0126 = 178; //@line 15156
        $$1125$off0 = 0; //@line 15156
        break L20;
        break;
       }
      case 53:
       {
        SAFE_HEAP_STORE($3 | 0, 58 | 0, 2);
        $$0126 = 178; //@line 15162
        $$1125$off0 = 0; //@line 15162
        break L20;
        break;
       }
      case 54:
       {
        SAFE_HEAP_STORE($3 | 0, 59 | 0, 2);
        $$0126 = 178; //@line 15168
        $$1125$off0 = 0; //@line 15168
        break L20;
        break;
       }
      case 55:
       {
        SAFE_HEAP_STORE($3 | 0, 60 | 0, 2);
        $$0126 = 178; //@line 15174
        $$1125$off0 = 0; //@line 15174
        break L20;
        break;
       }
      default:
       {
        $$0124$off0144 = 0; //@line 15179
       }
      }
      if (($19 + -40 & 65535) < 3 & ((SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0) & 12288 | 0) != 0) {
       if (!(SAFE_HEAP_LOAD($8 >> 0 | 0, 1, 0) | 0)) {
        switch ($19 << 16 >> 16) {
        case 40:
         {
          SAFE_HEAP_STORE($3 | 0, 56 | 0, 2);
          $$0126 = 178; //@line 15195
          $$1125$off0 = $$0124$off0144; //@line 15195
          break L20;
          break;
         }
        case 41:
         {
          SAFE_HEAP_STORE($3 | 0, 40 | 0, 2);
          _parser_emit_cbc_literal($0, 56, SAFE_HEAP_LOAD($5 | 0, 2, 0) | 0 | 0); //@line 15202
          $$0126 = 178; //@line 15203
          $$1125$off0 = $$0124$off0144; //@line 15203
          break L20;
          break;
         }
        default:
         {
          SAFE_HEAP_STORE($3 | 0, 41 | 0, 2);
          _parser_emit_cbc_literal($0, 56, SAFE_HEAP_LOAD($9 | 0, 2, 0) | 0 | 0); //@line 15210
          $$0126 = 178; //@line 15211
          $$1125$off0 = $$0124$off0144; //@line 15211
          break L20;
         }
        }
       } else {
        $$0126 = 175; //@line 15216
        $$1125$off0 = $$0124$off0144; //@line 15216
       }
      } else {
       $$0126 = 175; //@line 15219
       $$1125$off0 = $$0124$off0144; //@line 15219
      }
     }
    } while (0);
    _lexer_next_token($0); //@line 15223
    L38 : do {
     if ((SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0) == 55) {
      $$1 = 0; //@line 15228
     } else {
      $$0122 = 0; //@line 15230
      while (1) {
       $33 = $$0122 + 1 | 0; //@line 15232
       if ($33 >>> 0 > 255) {
        label = 32; //@line 15235
        break L1;
       }
       _parser_parse_expression($0, 4); //@line 15238
       switch (SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0) {
       case 55:
        {
         $$1 = $33; //@line 15242
         break L38;
         break;
        }
       case 60:
        {
         break;
        }
       default:
        {
         label = 35; //@line 15250
         break L1;
        }
       }
       _lexer_next_token($0); //@line 15254
       $$0122 = $33; //@line 15255
      }
     }
    } while (0);
    _lexer_next_token($0); //@line 15259
    if ($$1125$off0) {
     _parser_emit_cbc($0, 64); //@line 15261
    }
    L47 : do {
     switch ($$1 | 0) {
     case 0:
      {
       switch (($$0126 & 255) << 24 >> 24) {
       case -81:
        {
         _parser_emit_cbc($0, 181); //@line 15269
         continue L1;
         break;
        }
       case -78:
        {
         _parser_emit_cbc($0, 184); //@line 15274
         continue L1;
         break;
        }
       case 61:
        {
         _parser_emit_cbc($0, 62); //@line 15279
         continue L1;
         break;
        }
       default:
        {
         break L47;
        }
       }
       break;
      }
     case 1:
      {
       switch (($$0126 & 255) << 24 >> 24) {
       case -81:
        {
         _parser_emit_cbc($0, 187); //@line 15293
         continue L1;
         break;
        }
       case -78:
        {
         _parser_emit_cbc($0, 190); //@line 15298
         continue L1;
         break;
        }
       case 61:
        {
         _parser_emit_cbc($0, 63); //@line 15303
         continue L1;
         break;
        }
       default:
        {
         break L47;
        }
       }
       break;
      }
     case 2:
      {
       switch (($$0126 & 255) << 24 >> 24) {
       case -81:
        {
         _parser_emit_cbc($0, 193); //@line 15317
         continue L1;
         break;
        }
       case -78:
        {
         _parser_flush_cbc($0); //@line 15322
         SAFE_HEAP_STORE($6 | 0, (SAFE_HEAP_LOAD($6 | 0, 2, 0) | 0 | 0) + -1 << 16 >> 16 | 0, 2);
         _parser_emit_cbc($0, 196); //@line 15326
         continue L1;
         break;
        }
       default:
        {
         break L47;
        }
       }
       break;
      }
     default:
      {}
     }
    } while (0);
    _parser_emit_cbc_call($0, $$0126, $$1); //@line 15340
    continue L1;
    break;
   }
  default:
   {
    $38 = SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0; //@line 15345
    if ($38 << 24 >> 24 != 65) {
     label = 53; //@line 15348
     break L1;
    }
    _parser_push_result($0); //@line 15351
    _parser_emit_cbc($0, 62); //@line 15352
    _parser_stack_pop_uint8($0); //@line 15353
    continue L1;
   }
  }
 }
 if ((label | 0) == 9) {
  _parser_raise_error($0, 42); //@line 15359
 } else if ((label | 0) == 32) {
  _parser_raise_error($0, 3); //@line 15363
 } else if ((label | 0) == 35) {
  _parser_raise_error($0, 41); //@line 15367
 } else if ((label | 0) == 53) {
  if (($11 + -13 & 255) < 2 & ((SAFE_HEAP_LOAD($0 + 191 >> 0 | 0, 1, 0) | 0) & 1) == 0) {
   _parser_push_result($0); //@line 15381
   _parser_emit_unary_lvalue_opcode($0, $11 << 24 >> 24 == 13 ? 163 : 169); //@line 15382
   _lexer_next_token($0); //@line 15383
   $46 = SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0; //@line 15385
  } else {
   $46 = $38; //@line 15387
  }
  if (($46 + -6 & 255) < 9) {
   $49 = $46; //@line 15393
   $53 = $46 & 255; //@line 15393
   while (1) {
    _parser_push_result($0); //@line 15395
    _parser_stack_pop_uint8($0); //@line 15396
    L72 : do {
     if (($49 & 255) > 11) {
      _parser_emit_unary_lvalue_opcode($0, $49 << 24 >> 24 == 12 ? 149 : ($53 * 6 | 0) + 73 & 255); //@line 15405
     } else {
      $60 = ($53 << 1) + 62 | 0; //@line 15408
      $61 = $60 & 254; //@line 15409
      $63 = SAFE_HEAP_LOAD($3 | 0, 2, 0) | 0 | 0; //@line 15411
      if (($61 | 0) != 84) {
       if ($63 << 16 >> 16 == 40) {
        SAFE_HEAP_STORE($3 | 0, $61 | 1 | 0, 2);
        break;
       } else {
        _parser_emit_cbc($0, $60 & 254); //@line 15422
        break;
       }
      }
      if (($63 + -40 & 65535) < 3) {
       if (!(SAFE_HEAP_LOAD($8 >> 0 | 0, 1, 0) | 0)) {
        switch ($63 << 16 >> 16) {
        case 40:
         {
          SAFE_HEAP_STORE($3 | 0, 85 | 0, 2);
          break L72;
          break;
         }
        case 41:
         {
          SAFE_HEAP_STORE($3 | 0, 40 | 0, 2);
          _parser_emit_cbc_literal($0, 85, SAFE_HEAP_LOAD($5 | 0, 2, 0) | 0 | 0); //@line 15441
          break L72;
          break;
         }
        default:
         {
          SAFE_HEAP_STORE($3 | 0, 41 | 0, 2);
          _parser_emit_cbc_literal($0, 85, SAFE_HEAP_LOAD($9 | 0, 2, 0) | 0 | 0); //@line 15448
          break L72;
         }
        }
       }
      }
      _parser_emit_cbc($0, $60 & 254); //@line 15456
     }
    } while (0);
    $56 = SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0; //@line 15459
    if (($56 + -6 & 255) < 9) {
     $49 = $56; //@line 15464
     $53 = $56 & 255; //@line 15464
    } else {
     break;
    }
   }
  }
  return;
 }
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 5746
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 5747
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 5748
 $d_sroa_0_0_extract_trunc = $b$0; //@line 5749
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 5750
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 5751
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 5753
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    SAFE_HEAP_STORE($rem | 0, ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0) | 0, 4);
    SAFE_HEAP_STORE($rem + 4 | 0, 0 | 0, 4);
   }
   $_0$1 = 0; //@line 5759
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 5760
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 5761
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 5764
    $_0$0 = 0; //@line 5765
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 5766
   }
   SAFE_HEAP_STORE($rem | 0, $a$0 | 0 | 0, 4);
   SAFE_HEAP_STORE($rem + 4 | 0, $a$1 & 0 | 0, 4);
   $_0$1 = 0; //@line 5770
   $_0$0 = 0; //@line 5771
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 5772
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 5775
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     SAFE_HEAP_STORE($rem | 0, ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0) | 0, 4);
     SAFE_HEAP_STORE($rem + 4 | 0, 0 | 0, 4);
    }
    $_0$1 = 0; //@line 5783
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 5784
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 5785
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     SAFE_HEAP_STORE($rem | 0, 0 | 0, 4);
     SAFE_HEAP_STORE($rem + 4 | 0, ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0) | 0, 4);
    }
    $_0$1 = 0; //@line 5792
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 5793
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 5794
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 5796
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     SAFE_HEAP_STORE($rem | 0, $a$0 | 0 | 0, 4);
     SAFE_HEAP_STORE($rem + 4 | 0, $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0 | 0, 4);
    }
    $_0$1 = 0; //@line 5802
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 5803
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 5804
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 5807
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 5809
    $58 = 31 - $51 | 0; //@line 5810
    $sr_1_ph = $57; //@line 5811
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 5812
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 5813
    $q_sroa_0_1_ph = 0; //@line 5814
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 5815
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 5819
    $_0$0 = 0; //@line 5820
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 5821
   }
   SAFE_HEAP_STORE($rem | 0, $a$0 | 0 | 0, 4);
   SAFE_HEAP_STORE($rem + 4 | 0, $n_sroa_1_4_extract_shift$0 | $a$1 & 0 | 0, 4);
   $_0$1 = 0; //@line 5825
   $_0$0 = 0; //@line 5826
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 5827
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 5831
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 5833
     $126 = 31 - $119 | 0; //@line 5834
     $130 = $119 - 31 >> 31; //@line 5835
     $sr_1_ph = $125; //@line 5836
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 5837
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 5838
     $q_sroa_0_1_ph = 0; //@line 5839
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 5840
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 5844
     $_0$0 = 0; //@line 5845
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 5846
    }
    SAFE_HEAP_STORE($rem | 0, $a$0 | 0 | 0, 4);
    SAFE_HEAP_STORE($rem + 4 | 0, $n_sroa_1_4_extract_shift$0 | $a$1 & 0 | 0, 4);
    $_0$1 = 0; //@line 5850
    $_0$0 = 0; //@line 5851
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 5852
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 5854
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 5857
    $89 = 64 - $88 | 0; //@line 5858
    $91 = 32 - $88 | 0; //@line 5859
    $92 = $91 >> 31; //@line 5860
    $95 = $88 - 32 | 0; //@line 5861
    $105 = $95 >> 31; //@line 5862
    $sr_1_ph = $88; //@line 5863
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 5864
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 5865
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 5866
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 5867
    break;
   }
   if ($rem | 0) {
    SAFE_HEAP_STORE($rem | 0, $66 & $n_sroa_0_0_extract_trunc | 0, 4);
    SAFE_HEAP_STORE($rem + 4 | 0, 0 | 0, 4);
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 5875
    $_0$0 = $a$0 | 0 | 0; //@line 5876
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 5877
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 5879
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 5880
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 5881
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 5882
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 5887
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 5888
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 5889
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 5890
  $carry_0_lcssa$1 = 0; //@line 5891
  $carry_0_lcssa$0 = 0; //@line 5892
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 5894
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 5895
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 5896
  $137$1 = tempRet0; //@line 5897
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 5898
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 5899
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 5900
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 5901
  $sr_1202 = $sr_1_ph; //@line 5902
  $carry_0203 = 0; //@line 5903
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 5905
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 5906
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 5907
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 5908
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 5909
   $150$1 = tempRet0; //@line 5910
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 5911
   $carry_0203 = $151$0 & 1; //@line 5912
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 5914
   $r_sroa_1_1200 = tempRet0; //@line 5915
   $sr_1202 = $sr_1202 - 1 | 0; //@line 5916
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 5928
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 5929
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 5930
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 5931
  $carry_0_lcssa$1 = 0; //@line 5932
  $carry_0_lcssa$0 = $carry_0203; //@line 5933
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 5935
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 5936
 if ($rem | 0) {
  SAFE_HEAP_STORE($rem | 0, $r_sroa_0_1_lcssa | 0, 4);
  SAFE_HEAP_STORE($rem + 4 | 0, $r_sroa_1_1_lcssa | 0, 4);
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 5942
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 5943
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 5944
}
function _lexer_parse_string($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0151 = 0, $$0153 = 0, $$0153$phi = 0, $$0157 = 0, $$0157$phi = 0, $$0158 = 0, $$1 = 0, $$1152 = 0, $$1159 = 0, $$2 = 0, $$2155 = 0, $$2160 = 0, $$3 = 0, $$3156 = 0, $$3156$in = 0, $$3161 = 0, $$4 = 0, $$4$pn = 0, $$4162 = 0, $$5 = 0, $1 = 0, $10 = 0, $109 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $41 = 0, $47 = 0, $52 = 0, $53 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $70 = 0, $75 = 0, $76 = 0, $8 = 0, $80 = 0, $85 = 0, $86 = 0, $9 = 0, $92 = 0, $95 = 0, label = 0;
 $1 = $0 + 216 | 0; //@line 6989
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 6990
 $3 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0; //@line 6991
 $4 = $2 + 1 | 0; //@line 6992
 $6 = SAFE_HEAP_LOAD($0 + 220 | 0, 4, 0) | 0 | 0; //@line 6994
 $7 = $0 + 224 | 0; //@line 6995
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0; //@line 6996
 $9 = $0 + 228 | 0; //@line 6997
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0; //@line 6998
 $12 = $0 + 168 | 0; //@line 7000
 $13 = $0 + 192 | 0; //@line 7001
 $14 = $0 + 196 | 0; //@line 7002
 $$0 = $4; //@line 7003
 $$0151 = 0; //@line 7003
 $$0153 = 0; //@line 7003
 $$0157 = $8; //@line 7003
 $$0158 = $10 + 1 | 0; //@line 7003
 L1 : while (1) {
  if ($$0 >>> 0 >= $6 >>> 0) {
   label = 3; //@line 7007
   break;
  }
  $16 = SAFE_HEAP_LOAD($$0 >> 0 | 0, 1, 0) | 0 | 0; //@line 7010
  if ($16 << 24 >> 24 == $3 << 24 >> 24) {
   label = 48; //@line 7013
   break;
  }
  L5 : do {
   if ($16 << 24 >> 24 == 92) {
    $19 = $$0 + 1 | 0; //@line 7019
    $20 = $$0158 + 1 | 0; //@line 7020
    if ($19 >>> 0 >= $6 >>> 0) {
     $$0157$phi = $$0157; //@line 7023
     $$0153$phi = $$0153; //@line 7023
     $$0 = $19; //@line 7023
     $$0158 = $20; //@line 7023
     $$0157 = $$0157$phi; //@line 7023
     $$0153 = $$0153$phi; //@line 7023
     continue L1;
    }
    $22 = SAFE_HEAP_LOAD($19 >> 0 | 0, 1, 0) | 0 | 0; //@line 7026
    switch ($22 << 24 >> 24) {
    case 13:
     {
      $23 = $$0 + 2 | 0; //@line 7029
      if ($23 >>> 0 < $6 >>> 0) {
       $$1 = (SAFE_HEAP_LOAD($23 >> 0 | 0, 1, 0) | 0 | 0) == 10 ? $$0 + 3 | 0 : $23; //@line 7036
      } else {
       $$1 = $23; //@line 7038
      }
      $$0153$phi = $$0153; //@line 7041
      $$0 = $$1; //@line 7041
      $$0151 = 1; //@line 7041
      $$0157 = $$0157 + 1 | 0; //@line 7041
      $$0158 = 1; //@line 7041
      $$0153 = $$0153$phi; //@line 7041
      continue L1;
      break;
     }
    case 10:
     {
      $$0153$phi = $$0153; //@line 7048
      $$0 = $$0 + 2 | 0; //@line 7048
      $$0151 = 1; //@line 7048
      $$0157 = $$0157 + 1 | 0; //@line 7048
      $$0158 = 1; //@line 7048
      $$0153 = $$0153$phi; //@line 7048
      continue L1;
      break;
     }
    case -30:
     {
      if ((SAFE_HEAP_LOAD($$0 + 2 >> 0 | 0, 1, 0) | 0 | 0) == -128) {
       if ((SAFE_HEAP_LOAD($$0 + 3 >> 0 | 0, 1, 0) | 0 | 1) << 24 >> 24 == -87) {
        $$0153$phi = $$0153; //@line 7064
        $$0 = $$0 + 4 | 0; //@line 7064
        $$0151 = 1; //@line 7064
        $$0157 = $$0157 + 1 | 0; //@line 7064
        $$0158 = 1; //@line 7064
        $$0153 = $$0153$phi; //@line 7064
        continue L1;
       }
      }
      $70 = $22 & -4; //@line 7069
      break;
     }
    case 48:
     {
      $41 = $$0 + 2 | 0; //@line 7073
      if ($41 >>> 0 < $6 >>> 0) {
       if (((SAFE_HEAP_LOAD($41 >> 0 | 0, 1, 0) | 0 | 0) + -48 & 255) > 9) {
        $$0157$phi = $$0157; //@line 7082
        $$0 = $41; //@line 7082
        $$0151 = 1; //@line 7082
        $$0153 = $$0153 + 1 | 0; //@line 7082
        $$0158 = $$0158 + 2 | 0; //@line 7082
        $$0157 = $$0157$phi; //@line 7082
        continue L1;
       } else {
        label = 20; //@line 7085
       }
      } else {
       label = 20; //@line 7088
      }
      break;
     }
    default:
     {
      $47 = $22 & -4; //@line 7093
      if ($47 << 24 >> 24 == 48) {
       label = 20; //@line 7096
      } else {
       $70 = $47; //@line 7098
      }
     }
    }
    if ((label | 0) == 20) {
     label = 0; //@line 7103
     if ((SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0) & 1 | 0) {
      label = 21; //@line 7108
      break L1;
     }
     $52 = $$0 + 2 | 0; //@line 7111
     $53 = $$0158 + 2 | 0; //@line 7112
     if ($52 >>> 0 < $6 >>> 0) {
      if (((SAFE_HEAP_LOAD($52 >> 0 | 0, 1, 0) | 0) & -8) << 24 >> 24 == 48) {
       $58 = $$0 + 3 | 0; //@line 7119
       $59 = $$0158 + 3 | 0; //@line 7120
       if ($58 >>> 0 < $6 >>> 0) {
        if (((SAFE_HEAP_LOAD($58 >> 0 | 0, 1, 0) | 0) & -8) << 24 >> 24 == 48) {
         $$1159 = $$0158 + 4 | 0; //@line 7133
         $$2 = $$0 + 4 | 0; //@line 7133
         $$2155 = ((SAFE_HEAP_LOAD($19 >> 0 | 0, 1, 1) | 0 | 0) > 49 & 1) + $$0153 | 0; //@line 7133
        } else {
         $$1159 = $59; //@line 7135
         $$2 = $58; //@line 7135
         $$2155 = $$0153; //@line 7135
        }
       } else {
        $$1159 = $59; //@line 7138
        $$2 = $58; //@line 7138
        $$2155 = $$0153; //@line 7138
       }
      } else {
       $$1159 = $53; //@line 7141
       $$2 = $52; //@line 7141
       $$2155 = $$0153; //@line 7141
      }
     } else {
      $$1159 = $53; //@line 7144
      $$2 = $52; //@line 7144
      $$2155 = $$0153; //@line 7144
     }
     $$0157$phi = $$0157; //@line 7147
     $$0 = $$2; //@line 7147
     $$0151 = 1; //@line 7147
     $$0153 = $$2155 + 1 | 0; //@line 7147
     $$0158 = $$1159; //@line 7147
     $$0157 = $$0157$phi; //@line 7147
     continue L1;
    }
    if ($70 << 24 >> 24 != 52) {
     switch ($22 << 24 >> 24) {
     case 117:
     case 120:
      {
       break;
      }
     default:
      {
       $$1152 = 1; //@line 7157
       $$3161 = $20; //@line 7157
       $$4 = $19; //@line 7157
       $95 = $22; //@line 7157
       break L5;
      }
     }
     SAFE_HEAP_STORE($13 | 0, $$0157 | 0, 4);
     SAFE_HEAP_STORE($14 | 0, $$0158 | 0, 4);
     $85 = $$0 + 2 | 0; //@line 7164
     $86 = $22 << 24 >> 24 == 120 ? 2 : 4; //@line 7165
     if (($85 + $86 | 0) >>> 0 > $6 >>> 0) {
      label = 36; //@line 7169
      break L1;
     }
     $92 = $86 | 1; //@line 7175
     $$0157$phi = $$0157; //@line 7178
     $$0 = $19 + $92 | 0; //@line 7178
     $$0151 = 1; //@line 7178
     $$0153 = (_lit_char_get_utf8_length(_lexer_hex_to_character($0, $85, $86) | 0) | 0) + $$0153 | 0; //@line 7178
     $$0158 = $92 + $20 | 0; //@line 7178
     $$0157 = $$0157$phi; //@line 7178
     continue L1;
    }
    if ((SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0) & 1 | 0) {
     label = 30; //@line 7185
     break L1;
    }
    $75 = $$0 + 2 | 0; //@line 7188
    $76 = $$0158 + 2 | 0; //@line 7189
    if ($75 >>> 0 < $6 >>> 0) {
     $80 = ((SAFE_HEAP_LOAD($75 >> 0 | 0, 1, 0) | 0) & -8) << 24 >> 24 == 48; //@line 7194
     $$2160 = $80 ? $$0158 + 3 | 0 : $76; //@line 7199
     $$3 = $80 ? $$0 + 3 | 0 : $75; //@line 7199
    } else {
     $$2160 = $76; //@line 7201
     $$3 = $75; //@line 7201
    }
    $$0157$phi = $$0157; //@line 7204
    $$0 = $$3; //@line 7204
    $$0151 = 1; //@line 7204
    $$0153 = $$0153 + 1 | 0; //@line 7204
    $$0158 = $$2160; //@line 7204
    $$0157 = $$0157$phi; //@line 7204
    continue L1;
   } else {
    $$1152 = $$0151; //@line 7207
    $$3161 = $$0158; //@line 7207
    $$4 = $$0; //@line 7207
    $95 = $16; //@line 7207
   }
  } while (0);
  if (($95 & 255) > 239) {
   $$0157$phi = $$0157; //@line 7215
   $$0 = $$4 + 4 | 0; //@line 7215
   $$0151 = 1; //@line 7215
   $$0153 = $$0153 + 6 | 0; //@line 7215
   $$0158 = $$3161 + 1 | 0; //@line 7215
   $$0157 = $$0157$phi; //@line 7215
   continue;
  }
  switch ($95 << 24 >> 24) {
  case 10:
  case 13:
   {
    label = 44; //@line 7220
    break L1;
    break;
   }
  case 9:
   {
    $$4162 = (_align_column_to_tab($$3161) | 0) + -1 | 0; //@line 7227
    break;
   }
  case -30:
   {
    if ((SAFE_HEAP_LOAD($$4 + 1 >> 0 | 0, 1, 0) | 0 | 0) == -128) {
     if ((SAFE_HEAP_LOAD($$4 + 2 >> 0 | 0, 1, 0) | 0 | 1) << 24 >> 24 == -87) {
      label = 44; //@line 7240
      break L1;
     } else {
      $$4162 = $$3161; //@line 7243
     }
    } else {
     $$4162 = $$3161; //@line 7246
    }
    break;
   }
  default:
   {
    $$4162 = $$3161; //@line 7251
   }
  }
  $109 = $$4162 + 1 | 0; //@line 7254
  $$3156$in = $$0153; //@line 7255
  $$4$pn = $$4; //@line 7255
  while (1) {
   $$5 = $$4$pn + 1 | 0; //@line 7257
   $$3156 = $$3156$in + 1 | 0; //@line 7258
   if ($$5 >>> 0 >= $6 >>> 0) {
    $$0157$phi = $$0157; //@line 7261
    $$0 = $$5; //@line 7261
    $$0151 = $$1152; //@line 7261
    $$0153 = $$3156; //@line 7261
    $$0158 = $109; //@line 7261
    $$0157 = $$0157$phi; //@line 7261
    continue L1;
   }
   if (((SAFE_HEAP_LOAD($$5 >> 0 | 0, 1, 0) | 0) & -64) << 24 >> 24 == -128) {
    $$3156$in = $$3156; //@line 7268
    $$4$pn = $$5; //@line 7268
   } else {
    $$0157$phi = $$0157; //@line 7270
    $$0 = $$5; //@line 7270
    $$0151 = $$1152; //@line 7270
    $$0153 = $$3156; //@line 7270
    $$0158 = $109; //@line 7270
    $$0157 = $$0157$phi; //@line 7270
    continue L1;
   }
  }
 }
 if ((label | 0) == 3) {
  SAFE_HEAP_STORE($13 | 0, $8 | 0, 4);
  SAFE_HEAP_STORE($14 | 0, $10 | 0, 4);
  _parser_raise_error($0, 24); //@line 7278
 } else if ((label | 0) == 21) {
  _parser_raise_error($0, 28); //@line 7282
 } else if ((label | 0) == 30) {
  _parser_raise_error($0, 28); //@line 7286
 } else if ((label | 0) == 36) {
  _parser_raise_error($0, 8); //@line 7290
 } else if ((label | 0) == 44) {
  SAFE_HEAP_STORE($13 | 0, $$0157 | 0, 4);
  SAFE_HEAP_STORE($14 | 0, $$3161 | 0, 4);
  _parser_raise_error($0, 26); //@line 7296
 } else if ((label | 0) == 48) {
  if ($$0153 >>> 0 > 65535) {
   _parser_raise_error($0, 20); //@line 7302
  } else {
   SAFE_HEAP_STORE($0 + 188 >> 0 | 0, 1 | 0, 1);
   SAFE_HEAP_STORE($0 + 200 | 0, $4 | 0, 4);
   SAFE_HEAP_STORE($0 + 204 | 0, $$0153 | 0, 2);
   SAFE_HEAP_STORE($0 + 206 >> 0 | 0, 1 | 0, 1);
   SAFE_HEAP_STORE($0 + 207 >> 0 | 0, $$0151 | 0, 1);
   SAFE_HEAP_STORE($1 | 0, $$0 + 1 | 0, 4);
   SAFE_HEAP_STORE($7 | 0, $$0157 | 0, 4);
   SAFE_HEAP_STORE($9 | 0, $$0158 + 1 | 0, 4);
   return;
  }
 }
}
function _ecma_builtin_global_object_parse_float($0) {
 $0 = $0 | 0;
 var $$0106$off0 = 0, $$0107 = 0, $$093$off0 = 0, $$094$off0 = 0, $$095 = 0, $$097 = 0, $$1104$off0 = 0, $$1108 = 0, $$199 = 0, $$2 = 0, $$2100 = 0, $$2111 = 0, $$3 = 0, $$3112 = 0, $$4 = 0, $$4102 = 0, $$5 = 0, $$6 = 0, $$pre = 0, $$pre20 = 0, $1 = 0, $11 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0, $26 = 0, $3 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $57 = 0, $59 = 0, $6 = 0, $66 = 0, $67 = 0, $69 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $82 = 0, $89 = 0, $9 = 0, $95 = 0.0, sp = 0;
 sp = STACKTOP; //@line 4034
 STACKTOP = STACKTOP + 16 | 0; //@line 4035
 $1 = sp + 4 | 0; //@line 4036
 $2 = sp; //@line 4037
 $3 = _ecma_op_to_string($0) | 0; //@line 4038
 if (($3 | 0) == 24) {
  $$4 = 24; //@line 4041
 } else {
  $5 = _ecma_get_string_from_value($3) | 0; //@line 4043
  $6 = _ecma_string_get_chars($5, $1, 0) | 0; //@line 4044
  if (!$6) {
   $9 = _jmem_heap_alloc_block(SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) | 0; //@line 4048
   _ecma_string_to_utf8_bytes($5, $9, SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0); //@line 4050
   $$0106$off0 = 1; //@line 4051
   $$097 = $9; //@line 4051
  } else {
   $$0106$off0 = 0; //@line 4053
   $$097 = $6; //@line 4053
  }
  $11 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 4055
  if (!$11) {
   $$3 = _ecma_make_nan_value() | 0; //@line 4059
  } else {
   SAFE_HEAP_STORE($2 | 0, $$097 | 0, 4);
   $13 = $$097 + $11 | 0; //@line 4062
   L9 : do {
    if (($11 | 0) > 0) {
     while (1) {
      $15 = _lit_utf8_read_next($2) | 0; //@line 4067
      if (!(_lit_char_is_white_space($15) | 0)) {
       if (!(_lit_char_is_line_terminator($15) | 0)) {
        break;
       }
      }
      $18 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 4075
      if ($18 >>> 0 >= $13 >>> 0) {
       $$2111 = $13; //@line 4078
       $21 = $18; //@line 4078
       break L9;
      }
     }
     _lit_utf8_decr($2); //@line 4082
     $20 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 4083
     $$2111 = $20; //@line 4084
     $21 = $20; //@line 4084
    } else {
     $$2111 = $13; //@line 4086
     $21 = $$097; //@line 4086
    }
   } while (0);
   L17 : do {
    if ($21 >>> 0 < $13 >>> 0) {
     $23 = SAFE_HEAP_LOAD($21 >> 0 | 0, 1, 0) | 0 | 0; //@line 4092
     switch ($23 << 24 >> 24) {
     case 43:
     case 45:
      {
       break;
      }
     default:
      {
       $$1104$off0 = 0; //@line 4098
       $$3112 = $$2111; //@line 4098
       break L17;
      }
     }
     $25 = $21 + 1 | 0; //@line 4103
     SAFE_HEAP_STORE($2 | 0, $25 | 0, 4);
     $$1104$off0 = $23 << 24 >> 24 == 45; //@line 4105
     $$3112 = $25; //@line 4105
    } else {
     $$1104$off0 = 0; //@line 4107
     $$3112 = $$2111; //@line 4107
    }
   } while (0);
   $26 = _lit_get_magic_string_utf8(42) | 0; //@line 4110
   $$pre = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 4111
   if ($$pre >>> 0 < $13 >>> 0) {
    SAFE_HEAP_STORE($2 | 0, $$pre + 1 | 0, 4);
    if ((SAFE_HEAP_LOAD($$pre >> 0 | 0, 1, 0) | 0 | 0) == (SAFE_HEAP_LOAD($26 >> 0 | 0, 1, 0) | 0 | 0)) {
     $$095 = _ecma_make_number_value(+_ecma_number_make_infinity($$1104$off0)) | 0; //@line 4122
    } else {
     $$095 = 8; //@line 4124
    }
   } else {
    $$095 = 8; //@line 4127
   }
   SAFE_HEAP_STORE($2 | 0, $$3112 | 0, 4);
   $34 = _ecma_is_value_empty($$095) | 0; //@line 4130
   do {
    if ($$3112 >>> 0 < $13 >>> 0 & $34) {
     $37 = SAFE_HEAP_LOAD($$3112 >> 0 | 0, 1, 1) | 0 | 0; //@line 4136
     $38 = _lit_char_is_decimal_digit($37) | 0; //@line 4137
     $39 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 4138
     L27 : do {
      if ($38) {
       $40 = $39 + 1 | 0; //@line 4141
       SAFE_HEAP_STORE($2 | 0, $40 | 0, 4);
       if ($40 >>> 0 < $13 >>> 0) {
        $43 = $40; //@line 4145
        while (1) {
         SAFE_HEAP_STORE($2 | 0, $43 + 1 | 0, 4);
         $45 = SAFE_HEAP_LOAD($43 >> 0 | 0, 1, 1) | 0 | 0; //@line 4150
         $46 = _lit_char_is_decimal_digit($45) | 0; //@line 4151
         $$pre20 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 4152
         if (!$46) {
          break;
         }
         if ($$pre20 >>> 0 < $13 >>> 0) {
          $43 = $$pre20; //@line 4158
         } else {
          $$094$off0 = 1; //@line 4160
          $$199 = $45; //@line 4160
          $49 = $$pre20; //@line 4160
          break L27;
         }
        }
        $48 = $$pre20 + -1 | 0; //@line 4164
        SAFE_HEAP_STORE($2 | 0, $48 | 0, 4);
        $$094$off0 = 1; //@line 4166
        $$199 = $45; //@line 4166
        $49 = $48; //@line 4166
       } else {
        $$094$off0 = 1; //@line 4168
        $$199 = $37; //@line 4168
        $49 = $40; //@line 4168
       }
      } else {
       $$094$off0 = 0; //@line 4171
       $$199 = $37; //@line 4171
       $49 = $39; //@line 4171
      }
     } while (0);
     L34 : do {
      if ($49 >>> 0 < $13 >>> 0) {
       $51 = SAFE_HEAP_LOAD($49 >> 0 | 0, 1, 0) | 0 | 0; //@line 4177
       $52 = $51 & 255; //@line 4178
       if ($51 << 24 >> 24 == 46) {
        $54 = $49 + 1 | 0; //@line 4181
        SAFE_HEAP_STORE($2 | 0, $54 | 0, 4);
        if ($54 >>> 0 < $13 >>> 0) {
         $57 = SAFE_HEAP_LOAD($54 >> 0 | 0, 1, 1) | 0 | 0; //@line 4186
         if (_lit_char_is_decimal_digit($57) | 0) {
          $$2100 = $57; //@line 4189
         } else {
          $$0107 = $49; //@line 4192
          $$093$off0 = 0; //@line 4192
          $$4102 = $57; //@line 4192
          $67 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 4192
          break;
         }
         do {
          $59 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 4196
          if ($59 >>> 0 >= $13 >>> 0) {
           $$0107 = $59; //@line 4199
           $$093$off0 = 1; //@line 4199
           $$4102 = $$2100; //@line 4199
           $67 = $59; //@line 4199
           break L34;
          }
          SAFE_HEAP_STORE($2 | 0, $59 + 1 | 0, 4);
          $$2100 = SAFE_HEAP_LOAD($59 >> 0 | 0, 1, 1) | 0 | 0; //@line 4205
         } while (_lit_char_is_decimal_digit($$2100) | 0);
         $66 = (SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0) + -1 | 0; //@line 4214
         SAFE_HEAP_STORE($2 | 0, $66 | 0, 4);
         $$0107 = $66; //@line 4216
         $$093$off0 = 1; //@line 4216
         $$4102 = $$2100; //@line 4216
         $67 = $66; //@line 4216
        } else {
         $$0107 = $49; //@line 4218
         $$093$off0 = 0; //@line 4218
         $$4102 = $52; //@line 4218
         $67 = $54; //@line 4218
        }
       } else {
        $$0107 = $49; //@line 4221
        $$093$off0 = 0; //@line 4221
        $$4102 = $52; //@line 4221
        $67 = $49; //@line 4221
       }
      } else {
       $$0107 = $49; //@line 4224
       $$093$off0 = 0; //@line 4224
       $$4102 = $$199; //@line 4224
       $67 = $49; //@line 4224
      }
     } while (0);
     if ($67 >>> 0 < $13 >>> 0) {
      $69 = $67 + 1 | 0; //@line 4229
      SAFE_HEAP_STORE($2 | 0, $69 | 0, 4);
      $$5 = SAFE_HEAP_LOAD($67 >> 0 | 0, 1, 1) | 0 | 0; //@line 4233
      $72 = $69; //@line 4233
     } else {
      $$5 = $$4102; //@line 4235
      $72 = $67; //@line 4235
     }
     L48 : do {
      switch ($$5 << 16 >> 16) {
      case 69:
      case 101:
       {
        if (($$094$off0 | $$093$off0) & $72 >>> 0 < $13 >>> 0) {
         $74 = $72 + 1 | 0; //@line 4244
         SAFE_HEAP_STORE($2 | 0, $74 | 0, 4);
         $75 = SAFE_HEAP_LOAD($72 >> 0 | 0, 1, 0) | 0 | 0; //@line 4246
         $76 = $75 & 255; //@line 4247
         switch ($75 << 24 >> 24) {
         case 45:
         case 43:
          {
           if ($74 >>> 0 < $13 >>> 0) {
            SAFE_HEAP_STORE($2 | 0, $72 + 2 | 0, 4);
            $$6 = SAFE_HEAP_LOAD($74 >> 0 | 0, 1, 1) | 0 | 0; //@line 4256
           } else {
            $$6 = $76; //@line 4258
           }
           break;
          }
         default:
          {
           $$6 = $76; //@line 4263
          }
         }
         if (_lit_char_is_decimal_digit($$6) | 0) {
          do {
           $82 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 4269
           if ($82 >>> 0 >= $13 >>> 0) {
            $$1108 = $82; //@line 4272
            break L48;
           }
           SAFE_HEAP_STORE($2 | 0, $82 + 1 | 0, 4);
          } while (_lit_char_is_decimal_digit(SAFE_HEAP_LOAD($82 >> 0 | 0, 1, 1) | 0 | 0) | 0);
          $89 = (SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0) + -1 | 0; //@line 4285
          SAFE_HEAP_STORE($2 | 0, $89 | 0, 4);
          $$1108 = $89; //@line 4287
         } else {
          $$1108 = $$0107; //@line 4289
         }
        } else {
         $$1108 = $$0107; //@line 4292
        }
        break;
       }
      default:
       {
        $$1108 = $$0107; //@line 4297
       }
      }
     } while (0);
     if (($$3112 | 0) == ($$1108 | 0)) {
      $$2 = _ecma_make_nan_value() | 0; //@line 4304
      break;
     } else {
      $95 = +_ecma_utf8_string_to_number($$3112, $$1108 - $$3112 | 0); //@line 4310
      $$2 = _ecma_make_number_value($$1104$off0 ? -$95 : $95) | 0; //@line 4314
      break;
     }
    } else {
     if ($34) {
      $$2 = _ecma_make_nan_value() | 0; //@line 4320
     } else {
      $$2 = $$095; //@line 4322
     }
    }
   } while (0);
   $$3 = $$2; //@line 4326
  }
  if ($$0106$off0) {
   _jmem_heap_free_block($$097, SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0); //@line 4330
  }
  _ecma_free_value($3); //@line 4332
  $$4 = $$3; //@line 4333
 }
 STACKTOP = sp; //@line 4335
 return $$4 | 0; //@line 4335
}
function _try_realloc_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1272 = 0, $$1275 = 0, $$2 = 0, $$3 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $102 = 0, $105 = 0, $107 = 0, $110 = 0, $113 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $120 = 0, $122 = 0, $123 = 0, $128 = 0, $129 = 0, $142 = 0, $145 = 0, $146 = 0, $152 = 0, $159 = 0, $163 = 0, $166 = 0, $172 = 0, $2 = 0, $22 = 0, $24 = 0, $3 = 0, $31 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $60 = 0, $66 = 0, $7 = 0, $72 = 0, $74 = 0, $75 = 0, $78 = 0, $80 = 0, $82 = 0, $95 = 0, $storemerge = 0, $storemerge1 = 0;
 $2 = $0 + 4 | 0; //@line 863
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 864
 $4 = $3 & -8; //@line 865
 $5 = $0 + $4 | 0; //@line 866
 $6 = SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0; //@line 867
 $7 = $3 & 3; //@line 868
 if (!(($7 | 0) != 1 & $0 >>> 0 >= $6 >>> 0 & $0 >>> 0 < $5 >>> 0)) {
  _abort(); //@line 875
 }
 $10 = SAFE_HEAP_LOAD($5 + 4 | 0, 4, 0) | 0 | 0; //@line 879
 if (!($10 & 1)) {
  _abort(); //@line 883
 }
 if (!$7) {
  if ($1 >>> 0 < 256) {
   $$2 = 0; //@line 890
   return $$2 | 0; //@line 891
  }
  if ($4 >>> 0 >= ($1 + 4 | 0) >>> 0) {
   if (($4 - $1 | 0) >>> 0 <= (SAFE_HEAP_LOAD(134770 * 4 | 0, 4, 0) | 0) << 1 >>> 0) {
    $$2 = $0; //@line 901
    return $$2 | 0; //@line 902
   }
  }
  $$2 = 0; //@line 905
  return $$2 | 0; //@line 906
 }
 if ($4 >>> 0 >= $1 >>> 0) {
  $22 = $4 - $1 | 0; //@line 910
  if ($22 >>> 0 <= 15) {
   $$2 = $0; //@line 913
   return $$2 | 0; //@line 914
  }
  $24 = $0 + $1 | 0; //@line 916
  SAFE_HEAP_STORE($2 | 0, $3 & 1 | $1 | 2 | 0, 4);
  SAFE_HEAP_STORE($24 + 4 | 0, $22 | 3 | 0, 4);
  $31 = $24 + $22 + 4 | 0; //@line 925
  SAFE_HEAP_STORE($31 | 0, SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 1 | 0, 4);
  _dispose_chunk($24, $22); //@line 929
  $$2 = $0; //@line 930
  return $$2 | 0; //@line 931
 }
 if (($5 | 0) == (SAFE_HEAP_LOAD(134656 * 4 | 0, 4, 0) | 0 | 0)) {
  $37 = (SAFE_HEAP_LOAD(134653 * 4 | 0, 4, 0) | 0 | 0) + $4 | 0; //@line 937
  $39 = $37 - $1 | 0; //@line 939
  $40 = $0 + $1 | 0; //@line 940
  if ($37 >>> 0 <= $1 >>> 0) {
   $$2 = 0; //@line 942
   return $$2 | 0; //@line 943
  }
  SAFE_HEAP_STORE($2 | 0, $3 & 1 | $1 | 2 | 0, 4);
  SAFE_HEAP_STORE($40 + 4 | 0, $39 | 1 | 0, 4);
  SAFE_HEAP_STORE(134656 * 4 | 0, $40 | 0, 4);
  SAFE_HEAP_STORE(134653 * 4 | 0, $39 | 0, 4);
  $$2 = $0; //@line 954
  return $$2 | 0; //@line 955
 }
 if (($5 | 0) == (SAFE_HEAP_LOAD(134655 * 4 | 0, 4, 0) | 0 | 0)) {
  $49 = (SAFE_HEAP_LOAD(134652 * 4 | 0, 4, 0) | 0 | 0) + $4 | 0; //@line 961
  if ($49 >>> 0 < $1 >>> 0) {
   $$2 = 0; //@line 964
   return $$2 | 0; //@line 965
  }
  $51 = $49 - $1 | 0; //@line 967
  $53 = $3 & 1; //@line 969
  if ($51 >>> 0 > 15) {
   $54 = $0 + $1 | 0; //@line 971
   $55 = $54 + $51 | 0; //@line 972
   SAFE_HEAP_STORE($2 | 0, $53 | $1 | 2 | 0, 4);
   SAFE_HEAP_STORE($54 + 4 | 0, $51 | 1 | 0, 4);
   SAFE_HEAP_STORE($55 | 0, $51 | 0, 4);
   $60 = $55 + 4 | 0; //@line 980
   SAFE_HEAP_STORE($60 | 0, (SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0) & -2 | 0, 4);
   $storemerge = $54; //@line 984
   $storemerge1 = $51; //@line 984
  } else {
   SAFE_HEAP_STORE($2 | 0, $53 | $49 | 2 | 0, 4);
   $66 = $0 + $49 + 4 | 0; //@line 990
   SAFE_HEAP_STORE($66 | 0, SAFE_HEAP_LOAD($66 | 0, 4, 0) | 0 | 1 | 0, 4);
   $storemerge = 0; //@line 994
   $storemerge1 = 0; //@line 994
  }
  SAFE_HEAP_STORE(134652 * 4 | 0, $storemerge1 | 0, 4);
  SAFE_HEAP_STORE(134655 * 4 | 0, $storemerge | 0, 4);
  $$2 = $0; //@line 998
  return $$2 | 0; //@line 999
 }
 if ($10 & 2 | 0) {
  $$2 = 0; //@line 1004
  return $$2 | 0; //@line 1005
 }
 $72 = ($10 & -8) + $4 | 0; //@line 1008
 if ($72 >>> 0 < $1 >>> 0) {
  $$2 = 0; //@line 1011
  return $$2 | 0; //@line 1012
 }
 $74 = $72 - $1 | 0; //@line 1014
 $75 = $10 >>> 3; //@line 1015
 L49 : do {
  if ($10 >>> 0 < 256) {
   $78 = SAFE_HEAP_LOAD($5 + 8 | 0, 4, 0) | 0 | 0; //@line 1020
   $80 = SAFE_HEAP_LOAD($5 + 12 | 0, 4, 0) | 0 | 0; //@line 1022
   $82 = 538640 + ($75 << 1 << 2) | 0; //@line 1024
   if (($78 | 0) != ($82 | 0)) {
    if ($78 >>> 0 < $6 >>> 0) {
     _abort(); //@line 1029
    }
    if ((SAFE_HEAP_LOAD($78 + 12 | 0, 4, 0) | 0 | 0) != ($5 | 0)) {
     _abort(); //@line 1036
    }
   }
   if (($80 | 0) == ($78 | 0)) {
    SAFE_HEAP_STORE(134650 * 4 | 0, (SAFE_HEAP_LOAD(134650 * 4 | 0, 4, 0) | 0) & ~(1 << $75) | 0, 4);
    break;
   }
   if (($80 | 0) == ($82 | 0)) {
    $$pre$phiZ2D = $80 + 8 | 0; //@line 1052
   } else {
    if ($80 >>> 0 < $6 >>> 0) {
     _abort(); //@line 1056
    }
    $95 = $80 + 8 | 0; //@line 1059
    if ((SAFE_HEAP_LOAD($95 | 0, 4, 0) | 0 | 0) == ($5 | 0)) {
     $$pre$phiZ2D = $95; //@line 1063
    } else {
     _abort(); //@line 1065
    }
   }
   SAFE_HEAP_STORE($78 + 12 | 0, $80 | 0, 4);
   SAFE_HEAP_STORE($$pre$phiZ2D | 0, $78 | 0, 4);
  } else {
   $100 = SAFE_HEAP_LOAD($5 + 24 | 0, 4, 0) | 0 | 0; //@line 1074
   $102 = SAFE_HEAP_LOAD($5 + 12 | 0, 4, 0) | 0 | 0; //@line 1076
   do {
    if (($102 | 0) == ($5 | 0)) {
     $113 = $5 + 16 | 0; //@line 1080
     $114 = $113 + 4 | 0; //@line 1081
     $115 = SAFE_HEAP_LOAD($114 | 0, 4, 0) | 0 | 0; //@line 1082
     if (!$115) {
      $117 = SAFE_HEAP_LOAD($113 | 0, 4, 0) | 0 | 0; //@line 1085
      if (!$117) {
       $$3 = 0; //@line 1088
       break;
      } else {
       $$1272 = $117; //@line 1091
       $$1275 = $113; //@line 1091
      }
     } else {
      $$1272 = $115; //@line 1094
      $$1275 = $114; //@line 1094
     }
     while (1) {
      $119 = $$1272 + 20 | 0; //@line 1097
      $120 = SAFE_HEAP_LOAD($119 | 0, 4, 0) | 0 | 0; //@line 1098
      if ($120 | 0) {
       $$1272 = $120; //@line 1101
       $$1275 = $119; //@line 1101
       continue;
      }
      $122 = $$1272 + 16 | 0; //@line 1104
      $123 = SAFE_HEAP_LOAD($122 | 0, 4, 0) | 0 | 0; //@line 1105
      if (!$123) {
       break;
      } else {
       $$1272 = $123; //@line 1110
       $$1275 = $122; //@line 1110
      }
     }
     if ($$1275 >>> 0 < $6 >>> 0) {
      _abort(); //@line 1115
     } else {
      SAFE_HEAP_STORE($$1275 | 0, 0 | 0, 4);
      $$3 = $$1272; //@line 1119
      break;
     }
    } else {
     $105 = SAFE_HEAP_LOAD($5 + 8 | 0, 4, 0) | 0 | 0; //@line 1124
     if ($105 >>> 0 < $6 >>> 0) {
      _abort(); //@line 1127
     }
     $107 = $105 + 12 | 0; //@line 1130
     if ((SAFE_HEAP_LOAD($107 | 0, 4, 0) | 0 | 0) != ($5 | 0)) {
      _abort(); //@line 1134
     }
     $110 = $102 + 8 | 0; //@line 1137
     if ((SAFE_HEAP_LOAD($110 | 0, 4, 0) | 0 | 0) == ($5 | 0)) {
      SAFE_HEAP_STORE($107 | 0, $102 | 0, 4);
      SAFE_HEAP_STORE($110 | 0, $105 | 0, 4);
      $$3 = $102; //@line 1143
      break;
     } else {
      _abort(); //@line 1146
     }
    }
   } while (0);
   if ($100 | 0) {
    $128 = SAFE_HEAP_LOAD($5 + 28 | 0, 4, 0) | 0 | 0; //@line 1154
    $129 = 538904 + ($128 << 2) | 0; //@line 1155
    do {
     if (($5 | 0) == (SAFE_HEAP_LOAD($129 | 0, 4, 0) | 0 | 0)) {
      SAFE_HEAP_STORE($129 | 0, $$3 | 0, 4);
      if (!$$3) {
       SAFE_HEAP_STORE(134651 * 4 | 0, (SAFE_HEAP_LOAD(134651 * 4 | 0, 4, 0) | 0) & ~(1 << $128) | 0, 4);
       break L49;
      }
     } else {
      if ($100 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
       _abort(); //@line 1174
      } else {
       SAFE_HEAP_STORE($100 + 16 + (((SAFE_HEAP_LOAD($100 + 16 | 0, 4, 0) | 0 | 0) != ($5 | 0) & 1) << 2) | 0, $$3 | 0, 4);
       if (!$$3) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while (0);
    $142 = SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0; //@line 1192
    if ($$3 >>> 0 < $142 >>> 0) {
     _abort(); //@line 1195
    }
    SAFE_HEAP_STORE($$3 + 24 | 0, $100 | 0, 4);
    $145 = $5 + 16 | 0; //@line 1200
    $146 = SAFE_HEAP_LOAD($145 | 0, 4, 0) | 0 | 0; //@line 1201
    do {
     if ($146 | 0) {
      if ($146 >>> 0 < $142 >>> 0) {
       _abort(); //@line 1207
      } else {
       SAFE_HEAP_STORE($$3 + 16 | 0, $146 | 0, 4);
       SAFE_HEAP_STORE($146 + 24 | 0, $$3 | 0, 4);
       break;
      }
     }
    } while (0);
    $152 = SAFE_HEAP_LOAD($145 + 4 | 0, 4, 0) | 0 | 0; //@line 1219
    if ($152 | 0) {
     if ($152 >>> 0 < (SAFE_HEAP_LOAD(134654 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
      _abort(); //@line 1225
     } else {
      SAFE_HEAP_STORE($$3 + 20 | 0, $152 | 0, 4);
      SAFE_HEAP_STORE($152 + 24 | 0, $$3 | 0, 4);
      break;
     }
    }
   }
  }
 } while (0);
 $159 = $3 & 1; //@line 1239
 if ($74 >>> 0 < 16) {
  SAFE_HEAP_STORE($2 | 0, $72 | $159 | 2 | 0, 4);
  $163 = $0 + $72 + 4 | 0; //@line 1245
  SAFE_HEAP_STORE($163 | 0, SAFE_HEAP_LOAD($163 | 0, 4, 0) | 0 | 1 | 0, 4);
  $$2 = $0; //@line 1249
  return $$2 | 0; //@line 1250
 } else {
  $166 = $0 + $1 | 0; //@line 1252
  SAFE_HEAP_STORE($2 | 0, $159 | $1 | 2 | 0, 4);
  SAFE_HEAP_STORE($166 + 4 | 0, $74 | 3 | 0, 4);
  $172 = $166 + $74 + 4 | 0; //@line 1260
  SAFE_HEAP_STORE($172 | 0, SAFE_HEAP_LOAD($172 | 0, 4, 0) | 0 | 1 | 0, 4);
  _dispose_chunk($166, $74); //@line 1264
  $$2 = $0; //@line 1265
  return $$2 | 0; //@line 1266
 }
 return 0; //@line 1268
}
function _ecma_save_literals_for_snapshot($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0118160 = 0, $$0119$lcssa = 0, $$0119189 = 0, $$0120$lcssa = 0, $$0120188 = 0, $$0126168 = 0, $$0127$lcssa = 0, $$0127172 = 0, $$0133$lcssa = 0, $$0133171 = 0, $$0139$lcssa = 0, $$0139170 = 0, $$0145175 = 0, $$0146178 = 0, $$0148187 = 0, $$0150184 = 0, $$1121185 = 0, $$1128167 = 0, $$1134166 = 0, $$1140165 = 0, $$1147161 = 0, $$1149169 = 0, $$1186 = 0, $$2 = 0, $$2122 = 0, $$2129 = 0, $$2135 = 0, $$2141 = 0, $$3$lcssa = 0, $$3123$lcssa = 0, $$3123179 = 0, $$3130164 = 0, $$3136163 = 0, $$3142162 = 0, $$3180 = 0, $$4124176 = 0, $$4131159 = 0, $$4137158 = 0, $$4143157 = 0, $$4177 = 0, $$5132 = 0, $$5138 = 0, $$5144 = 0, $14 = 0, $24 = 0, $26 = 0, $33 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $55 = 0, $56 = 0, $6 = 0, $64 = 0, $65 = 0, $69 = 0, $74 = 0, $76 = 0, $8 = 0, $81 = 0, $82 = 0, sp = 0;
 sp = STACKTOP; //@line 7674
 STACKTOP = STACKTOP + 16 | 0; //@line 7675
 $5 = sp; //@line 7676
 $6 = SAFE_HEAP_LOAD(134104 * 4 | 0, 4, 0) | 0 | 0; //@line 7677
 L1 : do {
  if (!$6) {
   $$0119$lcssa = 4; //@line 7681
   $$0120$lcssa = 0; //@line 7681
  } else {
   $$0119189 = 4; //@line 7683
   $$0120188 = 0; //@line 7683
   $$0148187 = $6; //@line 7683
   while (1) {
    $$0150184 = 0; //@line 7685
    $$1121185 = $$0120188; //@line 7685
    $$1186 = $$0119189; //@line 7685
    while (1) {
     $14 = SAFE_HEAP_LOAD($$0148187 + 2 + ($$0150184 << 1) | 0, 2, 0) | 0 | 0; //@line 7688
     if (!($14 << 16 >> 16)) {
      $$2 = $$1186; //@line 7691
      $$2122 = $$1121185; //@line 7691
     } else {
      $$2 = ((_ecma_string_get_size(_jmem_decompress_pointer($14 & 65535) | 0) | 0) + 5 & -4) + $$1186 | 0; //@line 7700
      $$2122 = $$1121185 + 1 | 0; //@line 7700
     }
     $$0150184 = $$0150184 + 1 | 0; //@line 7702
     if (($$0150184 | 0) == 3) {
      break;
     } else {
      $$1121185 = $$2122; //@line 7707
      $$1186 = $$2; //@line 7707
     }
    }
    $8 = SAFE_HEAP_LOAD($$0148187 | 0, 2, 0) | 0 | 0; //@line 7710
    if (!($8 << 16 >> 16)) {
     $$0119$lcssa = $$2; //@line 7713
     $$0120$lcssa = $$2122; //@line 7713
     break L1;
    }
    $$0148187 = _jmem_decompress_pointer($8 & 65535) | 0; //@line 7717
    if (!$$0148187) {
     $$0119$lcssa = $$2; //@line 7720
     $$0120$lcssa = $$2122; //@line 7720
     break;
    } else {
     $$0119189 = $$2; //@line 7723
     $$0120188 = $$2122; //@line 7723
    }
   }
  }
 } while (0);
 $24 = SAFE_HEAP_LOAD(134105 * 4 | 0, 4, 0) | 0 | 0; //@line 7728
 L12 : do {
  if (!$24) {
   $$3$lcssa = $$0119$lcssa; //@line 7732
   $$3123$lcssa = $$0120$lcssa; //@line 7732
  } else {
   $$0146178 = $24; //@line 7734
   $$3123179 = $$0120$lcssa; //@line 7734
   $$3180 = $$0119$lcssa; //@line 7734
   while (1) {
    $$0145175 = 0; //@line 7736
    $$4124176 = $$3123179; //@line 7736
    $$4177 = $$3180; //@line 7736
    do {
     $33 = (SAFE_HEAP_LOAD($$0146178 + 2 + ($$0145175 << 1) | 0, 2, 0) | 0 | 0) == 0; //@line 7740
     $$4124176 = (($33 ^ 1) & 1) + $$4124176 | 0; //@line 7744
     $$4177 = $33 ? $$4177 : $$4177 + 8 | 0; //@line 7745
     $$0145175 = $$0145175 + 1 | 0; //@line 7746
    } while (($$0145175 | 0) != 3);
    $26 = SAFE_HEAP_LOAD($$0146178 | 0, 2, 0) | 0 | 0; //@line 7754
    if (!($26 << 16 >> 16)) {
     $$3$lcssa = $$4177; //@line 7757
     $$3123$lcssa = $$4124176; //@line 7757
     break L12;
    }
    $$0146178 = _jmem_decompress_pointer($26 & 65535) | 0; //@line 7761
    if (!$$0146178) {
     $$3$lcssa = $$4177; //@line 7764
     $$3123$lcssa = $$4124176; //@line 7764
     break;
    } else {
     $$3123179 = $$4124176; //@line 7767
     $$3180 = $$4177; //@line 7767
    }
   }
  }
 } while (0);
 L20 : do {
  if ($$3$lcssa >>> 0 > 262143 ? 1 : ((SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0) + $$3$lcssa | 0) >>> 0 > $1 >>> 0) {
   $$0 = 0; //@line 7779
  } else {
   $42 = _jmem_heap_alloc_block($$3123$lcssa << 2) | 0; //@line 7782
   $43 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 7783
   $45 = $0 + ($43 >>> 2 << 2) | 0; //@line 7785
   SAFE_HEAP_STORE($2 | 0, $43 + $$3$lcssa | 0, 4);
   SAFE_HEAP_STORE($3 | 0, $42 | 0, 4);
   SAFE_HEAP_STORE($4 | 0, $$3123$lcssa | 0, 4);
   $47 = $45 + 4 | 0; //@line 7790
   SAFE_HEAP_STORE($45 | 0, $$0119$lcssa | 0, 4);
   $48 = SAFE_HEAP_LOAD(134104 * 4 | 0, 4, 0) | 0 | 0; //@line 7792
   L22 : do {
    if (!$48) {
     $$0127$lcssa = $47; //@line 7796
     $$0133$lcssa = 4; //@line 7796
     $$0139$lcssa = $42; //@line 7796
    } else {
     $$0127172 = $47; //@line 7798
     $$0133171 = 4; //@line 7798
     $$0139170 = $42; //@line 7798
     $$1149169 = $48; //@line 7798
     while (1) {
      $$0126168 = 0; //@line 7800
      $$1128167 = $$0127172; //@line 7800
      $$1134166 = $$0133171; //@line 7800
      $$1140165 = $$0139170; //@line 7800
      while (1) {
       $55 = $$1149169 + 2 + ($$0126168 << 1) | 0; //@line 7802
       $56 = SAFE_HEAP_LOAD($55 | 0, 2, 0) | 0 | 0; //@line 7803
       if (!($56 << 16 >> 16)) {
        $$2129 = $$1128167; //@line 7806
        $$2135 = $$1134166; //@line 7806
        $$2141 = $$1140165; //@line 7806
       } else {
        SAFE_HEAP_STORE($$1140165 | 0, $56 | 0, 2);
        SAFE_HEAP_STORE($$1140165 + 2 | 0, $$1134166 >>> 2 | 0, 2);
        $64 = _jmem_decompress_pointer(SAFE_HEAP_LOAD($55 | 0, 2, 1) | 0 | 0) | 0; //@line 7816
        $65 = _ecma_string_get_size($64) | 0; //@line 7817
        SAFE_HEAP_STORE($$1128167 | 0, $65 | 0, 2);
        _ecma_string_to_utf8_bytes($64, $$1128167 + 2 | 0, $65); //@line 7821
        $69 = $65 + 5 & -4; //@line 7823
        $$2129 = $$1128167 + ($69 >>> 1 << 1) | 0; //@line 7827
        $$2135 = $69 + $$1134166 | 0; //@line 7827
        $$2141 = $$1140165 + 4 | 0; //@line 7827
       }
       $$0126168 = $$0126168 + 1 | 0; //@line 7829
       if (($$0126168 | 0) == 3) {
        break;
       } else {
        $$1128167 = $$2129; //@line 7834
        $$1134166 = $$2135; //@line 7834
        $$1140165 = $$2141; //@line 7834
       }
      }
      $50 = SAFE_HEAP_LOAD($$1149169 | 0, 2, 0) | 0 | 0; //@line 7837
      if (!($50 << 16 >> 16)) {
       $$0127$lcssa = $$2129; //@line 7840
       $$0133$lcssa = $$2135; //@line 7840
       $$0139$lcssa = $$2141; //@line 7840
       break L22;
      }
      $$1149169 = _jmem_decompress_pointer($50 & 65535) | 0; //@line 7844
      if (!$$1149169) {
       $$0127$lcssa = $$2129; //@line 7847
       $$0133$lcssa = $$2135; //@line 7847
       $$0139$lcssa = $$2141; //@line 7847
       break;
      } else {
       $$0127172 = $$2129; //@line 7850
       $$0133171 = $$2135; //@line 7850
       $$0139170 = $$2141; //@line 7850
      }
     }
    }
   } while (0);
   $74 = SAFE_HEAP_LOAD(134105 * 4 | 0, 4, 0) | 0 | 0; //@line 7855
   if (!$74) {
    $$0 = 1; //@line 7858
   } else {
    $$1147161 = $74; //@line 7860
    $$3130164 = $$0127$lcssa; //@line 7860
    $$3136163 = $$0133$lcssa; //@line 7860
    $$3142162 = $$0139$lcssa; //@line 7860
    while (1) {
     $$0118160 = 0; //@line 7862
     $$4131159 = $$3130164; //@line 7862
     $$4137158 = $$3136163; //@line 7862
     $$4143157 = $$3142162; //@line 7862
     while (1) {
      $81 = $$1147161 + 2 + ($$0118160 << 1) | 0; //@line 7864
      $82 = SAFE_HEAP_LOAD($81 | 0, 2, 0) | 0 | 0; //@line 7865
      if (!($82 << 16 >> 16)) {
       $$5132 = $$4131159; //@line 7868
       $$5138 = $$4137158; //@line 7868
       $$5144 = $$4143157; //@line 7868
      } else {
       SAFE_HEAP_STORE($$4143157 | 0, $82 | 0, 2);
       SAFE_HEAP_STORE($$4143157 + 2 | 0, $$4137158 >>> 2 | 0, 2);
       SAFE_HEAP_STORE_D($5 | 0, +(+_ecma_get_number_from_value(SAFE_HEAP_LOAD((_jmem_decompress_pointer(SAFE_HEAP_LOAD($81 | 0, 2, 1) | 0 | 0) | 0) + 4 | 0, 4, 0) | 0 | 0)), 8);
       _memcpy($$4131159 | 0, $5 | 0, 8) | 0; //@line 7883
       $$5132 = $$4131159 + 8 | 0; //@line 7886
       $$5138 = $$4137158 + 8 | 0; //@line 7886
       $$5144 = $$4143157 + 4 | 0; //@line 7886
      }
      $$0118160 = $$0118160 + 1 | 0; //@line 7888
      if (($$0118160 | 0) == 3) {
       break;
      } else {
       $$4131159 = $$5132; //@line 7893
       $$4137158 = $$5138; //@line 7893
       $$4143157 = $$5144; //@line 7893
      }
     }
     $76 = SAFE_HEAP_LOAD($$1147161 | 0, 2, 0) | 0 | 0; //@line 7896
     if (!($76 << 16 >> 16)) {
      $$0 = 1; //@line 7899
      break L20;
     }
     $$1147161 = _jmem_decompress_pointer($76 & 65535) | 0; //@line 7903
     if (!$$1147161) {
      $$0 = 1; //@line 7906
      break;
     } else {
      $$3130164 = $$5132; //@line 7909
      $$3136163 = $$5138; //@line 7909
      $$3142162 = $$5144; //@line 7909
     }
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 7915
 return $$0 | 0; //@line 7915
}
function _ecma_builtin_global_object_parse_int($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$0115 = 0, $$011620 = 0.0, $$0117$lcssa = 0.0, $$011719 = 0.0, $$0119 = 0, $$0120 = 0, $$0121$off0 = 0, $$0122$off0 = 0, $$0123 = 0, $$0127 = 0, $$1 = 0, $$2125 = 0, $$2133 = 0, $$2140 = 0, $$3 = 0, $$3126 = 0, $$3134 = 0, $$3141 = 0, $$4 = 0, $$5 = 0, $$5136 = 0, $$6 = 0, $$6137 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $33 = 0, $4 = 0, $44 = 0, $46 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $57 = 0, $60 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $80 = 0.0, $82 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4417
 STACKTOP = STACKTOP + 16 | 0; //@line 4418
 $2 = sp + 12 | 0; //@line 4419
 $3 = sp + 8 | 0; //@line 4420
 $4 = sp; //@line 4421
 $5 = _ecma_op_to_string($0) | 0; //@line 4422
 if (($5 | 0) == 24) {
  $$6 = 24; //@line 4425
 } else {
  $7 = _ecma_get_string_from_value($5) | 0; //@line 4427
  $8 = _ecma_string_get_chars($7, $2, 0) | 0; //@line 4428
  if (!$8) {
   $11 = _jmem_heap_alloc_block(SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0) | 0; //@line 4432
   _ecma_string_to_utf8_bytes($7, $11, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0); //@line 4434
   $$0120 = $11; //@line 4435
   $$0121$off0 = 1; //@line 4435
  } else {
   $$0120 = $8; //@line 4437
   $$0121$off0 = 0; //@line 4437
  }
  $13 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 4439
  if (!$13) {
   $$5 = _ecma_make_nan_value() | 0; //@line 4443
  } else {
   SAFE_HEAP_STORE($3 | 0, $$0120 | 0, 4);
   $15 = $$0120 + $13 | 0; //@line 4446
   L9 : do {
    if (($13 | 0) > 0) {
     while (1) {
      $17 = _lit_utf8_read_next($3) | 0; //@line 4451
      if (!(_lit_char_is_white_space($17) | 0)) {
       if (!(_lit_char_is_line_terminator($17) | 0)) {
        break;
       }
      }
      $20 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0; //@line 4459
      if ($20 >>> 0 >= $15 >>> 0) {
       $$2133 = $15; //@line 4462
       $23 = $20; //@line 4462
       break L9;
      }
     }
     _lit_utf8_decr($3); //@line 4466
     $22 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0; //@line 4467
     $$2133 = $22; //@line 4468
     $23 = $22; //@line 4468
    } else {
     $$2133 = $15; //@line 4470
     $23 = $$0120; //@line 4470
    }
   } while (0);
   if ($23 >>> 0 < $15 >>> 0) {
    $25 = _lit_utf8_read_next($3) | 0; //@line 4475
    $26 = $25 << 16 >> 16 == 45; //@line 4476
    switch ($25 << 16 >> 16) {
    case 43:
    case 45:
     {
      $27 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0; //@line 4479
      if ($27 >>> 0 < $15 >>> 0) {
       $$0127 = _lit_utf8_read_next($3) | 0; //@line 4483
       $$3134 = $27; //@line 4483
      } else {
       $$0127 = $25; //@line 4485
       $$3134 = $27; //@line 4485
      }
      break;
     }
    default:
     {
      $$0127 = $25; //@line 4490
      $$3134 = $$2133; //@line 4490
     }
    }
    $30 = _ecma_get_number($1, $4) | 0; //@line 4493
    if (_ecma_is_value_empty($30) | 0) {
     $33 = _ecma_number_to_int32(+(+SAFE_HEAP_LOAD_D($4 | 0, 8))) | 0; //@line 4497
     do {
      if (!$33) {
       $$0115 = $30; //@line 4501
       $$0122$off0 = 1; //@line 4501
       $$0123 = 10; //@line 4501
      } else {
       if (($33 + -2 | 0) >>> 0 > 34) {
        $$0115 = _ecma_make_nan_value() | 0; //@line 4507
        $$0122$off0 = 1; //@line 4507
        $$0123 = $33; //@line 4507
        break;
       } else {
        $$0115 = $30; //@line 4511
        $$0122$off0 = ($33 | 0) == 16; //@line 4511
        $$0123 = $33; //@line 4511
        break;
       }
      }
     } while (0);
     if (_ecma_is_value_empty($$0115) | 0) {
      L33 : do {
       if ($$0122$off0) {
        if ($$0127 << 16 >> 16 == 48 & ($15 - $$3134 | 0) > 1) {
         $44 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0; //@line 4527
         switch (SAFE_HEAP_LOAD($44 >> 0 | 0, 1, 0) | 0 | 0) {
         case 88:
         case 120:
          {
           break;
          }
         default:
          {
           $$2125 = $$0123; //@line 4534
           $$5136 = $$3134; //@line 4534
           break L33;
          }
         }
         $46 = $44 + 1 | 0; //@line 4538
         SAFE_HEAP_STORE($3 | 0, $46 | 0, 4);
         $$2125 = 16; //@line 4540
         $$5136 = $46; //@line 4540
        } else {
         $$2125 = $$0123; //@line 4542
         $$5136 = $$3134; //@line 4542
        }
       } else {
        $$2125 = $$0123; //@line 4545
        $$5136 = $$3134; //@line 4545
       }
      } while (0);
      SAFE_HEAP_STORE($3 | 0, $$5136 | 0, 4);
      $47 = $$5136; //@line 4549
      while (1) {
       if ($47 >>> 0 >= $15 >>> 0) {
        $$2140 = $15; //@line 4553
        break;
       }
       SAFE_HEAP_STORE($3 | 0, $47 + 1 | 0, 4);
       $50 = SAFE_HEAP_LOAD($47 >> 0 | 0, 1, 0) | 0 | 0; //@line 4558
       $51 = $50 & 255; //@line 4559
       $52 = $50 & 255; //@line 4560
       do {
        if (($50 + -97 & 255) < 26) {
         $$0119 = $52 + -87 | 0; //@line 4566
        } else {
         if (($50 + -65 & 255) < 26) {
          $$0119 = $52 + -55 | 0; //@line 4572
          break;
         } else {
          $57 = _lit_char_is_decimal_digit($51) | 0; //@line 4575
          $$0119 = $57 ? $52 + -48 | 0 : $$2125; //@line 4578
          break;
         }
        }
       } while (0);
       $47 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0; //@line 4584
       if (($$0119 | 0) >= ($$2125 | 0)) {
        label = 32; //@line 4588
        break;
       }
      }
      if ((label | 0) == 32) {
       $60 = $47 + -1 | 0; //@line 4593
       SAFE_HEAP_STORE($3 | 0, $60 | 0, 4);
       $$2140 = $60; //@line 4595
      }
      if (($$2140 | 0) == ($$5136 | 0)) {
       $$1 = _ecma_make_nan_value() | 0; //@line 4600
       $$3126 = $$2125; //@line 4600
       $$3141 = $$5136; //@line 4600
       $$6137 = $$5136; //@line 4600
      } else {
       $$1 = $$0115; //@line 4602
       $$3126 = $$2125; //@line 4602
       $$3141 = $$2140; //@line 4602
       $$6137 = $$5136; //@line 4602
      }
     } else {
      $$1 = $$0115; //@line 4605
      $$3126 = $$0123; //@line 4605
      $$3141 = $15; //@line 4605
      $$6137 = $$3134; //@line 4605
     }
     if (_ecma_is_value_empty($$1) | 0) {
      SAFE_HEAP_STORE($3 | 0, $$3141 | 0, 4);
      if ($$3141 >>> 0 > $$6137 >>> 0) {
       $65 = +($$3126 | 0); //@line 4612
       $$011620 = 1.0; //@line 4613
       $$011719 = 0.0; //@line 4613
       $67 = $$3141; //@line 4613
       while (1) {
        $66 = $67 + -1 | 0; //@line 4615
        SAFE_HEAP_STORE($3 | 0, $66 | 0, 4);
        $68 = SAFE_HEAP_LOAD($66 >> 0 | 0, 1, 0) | 0 | 0; //@line 4617
        do {
         if (($68 + -97 & 255) < 26) {
          $$0 = +($68 & 255) + -97.0 + 10.0; //@line 4625
          $82 = $66; //@line 4625
         } else {
          if (($68 + -65 & 255) < 26) {
           $$0 = +($68 & 255) + -65.0 + 10.0; //@line 4633
           $82 = $66; //@line 4633
           break;
          } else {
           $$0 = +($68 & 255) + -48.0; //@line 4639
           $82 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0; //@line 4639
           break;
          }
         }
        } while (0);
        $80 = $$011719 + $$011620 * $$0; //@line 4645
        if ($82 >>> 0 > $$6137 >>> 0) {
         $$011620 = $65 * $$011620; //@line 4649
         $$011719 = $80; //@line 4649
         $67 = $82; //@line 4649
        } else {
         $$0117$lcssa = $80; //@line 4651
         break;
        }
       }
      } else {
       $$0117$lcssa = 0.0; //@line 4656
      }
      $$3 = _ecma_make_number_value($26 ? ($26 ? -1.0 : 1.0) * $$0117$lcssa : $$0117$lcssa) | 0; //@line 4662
     } else {
      $$3 = $$1; //@line 4664
     }
    } else {
     $$3 = $30; //@line 4667
    }
    $$4 = $$3; //@line 4669
   } else {
    $$4 = _ecma_make_nan_value() | 0; //@line 4672
   }
   $$5 = $$4; //@line 4674
  }
  if ($$0121$off0) {
   _jmem_heap_free_block($$0120, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0); //@line 4678
  }
  _ecma_free_value($5); //@line 4680
  $$6 = $$5; //@line 4681
 }
 STACKTOP = sp; //@line 4683
 return $$6 | 0; //@line 4683
}
function _lexer_skip_spaces($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$074 = 0, $$1 = 0, $$2$ph = 0, $$370 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $27 = 0, $28 = 0, $3 = 0, $31 = 0, $35 = 0, $37 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $49 = 0, $5 = 0, $52 = 0, $56 = 0, $66 = 0, $70 = 0, $77 = 0, $81 = 0, $88 = 0, label = 0;
 $2 = SAFE_HEAP_LOAD($0 + 220 | 0, 4, 0) | 0 | 0; //@line 7779
 $3 = $0 + 191 | 0; //@line 7780
 $5 = SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 1) | 0 | 0; //@line 7782
 L1 : do {
  if (!($5 & 2)) {
   SAFE_HEAP_STORE($3 >> 0 | 0, 0 | 0, 1);
   $10 = $0 + 216 | 0; //@line 7788
   $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0; //@line 7789
   if ($11 >>> 0 < $2 >>> 0) {
    $13 = $0 + 228 | 0; //@line 7792
    $14 = $0 + 224 | 0; //@line 7793
    $15 = $0 + 192 | 0; //@line 7794
    $16 = $0 + 196 | 0; //@line 7795
    $$074 = 0; //@line 7796
    $19 = $11; //@line 7796
    while (1) {
     L6 : do {
      switch (SAFE_HEAP_LOAD($19 >> 0 | 0, 1, 0) | 0 | 0) {
      case 13:
       {
        $20 = $19 + 1 | 0; //@line 7802
        if ($20 >>> 0 < $2 >>> 0) {
         if ((SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0) == 10) {
          SAFE_HEAP_STORE($10 | 0, $20 | 0, 4);
          $88 = $20; //@line 7809
          label = 11; //@line 7810
         } else {
          $88 = $19; //@line 7812
          label = 11; //@line 7813
         }
        } else {
         $88 = $19; //@line 7816
         label = 11; //@line 7817
        }
        break;
       }
      case 10:
       {
        $88 = $19; //@line 7822
        label = 11; //@line 7823
        break;
       }
      case 32:
      case 12:
      case 11:
       {
        $$1 = $$074; //@line 7827
        $28 = $19; //@line 7827
        label = 12; //@line 7828
        break;
       }
      case 9:
       {
        SAFE_HEAP_STORE($13 | 0, _align_column_to_tab(SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0) | 0 | 0, 4);
        $35 = $19 + 1 | 0; //@line 7835
        SAFE_HEAP_STORE($10 | 0, $35 | 0, 4);
        $$0$be = $$074; //@line 7837
        $31 = $35; //@line 7837
        break;
       }
      case 47:
       {
        if (!$$074) {
         $37 = $19 + 1 | 0; //@line 7843
         if ($37 >>> 0 >= $2 >>> 0) {
          break L1;
         }
         switch (SAFE_HEAP_LOAD($37 >> 0 | 0, 1, 0) | 0 | 0) {
         case 47:
          {
           $$2$ph = 1; //@line 7852
           $44 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0; //@line 7852
           break;
          }
         case 42:
          {
           SAFE_HEAP_STORE($15 | 0, SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0, 4);
           $41 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0; //@line 7858
           SAFE_HEAP_STORE($16 | 0, $41 | 0, 4);
           $$2$ph = 2; //@line 7860
           $44 = $41; //@line 7860
           break;
          }
         default:
          {
           break L1;
          }
         }
         $42 = $19 + 2 | 0; //@line 7867
         SAFE_HEAP_STORE($10 | 0, $42 | 0, 4);
         SAFE_HEAP_STORE($13 | 0, $44 + 2 | 0, 4);
         $$0$be = $$2$ph; //@line 7871
         $31 = $42; //@line 7871
        } else {
         $$370 = $$074; //@line 7873
         label = 36; //@line 7874
        }
        break;
       }
      case 42:
       {
        switch ($$074 | 0) {
        case 0:
         {
          break L1;
          break;
         }
        case 2:
         {
          break;
         }
        default:
         {
          $$370 = $$074; //@line 7888
          label = 36; //@line 7889
          break L6;
         }
        }
        $45 = $19 + 1 | 0; //@line 7893
        if ($45 >>> 0 < $2 >>> 0) {
         if ((SAFE_HEAP_LOAD($45 >> 0 | 0, 1, 0) | 0 | 0) == 47) {
          $49 = $19 + 2 | 0; //@line 7899
          SAFE_HEAP_STORE($10 | 0, $49 | 0, 4);
          SAFE_HEAP_STORE($13 | 0, (SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0) + 2 | 0, 4);
          $$0$be = 0; //@line 7904
          $31 = $49; //@line 7904
         } else {
          $$370 = 2; //@line 7906
          label = 36; //@line 7907
         }
        } else {
         $$370 = 2; //@line 7910
         label = 36; //@line 7911
        }
        break;
       }
      case -62:
       {
        $52 = $19 + 1 | 0; //@line 7916
        if ($52 >>> 0 < $2 >>> 0) {
         if ((SAFE_HEAP_LOAD($52 >> 0 | 0, 1, 0) | 0 | 0) == -96) {
          $56 = $19 + 2 | 0; //@line 7922
          SAFE_HEAP_STORE($10 | 0, $56 | 0, 4);
          SAFE_HEAP_STORE($13 | 0, (SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0) + 1 | 0, 4);
          $$0$be = $$074; //@line 7927
          $31 = $56; //@line 7927
         } else {
          label = 35; //@line 7929
         }
        } else {
         label = 35; //@line 7932
        }
        break;
       }
      case -30:
       {
        if ((SAFE_HEAP_LOAD($19 + 1 >> 0 | 0, 1, 0) | 0 | 0) == -128) {
         if ((SAFE_HEAP_LOAD($19 + 2 >> 0 | 0, 1, 0) | 0 | 1) << 24 >> 24 == -87) {
          $66 = $19 + 3 | 0; //@line 7946
          SAFE_HEAP_STORE($10 | 0, $66 | 0, 4);
          SAFE_HEAP_STORE($14 | 0, (SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0) + 1 | 0, 4);
          SAFE_HEAP_STORE($13 | 0, 1 | 0, 4);
          SAFE_HEAP_STORE($3 >> 0 | 0, 1 | 0, 1);
          $$0$be = ($$074 | 0) == 1 ? 0 : $$074; //@line 7955
          $31 = $66; //@line 7955
         } else {
          label = 35; //@line 7957
         }
        } else {
         label = 35; //@line 7960
        }
        break;
       }
      case -17:
       {
        $70 = $19 + 2 | 0; //@line 7965
        if ($70 >>> 0 < $2 >>> 0) {
         if ((SAFE_HEAP_LOAD($19 + 1 >> 0 | 0, 1, 0) | 0 | 0) == -69) {
          if ((SAFE_HEAP_LOAD($70 >> 0 | 0, 1, 0) | 0 | 0) == -65) {
           $77 = $19 + 3 | 0; //@line 7975
           SAFE_HEAP_STORE($10 | 0, $77 | 0, 4);
           SAFE_HEAP_STORE($13 | 0, (SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0) + 1 | 0, 4);
           $$0$be = $$074; //@line 7980
           $31 = $77; //@line 7980
          } else {
           label = 35; //@line 7982
          }
         } else {
          label = 35; //@line 7985
         }
        } else {
         label = 35; //@line 7988
        }
        break;
       }
      default:
       {
        label = 35; //@line 7993
       }
      }
     } while (0);
     if ((label | 0) == 11) {
      label = 0; //@line 7998
      SAFE_HEAP_STORE($14 | 0, (SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0) + 1 | 0, 4);
      SAFE_HEAP_STORE($13 | 0, 0 | 0, 4);
      SAFE_HEAP_STORE($3 >> 0 | 0, 1 | 0, 1);
      $$1 = ($$074 | 0) == 1 ? 0 : $$074; //@line 8006
      $28 = $88; //@line 8006
      label = 12; //@line 8007
     } else if ((label | 0) == 35) {
      label = 0; //@line 8010
      if (!$$074) {
       break L1;
      } else {
       $$370 = $$074; //@line 8015
       label = 36; //@line 8016
      }
     }
     if ((label | 0) == 12) {
      label = 0; //@line 8020
      $27 = $28 + 1 | 0; //@line 8021
      SAFE_HEAP_STORE($10 | 0, $27 | 0, 4);
      SAFE_HEAP_STORE($13 | 0, (SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0) + 1 | 0, 4);
      $$0$be = $$1; //@line 8026
      $31 = $27; //@line 8026
     } else if ((label | 0) == 36) {
      label = 0; //@line 8029
      $81 = $19 + 1 | 0; //@line 8030
      SAFE_HEAP_STORE($10 | 0, $81 | 0, 4);
      if ($81 >>> 0 < $2 >>> 0) {
       if (((SAFE_HEAP_LOAD($81 >> 0 | 0, 1, 0) | 0) & -64) << 24 >> 24 == -128) {
        SAFE_HEAP_STORE($13 | 0, (SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0) + 1 | 0, 4);
        $$0$be = $$370; //@line 8041
        $31 = $81; //@line 8041
       } else {
        $$0$be = $$370; //@line 8043
        $31 = $81; //@line 8043
       }
      } else {
       $$0$be = $$370; //@line 8046
       $31 = $81; //@line 8046
      }
     }
     if ($31 >>> 0 < $2 >>> 0) {
      $$074 = $$0$be; //@line 8051
      $19 = $31; //@line 8051
     } else {
      break;
     }
    }
    if (($$0$be | 0) == 2) {
     _parser_raise_error($0, 23); //@line 8058
    }
   }
  } else {
   SAFE_HEAP_STORE($3 >> 0 | 0, $5 & 253 | 0, 1);
  }
 } while (0);
 return;
}
function _ecma_op_general_object_define_own_property($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0104 = 0, $$114$ = 0, $$2 = 0, $10 = 0, $102 = 0, $108 = 0, $115 = 0, $122 = 0, $128 = 0, $133 = 0, $14 = 0, $141 = 0, $18 = 0, $24 = 0, $28 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $55 = 0, $69 = 0, $80 = 0, $81 = 0, $85 = 0, $89 = 0, $92 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11826
 STACKTOP = STACKTOP + 16 | 0; //@line 11827
 $4 = sp; //@line 11828
 $5 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 11829
 $$114$ = ($5 & 9) == 0 ? ($5 & 6) == 0 ? 0 : 2 : 1; //@line 11835
 $10 = $4; //@line 11836
 SAFE_HEAP_STORE($10 | 0, 0 | 0, 4);
 SAFE_HEAP_STORE($10 + 4 | 0, 0 | 0, 4);
 $14 = _ecma_op_object_get_own_property($0, $1, $4, 3) | 0; //@line 11842
 L1 : do {
  switch ($14 << 24 >> 24) {
  case 4:
  case 0:
   {
    if (!(_ecma_get_object_extensible($0) | 0)) {
     $$2 = _ecma_reject($3) | 0; //@line 11849
     break L1;
    }
    $18 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 11853
    $24 = ($18 & 65535) >>> 3 & 8 | ($18 & 256 ? 4 : 0); //@line 11860
    if (($$114$ | 0) == 2) {
     _ecma_create_named_accessor_property($0, $1, SAFE_HEAP_LOAD($2 + 8 | 0, 4, 0) | 0 | 0, SAFE_HEAP_LOAD($2 + 12 | 0, 4, 0) | 0 | 0, $24, 0) | 0; //@line 11866
     $$2 = 56; //@line 11867
     break L1;
    } else {
     $28 = _ecma_create_named_data_property($0, $1, $24 | $18 & 16, 0) | 0; //@line 11873
     SAFE_HEAP_STORE($28 | 0, _ecma_copy_value_if_not_object(SAFE_HEAP_LOAD($2 + 4 | 0, 4, 0) | 0 | 0) | 0 | 0, 4);
     $$2 = 56; //@line 11878
     break L1;
    }
    break;
   }
  default:
   {
    $36 = $14 & 3; //@line 11884
    $37 = $36 & 255; //@line 11885
    $38 = _ecma_is_property_configurable($14) | 0; //@line 11886
    do {
     if (!$38) {
      $39 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 11889
      if (!($39 & 256)) {
       if (!($39 & 32)) {
        break;
       }
       if ((($39 & 65535) >>> 6 & 1 | 0) == ((_ecma_is_property_enumerable($14) | 0) & 1 | 0)) {
        break;
       }
      }
      if ($36 << 24 >> 24 == 3) {
       _ecma_free_value(SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0); //@line 11911
      }
      $$2 = _ecma_reject($3) | 0; //@line 11914
      break L1;
     }
    } while (0);
    if ($36 << 24 >> 24 == 3) {
     if (($$114$ | 0) == 2) {
      label = 19; //@line 11922
     } else {
      $55 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 11924
      if (!($55 & 16)) {
       if (!($55 & 1)) {
        $$0104 = 56; //@line 11931
       } else {
        if (_ecma_op_same_value(SAFE_HEAP_LOAD($2 + 4 | 0, 4, 0) | 0 | 0, SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0) | 0) {
         $$0104 = 56; //@line 11938
        } else {
         label = 19; //@line 11940
        }
       }
      } else {
       label = 19; //@line 11944
      }
     }
     if ((label | 0) == 19) {
      $$0104 = _ecma_reject($3) | 0; //@line 11949
     }
     _ecma_free_value(SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0); //@line 11952
     $$2 = $$0104; //@line 11953
     break L1;
    }
    L23 : do {
     if ($$114$ | 0) {
      do {
       if (($$114$ | 0) == ($37 | 0)) {
        if ($38) {
         label = 42; //@line 11963
        } else {
         if (($$114$ | 0) == 1) {
          if (_ecma_is_property_writable($14) | 0) {
           label = 44; //@line 11969
           break;
          }
          $69 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 11972
          if (!($69 & 16)) {
           if (!($69 & 1)) {
            label = 44; //@line 11979
            break;
           }
           if (_ecma_op_same_value(SAFE_HEAP_LOAD($2 + 4 | 0, 4, 0) | 0 | 0, SAFE_HEAP_LOAD(SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0, 4, 0) | 0 | 0) | 0) {
            label = 44; //@line 11988
            break;
           }
          }
          $$2 = _ecma_reject($3) | 0; //@line 11993
          break L1;
         }
         $80 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0; //@line 11996
         $81 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 11997
         if (!($81 & 2)) {
          $89 = $81; //@line 12001
          label = 33; //@line 12002
         } else {
          $85 = SAFE_HEAP_LOAD($2 + 8 | 0, 4, 0) | 0 | 0; //@line 12005
          if (($85 | 0) == (_ecma_get_named_accessor_property_getter($80) | 0)) {
           $89 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 12010
           label = 33; //@line 12011
          }
         }
         if ((label | 0) == 33) {
          if (!($89 & 4)) {
           $122 = $89; //@line 12018
           label = 48; //@line 12019
           break;
          }
          $92 = SAFE_HEAP_LOAD($2 + 12 | 0, 4, 0) | 0 | 0; //@line 12023
          if (($92 | 0) == (_ecma_get_named_accessor_property_setter($80) | 0)) {
           label = 42; //@line 12027
           break;
          }
         }
         $$2 = _ecma_reject($3) | 0; //@line 12032
         break L1;
        }
       } else {
        if (!$38) {
         $$2 = _ecma_reject($3) | 0; //@line 12038
         break L1;
        }
        $97 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0; //@line 12041
        if (($$114$ | 0) == 2) {
         _ecma_free_value_if_not_object(SAFE_HEAP_LOAD($97 | 0, 4, 0) | 0 | 0); //@line 12045
         SAFE_HEAP_STORE($97 | 0, 0 | 0, 2);
         SAFE_HEAP_STORE($97 + 2 | 0, 0 | 0, 2);
        } else {
         SAFE_HEAP_STORE($97 | 0, 72 | 0, 4);
        }
        $102 = SAFE_HEAP_LOAD($4 + 4 | 0, 4, 0) | 0 | 0; //@line 12053
        SAFE_HEAP_STORE($102 >> 0 | 0, (SAFE_HEAP_LOAD($102 >> 0 | 0, 1, 0) | 0) & -20 & 255 | $$114$ | 0, 1);
        label = 42; //@line 12060
       }
      } while (0);
      L51 : do {
       if ((label | 0) == 42) {
        switch ($$114$ & 3) {
        case 1:
         {
          label = 44; //@line 12069
          break L51;
          break;
         }
        case 2:
         {
          break;
         }
        default:
         {
          break L23;
         }
        }
        $122 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 12081
        label = 48; //@line 12082
       }
      } while (0);
      if ((label | 0) == 44) {
       $108 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 12086
       if (!($108 & 1)) {
        $115 = $108; //@line 12090
       } else {
        _ecma_named_data_property_assign_value($0, SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0, SAFE_HEAP_LOAD($2 + 4 | 0, 4, 0) | 0 | 0); //@line 12095
        $115 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 12097
       }
       if (!($115 & 8)) {
        break;
       }
       _ecma_set_property_writable_attr(SAFE_HEAP_LOAD($4 + 4 | 0, 4, 0) | 0 | 0, ($115 & 16) != 0); //@line 12108
       break;
      } else if ((label | 0) == 48) {
       if (!($122 & 2)) {
        $128 = $122; //@line 12115
       } else {
        _ecma_set_named_accessor_property_getter($0, SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0, SAFE_HEAP_LOAD($2 + 8 | 0, 4, 0) | 0 | 0); //@line 12120
        $128 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 12122
       }
       if (!($128 & 4)) {
        break;
       }
       _ecma_set_named_accessor_property_setter($0, SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0, SAFE_HEAP_LOAD($2 + 12 | 0, 4, 0) | 0 | 0); //@line 12132
       break;
      }
     }
    } while (0);
    $133 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 12137
    if (!($133 & 32)) {
     $141 = $133; //@line 12141
    } else {
     _ecma_set_property_enumerable_attr(SAFE_HEAP_LOAD($4 + 4 | 0, 4, 0) | 0 | 0, ($133 & 64) != 0); //@line 12147
     $141 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 12149
    }
    if (!($141 & 128)) {
     $$2 = 56; //@line 12154
    } else {
     _ecma_set_property_configurable_attr(SAFE_HEAP_LOAD($4 + 4 | 0, 4, 0) | 0 | 0, ($141 & 256) != 0); //@line 12160
     $$2 = 56; //@line 12161
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 12166
 return $$2 | 0; //@line 12166
}
function _ecma_builtin_global_object_decode_uri_helper($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0112178 = 0, $$0116 = 0, $$0117$be = 0, $$0117180 = 0, $$0123$be = 0, $$0123182 = 0, $$0132$be = 0, $$0132176 = 0, $$0132181 = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$2 = 0, $$2125$be = 0, $$2125179 = 0, $$3126177 = 0, $$5122 = 0, $$8$ph = 0, $$8131 = 0, $$9 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $3 = 0, $31 = 0, $32 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4941
 STACKTOP = STACKTOP + 16 | 0; //@line 4942
 $2 = sp + 4 | 0; //@line 4943
 $3 = sp + 8 | 0; //@line 4944
 $4 = sp; //@line 4945
 $5 = _ecma_op_to_string($0) | 0; //@line 4946
 if (($5 | 0) == 24) {
  $$12 = 24; //@line 4949
 } else {
  $7 = _ecma_get_string_from_value($5) | 0; //@line 4951
  $8 = _ecma_string_get_size($7) | 0; //@line 4952
  $9 = $8 + 1 | 0; //@line 4953
  $10 = _jmem_heap_alloc_block($9) | 0; //@line 4954
  _ecma_string_to_utf8_bytes($7, $10, $8); //@line 4955
  $11 = $10 + $8 | 0; //@line 4956
  SAFE_HEAP_STORE($11 >> 0 | 0, 0 | 0, 1);
  $12 = ($8 | 0) > 0; //@line 4958
  L3 : do {
   if ($12) {
    $$0123182 = $10; //@line 4961
    $$0132181 = 0; //@line 4961
    while (1) {
     if ((SAFE_HEAP_LOAD($$0123182 >> 0 | 0, 1, 0) | 0 | 0) == 37) {
      if (!(_lit_read_code_unit_from_hex($$0123182 + 1 | 0, 2, $2) | 0)) {
       break;
      }
      $20 = $$0123182 + 3 | 0; //@line 4971
      $21 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 4972
      $22 = $21 & 65535; //@line 4973
      if (($21 & 65535) < 128) {
       if (_ecma_builtin_global_object_character_is_in($22, $1) | 0) {
        $25 = _ecma_builtin_global_object_character_is_in($22, 6289) | 0; //@line 4978
        $$sink = $25 ? 1 : 3; //@line 4980
       } else {
        $$sink = 1; //@line 4982
       }
      } else {
       $$sink = ($22 & 248 | 0) == 240 ? 3 : 1; //@line 4988
      }
      $$0123$be = $20; //@line 4991
      $$0132$be = $$sink + $$0132181 | 0; //@line 4991
     } else {
      $$0123$be = $$0123182 + 1 | 0; //@line 4995
      $$0132$be = $$0132181 + 1 | 0; //@line 4995
     }
     if ($$0123$be >>> 0 < $11 >>> 0) {
      $$0123182 = $$0123$be; //@line 4999
      $$0132181 = $$0132$be; //@line 4999
     } else {
      $$0132176 = $$0132$be; //@line 5001
      $$2 = 8; //@line 5001
      break L3;
     }
    }
    $$0132176 = $$0132181; //@line 5006
    $$2 = _ecma_raise_uri_error(6353) | 0; //@line 5006
   } else {
    $$0132176 = 0; //@line 5008
    $$2 = 8; //@line 5008
   }
  } while (0);
  if (_ecma_is_value_empty($$2) | 0) {
   $31 = _jmem_heap_alloc_block($$0132176) | 0; //@line 5013
   L21 : do {
    if ($12) {
     $$0117180 = $31; //@line 5016
     $$2125179 = $10; //@line 5016
     L23 : while (1) {
      $32 = SAFE_HEAP_LOAD($$2125179 >> 0 | 0, 1, 0) | 0 | 0; //@line 5018
      if ($32 << 24 >> 24 == 37) {
       $37 = $$2125179 + 1 | 0; //@line 5021
       if (!(_lit_read_code_unit_from_hex($37, 2, $2) | 0)) {
        label = 21; //@line 5024
        break;
       }
       $40 = $$2125179 + 3 | 0; //@line 5027
       $41 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 5028
       $42 = $41 & 65535; //@line 5029
       do {
        if (($41 & 65535) < 128) {
         if (_ecma_builtin_global_object_character_is_in($42, $1) | 0) {
          if (!(_ecma_builtin_global_object_character_is_in($42, 6289) | 0)) {
           SAFE_HEAP_STORE($$0117180 >> 0 | 0, 37 | 0, 1);
           $$5122 = $$0117180 + 1 | 0; //@line 5039
           $$8131 = $37; //@line 5039
           break;
          }
         }
         SAFE_HEAP_STORE($$0117180 >> 0 | 0, $41 | 0, 1);
         $$5122 = $$0117180 + 1 | 0; //@line 5046
         $$8131 = $40; //@line 5046
        } else {
         if (($42 & 224 | 0) == 192) {
          $$0116 = 2; //@line 5051
         } else {
          if (($42 & 240 | 0) == 224) {
           $$0116 = 3; //@line 5056
          } else {
           if (($42 & 248 | 0) == 240) {
            $$0116 = 4; //@line 5061
           } else {
            label = 30; //@line 5063
            break L23;
           }
          }
         }
         SAFE_HEAP_STORE($3 >> 0 | 0, $41 | 0, 1);
         $$0112178 = 1; //@line 5070
         $$3126177 = $40; //@line 5070
         do {
          if ($$3126177 >>> 0 >= $11 >>> 0) {
           label = 39; //@line 5074
           break L23;
          }
          if ((SAFE_HEAP_LOAD($$3126177 >> 0 | 0, 1, 0) | 0 | 0) != 37) {
           label = 39; //@line 5080
           break L23;
          }
          if (!(_lit_read_code_unit_from_hex($$3126177 + 1 | 0, 2, $4) | 0)) {
           label = 36; //@line 5086
           break L23;
          }
          $62 = SAFE_HEAP_LOAD($4 | 0, 2, 0) | 0 | 0; //@line 5089
          if (($62 & 192) != 128) {
           label = 36; //@line 5093
           break L23;
          }
          SAFE_HEAP_STORE($3 + $$0112178 >> 0 | 0, $62 | 0, 1);
          $$3126177 = $$3126177 + 3 | 0; //@line 5099
          $$0112178 = $$0112178 + 1 | 0; //@line 5100
         } while ($$0112178 >>> 0 < $$0116 >>> 0);
         if (!(_lit_is_valid_utf8_string($3, $$0116) | 0)) {
          label = 39; //@line 5110
          break L23;
         }
         _lit_read_code_point_from_utf8($3, $$0116, $4) | 0; //@line 5113
         if (_lit_is_code_point_utf16_high_surrogate(SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0) | 0) {
          label = 43; //@line 5117
          break L23;
         }
         if (_lit_is_code_point_utf16_low_surrogate(SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0) | 0) {
          label = 43; //@line 5123
          break L23;
         }
         $$5122 = $$0117180 + (_lit_code_point_to_cesu8(SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0, $$0117180) | 0) | 0; //@line 5129
         $$8131 = $$3126177; //@line 5129
        }
       } while (0);
       $$0117$be = $$5122; //@line 5132
       $$2125$be = $$8131; //@line 5132
      } else {
       SAFE_HEAP_STORE($$0117180 >> 0 | 0, $32 | 0, 1);
       $$0117$be = $$0117180 + 1 | 0; //@line 5137
       $$2125$be = $$2125179 + 1 | 0; //@line 5137
      }
      if ($$2125$be >>> 0 < $11 >>> 0) {
       $$0117180 = $$0117$be; //@line 5141
       $$2125179 = $$2125$be; //@line 5141
      } else {
       $$9 = $$2; //@line 5143
       break L21;
      }
     }
     if ((label | 0) == 21) {
      $$8$ph = _ecma_raise_uri_error(6353) | 0; //@line 5149
     } else if ((label | 0) == 30) {
      $$8$ph = _ecma_raise_uri_error(6380) | 0; //@line 5153
     } else if ((label | 0) == 36) {
      label = 39; //@line 5156
     } else if ((label | 0) == 43) {
      $$8$ph = _ecma_raise_uri_error(6425) | 0; //@line 5160
     }
     if ((label | 0) == 39) {
      $$8$ph = _ecma_raise_uri_error(6404) | 0; //@line 5164
     }
     $$9 = $$8$ph; //@line 5166
    } else {
     $$9 = $$2; //@line 5168
    }
   } while (0);
   do {
    if (_ecma_is_value_empty($$9) | 0) {
     if (_lit_is_valid_cesu8_string($31, $$0132176) | 0) {
      $$10 = _ecma_make_string_value(_ecma_new_ecma_string_from_utf8($31, $$0132176) | 0) | 0; //@line 5178
      break;
     } else {
      $$10 = _ecma_raise_uri_error(6449) | 0; //@line 5182
      break;
     }
    } else {
     $$10 = $$9; //@line 5186
    }
   } while (0);
   if (!$31) {
    $$11 = $$10; //@line 5191
   } else {
    _jmem_heap_free_block($31, $$0132176); //@line 5193
    $$11 = $$10; //@line 5194
   }
  } else {
   $$11 = $$2; //@line 5197
  }
  if ($10 | 0) {
   _jmem_heap_free_block($10, $9); //@line 5201
  }
  _ecma_free_value($5); //@line 5203
  $$12 = $$11; //@line 5204
 }
 STACKTOP = sp; //@line 5206
 return $$12 | 0; //@line 5206
}
function _ecma_op_object_put($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0162 = 0, $$0162180 = 0, $$21 = 0, $$2150 = 0, $100 = 0, $16 = 0, $24 = 0, $27 = 0, $30 = 0, $36 = 0, $4 = 0, $5 = 0, $53 = 0, $6 = 0, $66 = 0, $68 = 0, $76 = 0, $83 = 0, $86 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12775
 STACKTOP = STACKTOP + 16 | 0; //@line 12776
 $4 = sp; //@line 12777
 $5 = sp + 4 | 0; //@line 12778
 SAFE_HEAP_STORE($4 | 0, $2 | 0, 4);
 $6 = _ecma_get_object_type($0) | 0; //@line 12780
 L1 : do {
  switch ($6 | 0) {
  case 4:
   {
    if (_ecma_string_is_length($1) | 0) {
     if (_ecma_is_property_writable(SAFE_HEAP_LOAD($0 + 12 >> 0 | 0, 1, 0) | 0 | 0) | 0) {
      $$21 = _ecma_op_array_object_set_length($0, $2, 0) | 0; //@line 12791
      break L1;
     } else {
      $$21 = _ecma_reject($3) | 0; //@line 12795
      break L1;
     }
    } else {
     label = 11; //@line 12799
    }
    break;
   }
  case 6:
   {
    if (!(SAFE_HEAP_LOAD($0 + 8 >> 0 | 0, 1, 0) | 0)) {
     $16 = _ecma_string_get_array_index($1) | 0; //@line 12808
     if (($16 | 0) == -1) {
      label = 11; //@line 12811
     } else {
      if ($16 >>> 0 < (SAFE_HEAP_LOAD($0 + 10 | 0, 2, 1) | 0 | 0) >>> 0) {
       $24 = SAFE_HEAP_LOAD($0 + 16 + ($16 << 1) | 0, 2, 0) | 0 | 0; //@line 12820
       if (!($24 << 16 >> 16)) {
        label = 11; //@line 12823
       } else {
        $27 = _jmem_decompress_pointer($24 & 65535) | 0; //@line 12826
        _ecma_op_set_mutable_binding(SAFE_HEAP_LOAD($0 + 12 | 0, 4, 0) | 0 | 0, $27, $2, 1) | 0; //@line 12829
        $$21 = 56; //@line 12830
       }
      } else {
       label = 11; //@line 12833
      }
     }
    } else {
     label = 11; //@line 12837
    }
    break;
   }
  default:
   {
    label = 11; //@line 12842
   }
  }
 } while (0);
 L12 : do {
  if ((label | 0) == 11) {
   $30 = _ecma_find_named_property($0, $1) | 0; //@line 12848
   L14 : do {
    if (!$30) {
     if (($6 | 0) == 1) {
      if ((SAFE_HEAP_LOAD($0 + 8 | 0, 2, 0) | 0 | 0) == 28) {
       $36 = _ecma_string_get_array_index($1) | 0; //@line 12858
       if (($36 | 0) != -1) {
        if ($36 >>> 0 < (_ecma_string_get_length(_ecma_get_string_from_value(SAFE_HEAP_LOAD($0 + 12 | 0, 4, 0) | 0 | 0) | 0) | 0) >>> 0) {
         $$21 = _ecma_reject($3) | 0; //@line 12868
         break L12;
        }
       }
      }
     }
     L22 : do {
      if (_ecma_get_object_is_builtin($0) | 0) {
       $$0162 = _ecma_builtin_try_to_instantiate_property($0, $1) | 0; //@line 12878
       label = 26; //@line 12879
      } else {
       if (_ecma_is_normal_or_arrow_function($6) | 0) {
        if (_ecma_string_is_length($1) | 0) {
         $$21 = _ecma_reject($3) | 0; //@line 12886
         break L12;
        } else {
         $$0162 = _ecma_op_function_try_to_lazy_instantiate_property($0, $1) | 0; //@line 12890
         label = 26; //@line 12891
         break;
        }
       } else {
        switch ($6 | 0) {
        case 3:
         {
          $$0162 = _ecma_op_external_function_try_to_lazy_instantiate_property($0, $1) | 0; //@line 12898
          label = 26; //@line 12899
          break L22;
          break;
         }
        case 5:
         {
          $$0162 = _ecma_op_bound_function_try_to_lazy_instantiate_property($0, $1) | 0; //@line 12905
          label = 26; //@line 12906
          break L22;
          break;
         }
        default:
         {
          break L22;
         }
        }
       }
      }
     } while (0);
     if ((label | 0) == 26) {
      if ($$0162 | 0) {
       $$0162180 = $$0162; //@line 12920
       label = 27; //@line 12921
       break;
      }
     }
     $66 = _ecma_get_object_prototype($0) | 0; //@line 12925
     do {
      if ($66 | 0) {
       SAFE_HEAP_STORE($5 | 0, 0 | 0, 4);
       $68 = _ecma_op_object_get_property($66, $1, $5, 0) | 0; //@line 12930
       if (!($68 << 24 >> 24)) {
        break;
       }
       if (($68 & 3) == 2) {
        $$2150 = _ecma_get_named_accessor_property_setter(SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0) | 0; //@line 12940
        label = 47; //@line 12941
        break L14;
       } else {
        if (_ecma_is_property_writable($68) | 0) {
         break;
        } else {
         break L14;
        }
       }
      }
     } while (0);
     if (_ecma_get_object_extensible($0) | 0) {
      $76 = _ecma_get_object_type($0) | 0; //@line 12955
      if (($76 | 0) == 6) {
       if (!(SAFE_HEAP_LOAD($0 + 8 >> 0 | 0, 1, 0) | 0)) {
        $$21 = _ecma_builtin_helper_def_prop($0, $1, SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0, 1, 1, 1, $3) | 0; //@line 12964
        break L12;
       }
      }
      $83 = _ecma_string_get_array_index($1) | 0; //@line 12968
      do {
       if (($76 | 0) == 4 & ($83 | 0) != -1) {
        $86 = $0 + 8 | 0; //@line 12974
        if ($83 >>> 0 >= (SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0) >>> 0) {
         if (_ecma_is_property_writable(SAFE_HEAP_LOAD($0 + 12 >> 0 | 0, 1, 0) | 0 | 0) | 0) {
          SAFE_HEAP_STORE($86 | 0, $83 + 1 | 0, 4);
          break;
         } else {
          $$21 = _ecma_reject($3) | 0; //@line 12987
          break L12;
         }
        }
       }
      } while (0);
      $94 = _ecma_create_named_data_property($0, $1, 28, 0) | 0; //@line 12993
      SAFE_HEAP_STORE($94 | 0, _ecma_copy_value_if_not_object(SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0) | 0 | 0, 4);
      $$21 = 56; //@line 12997
      break L12;
     }
    } else {
     $$0162180 = $30; //@line 13001
     label = 27; //@line 13002
    }
   } while (0);
   do {
    if ((label | 0) == 27) {
     $53 = SAFE_HEAP_LOAD($$0162180 >> 0 | 0, 1, 0) | 0 | 0; //@line 13007
     if (($53 & 3) != 1) {
      $$2150 = _ecma_get_named_accessor_property_setter($$0162180 + 7 & -4) | 0; //@line 13016
      label = 47; //@line 13017
      break;
     }
     if (_ecma_is_property_writable($53) | 0) {
      _ecma_named_data_property_assign_value($0, $$0162180 + 7 & -4, $2); //@line 13026
      $$21 = 56; //@line 13027
      break L12;
     }
    }
   } while (0);
   if ((label | 0) == 47) {
    if ($$2150 | 0) {
     $100 = _ecma_op_function_call($$2150, _ecma_make_object_value($0) | 0, $4, 1) | 0; //@line 13036
     if (($100 | 0) == 24) {
      $$21 = 24; //@line 13039
      break;
     }
     _ecma_fast_free_value($100); //@line 13042
     $$21 = 56; //@line 13043
     break;
    }
   }
   $$21 = _ecma_reject($3) | 0; //@line 13048
  }
 } while (0);
 STACKTOP = sp; //@line 13051
 return $$21 | 0; //@line 13051
}
function _ecma_delete_array_properties($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0101$lcssa = 0, $$0101157 = 0, $$0107146 = 0, $$0108156 = 0, $$0112$ph = 0, $$0112$ph138151 = 0, $$0112147 = 0, $$0117$ph = 0, $$0117$ph137150 = 0, $$0122154 = 0, $$1102155 = 0, $$1113145 = 0, $$2110$ph = 0, $$2110$ph139152 = 0, $$2110148 = 0, $$2114 = 0, $$4105 = 0, $$4116 = 0, $$5 = 0, $$sink = 0, $11 = 0, $13 = 0, $15 = 0, $22 = 0, $25 = 0, $3 = 0, $30 = 0, $35 = 0, $39 = 0, $44 = 0, $47 = 0, $50 = 0, $51 = 0, $56 = 0, $58 = 0, $69 = 0, $71 = 0, $74 = 0, $77 = 0, $8 = 0, label = 0;
 $3 = _ecma_get_property_list($0) | 0; //@line 6598
 L1 : do {
  if (!$3) {
   $$5 = $1; //@line 6602
  } else {
   if ((SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 0) | 0 | 0) == 4) {
    $8 = SAFE_HEAP_LOAD($3 + 2 | 0, 2, 0) | 0 | 0; //@line 6608
    if (!($8 << 16 >> 16)) {
     $$0101$lcssa = $1; //@line 6611
    } else {
     $11 = _jmem_decompress_pointer($8 & 65535) | 0; //@line 6614
     if (!$11) {
      $$0101$lcssa = $1; //@line 6617
     } else {
      $$0101157 = $1; //@line 6619
      $$0108156 = $11; //@line 6619
      label = 5; //@line 6620
     }
    }
   } else {
    $$0101157 = $1; //@line 6624
    $$0108156 = $3; //@line 6624
    label = 5; //@line 6625
   }
   L6 : do {
    if ((label | 0) == 5) {
     while (1) {
      label = 0; //@line 6630
      $13 = $$0108156 + 12 | 0; //@line 6631
      $$0122154 = 0; //@line 6632
      $$1102155 = $$0101157; //@line 6632
      while (1) {
       $15 = SAFE_HEAP_LOAD($$0108156 + $$0122154 >> 0 | 0, 1, 0) | 0 | 0; //@line 6635
       if (($15 & 3) == 0 | ($15 & 4) != 0) {
        $$4105 = $$1102155; //@line 6642
       } else {
        $22 = _ecma_string_get_property_index($15, SAFE_HEAP_LOAD($13 + ($$0122154 << 1) | 0, 2, 0) | 0 | 0) | 0; //@line 6646
        if ($22 >>> 0 >= $2 >>> 0 | $22 >>> 0 < $$1102155 >>> 0) {
         $$4105 = $$1102155; //@line 6651
        } else {
         $25 = $22 + 1 | 0; //@line 6653
         if (($25 | 0) == ($2 | 0)) {
          $$5 = $2; //@line 6656
          break L1;
         } else {
          $$4105 = $25; //@line 6659
         }
        }
       }
       $$0122154 = $$0122154 + 1 | 0; //@line 6663
       if (($$0122154 | 0) >= 2) {
        break;
       } else {
        $$1102155 = $$4105; //@line 6666
       }
      }
      $30 = SAFE_HEAP_LOAD($$0108156 + 2 | 0, 2, 0) | 0 | 0; //@line 6672
      if (!($30 << 16 >> 16)) {
       $$0101$lcssa = $$4105; //@line 6675
       break L6;
      }
      $$0108156 = _jmem_decompress_pointer($30 & 65535) | 0; //@line 6679
      if (!$$0108156) {
       $$0101$lcssa = $$4105; //@line 6682
       break;
      } else {
       $$0101157 = $$4105; //@line 6685
       label = 5; //@line 6686
      }
     }
    }
   } while (0);
   $35 = _ecma_get_property_list($0) | 0; //@line 6691
   if ((SAFE_HEAP_LOAD($35 >> 0 | 0, 1, 0) | 0 | 0) == 4) {
    $39 = SAFE_HEAP_LOAD($35 + 2 | 0, 2, 0) | 0 | 0; //@line 6696
    if (!($39 << 16 >> 16)) {
     $$5 = $$0101$lcssa; //@line 6699
     break;
    }
    $$0112$ph = 1; //@line 6704
    $$0117$ph = $35; //@line 6704
    $$2110$ph = _jmem_decompress_pointer($39 & 65535) | 0; //@line 6704
   } else {
    $$0112$ph = 0; //@line 6706
    $$0117$ph = 0; //@line 6706
    $$2110$ph = $35; //@line 6706
   }
   if (!$$2110$ph) {
    $$5 = $$0101$lcssa; //@line 6710
   } else {
    $44 = $0 + 4 | 0; //@line 6712
    $$0112$ph138151 = $$0112$ph; //@line 6713
    $$0117$ph137150 = $$0117$ph; //@line 6713
    $$2110$ph139152 = $$2110$ph; //@line 6713
    L23 : while (1) {
     $$sink = ($$0117$ph137150 | 0) == 0 ? $44 : $$0117$ph137150 + 2 | 0; //@line 6717
     $$0112147 = $$0112$ph138151; //@line 6718
     $$2110148 = $$2110$ph139152; //@line 6718
     while (1) {
      $47 = $$2110148 + 12 | 0; //@line 6720
      $$0107146 = 0; //@line 6721
      $$1113145 = $$0112147; //@line 6721
      while (1) {
       $50 = $$2110148 + $$0107146 | 0; //@line 6723
       $51 = SAFE_HEAP_LOAD($50 >> 0 | 0, 1, 0) | 0 | 0; //@line 6724
       if (($51 & 3) != 0 & ($51 & 4) != 0) {
        $56 = $47 + ($$0107146 << 1) | 0; //@line 6731
        $58 = _ecma_string_get_property_index($51, SAFE_HEAP_LOAD($56 | 0, 2, 0) | 0 | 0) | 0; //@line 6733
        if ($58 >>> 0 >= $2 >>> 0 | $58 >>> 0 < $$0101$lcssa >>> 0) {
         $$4116 = $$1113145; //@line 6738
        } else {
         if (($$1113145 | 0) == 1) {
          $$2114 = _ecma_property_hashmap_delete($0, SAFE_HEAP_LOAD($56 | 0, 2, 0) | 0 | 0, $50) | 0; //@line 6744
         } else {
          $$2114 = $$1113145; //@line 6746
         }
         _ecma_free_property($0, SAFE_HEAP_LOAD($56 | 0, 2, 0) | 0 | 0, $50); //@line 6749
         $$4116 = $$2114; //@line 6750
        }
       } else {
        $$4116 = $$1113145; //@line 6753
       }
       $$0107146 = $$0107146 + 1 | 0; //@line 6755
       if (($$0107146 | 0) == 2) {
        break;
       } else {
        $$1113145 = $$4116; //@line 6760
       }
      }
      if (SAFE_HEAP_LOAD($$2110148 >> 0 | 0, 1, 0) | 0 | 0) {
       break;
      }
      if (SAFE_HEAP_LOAD($$2110148 + 1 >> 0 | 0, 1, 0) | 0 | 0) {
       break;
      }
      $69 = $$2110148 + 2 | 0; //@line 6774
      SAFE_HEAP_STORE($$sink | 0, SAFE_HEAP_LOAD($69 | 0, 2, 0) | 0 | 0 | 0, 2);
      $71 = SAFE_HEAP_LOAD($69 | 0, 2, 0) | 0 | 0; //@line 6777
      if (!($71 << 16 >> 16)) {
       label = 28; //@line 6780
       break L23;
      }
      $74 = _jmem_decompress_pointer($71 & 65535) | 0; //@line 6784
      _ecma_dealloc_property_pair($$2110148); //@line 6785
      if (!$74) {
       break L23;
      } else {
       $$0112147 = $$4116; //@line 6790
       $$2110148 = $74; //@line 6790
      }
     }
     $77 = SAFE_HEAP_LOAD($$2110148 + 2 | 0, 2, 0) | 0 | 0; //@line 6794
     if (!($77 << 16 >> 16)) {
      break;
     }
     $$2110$ph139152 = _jmem_decompress_pointer($77 & 65535) | 0; //@line 6800
     if (!$$2110$ph139152) {
      break;
     } else {
      $$0112$ph138151 = $$4116; //@line 6805
      $$0117$ph137150 = $$2110148; //@line 6805
     }
    }
    if ((label | 0) == 28) {
     _ecma_dealloc_property_pair($$2110148); //@line 6809
    }
    if (($$4116 | 0) == 2) {
     _ecma_property_hashmap_free($0); //@line 6813
     _ecma_property_hashmap_create($0); //@line 6814
     $$5 = $$0101$lcssa; //@line 6815
    } else {
     $$5 = $$0101$lcssa; //@line 6817
    }
   }
  }
 } while (0);
 return $$5 | 0; //@line 6822
}
function _ecma_builtin_global_object_encode_uri_helper($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0104127 = 0, $$0105132 = 0, $$0111125 = 0, $$0111131 = 0, $$0113$be = 0, $$0113128 = 0, $$1114126 = 0, $$1117 = 0, $$2107 = 0, $$2118 = 0, $$3 = 0, $$3108129 = 0, $$3119 = 0, $$4 = 0, $$4109 = 0, $$5 = 0, $$5110 = 0, $$sink = 0, $10 = 0, $11 = 0, $13 = 0, $19 = 0, $2 = 0, $23 = 0, $3 = 0, $32 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $5 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4693
 STACKTOP = STACKTOP + 16 | 0; //@line 4694
 $2 = sp + 2 | 0; //@line 4695
 $3 = sp + 4 | 0; //@line 4696
 $4 = sp; //@line 4697
 $5 = _ecma_op_to_string($0) | 0; //@line 4698
 if (($5 | 0) == 24) {
  $$5 = 24; //@line 4701
 } else {
  $7 = _ecma_get_string_from_value($5) | 0; //@line 4703
  $8 = _ecma_string_get_size($7) | 0; //@line 4704
  $9 = _jmem_heap_alloc_block($8) | 0; //@line 4705
  _ecma_string_to_utf8_bytes($7, $9, $8); //@line 4706
  $10 = $9 + $8 | 0; //@line 4707
  _memset($3 | 0, 0, 4) | 0; //@line 4708
  $11 = ($8 | 0) > 0; //@line 4709
  L3 : do {
   if ($11) {
    $$0105132 = $9; //@line 4712
    $$0111131 = 0; //@line 4712
    while (1) {
     $13 = $$0105132 + (_lit_read_code_unit_from_utf8($$0105132, $2) | 0) | 0; //@line 4715
     if (_lit_is_code_point_utf16_low_surrogate(SAFE_HEAP_LOAD($2 | 0, 2, 1) | 0 | 0) | 0) {
      label = 5; //@line 4720
      break;
     }
     $19 = SAFE_HEAP_LOAD($2 | 0, 2, 1) | 0 | 0; //@line 4724
     if (_lit_is_code_point_utf16_high_surrogate($19) | 0) {
      if (($13 | 0) == ($10 | 0)) {
       label = 8; //@line 4729
       break;
      }
      $23 = _lit_read_code_unit_from_utf8($13, $4) | 0; //@line 4732
      if (!(_lit_is_code_point_utf16_low_surrogate(SAFE_HEAP_LOAD($4 | 0, 2, 1) | 0 | 0) | 0)) {
       label = 11; //@line 4737
       break;
      }
      $$1117 = _lit_convert_surrogate_pair_to_code_point(SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0, SAFE_HEAP_LOAD($4 | 0, 2, 0) | 0 | 0) | 0; //@line 4744
      $$2107 = $13 + $23 | 0; //@line 4744
     } else {
      $$1117 = $19; //@line 4746
      $$2107 = $13; //@line 4746
     }
     $32 = _lit_code_point_to_utf8($$1117, $3) | 0; //@line 4748
     if (($32 | 0) == 1) {
      $36 = _ecma_builtin_global_object_character_is_in(SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 1) | 0 | 0, $1) | 0; //@line 4753
      $$sink = $36 ? 1 : 3; //@line 4755
     } else {
      $$sink = $32 * 3 | 0; //@line 4758
     }
     $38 = $$sink + $$0111131 | 0; //@line 4760
     if ($$2107 >>> 0 < $10 >>> 0) {
      $$0105132 = $$2107; //@line 4763
      $$0111131 = $38; //@line 4763
     } else {
      $$0111125 = $38; //@line 4765
      $$3 = 8; //@line 4765
      break L3;
     }
    }
    if ((label | 0) == 5) {
     $$0111125 = $$0111131; //@line 4771
     $$3 = _ecma_raise_uri_error(6305) | 0; //@line 4771
     break;
    } else if ((label | 0) == 8) {
     $$0111125 = $$0111131; //@line 4776
     $$3 = _ecma_raise_uri_error(6305) | 0; //@line 4776
     break;
    } else if ((label | 0) == 11) {
     $$0111125 = $$0111131; //@line 4781
     $$3 = _ecma_raise_uri_error(6305) | 0; //@line 4781
     break;
    }
   } else {
    $$0111125 = 0; //@line 4785
    $$3 = 8; //@line 4785
   }
  } while (0);
  if (_ecma_is_value_empty($$3) | 0) {
   $41 = _jmem_heap_alloc_block($$0111125) | 0; //@line 4790
   L24 : do {
    if ($11) {
     $$0113128 = $41; //@line 4793
     $$3108129 = $9; //@line 4793
     while (1) {
      $43 = $$3108129 + (_lit_read_code_unit_from_utf8($$3108129, $2) | 0) | 0; //@line 4796
      $45 = SAFE_HEAP_LOAD($2 | 0, 2, 1) | 0 | 0; //@line 4798
      if (_lit_is_code_point_utf16_high_surrogate($45) | 0) {
       $47 = _lit_read_code_unit_from_utf8($43, $4) | 0; //@line 4801
       if (_lit_is_code_point_utf16_low_surrogate(SAFE_HEAP_LOAD($4 | 0, 2, 1) | 0 | 0) | 0) {
        $$2118 = _lit_convert_surrogate_pair_to_code_point(SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0, SAFE_HEAP_LOAD($4 | 0, 2, 0) | 0 | 0) | 0; //@line 4810
        $$4109 = $43 + $47 | 0; //@line 4810
       } else {
        $$2118 = $45; //@line 4812
        $$4109 = $43; //@line 4812
       }
       $$3119 = $$2118; //@line 4814
       $$5110 = $$4109; //@line 4814
      } else {
       $$3119 = $45; //@line 4816
       $$5110 = $43; //@line 4816
      }
      $55 = _lit_code_point_to_utf8($$3119, $3) | 0; //@line 4818
      L34 : do {
       switch ($55 | 0) {
       case 1:
        {
         $57 = SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 0) | 0 | 0; //@line 4822
         $58 = $57 & 255; //@line 4823
         if (_ecma_builtin_global_object_character_is_in($58, $1) | 0) {
          SAFE_HEAP_STORE($$0113128 >> 0 | 0, $57 | 0, 1);
          $$0113$be = $$0113128 + 1 | 0; //@line 4828
          break L34;
         } else {
          _ecma_builtin_global_object_byte_to_hex($$0113128, $58); //@line 4831
          $$0113$be = $$0113128 + 3 | 0; //@line 4833
          break L34;
         }
         break;
        }
       case 0:
        {
         $$0113$be = $$0113128; //@line 4839
         break;
        }
       default:
        {
         $56 = $55 * 3 | 0; //@line 4843
         $$0104127 = 0; //@line 4844
         $$1114126 = $$0113128; //@line 4844
         while (1) {
          _ecma_builtin_global_object_byte_to_hex($$1114126, SAFE_HEAP_LOAD($3 + $$0104127 >> 0 | 0, 1, 1) | 0 | 0); //@line 4849
          $$0104127 = $$0104127 + 1 | 0; //@line 4851
          if (($$0104127 | 0) == ($55 | 0)) {
           break;
          } else {
           $$1114126 = $$1114126 + 3 | 0; //@line 4856
          }
         }
         $$0113$be = $$0113128 + $56 | 0; //@line 4860
        }
       }
      } while (0);
      if ($$5110 >>> 0 < $10 >>> 0) {
       $$0113128 = $$0113$be; //@line 4866
       $$3108129 = $$5110; //@line 4866
      } else {
       break L24;
      }
     }
    }
   } while (0);
   $69 = _ecma_make_string_value(_ecma_new_ecma_string_from_utf8($41, $$0111125) | 0) | 0; //@line 4874
   if (!$41) {
    $$4 = $69; //@line 4877
   } else {
    _jmem_heap_free_block($41, $$0111125); //@line 4879
    $$4 = $69; //@line 4880
   }
  } else {
   $$4 = $$3; //@line 4883
  }
  if ($9 | 0) {
   _jmem_heap_free_block($9, $8); //@line 4887
  }
  _ecma_free_value($5); //@line 4889
  $$5 = $$4; //@line 4890
 }
 STACKTOP = sp; //@line 4892
 return $$5 | 0; //@line 4892
}
function _parser_scan_until($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$091 = 0, $$092 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $3 = 0, $38 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16385
 STACKTOP = STACKTOP + 16 | 0; //@line 16386
 $3 = sp; //@line 16387
 $4 = $0 + 216 | 0; //@line 16388
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0; //@line 16389
 SAFE_HEAP_STORE($1 | 0, $5 | 0, 4);
 $6 = $1 + 4 | 0; //@line 16391
 SAFE_HEAP_STORE($6 | 0, $5 | 0, 4);
 SAFE_HEAP_STORE($1 + 8 | 0, SAFE_HEAP_LOAD($0 + 224 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($1 + 12 | 0, SAFE_HEAP_LOAD($0 + 228 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
 if (($2 | 0) == 63) {
  SAFE_HEAP_STORE($3 | 0, 4 | 0, 4);
  $$091 = 85; //@line 16405
  $$092 = 85; //@line 16405
 } else {
  _lexer_next_token($0); //@line 16407
  if (($2 | 0) == 41) {
   if ((SAFE_HEAP_LOAD($0 + 188 >> 0 | 0, 1, 0) | 0 | 0) == 66) {
    _lexer_next_token($0); //@line 16414
    $$091 = 41; //@line 16415
    $$092 = 58; //@line 16415
   } else {
    $$091 = 41; //@line 16417
    $$092 = 58; //@line 16417
   }
  } else {
   $$091 = $2; //@line 16420
   $$092 = $2; //@line 16420
  }
 }
 _parser_stack_push_uint8($0, 0); //@line 16423
 $18 = $0 + 188 | 0; //@line 16424
 $19 = $0 + 304 | 0; //@line 16425
 $20 = ($$091 | 0) == 85; //@line 16426
 $21 = $0 + 206 | 0; //@line 16427
 L7 : while (1) {
  $22 = SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0; //@line 16429
  $23 = $22 & 255; //@line 16430
  $24 = SAFE_HEAP_LOAD($19 >> 0 | 0, 1, 0) | 0 | 0; //@line 16431
  $25 = $24 & 255; //@line 16432
  if (!($22 << 24 >> 24)) {
   label = 8; //@line 16435
   break;
  }
  $27 = $24 << 24 >> 24 == 0; //@line 16438
  if ($27) {
   if (($23 | 0) == ($$091 | 0) | ($23 | 0) == ($$092 | 0)) {
    label = 11; //@line 16444
    break;
   }
  }
  L13 : do {
   switch (SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0) {
   case 0:
    {
     if (!(($22 | 1) << 24 >> 24 == 47 | ($22 + -6 & 255) < 9)) {
      label = 14; //@line 16458
     }
     break;
    }
   case 1:
    {
     label = 14; //@line 16463
     break;
    }
   case 2:
    {
     if (!(_parser_scan_post_primary_expression($0, $23, $3) | 0)) {
      label = 16; //@line 16469
     }
     break;
    }
   case 3:
    {
     label = 16; //@line 16474
     break;
    }
   case 4:
    {
     if ($20 & $27) {
      switch ($22 << 24 >> 24) {
      case 54:
      case 63:
      case 77:
       {
        label = 19; //@line 16482
        break L7;
        break;
       }
      default:
       {}
      }
     }
     if (_parser_scan_statement($0, $23, $25, $3) | 0) {
      continue L7;
     }
     break;
    }
   case 5:
    {
     $38 = SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0; //@line 16497
     if ($38 << 24 >> 24 == 1) {
      switch (SAFE_HEAP_LOAD($21 >> 0 | 0, 1, 0) | 0 | 0) {
      case 2:
      case 0:
       {
        break;
       }
      default:
       {
        label = 25; //@line 16506
        break L7;
       }
      }
      _lexer_next_token($0); //@line 16510
      $41 = SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0; //@line 16512
     } else {
      $41 = $38; //@line 16514
     }
     if ($41 << 24 >> 24 != 52) {
      label = 25; //@line 16518
      break L7;
     }
     _lexer_next_token($0); //@line 16521
     $43 = SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0; //@line 16522
     L26 : do {
      if ($43 << 24 >> 24 != 55) {
       $45 = $43; //@line 16526
       while (1) {
        if ($45 << 24 >> 24 != 1) {
         label = 29; //@line 16530
         break L7;
        }
        if (SAFE_HEAP_LOAD($21 >> 0 | 0, 1, 0) | 0 | 0) {
         label = 29; //@line 16536
         break L7;
        }
        _lexer_next_token($0); //@line 16539
        switch (SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0) {
        case 55:
         {
          break L26;
          break;
         }
        case 60:
         {
          break;
         }
        default:
         {
          label = 32; //@line 16550
          break L7;
         }
        }
        _lexer_next_token($0); //@line 16554
        $45 = SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0; //@line 16556
       }
      }
     } while (0);
     _lexer_next_token($0); //@line 16560
     if ((SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0) != 51) {
      label = 34; //@line 16564
      break L7;
     }
     SAFE_HEAP_STORE($3 | 0, 4 | 0, 4);
     break;
    }
   case 6:
    {
     _lexer_scan_identifier($0, 1); //@line 16571
     switch (SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0) {
     case 54:
      {
       _parser_stack_pop_uint8($0); //@line 16575
       SAFE_HEAP_STORE($3 | 0, 2 | 0, 4);
       break L13;
       break;
      }
     case 83:
     case 82:
      {
       _parser_stack_push_uint8($0, 9); //@line 16581
       SAFE_HEAP_STORE($3 | 0, 5 | 0, 4);
       break L13;
       break;
      }
     default:
      {
       _lexer_next_token($0); //@line 16587
       if ((SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0) != 59) {
        label = 40; //@line 16591
        break L7;
       }
       SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
       break L13;
      }
     }
     break;
    }
   default:
    {}
   }
  } while (0);
  if ((label | 0) == 14) {
   label = 0; //@line 16605
   if (_parser_scan_primary_expression($0, $23, $25, $3) | 0) {
    continue;
   }
  } else if ((label | 0) == 16) {
   label = 0; //@line 16612
   if (_parser_scan_primary_expression_end($0, $23, $25, $$091, $3) | 0) {
    continue;
   }
  }
  SAFE_HEAP_STORE($6 | 0, SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0, 4);
  _lexer_next_token($0); //@line 16620
 }
 if ((label | 0) == 8) {
  _parser_raise_error($0, 52); //@line 16623
 } else if ((label | 0) == 11) {
  _parser_stack_pop_uint8($0); //@line 16627
 } else if ((label | 0) == 19) {
  _parser_stack_pop_uint8($0); //@line 16630
 } else if ((label | 0) == 25) {
  _parser_raise_error($0, 56); //@line 16633
 } else if ((label | 0) == 29) {
  _parser_raise_error($0, 51); //@line 16637
 } else if ((label | 0) == 32) {
  _parser_raise_error($0, 41); //@line 16641
 } else if ((label | 0) == 34) {
  _parser_raise_error($0, 40); //@line 16645
 } else if ((label | 0) == 40) {
  _parser_raise_error($0, 43); //@line 16649
 }
 STACKTOP = sp; //@line 16652
 return;
}
function _ecma_errol0_dtoa($0, $1, $2) {
 $0 = +$0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $$053 = 0, $$054$lcssa = 0, $$05463 = 0, $$056 = 0, $$1 = 0.0, $$157 = 0, $$258 = 0, $$3 = 0, $$promoted = 0.0, $$promoted72 = 0.0, $101 = 0, $102 = 0.0, $107 = 0.0, $114 = 0, $115 = 0.0, $117 = 0.0, $118 = 0.0, $125 = 0.0, $126 = 0.0, $130 = 0.0, $131 = 0.0, $138 = 0.0, $139 = 0.0, $146 = 0.0, $147 = 0.0, $15 = 0.0, $18 = 0.0, $21 = 0.0, $27 = 0.0, $28 = 0.0, $3 = 0, $32 = 0.0, $33 = 0, $4 = 0, $40 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $5 = 0, $51 = 0.0, $56 = 0.0, $6 = 0, $61 = 0.0, $64 = 0.0, $66 = 0.0, $67 = 0.0, $72 = 0.0, $78 = 0.0, $79 = 0.0, $82 = 0.0, $88 = 0.0, $89 = 0.0, $92 = 0, $93 = 0.0, $98 = 0.0, sp = 0;
 sp = STACKTOP; //@line 2662
 STACKTOP = STACKTOP + 48 | 0; //@line 2663
 $3 = sp + 32 | 0; //@line 2664
 $4 = sp + 16 | 0; //@line 2665
 $5 = sp; //@line 2666
 SAFE_HEAP_STORE_D($3 | 0, +$0, 8);
 $6 = $3 + 8 | 0; //@line 2668
 SAFE_HEAP_STORE_D($6 | 0, +0.0, 8);
 $$0 = 1.0; //@line 2670
 $$056 = 1; //@line 2670
 $$promoted72 = $0; //@line 2670
 while (1) {
  if ($$promoted72 > 10.0) {
   if (($$056 | 0) >= 308) {
    break;
   }
  } else {
   if (!($$promoted72 == 10.0)) {
    break;
   }
   if (!(($$056 | 0) < 308 & +(+SAFE_HEAP_LOAD_D($6 | 0, 8)) >= 0.0)) {
    break;
   }
  }
  _ecma_divide_high_prec_by_10($3); //@line 2692
  $$0 = $$0 / 10.0; //@line 2695
  $$056 = $$056 + 1 | 0; //@line 2695
  $$promoted72 = +(+SAFE_HEAP_LOAD_D($3 | 0, 8)); //@line 2695
 }
 $$1 = $$0; //@line 2698
 $$157 = $$056; //@line 2698
 $15 = $$promoted72; //@line 2698
 $18 = +(+SAFE_HEAP_LOAD_D($6 | 0, 8)); //@line 2698
 while (1) {
  if ($15 < 1.0) {
   if (($$157 | 0) <= -307) {
    $32 = $15; //@line 2704
    break;
   }
  } else {
   if (!($15 == 1.0)) {
    $32 = $15; //@line 2710
    break;
   }
   if (!(($$157 | 0) > -307 & $18 < 0.0)) {
    $32 = 1.0; //@line 2717
    break;
   }
  }
  $21 = $15 * 10.0; //@line 2722
  $27 = $18 * 10.0 - ($21 - $15 * 8.0 - $15 * 2.0); //@line 2728
  $28 = $21 + $27; //@line 2729
  $$1 = $$1 * 10.0; //@line 2733
  $$157 = $$157 + -1 | 0; //@line 2733
  $15 = $28; //@line 2733
  $18 = $27 + ($21 - $28); //@line 2733
 }
 SAFE_HEAP_STORE_D($3 | 0, +$32, 8);
 SAFE_HEAP_STORE_D($6 | 0, +$18, 8);
 SAFE_HEAP_STORE_D($4 | 0, +$32, 8);
 $33 = $4 + 8 | 0; //@line 2738
 SAFE_HEAP_STORE_D($33 | 0, +$18, 8);
 if (+_nextafter($0, inf) != inf) {
  $40 = $18 + $$1 * (+_nextafter($0, inf) - $0) / 2.0000001; //@line 2747
  SAFE_HEAP_STORE_D($33 | 0, +$40, 8);
  $48 = $40; //@line 2749
 } else {
  $48 = $18; //@line 2751
 }
 $45 = $18 + $$1 * (+_nextafter($0, -inf) - $0) / 2.0000001; //@line 2757
 $46 = $5 + 8 | 0; //@line 2758
 $47 = $32 + $48; //@line 2759
 SAFE_HEAP_STORE_D($4 | 0, +$47, 8);
 SAFE_HEAP_STORE_D($33 | 0, +($48 + ($32 - $47)), 8);
 $51 = $32 + $45; //@line 2764
 SAFE_HEAP_STORE_D($5 | 0, +$51, 8);
 SAFE_HEAP_STORE_D($46 | 0, +($45 + ($32 - $51)), 8);
 $$258 = $$157; //@line 2769
 $$promoted = $47; //@line 2769
 while (1) {
  if (!($$promoted > 10.0)) {
   $56 = +(+SAFE_HEAP_LOAD_D($33 | 0, 8)); //@line 2774
   if (!($$promoted == 10.0 & $56 >= 0.0)) {
    break;
   }
  }
  _ecma_divide_high_prec_by_10($4); //@line 2782
  _ecma_divide_high_prec_by_10($5); //@line 2783
  $$258 = $$258 + 1 | 0; //@line 2785
  $$promoted = +(+SAFE_HEAP_LOAD_D($4 | 0, 8)); //@line 2785
 }
 $$3 = $$258; //@line 2789
 $61 = $$promoted; //@line 2789
 $64 = $56; //@line 2789
 $66 = +(+SAFE_HEAP_LOAD_D($5 | 0, 8)); //@line 2789
 $67 = +(+SAFE_HEAP_LOAD_D($46 | 0, 8)); //@line 2789
 while (1) {
  if (!($61 < 1.0)) {
   if (!($61 == 1.0 & $64 < 0.0)) {
    break;
   }
  }
  $72 = $61 * 10.0; //@line 2801
  $78 = $64 * 10.0 - ($72 - $61 * 8.0 - $61 * 2.0); //@line 2807
  $79 = $72 + $78; //@line 2808
  $82 = $66 * 10.0; //@line 2811
  $88 = $67 * 10.0 - ($82 - $66 * 8.0 - $66 * 2.0); //@line 2817
  $89 = $82 + $88; //@line 2818
  $$3 = $$3 + -1 | 0; //@line 2821
  $61 = $79; //@line 2821
  $64 = $78 + ($72 - $79); //@line 2821
  $66 = $89; //@line 2821
  $67 = $88 + ($82 - $89); //@line 2821
 }
 SAFE_HEAP_STORE_D($4 | 0, +$61, 8);
 SAFE_HEAP_STORE_D($33 | 0, +$64, 8);
 SAFE_HEAP_STORE_D($5 | 0, +$66, 8);
 SAFE_HEAP_STORE_D($46 | 0, +$67, 8);
 L32 : do {
  if ($61 != 0.0 | $64 != 0.0) {
   $$05463 = $1; //@line 2832
   $102 = $66; //@line 2832
   $107 = $67; //@line 2832
   $93 = $61; //@line 2832
   $98 = $64; //@line 2832
   while (1) {
    $92 = ~~$93 & 255; //@line 2834
    $$053 = $98 < 0.0 & $93 == +($92 & 255) ? ($92 & 255) + 255 & 255 : $92; //@line 2842
    $101 = ~~$102 & 255; //@line 2843
    if (($107 < 0.0 & $102 == +($101 & 255) ? ($101 & 255) + 255 & 255 : $101) << 24 >> 24 != $$053 << 24 >> 24) {
     $$054$lcssa = $$05463; //@line 2854
     $146 = $102; //@line 2854
     $147 = $93; //@line 2854
     break L32;
    }
    $114 = $$05463 + 1 | 0; //@line 2860
    SAFE_HEAP_STORE($$05463 >> 0 | 0, ($$053 & 255) + 48 | 0, 1);
    $115 = +($$053 & 255); //@line 2862
    $117 = +(+SAFE_HEAP_LOAD_D($4 | 0, 8)) - $115; //@line 2864
    $118 = $117 * 10.0; //@line 2865
    $125 = +(+SAFE_HEAP_LOAD_D($33 | 0, 8)) * 10.0 - ($118 - $117 * 8.0 - $117 * 2.0); //@line 2872
    $126 = $118 + $125; //@line 2873
    SAFE_HEAP_STORE_D($4 | 0, +$126, 8);
    $98 = $125 + ($118 - $126); //@line 2876
    SAFE_HEAP_STORE_D($33 | 0, +$98, 8);
    $130 = +(+SAFE_HEAP_LOAD_D($5 | 0, 8)) - $115; //@line 2879
    $131 = $130 * 10.0; //@line 2880
    $138 = +(+SAFE_HEAP_LOAD_D($46 | 0, 8)) * 10.0 - ($131 - $130 * 8.0 - $130 * 2.0); //@line 2887
    $139 = $131 + $138; //@line 2888
    SAFE_HEAP_STORE_D($5 | 0, +$139, 8);
    $107 = $138 + ($131 - $139); //@line 2891
    SAFE_HEAP_STORE_D($46 | 0, +$107, 8);
    if (!($126 != 0.0 | $98 != 0.0)) {
     $$054$lcssa = $114; //@line 2899
     $146 = $139; //@line 2899
     $147 = $126; //@line 2899
     break;
    } else {
     $$05463 = $114; //@line 2897
     $102 = $139; //@line 2897
     $93 = $126; //@line 2897
    }
   }
  } else {
   $$054$lcssa = $1; //@line 2904
   $146 = $66; //@line 2904
   $147 = $61; //@line 2904
  }
 } while (0);
 SAFE_HEAP_STORE($$054$lcssa >> 0 | 0, (~~(($147 + $146) * .5 + .5) & 255) + 48 | 0, 1);
 SAFE_HEAP_STORE($2 | 0, $$3 | 0, 4);
 STACKTOP = sp; //@line 2920
 return $$054$lcssa + 1 - $1 | 0; //@line 2920
}
function _ecma_op_to_property_descriptor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$10 = 0, $$13142 = 0, $$14 = 0, $$7 = 0, $13 = 0, $18 = 0, $19 = 0, $2 = 0, $25 = 0, $30 = 0, $31 = 0, $38 = 0, $39 = 0, $45 = 0, $5 = 0, $50 = 0, $51 = 0, $54 = 0, $55 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $67 = 0, $68 = 0, $7 = 0, $73 = 0, $76 = 0, $81 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10098
 STACKTOP = STACKTOP + 16 | 0; //@line 10099
 $2 = sp; //@line 10100
 if (_ecma_is_value_object($0) | 0) {
  $5 = _ecma_get_object_from_value($0) | 0; //@line 10103
  _ecma_make_empty_property_descriptor($2); //@line 10104
  $6 = _ecma_get_magic_string(58) | 0; //@line 10105
  $7 = _ecma_op_object_find($5, $6) | 0; //@line 10106
  do {
   if (($7 | 0) == 24) {
    _ecma_deref_ecma_string($6); //@line 10110
    label = 39; //@line 10111
   } else {
    if (_ecma_is_value_found($7) | 0) {
     SAFE_HEAP_STORE($2 | 0, SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 32 | 0, 2);
     $13 = (_ecma_op_to_boolean($7) | 0) & 1; //@line 10119
     SAFE_HEAP_STORE($2 | 0, (SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0) & -65 | $13 << 6 & 65535 | 0, 2);
    }
    _ecma_free_value($7); //@line 10126
    _ecma_deref_ecma_string($6); //@line 10127
    $18 = _ecma_get_magic_string(61) | 0; //@line 10128
    $19 = _ecma_op_object_find($5, $18) | 0; //@line 10129
    if (($19 | 0) == 24) {
     _ecma_deref_ecma_string($18); //@line 10132
     label = 39; //@line 10133
     break;
    }
    if (_ecma_is_value_found($19) | 0) {
     SAFE_HEAP_STORE($2 | 0, SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 128 | 0, 2);
     $25 = (_ecma_op_to_boolean($19) | 0) & 1; //@line 10142
     SAFE_HEAP_STORE($2 | 0, (SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0) & -257 | $25 << 8 & 65535 | 0, 2);
    }
    _ecma_free_value($19); //@line 10149
    _ecma_deref_ecma_string($18); //@line 10150
    $30 = _ecma_get_magic_string(24) | 0; //@line 10151
    $31 = _ecma_op_object_find($5, $30) | 0; //@line 10152
    if (($31 | 0) == 24) {
     _ecma_deref_ecma_string($30); //@line 10155
     label = 39; //@line 10156
     break;
    }
    if (_ecma_is_value_found($31) | 0) {
     SAFE_HEAP_STORE($2 | 0, SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 1 | 0, 2);
     SAFE_HEAP_STORE($2 + 4 | 0, _ecma_copy_value($31) | 0 | 0, 4);
    }
    _ecma_free_value($31); //@line 10168
    _ecma_deref_ecma_string($30); //@line 10169
    $38 = _ecma_get_magic_string(49) | 0; //@line 10170
    $39 = _ecma_op_object_find($5, $38) | 0; //@line 10171
    if (($39 | 0) == 24) {
     _ecma_deref_ecma_string($38); //@line 10174
     label = 39; //@line 10175
     break;
    }
    if (_ecma_is_value_found($39) | 0) {
     SAFE_HEAP_STORE($2 | 0, SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 8 | 0, 2);
     $45 = (_ecma_op_to_boolean($39) | 0) & 1; //@line 10184
     SAFE_HEAP_STORE($2 | 0, (SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0) & -17 | $45 << 4 & 65535 | 0, 2);
    }
    _ecma_free_value($39); //@line 10191
    _ecma_deref_ecma_string($38); //@line 10192
    $50 = _ecma_get_magic_string(7) | 0; //@line 10193
    $51 = _ecma_op_object_find($5, $50) | 0; //@line 10194
    if (($51 | 0) == 24) {
     _ecma_deref_ecma_string($50); //@line 10197
     label = 39; //@line 10198
     break;
    }
    do {
     if (_ecma_is_value_found($51) | 0) {
      $54 = _ecma_op_is_callable($51) | 0; //@line 10204
      $55 = _ecma_is_value_undefined($51) | 0; //@line 10205
      if (!($54 | $55)) {
       $$7 = _ecma_raise_type_error(6026) | 0; //@line 10209
       break;
      }
      SAFE_HEAP_STORE($2 | 0, SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 2 | 0, 2);
      if ($55) {
       SAFE_HEAP_STORE($2 + 8 | 0, 0 | 0, 4);
       $$7 = 8; //@line 10218
       break;
      } else {
       $60 = _ecma_get_object_from_value($51) | 0; //@line 10221
       _ecma_ref_object($60); //@line 10222
       SAFE_HEAP_STORE($2 + 8 | 0, $60 | 0, 4);
       $$7 = 8; //@line 10225
       break;
      }
     } else {
      $$7 = 8; //@line 10229
     }
    } while (0);
    _ecma_free_value($51); //@line 10232
    _ecma_deref_ecma_string($50); //@line 10233
    if (($$7 | 0) == 24) {
     label = 39; //@line 10236
    } else {
     $63 = _ecma_get_magic_string(8) | 0; //@line 10238
     $64 = _ecma_op_object_find($5, $63) | 0; //@line 10239
     if (($64 | 0) == 24) {
      _ecma_deref_ecma_string($63); //@line 10242
      label = 39; //@line 10243
      break;
     }
     do {
      if (_ecma_is_value_found($64) | 0) {
       $67 = _ecma_op_is_callable($64) | 0; //@line 10249
       $68 = _ecma_is_value_undefined($64) | 0; //@line 10250
       if (!($67 | $68)) {
        $$10 = _ecma_raise_type_error(6026) | 0; //@line 10254
        break;
       }
       SAFE_HEAP_STORE($2 | 0, SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 4 | 0, 2);
       if ($68) {
        SAFE_HEAP_STORE($2 + 12 | 0, 0 | 0, 4);
        $$10 = $$7; //@line 10263
        break;
       } else {
        $73 = _ecma_get_object_from_value($64) | 0; //@line 10266
        _ecma_ref_object($73); //@line 10267
        SAFE_HEAP_STORE($2 + 12 | 0, $73 | 0, 4);
        $$10 = $$7; //@line 10270
        break;
       }
      } else {
       $$10 = $$7; //@line 10274
      }
     } while (0);
     _ecma_free_value($64); //@line 10277
     _ecma_deref_ecma_string($63); //@line 10278
     if (($$10 | 0) == 24) {
      label = 39; //@line 10281
     } else {
      $76 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 10283
      if (($76 & 6) == 0 | ($76 & 9) == 0) {
       $$13142 = $$10; //@line 10290
      } else {
       $81 = _ecma_raise_type_error(3960) | 0; //@line 10292
       if (($81 | 0) == 24) {
        label = 39; //@line 10295
       } else {
        $$13142 = $81; //@line 10297
       }
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 39) {
   _ecma_free_property_descriptor($2); //@line 10305
   $$13142 = 24; //@line 10306
  }
  SAFE_HEAP_STORE($1 | 0, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0, 4);
  SAFE_HEAP_STORE($1 + 4 | 0, SAFE_HEAP_LOAD($2 + 4 | 0, 4, 0) | 0 | 0, 4);
  SAFE_HEAP_STORE($1 + 8 | 0, SAFE_HEAP_LOAD($2 + 8 | 0, 4, 0) | 0 | 0, 4);
  SAFE_HEAP_STORE($1 + 12 | 0, SAFE_HEAP_LOAD($2 + 12 | 0, 4, 0) | 0 | 0, 4);
  $$14 = $$13142; //@line 10309
 } else {
  $$14 = _ecma_raise_type_error(3940) | 0; //@line 10312
 }
 STACKTOP = sp; //@line 10314
 return $$14 | 0; //@line 10314
}
function _ecma_gc_run($0) {
 $0 = $0 | 0;
 var $$0$lcssa154 = 0, $$0$lcssa157 = 0, $$0$ph138 = 0, $$0129 = 0, $$070$lcssa153 = 0, $$070$lcssa156 = 0, $$070$ph137 = 0, $$070128 = 0, $$070128$phi = 0, $$075$ph136 = 0, $$075127 = 0, $$081$off0$ph118 = 0, $$081$off0106 = 0, $$083$ph135 = 0, $$1 = 0, $$176125 = 0, $$272$be = 0, $$272186 = 0, $$277$ph119 = 0, $$277107 = 0, $$285$ph117 = 0, $$3$be = 0, $$3187 = 0, $$373$lcssa159161 = 0, $$373$ph120 = 0, $$373108 = 0, $$373108$phi = 0, $$378104 = 0, $$4$ph121 = 0, $$4109 = 0, $$479102 = 0, $$5 = 0, $$580101 = 0, $1 = 0, $15 = 0, $17 = 0, $18 = 0, $3 = 0, $39 = 0, $5 = 0, $6 = 0, label = 0, $$378104$looptemp = 0;
 SAFE_HEAP_STORE(134110 * 4 | 0, 0 | 0, 4);
 $1 = SAFE_HEAP_LOAD(134098 * 4 | 0, 4, 0) | 0 | 0; //@line 750
 do {
  if (!$1) {
   $$0$lcssa154 = 0; //@line 754
   $$070$lcssa153 = 0; //@line 754
  } else {
   $$0$ph138 = $1; //@line 756
   $$070$ph137 = 0; //@line 756
   $$075$ph136 = $1; //@line 756
   $$083$ph135 = 0; //@line 756
   L2 : while (1) {
    $5 = ($$083$ph135 | 0) == 0; //@line 758
    $6 = $$083$ph135 + 2 | 0; //@line 759
    $$0129 = $$0$ph138; //@line 760
    $$070128 = $$070$ph137; //@line 760
    $$075127 = $$075$ph136; //@line 760
    while (1) {
     $3 = _ecma_gc_get_object_next($$075127) | 0; //@line 762
     if (!(_ecma_gc_is_object_visited($$075127) | 0)) {
      break;
     }
     if ($5) {
      $$1 = $3; //@line 768
     } else {
      SAFE_HEAP_STORE($6 | 0, SAFE_HEAP_LOAD($$075127 + 2 | 0, 2, 0) | 0 | 0 | 0, 2);
      $$1 = $$0129; //@line 773
     }
     _ecma_gc_set_object_next($$075127, $$070128); //@line 775
     if (!$3) {
      $$0$lcssa157 = $$1; //@line 778
      $$070$lcssa156 = $$075127; //@line 778
      break L2;
     } else {
      $$070128$phi = $$075127; //@line 781
      $$0129 = $$1; //@line 781
      $$075127 = $3; //@line 781
      $$070128 = $$070128$phi; //@line 781
     }
    }
    if (!$3) {
     label = 4; //@line 786
     break;
    } else {
     $$0$ph138 = $$0129; //@line 789
     $$070$ph137 = $$070128; //@line 789
     $$075$ph136 = $3; //@line 789
     $$083$ph135 = $$075127; //@line 789
    }
   }
   if ((label | 0) == 4) {
    if (!$$070128) {
     $$0$lcssa154 = $$0129; //@line 795
     $$070$lcssa153 = 0; //@line 795
     break;
    } else {
     $$0$lcssa157 = $$0129; //@line 798
     $$070$lcssa156 = $$070128; //@line 798
    }
   }
   $$176125 = $$070$lcssa156; //@line 801
   do {
    _ecma_gc_mark($$176125); //@line 803
    $$176125 = _ecma_gc_get_object_next($$176125) | 0; //@line 804
   } while (($$176125 | 0) != 0);
   $$0$lcssa154 = $$0$lcssa157; //@line 807
   $$070$lcssa153 = $$070$lcssa156; //@line 807
  }
 } while (0);
 L17 : do {
  if (!$$0$lcssa154) {
   $$373$lcssa159161 = $$070$lcssa153; //@line 818
  } else {
   $$272186 = $$070$lcssa153; //@line 820
   $$3187 = $$0$lcssa154; //@line 820
   while (1) {
    $$081$off0$ph118 = 0; //@line 822
    $$277$ph119 = $$3187; //@line 822
    $$285$ph117 = 0; //@line 822
    $$373$ph120 = $$272186; //@line 822
    $$4$ph121 = $$3187; //@line 822
    L20 : while (1) {
     $17 = ($$285$ph117 | 0) == 0; //@line 824
     $18 = $$285$ph117 + 2 | 0; //@line 825
     $$081$off0106 = $$081$off0$ph118; //@line 826
     $$277107 = $$277$ph119; //@line 826
     $$373108 = $$373$ph120; //@line 826
     $$4109 = $$4$ph121; //@line 826
     while (1) {
      $15 = _ecma_gc_get_object_next($$277107) | 0; //@line 828
      if (!(_ecma_gc_is_object_visited($$277107) | 0)) {
       break;
      }
      if ($17) {
       $$5 = $15; //@line 834
      } else {
       SAFE_HEAP_STORE($18 | 0, SAFE_HEAP_LOAD($$277107 + 2 | 0, 2, 0) | 0 | 0 | 0, 2);
       $$5 = $$4109; //@line 839
      }
      _ecma_gc_set_object_next($$277107, $$373108); //@line 841
      _ecma_gc_mark($$277107); //@line 842
      if (!$15) {
       $$272$be = $$277107; //@line 845
       $$3$be = $$5; //@line 845
       break L20;
      } else {
       $$373108$phi = $$277107; //@line 848
       $$081$off0106 = 1; //@line 848
       $$277107 = $15; //@line 848
       $$4109 = $$5; //@line 848
       $$373108 = $$373108$phi; //@line 848
      }
     }
     if (!$15) {
      label = 19; //@line 853
      break;
     } else {
      $$081$off0$ph118 = $$081$off0106; //@line 856
      $$277$ph119 = $15; //@line 856
      $$285$ph117 = $$277107; //@line 856
      $$373$ph120 = $$373108; //@line 856
      $$4$ph121 = $$4109; //@line 856
     }
    }
    if ((label | 0) == 19) {
     label = 0; //@line 860
     if ($$081$off0106) {
      $$272$be = $$373108; //@line 862
      $$3$be = $$4109; //@line 862
     } else {
      break;
     }
    }
    if (!$$3$be) {
     $$373$lcssa159161 = $$272$be; //@line 869
     break L17;
    } else {
     $$272186 = $$272$be; //@line 872
     $$3187 = $$3$be; //@line 872
    }
   }
   if (!$$4109) {
    $$373$lcssa159161 = $$373108; //@line 877
   } else {
    $$378104 = $$4109; //@line 879
    do {
     $$378104$looptemp = $$378104;
     $$378104 = _ecma_gc_get_object_next($$378104) | 0; //@line 881
     _ecma_gc_free_object($$378104$looptemp); //@line 882
    } while (($$378104 | 0) != 0);
    $$373$lcssa159161 = $$373108; //@line 885
   }
  }
 } while (0);
 if (($$373$lcssa159161 | 0) != ($$070$lcssa153 | 0)) {
  $$479102 = $$373$lcssa159161; //@line 896
  do {
   SAFE_HEAP_STORE($$479102 | 0, (SAFE_HEAP_LOAD($$479102 | 0, 2, 1) | 0 | 0) + 65472 | 0, 2);
   $$479102 = _ecma_gc_get_object_next($$479102) | 0; //@line 903
  } while (($$479102 | 0) != ($$070$lcssa153 | 0));
 }
 if (!(($0 | 0) != 1 | ($$373$lcssa159161 | 0) == 0)) {
  $$580101 = $$373$lcssa159161; //@line 916
  do {
   if (_ecma_is_lexical_environment($$580101) | 0) {
    if ((_ecma_get_lex_env_type($$580101) | 0) == 13) {
     label = 28; //@line 923
    }
   } else {
    label = 28; //@line 926
   }
   if ((label | 0) == 28) {
    label = 0; //@line 929
    $39 = _ecma_get_property_list($$580101) | 0; //@line 930
    if ($39 | 0) {
     if ((SAFE_HEAP_LOAD($39 >> 0 | 0, 1, 0) | 0 | 0) == 4) {
      _ecma_property_hashmap_free($$580101); //@line 936
     }
    }
   }
   $$580101 = _ecma_gc_get_object_next($$580101) | 0; //@line 940
  } while (($$580101 | 0) != 0);
 }
 SAFE_HEAP_STORE(134098 * 4 | 0, $$373$lcssa159161 | 0, 4);
 return;
}
function _ecma_builtin_try_to_instantiate_property($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0107$lcssa = 0, $$0107115 = 0, $$0108 = 0.0, $$0109 = 0, $$0110 = 0, $$0112$ph = 0, $$3 = 0, $$sink = 0, $17 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $30 = 0, $37 = 0, $39 = 0, $41 = 0, $42 = 0, $52 = 0, $53 = 0, $75 = 0, $82 = 0, $85 = 0, $9 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8776
 STACKTOP = STACKTOP + 16 | 0; //@line 8777
 $2 = sp; //@line 8778
 if ((_ecma_get_object_type($0) | 0) == 2) {
  if ((SAFE_HEAP_LOAD($0 + 10 | 0, 2, 1) | 0 | 0) > 7) {
   if (_ecma_string_is_length($1) | 0) {
    $9 = _ecma_create_named_data_property($0, $1, 0, $2) | 0; //@line 8788
    SAFE_HEAP_STORE($9 | 0, _ecma_make_integer_value((SAFE_HEAP_LOAD($0 + 8 + 1 >> 0 | 0, 1, 0) | 0) & 31) | 0 | 0, 4);
    $$3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 8797
   } else {
    $$3 = 0; //@line 8799
   }
  } else {
   label = 5; //@line 8802
  }
 } else {
  label = 5; //@line 8805
 }
 L5 : do {
  if ((label | 0) == 5) {
   $17 = _ecma_get_string_magic($1) | 0; //@line 8809
   if (($17 | 0) == 82) {
    $$3 = 0; //@line 8812
   } else {
    switch (_ecma_get_object_type($0) | 0) {
    case 1:
    case 4:
     {
      $$sink = 2; //@line 8817
      break;
     }
    default:
     {
      $$sink = 1; //@line 8821
     }
    }
    $20 = $0 + ($$sink << 3) | 0; //@line 8824
    $22 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 1) | 0 | 0; //@line 8826
    $24 = SAFE_HEAP_LOAD(88 + ($22 << 2) | 0, 4, 0) | 0 | 0; //@line 8828
    $25 = SAFE_HEAP_LOAD($24 | 0, 2, 0) | 0 | 0; //@line 8829
    if (($25 & 65535 | 0) == ($17 | 0)) {
     $$0107$lcssa = $24; //@line 8833
    } else {
     $$0107115 = $24; //@line 8835
     $28 = $25; //@line 8835
     while (1) {
      if ($28 << 16 >> 16 == 82) {
       $$3 = 0; //@line 8839
       break L5;
      }
      $30 = $$0107115 + 6 | 0; //@line 8842
      $28 = SAFE_HEAP_LOAD($30 | 0, 2, 0) | 0 | 0; //@line 8843
      if (($28 & 65535 | 0) == ($17 | 0)) {
       $$0107$lcssa = $30; //@line 8847
       break;
      } else {
       $$0107115 = $30; //@line 8850
      }
     }
    }
    $37 = ($$0107$lcssa - $24 | 0) / 6 | 0; //@line 8857
    $39 = $20 + 4 + ($37 >>> 5 << 2) | 0; //@line 8859
    $41 = 1 << ($37 & 31); //@line 8861
    $42 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0; //@line 8862
    if (!($42 & $41)) {
     SAFE_HEAP_STORE($39 | 0, $42 | $41 | 0, 4);
     switch (SAFE_HEAP_LOAD($$0107$lcssa + 2 >> 0 | 0, 1, 0) | 0 | 0) {
     case 0:
      {
       $$0112$ph = SAFE_HEAP_LOAD($$0107$lcssa + 4 | 0, 2, 1) | 0 | 0; //@line 8875
       label = 34; //@line 8876
       break;
      }
     case 1:
      {
       $52 = SAFE_HEAP_LOAD($$0107$lcssa + 4 | 0, 2, 0) | 0 | 0; //@line 8881
       $53 = $52 & 65535; //@line 8882
       L21 : do {
        if (($52 & 65535) < 256) {
         $$0108 = +($52 & 65535); //@line 8887
        } else {
         if (($52 & 65535) < 266) {
          $$0108 = +(+SAFE_HEAP_LOAD_D(8 + ($53 + -256 << 3) | 0, 8)); //@line 8894
          break;
         }
         switch ($52 << 16 >> 16) {
         case 266:
          {
           $$0108 = +_ecma_number_make_nan(); //@line 8900
           break L21;
           break;
          }
         case 267:
          {
           $$0108 = +_ecma_number_make_infinity(0); //@line 8906
           break L21;
           break;
          }
         case 268:
          {
           $$0108 = +_ecma_number_make_infinity(1); //@line 8912
           break L21;
           break;
          }
         default:
          {}
         }
        }
       } while (0);
       $$0112$ph = _ecma_make_number_value($$0108) | 0; //@line 8923
       label = 34; //@line 8924
       break;
      }
     case 2:
      {
       $$0112$ph = _ecma_make_string_value(_ecma_get_magic_string(SAFE_HEAP_LOAD($$0107$lcssa + 4 | 0, 2, 1) | 0 | 0) | 0) | 0; //@line 8933
       label = 34; //@line 8934
       break;
      }
     case 3:
      {
       $$0112$ph = _ecma_make_object_value(_ecma_builtin_get(SAFE_HEAP_LOAD($$0107$lcssa + 4 | 0, 2, 1) | 0 | 0) | 0) | 0; //@line 8943
       label = 34; //@line 8944
       break;
      }
     case 4:
      {
       $75 = SAFE_HEAP_LOAD($$0107$lcssa + 4 | 0, 2, 0) | 0 | 0; //@line 8949
       $$0112$ph = _ecma_make_object_value(_ecma_builtin_make_function_object_for_routine($22, ($75 & 65535) >>> 4, $75 & 15) | 0) | 0; //@line 8955
       label = 34; //@line 8956
       break;
      }
     case 5:
      {
       $82 = SAFE_HEAP_LOAD($$0107$lcssa + 4 | 0, 2, 0) | 0 | 0; //@line 8961
       $85 = _ecma_builtin_make_function_object_for_getter_accessor($22, ($82 & 65535) >>> 8) | 0; //@line 8964
       $$0109 = _ecma_builtin_make_function_object_for_setter_accessor($22, $82 & 255) | 0; //@line 8966
       $$0110 = $85; //@line 8966
       label = 30; //@line 8967
       break;
      }
     case 6:
      {
       $$0109 = 0; //@line 8974
       $$0110 = _ecma_builtin_make_function_object_for_getter_accessor($22, SAFE_HEAP_LOAD($$0107$lcssa + 4 | 0, 2, 0) | 0 | 0) | 0; //@line 8974
       label = 30; //@line 8975
       break;
      }
     default:
      {}
     }
     if ((label | 0) == 30) {
      _ecma_create_named_accessor_property($0, $1, $$0110, $$0109, SAFE_HEAP_LOAD($$0107$lcssa + 3 >> 0 | 0, 1, 0) | 0 | 0, $2) | 0; //@line 8985
      if ($$0109 | 0) {
       _ecma_deref_object($$0109); //@line 8988
      }
      if (!$$0110) {
       $99 = $2; //@line 8992
      } else {
       _ecma_deref_object($$0110); //@line 8994
       $99 = $2; //@line 8995
      }
     } else if ((label | 0) == 34) {
      SAFE_HEAP_STORE(_ecma_create_named_data_property($0, $1, SAFE_HEAP_LOAD($$0107$lcssa + 3 >> 0 | 0, 1, 0) | 0 | 0, $2) | 0 | 0, $$0112$ph | 0, 4);
      if (_ecma_is_value_object($$0112$ph) | 0) {
       _ecma_free_value($$0112$ph); //@line 9005
       $99 = $2; //@line 9006
      } else {
       $99 = $2; //@line 9008
      }
     }
     $$3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 9012
    } else {
     $$3 = 0; //@line 9014
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 9019
 return $$3 | 0; //@line 9019
}
function _vm_init_loop($0) {
 $0 = $0 | 0;
 var $$0107$ph = 0, $$0108 = 0, $$0109 = 0, $$0110$ph = 0, $$0111 = 0, $$0112$ph = 0, $$0113119 = 0, $$1118 = 0, $1 = 0, $10 = 0, $109 = 0, $11 = 0, $113 = 0, $13 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $4 = 0, $49 = 0, $51 = 0, $54 = 0, $6 = 0, $61 = 0, $62 = 0, $64 = 0, $67 = 0, $74 = 0, $75 = 0, $77 = 0, $8 = 0, $86 = 0, $99 = 0, sp = 0;
 sp = STACKTOP; //@line 19169
 STACKTOP = STACKTOP + 16 | 0; //@line 19170
 $1 = sp; //@line 19171
 $2 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0; //@line 19172
 $3 = $0 + 4 | 0; //@line 19173
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0; //@line 19174
 SAFE_HEAP_STORE($1 | 0, $4 | 0, 4);
 $6 = SAFE_HEAP_LOAD($0 + 20 | 0, 4, 0) | 0 | 0; //@line 19177
 $8 = SAFE_HEAP_LOAD($2 + 4 | 0, 2, 0) | 0 | 0; //@line 19179
 $10 = ($8 & 8) != 0; //@line 19181
 $11 = _jmem_compress_pointer($2) | 0; //@line 19182
 $13 = ($8 & 2) == 0; //@line 19184
 if (!($8 & 4)) {
  $$0107$ph = SAFE_HEAP_LOAD($2 + 8 >> 0 | 0, 1, 1) | 0 | 0; //@line 19192
 } else {
  $$0107$ph = SAFE_HEAP_LOAD($2 + 10 | 0, 2, 0) | 0 | 0; //@line 19196
 }
 $22 = $$0107$ph & 65535; //@line 19198
 $23 = $13 ? 255 : 128; //@line 19199
 $24 = $13 ? 65025 : 32768; //@line 19200
 $25 = $0 + 12 | 0; //@line 19201
 $26 = $0 + 24 | 0; //@line 19202
 $27 = $0 + 8 | 0; //@line 19203
 $29 = $4; //@line 19204
 L5 : while (1) {
  $28 = SAFE_HEAP_LOAD($29 >> 0 | 0, 1, 0) | 0 | 0; //@line 19206
  L7 : do {
   switch ($28 << 24 >> 24) {
   case 65:
    {
     $31 = $29 + 2 | 0; //@line 19211
     SAFE_HEAP_STORE($1 | 0, $31 | 0, 4);
     $33 = SAFE_HEAP_LOAD($29 + 1 >> 0 | 0, 1, 1) | 0 | 0; //@line 19214
     if ($33 >>> 0 < $23 >>> 0) {
      $$0112$ph = $33; //@line 19217
     } else {
      SAFE_HEAP_STORE($1 | 0, $29 + 3 | 0, 4);
      $$0112$ph = (SAFE_HEAP_LOAD($31 >> 0 | 0, 1, 1) | 0 | $33 << 8) - $24 & 65535; //@line 19227
     }
     if ($22 >>> 0 <= $$0112$ph >>> 0) {
      $$0113119 = $22; //@line 19231
      while (1) {
       _vm_var_decl($0, _jmem_decompress_pointer(SAFE_HEAP_LOAD($6 + ($$0113119 << 1) | 0, 2, 1) | 0 | 0) | 0) | 0; //@line 19237
       if (($$0113119 | 0) == ($$0112$ph | 0)) {
        break;
       } else {
        $$0113119 = $$0113119 + 1 | 0; //@line 19243
       }
      }
     }
     break;
    }
   case 67:
   case 66:
    {
     $49 = $29 + 2 | 0; //@line 19251
     SAFE_HEAP_STORE($1 | 0, $49 | 0, 4);
     $51 = SAFE_HEAP_LOAD($29 + 1 >> 0 | 0, 1, 1) | 0 | 0; //@line 19254
     if ($51 >>> 0 < $23 >>> 0) {
      $$0111 = $51; //@line 19257
      $62 = $49; //@line 19257
     } else {
      $54 = $29 + 3 | 0; //@line 19260
      SAFE_HEAP_STORE($1 | 0, $54 | 0, 4);
      $$0111 = (SAFE_HEAP_LOAD($49 >> 0 | 0, 1, 1) | 0 | $51 << 8) - $24 & 65535; //@line 19267
      $62 = $54; //@line 19267
     }
     if ($28 << 24 >> 24 == 66) {
      $$0110$ph = $$0111; //@line 19271
      $113 = $62; //@line 19271
     } else {
      $61 = $62 + 1 | 0; //@line 19273
      SAFE_HEAP_STORE($1 | 0, $61 | 0, 4);
      $64 = SAFE_HEAP_LOAD($62 >> 0 | 0, 1, 1) | 0 | 0; //@line 19276
      if ($64 >>> 0 < $23 >>> 0) {
       $$0110$ph = $64; //@line 19279
       $113 = $61; //@line 19279
      } else {
       $67 = $62 + 2 | 0; //@line 19282
       SAFE_HEAP_STORE($1 | 0, $67 | 0, 4);
       $$0110$ph = (SAFE_HEAP_LOAD($61 >> 0 | 0, 1, 1) | 0 | $64 << 8) - $24 & 65535; //@line 19289
       $113 = $67; //@line 19289
      }
     }
     if ($$0111 >>> 0 <= $$0110$ph >>> 0) {
      $$1118 = $$0111; //@line 19294
      $75 = $113; //@line 19294
      while (1) {
       $74 = $75 + 1 | 0; //@line 19296
       SAFE_HEAP_STORE($1 | 0, $74 | 0, 4);
       $77 = SAFE_HEAP_LOAD($75 >> 0 | 0, 1, 1) | 0 | 0; //@line 19299
       if ($77 >>> 0 < $23 >>> 0) {
        $$0109 = $77; //@line 19302
       } else {
        SAFE_HEAP_STORE($1 | 0, $75 + 2 | 0, 4);
        $$0109 = (SAFE_HEAP_LOAD($74 >> 0 | 0, 1, 1) | 0 | $77 << 8) - $24 & 65535; //@line 19312
       }
       $86 = $$0109 >>> 0 < $22 >>> 0; //@line 19314
       if ($86) {
        $$0108 = SAFE_HEAP_LOAD((SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0) + ($$0109 << 2) | 0, 4, 0) | 0 | 0; //@line 19319
       } else {
        $$0108 = _vm_construct_literal_object($0, SAFE_HEAP_LOAD($6 + ($$0109 << 1) | 0, 2, 0) | 0 | 0) | 0; //@line 19324
       }
       if ($$1118 >>> 0 < $22 >>> 0) {
        SAFE_HEAP_STORE((SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0) + ($$1118 << 2) | 0, $$0108 | 0, 4);
       } else {
        $99 = _jmem_decompress_pointer(SAFE_HEAP_LOAD($6 + ($$1118 << 1) | 0, 2, 1) | 0 | 0) | 0; //@line 19335
        if ($11 << 16 >> 16 == (SAFE_HEAP_LOAD($6 + ($$0109 << 1) | 0, 2, 0) | 0 | 0)) {
         _ecma_op_create_immutable_binding(SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0, $99, $$0108); //@line 19341
        } else {
         _vm_var_decl($0, $99) | 0; //@line 19343
         if ((_ecma_op_put_value_lex_env_base(_ecma_op_resolve_reference_base(SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0, $99) | 0, $99, $10, $$0108) | 0) == 24) {
          _ecma_free_value(SAFE_HEAP_LOAD(134113 * 4 | 0, 4, 0) | 0 | 0); //@line 19350
         }
        }
        if (!$86) {
         _ecma_free_value($$0108); //@line 19354
        }
       }
       $109 = $$1118 + 1 | 0; //@line 19357
       if ($109 >>> 0 > $$0110$ph >>> 0) {
        break L7;
       }
       $$1118 = $109; //@line 19363
       $75 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 19363
      }
     }
     break;
    }
   case 68:
    {
     _memcpy($1 | 0, $29 + 1 | 0, 4) | 0; //@line 19370
     SAFE_HEAP_STORE($27 | 0, SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0, 4);
     break;
    }
   default:
    {
     break L5;
    }
   }
  } while (0);
  $29 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 19381
 }
 SAFE_HEAP_STORE($3 | 0, $29 | 0, 4);
 STACKTOP = sp; //@line 19384
 return;
}
function _ecma_gc_free_object($0) {
 $0 = $0 | 0;
 var $$0140154 = 0, $$0141156 = 0, $$0142 = 0, $$0146153 = 0, $$0157 = 0, $$1 = 0, $$sink = 0, $1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $24 = 0, $28 = 0, $32 = 0, $47 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $62 = 0, $68 = 0, $70 = 0, $71 = 0, label = 0;
 $1 = _ecma_is_lexical_environment($0) | 0; //@line 1117
 if ($1) {
  if ((_ecma_get_lex_env_type($0) | 0) == 13) {
   label = 4; //@line 1122
  } else {
   SAFE_HEAP_STORE(134109 * 4 | 0, (SAFE_HEAP_LOAD(134109 * 4 | 0, 4, 0) | 0 | 0) + -1 | 0, 4);
   label = 43; //@line 1127
  }
 } else {
  label = 4; //@line 1130
 }
 L4 : do {
  if ((label | 0) == 4) {
   $6 = _ecma_get_property_list($0) | 0; //@line 1134
   L6 : do {
    if ($6 | 0) {
     if ((SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0) == 4) {
      _ecma_property_hashmap_free($0); //@line 1141
      $10 = _ecma_get_property_list($0) | 0; //@line 1142
      if (!$10) {
       break;
      } else {
       $$0157 = $10; //@line 1147
      }
     } else {
      $$0157 = $6; //@line 1150
     }
     while (1) {
      $12 = $$0157 + 12 | 0; //@line 1153
      $$0141156 = 0; //@line 1154
      do {
       $16 = $$0157 + $$0141156 | 0; //@line 1156
       $18 = SAFE_HEAP_LOAD($12 + ($$0141156 << 1) | 0, 2, 0) | 0 | 0; //@line 1158
       $19 = SAFE_HEAP_LOAD($16 >> 0 | 0, 1, 0) | 0 | 0; //@line 1159
       if (($19 & -64) << 24 >> 24 == 64 & ($18 & -2) << 16 >> 16 == 80) {
        _ecma_gc_free_native_pointer($16, $18 & 65535); //@line 1167
        $24 = SAFE_HEAP_LOAD($16 >> 0 | 0, 1, 0) | 0 | 0; //@line 1169
       } else {
        $24 = $19; //@line 1171
       }
       if ($24 << 24 >> 24) {
        _ecma_free_property($0, $18, $16); //@line 1175
       }
       $$0141156 = $$0141156 + 1 | 0; //@line 1177
      } while (($$0141156 | 0) != 2);
      $14 = SAFE_HEAP_LOAD($$0157 + 2 | 0, 2, 0) | 0 | 0; //@line 1186
      if (!($14 << 16 >> 16)) {
       break;
      }
      $28 = _jmem_decompress_pointer($14 & 65535) | 0; //@line 1192
      _ecma_dealloc_property_pair($$0157); //@line 1193
      if (!$28) {
       break L6;
      } else {
       $$0157 = $28; //@line 1198
      }
     }
     _ecma_dealloc_property_pair($$0157); //@line 1201
    }
   } while (0);
   SAFE_HEAP_STORE(134109 * 4 | 0, (SAFE_HEAP_LOAD(134109 * 4 | 0, 4, 0) | 0 | 0) + -1 | 0, 4);
   if ($1) {
    label = 43; //@line 1208
   } else {
    $32 = _ecma_get_object_type($0) | 0; //@line 1210
    if (_ecma_get_object_is_builtin($0) | 0) {
     switch ($32 | 0) {
     case 1:
     case 4:
      {
       $$0142 = 24; //@line 1215
       $$sink = 2; //@line 1215
       break;
      }
     default:
      {
       $$0142 = 16; //@line 1219
       $$sink = 1; //@line 1219
      }
     }
     $$1 = ((SAFE_HEAP_LOAD($0 + ($$sink << 3) + 1 >> 0 | 0, 1, 1) | 0 | 0) >>> 5 << 3) + $$0142 | 0; //@line 1229
    } else {
     $$1 = 16; //@line 1231
    }
    if (($32 | 0) == 1) {
     switch (SAFE_HEAP_LOAD($0 + 8 | 0, 2, 0) | 0 | 0) {
     case 20:
     case 37:
     case 51:
     case 57:
      {
       break;
      }
     case 25:
     case 28:
      {
       _ecma_free_value(SAFE_HEAP_LOAD($0 + 12 | 0, 4, 0) | 0 | 0); //@line 1244
       break;
      }
     case 9:
      {
       _ecma_dealloc_number(SAFE_HEAP_LOAD($0 + 12 | 0, 4, 0) | 0 | 0); //@line 1250
       break;
      }
     case 27:
      {
       $47 = SAFE_HEAP_LOAD($0 + 12 | 0, 4, 0) | 0 | 0; //@line 1255
       if ($47 | 0) {
        _ecma_bytecode_deref($47); //@line 1258
       }
       break;
      }
     default:
      {}
     }
     _ecma_dealloc_extended_object($0, $$1); //@line 1266
     break;
    }
    if (($32 + -3 | 0) >>> 0 < 2 | (_ecma_get_object_is_builtin($0) | 0)) {
     _ecma_dealloc_extended_object($0, $$1); //@line 1274
     break;
    }
    switch ($32 | 0) {
    case 2:
     {
      _ecma_bytecode_deref(SAFE_HEAP_LOAD($0 + 12 | 0, 4, 0) | 0 | 0); //@line 1281
      _ecma_dealloc_extended_object($0, 16); //@line 1282
      break L4;
      break;
     }
    case 6:
     {
      $55 = SAFE_HEAP_LOAD($0 + 10 | 0, 2, 0) | 0 | 0; //@line 1288
      $56 = $55 & 65535; //@line 1289
      $57 = $0 + 16 | 0; //@line 1290
      if ($55 << 16 >> 16) {
       $$0146153 = 0; //@line 1293
       do {
        $62 = SAFE_HEAP_LOAD($57 + ($$0146153 << 1) | 0, 2, 0) | 0 | 0; //@line 1296
        if ($62 << 16 >> 16) {
         _ecma_deref_ecma_string(_jmem_decompress_pointer($62 & 65535) | 0); //@line 1301
        }
        $$0146153 = $$0146153 + 1 | 0; //@line 1303
       } while (($$0146153 | 0) != ($56 | 0));
      }
      _ecma_dealloc_extended_object($0, ($56 << 1) + 16 | 0); //@line 1314
      break L4;
      break;
     }
    case 5:
     {
      $68 = SAFE_HEAP_LOAD($0 + 12 | 0, 4, 0) | 0 | 0; //@line 1320
      if (!(_ecma_is_value_integer_number($68) | 0)) {
       _ecma_free_value_if_not_object($68); //@line 1323
       _ecma_dealloc_extended_object($0, 16); //@line 1324
       break L4;
      }
      $70 = _ecma_get_integer_from_value($68) | 0; //@line 1327
      $71 = $0 + 16 | 0; //@line 1328
      if (($70 | 0) > 0) {
       $$0140154 = 0; //@line 1331
       do {
        _ecma_free_value_if_not_object(SAFE_HEAP_LOAD($71 + ($$0140154 << 2) | 0, 4, 0) | 0 | 0); //@line 1335
        $$0140154 = $$0140154 + 1 | 0; //@line 1336
       } while (($$0140154 | 0) != ($70 | 0));
      }
      _ecma_dealloc_extended_object($0, ($70 << 2) + 16 | 0); //@line 1347
      break L4;
      break;
     }
    default:
     {
      label = 43; //@line 1352
      break L4;
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 43) {
  _ecma_dealloc_object($0); //@line 1360
 }
 return;
}
function _parser_generate_initializers($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$$296 = 0, $$091 = 0, $$092 = 0, $$093 = 0, $$094 = 0, $$094$ph = 0, $$1$ph = 0, $$2 = 0, $$296$be = 0, $$296$ph108 = 0, $$296106 = 0, $$3$ph$lcssa = 0, $$3$ph109 = 0, $$pre$phiZ2D = 0, $$sink8 = 0, $16 = 0, $17 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $49 = 0, $52 = 0, $68 = 0, $7 = 0, $70 = 0, $71 = 0, $77 = 0, $82 = 0, $84 = 0, $86 = 0, $93 = 0, $94 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18116
 STACKTOP = STACKTOP + 16 | 0; //@line 18117
 $7 = sp; //@line 18118
 if ((SAFE_HEAP_LOAD($0 + 244 | 0, 2, 1) | 0 | 0) < ($3 & 65535)) {
  SAFE_HEAP_STORE($1 >> 0 | 0, 65 | 0, 1);
  $$092 = _parser_encode_literal($1 + 1 | 0, ($3 & 65535) + 65535 & 65535, $6) | 0; //@line 18129
 } else {
  $$092 = $1; //@line 18131
 }
 $16 = $0 + 168 | 0; //@line 18133
 $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0; //@line 18134
 L4 : do {
  if (!($17 & 16384)) {
   $$2 = $$092; //@line 18140
   $$pre$phiZ2D = $0 + 264 | 0; //@line 18140
  } else {
   SAFE_HEAP_STORE($16 | 0, $17 | 1024 | 0, 4);
   SAFE_HEAP_STORE($$092 >> 0 | 0, 67 | 0, 1);
   $26 = _parser_encode_literal(_parser_encode_literal($$092 + 1 | 0, $3, $6) | 0, ($4 & 65535) + 65535 & 65535, $6) | 0; //@line 18150
   $27 = $0 + 264 | 0; //@line 18151
   _parser_list_iterator_init($27, $7); //@line 18152
   $$094$ph = 0; //@line 18153
   $$1$ph = $26; //@line 18153
   while (1) {
    $$094 = $$094$ph; //@line 18155
    do {
     $28 = _parser_list_iterator_next($7) | 0; //@line 18157
     if (!$28) {
      $$2 = $$1$ph; //@line 18160
      $$pre$phiZ2D = $27; //@line 18160
      break L4;
     }
     $30 = $28 + 7 | 0; //@line 18163
     $32 = SAFE_HEAP_LOAD($30 >> 0 | 0, 1, 1) | 0 | 0; //@line 18165
     $34 = ($32 & 16 | 0) == 0; //@line 18167
     $$094 = (($34 ^ 1) & 1) + $$094 << 16 >> 16; //@line 18170
    } while (($32 & 7 | 0) != 7);
    SAFE_HEAP_STORE($30 >> 0 | 0, $32 & 251 | 0, 1);
    do {
     if (!($32 & 8)) {
      if ($34) {
       $$093 = SAFE_HEAP_LOAD((_parser_list_iterator_next($7) | 0) + 4 | 0, 2, 0) | 0 | 0; //@line 18190
       break;
      } else {
       $$093 = ($$094 & 65535) + 65535 & 65535; //@line 18196
       break;
      }
     } else {
      $$093 = $5; //@line 18200
     }
    } while (0);
    $$094$ph = $$094; //@line 18204
    $$1$ph = _parser_encode_literal($$1$ph, $$093, $6) | 0; //@line 18204
   }
  }
 } while (0);
 _parser_list_iterator_init($$pre$phiZ2D, $7); //@line 18208
 $49 = _parser_list_iterator_next($7) | 0; //@line 18209
 L20 : do {
  if (!$49) {
   $$3$ph$lcssa = $$2; //@line 18213
  } else {
   $$296$ph108 = 0; //@line 18215
   $$3$ph109 = $$2; //@line 18215
   $96 = $49; //@line 18215
   while (1) {
    $$296106 = $$296$ph108; //@line 18217
    $52 = $96; //@line 18217
    while (1) {
     switch (SAFE_HEAP_LOAD($52 + 6 >> 0 | 0, 1, 0) | 0 | 0) {
     case 5:
      {
       break;
      }
     case 1:
     case 0:
      {
       if (!((SAFE_HEAP_LOAD($52 + 7 >> 0 | 0, 1, 0) | 0) & 32)) {
        $$sink8 = SAFE_HEAP_LOAD($52 | 0, 2, 0) | 0 | 0; //@line 18232
        label = 21; //@line 18233
       }
       break;
      }
     case 4:
     case 3:
      {
       $$sink8 = _jmem_compress_pointer(SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0) | 0; //@line 18240
       label = 21; //@line 18241
       break;
      }
     default:
      {
       $$sink8 = SAFE_HEAP_LOAD($52 | 0, 2, 0) | 0 | 0; //@line 18246
       label = 21; //@line 18247
      }
     }
     if ((label | 0) == 21) {
      label = 0; //@line 18251
      SAFE_HEAP_STORE($2 + ((SAFE_HEAP_LOAD($52 + 4 | 0, 2, 1) | 0) << 1) | 0, $$sink8 | 0, 2);
     }
     $68 = SAFE_HEAP_LOAD($52 + 7 >> 0 | 0, 1, 1) | 0 | 0; //@line 18260
     $70 = ($68 & 16 | 0) != 0; //@line 18262
     $71 = $$296106 + 1 << 16 >> 16; //@line 18263
     $$$296 = $70 ? $71 : $$296106; //@line 18264
     if (($68 & 5 | 0) == 5) {
      $77 = SAFE_HEAP_LOAD($52 + 4 | 0, 2, 0) | 0 | 0; //@line 18269
      if ($68 & 8 | 0) {
       $$091 = $5; //@line 18273
       break;
      }
      if (!$70) {
       label = 27; //@line 18277
       break;
      }
      $82 = ($$$296 & 65535) + 65535 & 65535; //@line 18282
      if ($77 << 16 >> 16 == $82 << 16 >> 16) {
       $$296$be = $71; //@line 18285
      } else {
       $$091 = $82; //@line 18287
       break;
      }
     } else {
      $$296$be = $$$296; //@line 18291
     }
     $52 = _parser_list_iterator_next($7) | 0; //@line 18293
     if (!$52) {
      $$3$ph$lcssa = $$3$ph109; //@line 18296
      break L20;
     } else {
      $$296106 = $$296$be; //@line 18299
     }
    }
    if ((label | 0) == 27) {
     label = 0; //@line 18303
     $84 = _parser_list_iterator_next($7) | 0; //@line 18304
     $86 = SAFE_HEAP_LOAD($84 + 4 | 0, 2, 0) | 0 | 0; //@line 18306
     SAFE_HEAP_STORE($2 + (($86 & 65535) << 1) | 0, _jmem_compress_pointer(SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0) | 0 | 0, 2);
     $$091 = $86; //@line 18312
    }
    SAFE_HEAP_STORE($$3$ph109 >> 0 | 0, 66 | 0, 1);
    $93 = _parser_encode_literal(_parser_encode_literal($$3$ph109 + 1 | 0, $77, $6) | 0, $$091, $6) | 0; //@line 18317
    $94 = _parser_list_iterator_next($7) | 0; //@line 18318
    if (!$94) {
     $$3$ph$lcssa = $93; //@line 18321
     break;
    } else {
     $$296$ph108 = $$$296; //@line 18324
     $$3$ph109 = $93; //@line 18324
     $96 = $94; //@line 18324
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 18329
 return $$3$ph$lcssa | 0; //@line 18329
}
function _lexer_parse_number($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$3$pn = 0, $$4 = 0, $$5 = 0, $$6 = 0, $$7 = 0, $$8 = 0, $1 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $23 = 0, $36 = 0, $4 = 0, $43 = 0, $57 = 0, $64 = 0, $7 = 0, $74 = 0, $78 = 0, label = 0;
 $1 = $0 + 216 | 0; //@line 8293
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 8294
 $4 = SAFE_HEAP_LOAD($0 + 220 | 0, 4, 0) | 0 | 0; //@line 8296
 SAFE_HEAP_STORE($0 + 188 >> 0 | 0, 1 | 0, 1);
 SAFE_HEAP_STORE($0 + 189 >> 0 | 0, 0 | 0, 1);
 $7 = $0 + 190 | 0; //@line 8301
 SAFE_HEAP_STORE($7 >> 0 | 0, 0 | 0, 1);
 SAFE_HEAP_STORE($0 + 200 | 0, $2 | 0, 4);
 SAFE_HEAP_STORE($0 + 206 >> 0 | 0, 2 | 0, 1);
 SAFE_HEAP_STORE($0 + 207 >> 0 | 0, 0 | 0, 1);
 L1 : do {
  if ((SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0) == 48) {
   $13 = $2 + 1 | 0; //@line 8313
   if ($13 >>> 0 < $4 >>> 0) {
    $15 = SAFE_HEAP_LOAD($13 >> 0 | 0, 1, 0) | 0 | 0; //@line 8316
    if (($15 | 32) << 24 >> 24 == 120) {
     SAFE_HEAP_STORE($7 >> 0 | 0, 1 | 0, 1);
     $18 = $2 + 2 | 0; //@line 8321
     if ($18 >>> 0 < $4 >>> 0) {
      if (_lit_char_is_hex_digit(SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 1) | 0 | 0) | 0) {
       $$0 = $18; //@line 8328
       while (1) {
        $23 = $$0 + 1 | 0; //@line 8330
        if ($23 >>> 0 >= $4 >>> 0) {
         $$8 = $23; //@line 8333
         break L1;
        }
        if (_lit_char_is_hex_digit(SAFE_HEAP_LOAD($23 >> 0 | 0, 1, 1) | 0 | 0) | 0) {
         $$0 = $23; //@line 8340
        } else {
         $$8 = $23; //@line 8342
         break L1;
        }
       }
      }
     }
     _parser_raise_error($0, 7); //@line 8348
    }
    if (($15 & -8) << 24 >> 24 != 48) {
     if (($15 & -2) << 24 >> 24 != 56) {
      $$3 = $13; //@line 8357
      label = 20; //@line 8358
      break;
     }
     _parser_raise_error($0, 12); //@line 8361
    }
    SAFE_HEAP_STORE($7 >> 0 | 0, 2 | 0, 1);
    if (!((SAFE_HEAP_LOAD($0 + 168 | 0, 4, 0) | 0) & 1)) {
     $$1 = $2; //@line 8370
    } else {
     _parser_raise_error($0, 27); //@line 8372
    }
    do {
     $$1 = $$1 + 1 | 0; //@line 8376
     if ($$1 >>> 0 >= $4 >>> 0) {
      $$8 = $$1; //@line 8379
      break L1;
     }
     $36 = SAFE_HEAP_LOAD($$1 >> 0 | 0, 1, 0) | 0 | 0; //@line 8382
    } while (($36 & -8) << 24 >> 24 == 48);
    if (($36 & -2) << 24 >> 24 == 56) {
     _parser_raise_error($0, 12); //@line 8394
    } else {
     $$8 = $$1; //@line 8397
    }
   } else {
    $$2 = $2; //@line 8400
    label = 18; //@line 8401
   }
  } else {
   $$2 = $2; //@line 8404
   label = 18; //@line 8405
  }
 } while (0);
 L24 : do {
  if ((label | 0) == 18) {
   while (1) {
    label = 0; //@line 8411
    $43 = $$2 + 1 | 0; //@line 8412
    if ($43 >>> 0 >= $4 >>> 0) {
     $$3 = $43; //@line 8415
     label = 20; //@line 8416
     break L24;
    }
    if (((SAFE_HEAP_LOAD($43 >> 0 | 0, 1, 0) | 0 | 0) + -48 & 255) < 10) {
     $$2 = $43; //@line 8423
     label = 18; //@line 8424
    } else {
     $$3 = $43; //@line 8426
     label = 20; //@line 8427
     break;
    }
   }
  }
 } while (0);
 L28 : do {
  if ((label | 0) == 20) {
   L30 : do {
    if ($$3 >>> 0 < $4 >>> 0) {
     if ((SAFE_HEAP_LOAD($$3 >> 0 | 0, 1, 0) | 0 | 0) == 46) {
      $$3$pn = $$3; //@line 8441
      while (1) {
       $$4 = $$3$pn + 1 | 0; //@line 8443
       if ($$4 >>> 0 >= $4 >>> 0) {
        $$5 = $$4; //@line 8446
        break L30;
       }
       if (((SAFE_HEAP_LOAD($$4 >> 0 | 0, 1, 0) | 0 | 0) + -48 & 255) < 10) {
        $$3$pn = $$4; //@line 8453
       } else {
        $$5 = $$4; //@line 8455
        break;
       }
      }
     } else {
      $$5 = $$3; //@line 8460
     }
    } else {
     $$5 = $$3; //@line 8463
    }
   } while (0);
   if ($$5 >>> 0 < $4 >>> 0) {
    if ((SAFE_HEAP_LOAD($$5 >> 0 | 0, 1, 0) | 0 | 32) << 24 >> 24 == 101) {
     $57 = $$5 + 1 | 0; //@line 8472
     L38 : do {
      if ($57 >>> 0 < $4 >>> 0) {
       switch (SAFE_HEAP_LOAD($57 >> 0 | 0, 1, 0) | 0 | 0) {
       case 45:
       case 43:
        {
         break;
        }
       default:
        {
         $$6 = $57; //@line 8482
         break L38;
        }
       }
       $$6 = $$5 + 2 | 0; //@line 8487
      } else {
       $$6 = $57; //@line 8489
      }
     } while (0);
     if ($$6 >>> 0 < $4 >>> 0) {
      if (((SAFE_HEAP_LOAD($$6 >> 0 | 0, 1, 0) | 0 | 0) + -48 & 255) <= 9) {
       $$7 = $$6; //@line 8498
       while (1) {
        $64 = $$7 + 1 | 0; //@line 8500
        if ($64 >>> 0 >= $4 >>> 0) {
         $$8 = $64; //@line 8503
         break L28;
        }
        if (((SAFE_HEAP_LOAD($64 >> 0 | 0, 1, 0) | 0 | 0) + -48 & 255) < 10) {
         $$7 = $64; //@line 8510
        } else {
         $$8 = $64; //@line 8512
         break L28;
        }
       }
      }
     }
     _parser_raise_error($0, 13); //@line 8518
    } else {
     $$8 = $$5; //@line 8521
    }
   } else {
    $$8 = $$5; //@line 8524
   }
  }
 } while (0);
 do {
  if ($$8 >>> 0 < $4 >>> 0) {
   if (!(_lit_char_is_identifier_start($$8) | 0)) {
    if ((SAFE_HEAP_LOAD($$8 >> 0 | 0, 1, 0) | 0 | 0) != 92) {
     break;
    }
   }
   _parser_raise_error($0, 14); //@line 8539
  }
 } while (0);
 $74 = $$8 - (SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) | 0; //@line 8545
 if ($74 >>> 0 > 255) {
  _parser_raise_error($0, 21); //@line 8548
 } else {
  SAFE_HEAP_STORE($0 + 204 | 0, $74 | 0, 2);
  $78 = $0 + 228 | 0; //@line 8554
  SAFE_HEAP_STORE($78 | 0, (SAFE_HEAP_LOAD($78 | 0, 4, 0) | 0 | 0) + $74 | 0, 4);
  SAFE_HEAP_STORE($1 | 0, $$8 | 0, 4);
  return;
 }
}
function _parser_parse_unary_expression($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$$071$off0 = 0, $$0 = 0, $$071$off0$lcssa = 0, $$071$off078 = 0, $$072 = 0, $$173 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $17 = 0, $2 = 0, $27 = 0, $29 = 0, $3 = 0, $4 = 0, $43 = 0, $49 = 0, label = 0;
 $2 = $0 + 188 | 0; //@line 14822
 $$072 = 0; //@line 14823
 L1 : while (1) {
  $3 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0; //@line 14825
  switch ($3 << 24 >> 24) {
  case 46:
   {
    $$sink = 6; //@line 14828
    label = 4; //@line 14829
    break;
   }
  case 47:
   {
    $$sink = 7; //@line 14833
    label = 4; //@line 14834
    break;
   }
  default:
   {
    $4 = $3; //@line 14838
   }
  }
  if ((label | 0) == 4) {
   label = 0; //@line 14842
   SAFE_HEAP_STORE($2 >> 0 | 0, $$sink | 0, 1);
   $4 = $$sink; //@line 14844
  }
  switch ($4 << 24 >> 24) {
  case 52:
   {
    SAFE_HEAP_STORE($1 | 0, (SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + 1 | 0, 4);
    $$173 = 0; //@line 14851
    break;
   }
  case 65:
   {
    $$173 = 1; //@line 14855
    break;
   }
  default:
   {
    if (($$072 | 0) == 0 & ($4 + -6 & 255) < 9) {
     $$173 = 0; //@line 14864
    } else {
     break L1;
    }
   }
  }
  _parser_stack_push_uint8($0, $4); //@line 14870
  _lexer_next_token($0); //@line 14871
  $$072 = $$173; //@line 14872
 }
 L13 : do {
  switch ($4 << 24 >> 24) {
  case 1:
   {
    $10 = $0 + 206 | 0; //@line 14877
    $11 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0; //@line 14878
    switch ($11 << 24 >> 24) {
    case 1:
    case 0:
     {
      _lexer_construct_literal_object($0, $0 + 200 | 0, $11); //@line 14882
      break;
     }
    case 2:
     {
      $12 = $0 + 304 | 0; //@line 14886
      $13 = SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0 | 0; //@line 14887
      if (($13 | 1) << 24 >> 24 == 7) {
       $$071$off078 = 0; //@line 14891
       $17 = $13; //@line 14891
       while (1) {
        $$$071$off0 = $$071$off078 ^ $17 << 24 >> 24 == 7; //@line 14894
        _parser_stack_pop_uint8($0); //@line 14895
        $17 = SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0 | 0; //@line 14896
        if (($17 | 1) << 24 >> 24 != 7) {
         $$071$off0$lcssa = $$$071$off0; //@line 14902
         break;
        } else {
         $$071$off078 = $$$071$off0; //@line 14900
        }
       }
      } else {
       $$071$off0$lcssa = 0; //@line 14907
      }
      if (_lexer_construct_number_object($0, 1, $$071$off0$lcssa) | 0) {
       if (!(SAFE_HEAP_LOAD($0 + 212 | 0, 2, 0) | 0)) {
        _parser_emit_cbc($0, 49); //@line 14915
        break L13;
       } else {
        _parser_emit_cbc_push_number($0, $$071$off0$lcssa); //@line 14918
        break L13;
       }
      }
      break;
     }
    default:
     {}
    }
    $27 = SAFE_HEAP_LOAD($0 + 214 >> 0 | 0, 1, 0) | 0 | 0; //@line 14928
    L28 : do {
     if ($27 << 24 >> 24 == 1) {
      $$0 = 40; //@line 14932
     } else {
      $29 = $0 + 240 | 0; //@line 14934
      switch (SAFE_HEAP_LOAD($29 | 0, 2, 0) | 0 | 0) {
      case 40:
       {
        SAFE_HEAP_STORE($29 | 0, 41 | 0, 2);
        SAFE_HEAP_STORE($0 + 234 | 0, SAFE_HEAP_LOAD($0 + 212 | 0, 2, 0) | 0 | 0 | 0, 2);
        SAFE_HEAP_STORE($0 + 238 >> 0 | 0, SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
        SAFE_HEAP_STORE($0 + 239 >> 0 | 0, $27 | 0, 1);
        break L13;
        break;
       }
      case 41:
       {
        SAFE_HEAP_STORE($29 | 0, 42 | 0, 2);
        SAFE_HEAP_STORE($0 + 236 | 0, SAFE_HEAP_LOAD($0 + 212 | 0, 2, 0) | 0 | 0 | 0, 2);
        SAFE_HEAP_STORE($0 + 238 >> 0 | 0, SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
        SAFE_HEAP_STORE($0 + 239 >> 0 | 0, $27 | 0, 1);
        break L13;
        break;
       }
      case 47:
       {
        SAFE_HEAP_STORE($29 | 0, 0 | 0, 2);
        $$0 = 48; //@line 14967
        break L28;
        break;
       }
      default:
       {
        $$0 = 40; //@line 14972
        break L28;
       }
      }
     }
    } while (0);
    _parser_emit_cbc_literal_from_token($0, $$0); //@line 14978
    break;
   }
  case 75:
   {
    _parser_parse_function_expression($0); //@line 14982
    break;
   }
  case 51:
   {
    _parser_parse_object_literal($0); //@line 14986
    break;
   }
  case 53:
   {
    _parser_parse_array_literal($0); //@line 14990
    break;
   }
  case 19:
  case 49:
   {
    _lexer_construct_regexp_object($0, 0); //@line 14994
    $43 = $0 + 240 | 0; //@line 14995
    $49 = (SAFE_HEAP_LOAD($0 + 246 | 0, 2, 1) | 0 | 0) + 65535 & 65535; //@line 15001
    switch (SAFE_HEAP_LOAD($43 | 0, 2, 0) | 0 | 0) {
    case 40:
     {
      SAFE_HEAP_STORE($43 | 0, 41 | 0, 2);
      SAFE_HEAP_STORE($0 + 234 | 0, $49 | 0, 2);
      break;
     }
    case 41:
     {
      SAFE_HEAP_STORE($43 | 0, 42 | 0, 2);
      SAFE_HEAP_STORE($0 + 236 | 0, $49 | 0, 2);
      break;
     }
    default:
     {
      _parser_emit_cbc_literal($0, 40, $49); //@line 15016
     }
    }
    SAFE_HEAP_STORE($0 + 238 >> 0 | 0, 4 | 0, 1);
    SAFE_HEAP_STORE($0 + 239 >> 0 | 0, 0 | 0, 1);
    break;
   }
  case 2:
   {
    _parser_emit_cbc($0, 47); //@line 15026
    break;
   }
  case 3:
   {
    _parser_emit_cbc($0, 44); //@line 15030
    break;
   }
  case 4:
   {
    _parser_emit_cbc($0, 45); //@line 15034
    break;
   }
  case 5:
   {
    _parser_emit_cbc($0, 46); //@line 15038
    break;
   }
  default:
   {
    _parser_raise_error($0, 53); //@line 15042
   }
  }
 } while (0);
 _lexer_next_token($0); //@line 15047
 return;
}
function _lexer_parse_identifier($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$092 = 0, $$092$pn = 0, $$093 = 0, $$096 = 0, $$1 = 0, $$194 = 0, $$194$in = 0, $$197 = 0, $$2 = 0, $$295 = 0, $$295$off = 0, $11 = 0, $12 = 0, $15 = 0, $2 = 0, $21 = 0, $28 = 0, $3 = 0, $4 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $57 = 0, $63 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $2 = $0 + 216 | 0; //@line 8079
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 8080
 $4 = $0 + 228 | 0; //@line 8081
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0; //@line 8082
 $7 = SAFE_HEAP_LOAD($0 + 220 | 0, 4, 0) | 0 | 0; //@line 8084
 $8 = $0 + 188 | 0; //@line 8085
 SAFE_HEAP_STORE($8 >> 0 | 0, 1 | 0, 1);
 $9 = $0 + 189 | 0; //@line 8087
 SAFE_HEAP_STORE($9 >> 0 | 0, 0 | 0, 1);
 SAFE_HEAP_STORE($0 + 206 >> 0 | 0, 0 | 0, 1);
 $11 = $0 + 207 | 0; //@line 8091
 SAFE_HEAP_STORE($11 >> 0 | 0, 0 | 0, 1);
 $12 = $0 + 196 | 0; //@line 8093
 $$092 = $3; //@line 8094
 $$093 = 0; //@line 8094
 $$096 = $5; //@line 8094
 L1 : while (1) {
  L3 : do {
   if ((SAFE_HEAP_LOAD($$092 >> 0 | 0, 1, 0) | 0 | 0) == 92) {
    SAFE_HEAP_STORE($11 >> 0 | 0, 1 | 0, 1);
    SAFE_HEAP_STORE($2 | 0, $$092 | 0, 4);
    SAFE_HEAP_STORE($12 | 0, $$096 | 0, 4);
    $15 = $$092 + 6 | 0; //@line 8103
    if ($15 >>> 0 > $7 >>> 0) {
     label = 5; //@line 8106
     break L1;
    }
    if ((SAFE_HEAP_LOAD($$092 + 1 >> 0 | 0, 1, 0) | 0 | 0) != 117) {
     label = 5; //@line 8113
     break L1;
    }
    $21 = _lexer_hex_to_character($0, $$092 + 2 | 0, 4) | 0; //@line 8117
    if (!$$093) {
     if (!(_lit_char_is_identifier_start_character($21) | 0)) {
      label = 8; //@line 8122
      break L1;
     }
    } else {
     if (!(_lit_char_is_identifier_part_character($21) | 0)) {
      label = 10; //@line 8128
      break L1;
     }
    }
    $$197 = $$096 + 6 | 0; //@line 8135
    $$2 = $15; //@line 8135
    $$295 = (_lit_char_get_utf8_length($21) | 0) + $$093 | 0; //@line 8135
   } else {
    $28 = $$096 + 1 | 0; //@line 8137
    $$092$pn = $$092; //@line 8138
    $$194$in = $$093; //@line 8138
    while (1) {
     $$1 = $$092$pn + 1 | 0; //@line 8140
     $$194 = $$194$in + 1 | 0; //@line 8141
     if ($$1 >>> 0 >= $7 >>> 0) {
      $$197 = $28; //@line 8144
      $$2 = $$1; //@line 8144
      $$295 = $$194; //@line 8144
      break L3;
     }
     if (((SAFE_HEAP_LOAD($$1 >> 0 | 0, 1, 0) | 0) & -64) << 24 >> 24 == -128) {
      $$092$pn = $$1; //@line 8151
      $$194$in = $$194; //@line 8151
     } else {
      $$197 = $28; //@line 8153
      $$2 = $$1; //@line 8153
      $$295 = $$194; //@line 8153
      break;
     }
    }
   }
  } while (0);
  if ($$2 >>> 0 >= $7 >>> 0) {
   label = 18; //@line 8161
   break;
  }
  if (_lit_char_is_identifier_part($$2) | 0) {
   $$092 = $$2; //@line 8166
   $$093 = $$295; //@line 8166
   $$096 = $$197; //@line 8166
   continue;
  }
  if ((SAFE_HEAP_LOAD($$2 >> 0 | 0, 1, 0) | 0 | 0) == 92) {
   $$092 = $$2; //@line 8172
   $$093 = $$295; //@line 8172
   $$096 = $$197; //@line 8172
  } else {
   label = 18; //@line 8174
   break;
  }
 }
 if ((label | 0) == 5) {
  _parser_raise_error($0, 9); //@line 8179
 } else if ((label | 0) == 8) {
  _parser_raise_error($0, 10); //@line 8183
 } else if ((label | 0) == 10) {
  _parser_raise_error($0, 11); //@line 8187
 } else if ((label | 0) == 18) {
  SAFE_HEAP_STORE($2 | 0, $3 | 0, 4);
  SAFE_HEAP_STORE($12 | 0, SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0, 4);
  if ($$295 >>> 0 > 255) {
   _parser_raise_error($0, 19); //@line 8196
  }
  L23 : do {
   if ($1) {
    $$295$off = $$295 + -2 | 0; //@line 8203
    if ($$295$off >>> 0 < 9 & (SAFE_HEAP_LOAD($11 >> 0 | 0, 1, 0) | 0 | 0) == 0) {
     $45 = SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 0) | 0 | 0; //@line 8209
     $46 = $3 + 1 | 0; //@line 8210
     $$0 = SAFE_HEAP_LOAD(544 + ($$295$off << 2) | 0, 4, 0) | 0 | 0; //@line 8211
     while (1) {
      $47 = SAFE_HEAP_LOAD($$0 | 0, 4, 0) | 0 | 0; //@line 8213
      if ($45 << 24 >> 24 == (SAFE_HEAP_LOAD($47 >> 0 | 0, 1, 0) | 0 | 0)) {
       if ((SAFE_HEAP_LOAD($46 >> 0 | 0, 1, 0) | 0 | 0) == (SAFE_HEAP_LOAD($47 + 1 >> 0 | 0, 1, 0) | 0 | 0)) {
        if (!(_memcmp($3, $47, $$295) | 0)) {
         break;
        }
       }
      }
      if (!(SAFE_HEAP_LOAD($$0 + 12 | 0, 4, 0) | 0)) {
       label = 32; //@line 8234
       break L23;
      } else {
       $$0 = $$0 + 8 | 0; //@line 8237
      }
     }
     $57 = SAFE_HEAP_LOAD($$0 + 4 | 0, 4, 0) | 0 | 0; //@line 8241
     if ($57 >>> 0 <= 92) {
      $63 = $57 & 255; //@line 8244
      SAFE_HEAP_STORE($8 >> 0 | 0, $63 | 0, 1);
      $68 = $63; //@line 8246
      break;
     }
     if (!((SAFE_HEAP_LOAD($0 + 168 | 0, 4, 0) | 0) & 1)) {
      SAFE_HEAP_STORE($9 >> 0 | 0, 1 | 0, 1);
      label = 32; //@line 8255
      break;
     } else {
      _parser_raise_error($0, 29); //@line 8258
     }
    } else {
     label = 32; //@line 8262
    }
   } else {
    label = 32; //@line 8265
   }
  } while (0);
  if ((label | 0) == 32) {
   $68 = SAFE_HEAP_LOAD($8 >> 0 | 0, 1, 0) | 0 | 0; //@line 8270
  }
  if ($68 << 24 >> 24 == 1) {
   SAFE_HEAP_STORE($0 + 200 | 0, $3 | 0, 4);
   SAFE_HEAP_STORE($0 + 204 | 0, $$295 | 0, 2);
  }
  SAFE_HEAP_STORE($2 | 0, $$2 | 0, 4);
  SAFE_HEAP_STORE($4 | 0, $$197 | 0, 4);
  return;
 }
}
function _parser_append_binary_token($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$076 = 0, $$sink$sink = 0, $1 = 0, $2 = 0, $3 = 0, $33 = 0, $34 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 15665
 STACKTOP = STACKTOP + 16 | 0; //@line 15666
 $1 = sp; //@line 15667
 _parser_push_result($0); //@line 15668
 $2 = $0 + 188 | 0; //@line 15669
 $3 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0; //@line 15670
 L1 : do {
  if ($3 << 24 >> 24 == 15) {
   $5 = $0 + 240 | 0; //@line 15674
   $6 = SAFE_HEAP_LOAD($5 | 0, 2, 0) | 0 | 0; //@line 15675
   if (($6 + -40 & 65535) < 3) {
    if (!(SAFE_HEAP_LOAD($0 + 238 >> 0 | 0, 1, 0) | 0)) {
     L6 : do {
      if ((SAFE_HEAP_LOAD($0 + 168 | 0, 4, 0) | 0) & 1 | 0) {
       switch (SAFE_HEAP_LOAD($0 + 239 >> 0 | 0, 1, 0) | 0 | 0) {
       case 0:
        {
         break L6;
         break;
        }
       case 1:
        {
         $$0 = 33; //@line 15697
         break;
        }
       default:
        {
         $$0 = 34; //@line 15701
        }
       }
       _parser_raise_error($0, $$0); //@line 15704
      }
     } while (0);
     switch ($6 << 16 >> 16) {
     case 40:
      {
       _parser_stack_push_uint16($0, SAFE_HEAP_LOAD($0 + 232 | 0, 2, 0) | 0 | 0); //@line 15712
       $$sink$sink = 0; //@line 15713
       break;
      }
     case 41:
      {
       _parser_stack_push_uint16($0, SAFE_HEAP_LOAD($0 + 234 | 0, 2, 0) | 0 | 0); //@line 15719
       $$sink$sink = 40; //@line 15720
       break;
      }
     default:
      {
       _parser_stack_push_uint16($0, SAFE_HEAP_LOAD($0 + 236 | 0, 2, 0) | 0 | 0); //@line 15726
       $$sink$sink = 41; //@line 15727
      }
     }
     SAFE_HEAP_STORE($5 | 0, $$sink$sink | 0, 2);
     _parser_stack_push_uint8($0, -54); //@line 15731
     break;
    }
   }
   switch ($6 << 16 >> 16) {
   case 52:
    {
     _parser_stack_push_uint8($0, -57); //@line 15737
     SAFE_HEAP_STORE($5 | 0, 0 | 0, 2);
     break L1;
     break;
    }
   case 53:
    {
     if (!(SAFE_HEAP_LOAD($0 + 238 >> 0 | 0, 1, 0) | 0)) {
      SAFE_HEAP_STORE($5 | 0, 40 | 0, 2);
      _parser_stack_push_uint8($0, -57); //@line 15748
      break L1;
     } else {
      _parser_stack_push_uint16($0, SAFE_HEAP_LOAD($0 + 232 | 0, 2, 0) | 0 | 0); //@line 15753
      _parser_stack_push_uint8($0, -48); //@line 15754
      SAFE_HEAP_STORE($5 | 0, 0 | 0, 2);
      break L1;
     }
     break;
    }
   case 54:
    {
     SAFE_HEAP_STORE($5 | 0, 41 | 0, 2);
     _parser_stack_push_uint8($0, -57); //@line 15762
     break L1;
     break;
    }
   case 55:
    {
     if (!(SAFE_HEAP_LOAD($0 + 238 >> 0 | 0, 1, 0) | 0)) {
      SAFE_HEAP_STORE($5 | 0, 48 | 0, 2);
      _parser_stack_push_uint8($0, -57); //@line 15772
      break L1;
     } else {
      _parser_stack_push_uint16($0, SAFE_HEAP_LOAD($0 + 232 | 0, 2, 0) | 0 | 0); //@line 15777
      _parser_stack_push_uint8($0, -45); //@line 15778
      SAFE_HEAP_STORE($5 | 0, 0 | 0, 2);
      break L1;
     }
     break;
    }
   default:
    {
     _parser_emit_cbc($0, 272); //@line 15785
     _parser_stack_push_uint8($0, -57); //@line 15786
     break L1;
    }
   }
  } else {
   if (($3 + -15 & 255) >= 12) {
    if (($3 & -2) << 24 >> 24 != 28) {
     break;
    }
    _parser_emit_cbc_forward_branch($0, $3 << 24 >> 24 == 29 ? 33 : 29, $1); //@line 15801
    _parser_stack_push($0, $1, 8); //@line 15802
    break;
   }
   $33 = $0 + 240 | 0; //@line 15805
   $34 = SAFE_HEAP_LOAD($33 | 0, 2, 0) | 0 | 0; //@line 15806
   if (($34 + -40 & 65535) < 3) {
    if (!(SAFE_HEAP_LOAD($0 + 238 >> 0 | 0, 1, 0) | 0)) {
     L38 : do {
      if ((SAFE_HEAP_LOAD($0 + 168 | 0, 4, 0) | 0) & 1 | 0) {
       switch (SAFE_HEAP_LOAD($0 + 239 >> 0 | 0, 1, 0) | 0 | 0) {
       case 0:
        {
         break L38;
         break;
        }
       case 1:
        {
         $$076 = 33; //@line 15828
         break;
        }
       default:
        {
         $$076 = 34; //@line 15832
        }
       }
       _parser_raise_error($0, $$076); //@line 15835
      }
     } while (0);
     switch ($34 << 16 >> 16) {
     case 40:
      {
       SAFE_HEAP_STORE($33 | 0, 56 | 0, 2);
       break L1;
       break;
      }
     case 41:
      {
       SAFE_HEAP_STORE($33 | 0, 40 | 0, 2);
       _parser_emit_cbc_literal($0, 56, SAFE_HEAP_LOAD($0 + 234 | 0, 2, 0) | 0 | 0); //@line 15849
       break L1;
       break;
      }
     default:
      {
       SAFE_HEAP_STORE($33 | 0, 41 | 0, 2);
       _parser_emit_cbc_literal($0, 56, SAFE_HEAP_LOAD($0 + 236 | 0, 2, 0) | 0 | 0); //@line 15857
       break L1;
      }
     }
    }
   }
   switch ($34 << 16 >> 16) {
   case 52:
    {
     SAFE_HEAP_STORE($33 | 0, 57 | 0, 2);
     break L1;
     break;
    }
   case 53:
    {
     SAFE_HEAP_STORE($33 | 0, 58 | 0, 2);
     break L1;
     break;
    }
   case 54:
    {
     SAFE_HEAP_STORE($33 | 0, 59 | 0, 2);
     break L1;
     break;
    }
   case 55:
    {
     SAFE_HEAP_STORE($33 | 0, 60 | 0, 2);
     break L1;
     break;
    }
   default:
    {
     _parser_emit_cbc($0, 272); //@line 15885
     _parser_emit_cbc($0, 57); //@line 15886
     break L1;
    }
   }
  }
 } while (0);
 _parser_stack_push_uint8($0, SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0); //@line 15893
 STACKTOP = sp; //@line 15894
 return;
}
function _ecma_property_hashmap_create($0) {
 $0 = $0 | 0;
 var $$0123$lcssa = 0, $$0123$ph = 0, $$0123140 = 0, $$0124150 = 0, $$0126142 = 0, $$0127148 = 0, $$0128145 = 0, $$0130 = 0, $$0151 = 0, $$1125149 = 0, $$1129 = 0, $$1131144 = 0, $$1143 = 0, $$lcssa = 0, $19 = 0, $21 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $55 = 0, $6 = 0, $61 = 0, $65 = 0, $68 = 0, $72 = 0, $73 = 0, $79 = 0;
 L1 : do {
  if (!(SAFE_HEAP_LOAD(536468 | 0, 1, 0) | 0)) {
   $3 = _ecma_get_property_list($0) | 0; //@line 7930
   if ($3 | 0) {
    $$0124150 = 0; //@line 7933
    $$0151 = $3; //@line 7933
    while (1) {
     $$0127148 = 0; //@line 7935
     $$1125149 = $$0124150; //@line 7935
     do {
      $$1125149 = ((((SAFE_HEAP_LOAD($$0151 + $$0127148 >> 0 | 0, 1, 0) | 0) & 3) + -1 & 255) < 2 & 1) + $$1125149 | 0; //@line 7943
      $$0127148 = $$0127148 + 1 | 0; //@line 7944
     } while (($$0127148 | 0) != 2);
     $6 = SAFE_HEAP_LOAD($$0151 + 2 | 0, 2, 0) | 0 | 0; //@line 7953
     if (!($6 << 16 >> 16)) {
      break;
     }
     $$0151 = _jmem_decompress_pointer($6 & 65535) | 0; //@line 7959
     if (!$$0151) {
      break;
     } else {
      $$0124150 = $$1125149; //@line 7964
     }
    }
    if ($$1125149 >>> 0 >= 16) {
     $19 = ($$1125149 >>> 1) + $$1125149 | 0; //@line 7970
     $$0130 = 32; //@line 7971
     while (1) {
      $21 = $$0130 << 1; //@line 7974
      if ($$0130 >>> 0 < $19 >>> 0) {
       $$0130 = $21; //@line 7976
      } else {
       break;
      }
     }
     $24 = $21 + 16 + ($$0130 >>> 3) | 0; //@line 7983
     $25 = _jmem_heap_alloc_block_null_on_error($24) | 0; //@line 7984
     if ($25 | 0) {
      _memset($25 | 0, 0, $24 | 0) | 0; //@line 7987
      SAFE_HEAP_STORE($25 >> 0 | 0, 4 | 0, 1);
      $27 = $25 + 1 | 0; //@line 7989
      SAFE_HEAP_STORE($27 >> 0 | 0, 0 | 0, 1);
      $28 = $0 + 4 | 0; //@line 7991
      SAFE_HEAP_STORE($25 + 2 | 0, SAFE_HEAP_LOAD($28 | 0, 2, 0) | 0 | 0 | 0, 2);
      SAFE_HEAP_STORE($25 + 4 | 0, $$0130 | 0, 4);
      $32 = $$0130 - $$1125149 | 0; //@line 7997
      SAFE_HEAP_STORE($25 + 8 | 0, $32 | 0, 4);
      SAFE_HEAP_STORE($25 + 12 | 0, $32 | 0, 4);
      $35 = $25 + 16 | 0; //@line 8002
      $36 = $35 + ($$0130 << 1) | 0; //@line 8003
      $37 = $$0130 + -1 | 0; //@line 8004
      if ($$0130 >>> 0 < 65537) {
       SAFE_HEAP_STORE($27 >> 0 | 0, 0 | 0, 1);
       $$1129 = 0; //@line 8008
      } else {
       $$0128145 = 0; //@line 8010
       $$1131144 = $$0130; //@line 8010
       while (1) {
        $39 = $$0128145 + 1 << 24 >> 24; //@line 8012
        if ($$1131144 >>> 0 > 131073) {
         $$0128145 = $39; //@line 8016
         $$1131144 = $$1131144 >>> 1; //@line 8016
        } else {
         $$1129 = $39; //@line 8018
         break;
        }
       }
      }
      SAFE_HEAP_STORE($27 >> 0 | 0, $$1129 | 0, 1);
      $42 = _ecma_get_property_list($0) | 0; //@line 8024
      SAFE_HEAP_STORE($28 | 0, _jmem_compress_pointer($25) | 0 | 0, 2);
      if ($42 | 0) {
       $45 = $37 >>> 0 < 65536; //@line 8029
       $46 = $$1129 & 255; //@line 8030
       $$1143 = $42; //@line 8031
       do {
        $47 = $$1143 + 12 | 0; //@line 8033
        $$0126142 = 0; //@line 8034
        while (1) {
         $55 = SAFE_HEAP_LOAD($$1143 + $$0126142 >> 0 | 0, 1, 0) | 0 | 0; //@line 8037
         if ($55 & 3) {
          $61 = (_ecma_string_get_property_name_hash($55, SAFE_HEAP_LOAD($47 + ($$0126142 << 1) | 0, 2, 0) | 0 | 0) | 0) & 65535; //@line 8044
          $65 = SAFE_HEAP_LOAD(3867 + ($61 & 7) >> 0 | 0, 1, 1) | 0 | 0; //@line 8048
          $$0123$ph = $45 ? $61 & $37 : $61 << $46; //@line 8051
          $68 = $35 + ($$0123$ph << 1) | 0; //@line 8052
          if (!(SAFE_HEAP_LOAD($68 | 0, 2, 0) | 0)) {
           $$0123$lcssa = $$0123$ph; //@line 8056
           $$lcssa = $68; //@line 8056
          } else {
           $$0123140 = $$0123$ph; //@line 8058
           while (1) {
            $72 = $$0123140 + $65 & $37; //@line 8061
            $73 = $35 + ($72 << 1) | 0; //@line 8062
            if (!(SAFE_HEAP_LOAD($73 | 0, 2, 0) | 0)) {
             $$0123$lcssa = $72; //@line 8066
             $$lcssa = $73; //@line 8066
             break;
            } else {
             $$0123140 = $72; //@line 8069
            }
           }
          }
          SAFE_HEAP_STORE($$lcssa | 0, _jmem_compress_pointer($$1143) | 0 | 0, 2);
          if (!$$0126142) {
           $$0126142 = 1; //@line 8077
           continue;
          }
          $79 = $36 + ($$0123$lcssa >>> 3) | 0; //@line 8081
          SAFE_HEAP_STORE($79 >> 0 | 0, SAFE_HEAP_LOAD($79 >> 0 | 0, 1, 1) | 0 | 1 << ($$0123$lcssa & 7) | 0, 1);
         }
         $$0126142 = $$0126142 + 1 | 0; //@line 8090
         if (($$0126142 | 0) == 2) {
          break;
         }
        }
        $49 = SAFE_HEAP_LOAD($$1143 + 2 | 0, 2, 0) | 0 | 0; //@line 8099
        if (!($49 << 16 >> 16)) {
         break L1;
        }
        $$1143 = _jmem_decompress_pointer($49 & 65535) | 0; //@line 8105
       } while (($$1143 | 0) != 0);
      }
     }
    }
   }
  }
 } while (0);
 return;
}
function _parser_parse_expression($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$079 = 0, $$081 = 0, $$1$ph = 0, $$ph = 0, $$promoted = 0, $$promoted116 = 0, $10 = 0, $14 = 0, $2 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14605
 STACKTOP = STACKTOP + 32 | 0; //@line 14606
 $2 = sp + 16 | 0; //@line 14607
 $3 = sp + 8 | 0; //@line 14608
 $4 = sp; //@line 14609
 SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
 _parser_stack_push_uint8($0, 81); //@line 14611
 $5 = $0 + 188 | 0; //@line 14612
 $6 = $0 + 304 | 0; //@line 14613
 $7 = $0 + 240 | 0; //@line 14614
 $8 = $0 + 172 | 0; //@line 14615
 $9 = $0 + 288 | 0; //@line 14616
 $10 = $0 + 296 | 0; //@line 14617
 $$0 = $1; //@line 14618
 $$promoted116 = 0; //@line 14618
 L1 : while (1) {
  if (!($$0 & 8)) {
   _parser_parse_unary_expression($0, $2); //@line 14623
   $$1$ph = $$0; //@line 14625
   $$promoted = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 14625
  } else {
   $$1$ph = $$0 & -9; //@line 14628
   $$promoted = $$promoted116; //@line 14628
  }
  $$ph = $$promoted; //@line 14630
  L7 : while (1) {
   L9 : while (1) {
    _parser_process_unary_expression($0); //@line 14633
    $14 = SAFE_HEAP_LOAD($5 >> 0 | 0, 1, 0) | 0 | 0; //@line 14634
    if (($14 + -15 & 255) < 36) {
     $$081 = (SAFE_HEAP_LOAD(9608 + (($14 & 255) + -15) >> 0 | 0, 1, 0) | 0 | 0) + ((($14 & 255) < 27 | ($14 & -2) << 24 >> 24 == 28) & 1) << 24 >> 24; //@line 14648
    } else {
     $$081 = 0; //@line 14650
    }
    _parser_process_binary_opcodes($0, $$081); //@line 14652
    $23 = SAFE_HEAP_LOAD($5 >> 0 | 0, 1, 0) | 0 | 0; //@line 14653
    switch ($23 << 24 >> 24) {
    case 55:
     {
      break L9;
      break;
     }
    case 27:
     {
      break;
     }
    default:
     {
      break L7;
     }
    }
    _parser_push_result($0); //@line 14666
    if ((SAFE_HEAP_LOAD($7 | 0, 2, 0) | 0 | 0) == 78) {
     SAFE_HEAP_STORE($7 | 0, 0 | 0, 2);
     $$079 = 9; //@line 14671
    } else {
     $$079 = 17; //@line 14673
    }
    _parser_emit_cbc_forward_branch($0, $$079, $3); //@line 14675
    _lexer_next_token($0); //@line 14676
    _parser_parse_expression($0, 4); //@line 14677
    _parser_emit_cbc_forward_branch($0, 1, $4); //@line 14678
    _parser_set_branch_to_current_position($0, $3); //@line 14679
    SAFE_HEAP_STORE($8 | 0, (SAFE_HEAP_LOAD($8 | 0, 2, 0) | 0 | 0) + -1 << 16 >> 16 | 0, 2);
    if ((SAFE_HEAP_LOAD($5 >> 0 | 0, 1, 0) | 0 | 0) != 59) {
     label = 18; //@line 14686
     break L1;
    }
    _lexer_next_token($0); //@line 14689
    _parser_parse_expression($0, 4); //@line 14690
    _parser_set_branch_to_current_position($0, $4); //@line 14691
    _parser_flush_cbc($0); //@line 14692
   }
   $24 = SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0; //@line 14694
   switch ($24 << 24 >> 24) {
   case 52:
   case 84:
    {
     break;
    }
   default:
    {
     label = 11; //@line 14700
     break L1;
    }
   }
   if ($24 << 24 >> 24 == 84) {
    _parser_push_result($0); //@line 14707
    _parser_flush_cbc($0); //@line 14708
   }
   _parser_stack_pop_uint8($0); //@line 14710
   _lexer_next_token($0); //@line 14711
   $$ph = $$ph + -1 | 0; //@line 14712
  }
  SAFE_HEAP_STORE($2 | 0, $$ph | 0, 4);
  if ($23 << 24 >> 24 != 60) {
   if (($23 + -15 & 255) >= 36) {
    label = 29; //@line 14720
    break;
   }
   _parser_append_binary_token($0); //@line 14723
   _lexer_next_token($0); //@line 14724
   $$0 = $$1$ph; //@line 14725
   $$promoted116 = $$ph; //@line 14725
   continue;
  }
  if (!(($$1$ph & 4 | 0) == 0 | ($$ph | 0) != 0)) {
   break;
  }
  if (((SAFE_HEAP_LOAD($7 | 0, 2, 0) | 0 | 0) + -151 & 65535) >= 85) {
   _parser_emit_cbc($0, 4); //@line 14739
  }
  if ((SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0) == 52) {
   SAFE_HEAP_STORE((SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0) + -1 + ((SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0) + 4) >> 0 | 0, 84 | 0, 1);
   SAFE_HEAP_STORE($6 >> 0 | 0, 84 | 0, 1);
  }
  _lexer_next_token($0); //@line 14751
  $$0 = $$1$ph; //@line 14752
  $$promoted116 = $$ph; //@line 14752
 }
 if ((label | 0) == 11) {
  SAFE_HEAP_STORE($2 | 0, $$ph | 0, 4);
  label = 29; //@line 14756
 } else if ((label | 0) == 18) {
  _parser_raise_error($0, 44); //@line 14759
 }
 if ((label | 0) == 29) {
  if ($$ph | 0) {
   _parser_raise_error($0, 41); //@line 14765
  }
 }
 _parser_stack_pop_uint8($0); //@line 14769
 do {
  if (!($$1$ph & 1)) {
   if (!($$1$ph & 2)) {
    _parser_push_result($0); //@line 14777
    break;
   }
   $53 = SAFE_HEAP_LOAD($7 | 0, 2, 0) | 0 | 0; //@line 14780
   $54 = $53 & 65535; //@line 14781
   if (($53 + -214 & 65535) < 22) {
    SAFE_HEAP_STORE($7 | 0, $54 + 89 | 0, 2);
    _parser_flush_cbc($0); //@line 14788
    break;
   }
   if (($53 + -151 & 65535) < 63) {
    SAFE_HEAP_STORE($7 | 0, $54 + 2 | 0, 2);
    _parser_flush_cbc($0); //@line 14797
    break;
   } else {
    _parser_emit_cbc($0, 8); //@line 14800
    break;
   }
  } else {
   if (((SAFE_HEAP_LOAD($7 | 0, 2, 0) | 0 | 0) + -151 & 65535) >= 85) {
    _parser_emit_cbc($0, 4); //@line 14808
   }
  }
 } while (0);
 STACKTOP = sp; //@line 14812
 return;
}
function _ecma_op_object_get_own_property($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0137 = 0, $$0139 = 0, $$1138 = 0, $$6 = 0, $16 = 0, $20 = 0, $36 = 0, $4 = 0, $45 = 0, $66 = 0, $74 = 0, $77 = 0, $80 = 0, label = 0;
 $4 = _ecma_get_object_type($0) | 0; //@line 12179
 L1 : do {
  switch ($4 | 0) {
  case 1:
   {
    if ((SAFE_HEAP_LOAD($0 + 8 | 0, 2, 0) | 0 | 0) == 28) {
     if (_ecma_string_is_length($1) | 0) {
      if (!($3 & 1)) {
       $$6 = 3; //@line 12192
       break L1;
      }
      SAFE_HEAP_STORE($2 | 0, _ecma_make_uint32_value(_ecma_string_get_length(_ecma_get_string_from_value(SAFE_HEAP_LOAD($0 + 12 | 0, 4, 0) | 0 | 0) | 0) | 0) | 0 | 0, 4);
      $$6 = 3; //@line 12201
      break L1;
     }
     $16 = _ecma_string_get_array_index($1) | 0; //@line 12204
     if (($16 | 0) == -1) {
      label = 14; //@line 12207
     } else {
      $20 = _ecma_get_string_from_value(SAFE_HEAP_LOAD($0 + 12 | 0, 4, 0) | 0 | 0) | 0; //@line 12211
      if ($16 >>> 0 < (_ecma_string_get_length($20) | 0) >>> 0) {
       if (!($3 & 1)) {
        $$6 = 11; //@line 12218
       } else {
        SAFE_HEAP_STORE($2 | 0, _ecma_make_string_value(_ecma_new_ecma_string_from_code_unit(_ecma_string_get_char_at_pos($20, $16) | 0) | 0) | 0 | 0, 4);
        $$6 = 11; //@line 12224
       }
      } else {
       label = 14; //@line 12227
      }
     }
    } else {
     label = 14; //@line 12231
    }
    break;
   }
  case 4:
   {
    if (_ecma_string_is_length($1) | 0) {
     if ($3 & 1 | 0) {
      SAFE_HEAP_STORE($2 | 0, _ecma_make_uint32_value(SAFE_HEAP_LOAD($0 + 8 | 0, 4, 0) | 0 | 0) | 0 | 0, 4);
     }
     $$6 = SAFE_HEAP_LOAD($0 + 12 >> 0 | 0, 1, 0) | 0 | 0; //@line 12248
    } else {
     label = 14; //@line 12250
    }
    break;
   }
  default:
   {
    label = 14; //@line 12255
   }
  }
 } while (0);
 L16 : do {
  if ((label | 0) == 14) {
   $36 = _ecma_find_named_property($0, $1) | 0; //@line 12261
   if (!$36) {
    L20 : do {
     if (_ecma_get_object_is_builtin($0) | 0) {
      $$0137 = _ecma_builtin_try_to_instantiate_property($0, $1) | 0; //@line 12268
     } else {
      if (!(_ecma_is_normal_or_arrow_function($4) | 0)) {
       switch ($4 | 0) {
       case 3:
        {
         $$0137 = _ecma_op_external_function_try_to_lazy_instantiate_property($0, $1) | 0; //@line 12275
         break L20;
         break;
        }
       case 5:
        {
         $$0137 = _ecma_op_bound_function_try_to_lazy_instantiate_property($0, $1) | 0; //@line 12281
         break L20;
         break;
        }
       default:
        {
         $$6 = 0; //@line 12286
         break L16;
        }
       }
      }
      if (!(_ecma_string_is_length($1) | 0)) {
       $$0137 = _ecma_op_function_try_to_lazy_instantiate_property($0, $1) | 0; //@line 12294
       break;
      }
      if (!($3 & 1)) {
       $$6 = 3; //@line 12300
       break L16;
      }
      $45 = SAFE_HEAP_LOAD($0 + 12 | 0, 4, 0) | 0 | 0; //@line 12304
      if (!((SAFE_HEAP_LOAD($45 + 4 | 0, 2, 0) | 0) & 4)) {
       $$0139 = SAFE_HEAP_LOAD($45 + 7 >> 0 | 0, 1, 1) | 0 | 0; //@line 12313
      } else {
       $$0139 = SAFE_HEAP_LOAD($45 + 8 | 0, 2, 1) | 0 | 0; //@line 12318
      }
      SAFE_HEAP_STORE($2 | 0, _ecma_make_uint32_value($$0139) | 0 | 0, 4);
      $$6 = 3; //@line 12322
      break L16;
     }
    } while (0);
    if (!$$0137) {
     $$6 = 0; //@line 12328
     break;
    } else {
     $$1138 = $$0137; //@line 12331
    }
   } else {
    if (($2 | 0) != 0 & ($4 | 0) == 6) {
     if (!(SAFE_HEAP_LOAD($0 + 8 >> 0 | 0, 1, 0) | 0)) {
      $66 = _ecma_string_get_array_index($1) | 0; //@line 12342
      if (($66 | 0) == -1) {
       $$1138 = $36; //@line 12345
      } else {
       if ($66 >>> 0 < (SAFE_HEAP_LOAD($0 + 10 | 0, 2, 1) | 0 | 0) >>> 0) {
        $74 = SAFE_HEAP_LOAD($0 + 16 + ($66 << 1) | 0, 2, 0) | 0 | 0; //@line 12354
        if (!($74 << 16 >> 16)) {
         $$1138 = $36; //@line 12357
        } else {
         $77 = _jmem_decompress_pointer($74 & 65535) | 0; //@line 12360
         $80 = _ecma_op_get_binding_value(SAFE_HEAP_LOAD($0 + 12 | 0, 4, 0) | 0 | 0, $77, 1) | 0; //@line 12363
         _ecma_named_data_property_assign_value($0, $36 + 7 & -4, $80); //@line 12368
         _ecma_free_value($80); //@line 12369
         $$1138 = $36; //@line 12370
        }
       } else {
        $$1138 = $36; //@line 12373
       }
      }
     } else {
      $$1138 = $36; //@line 12377
     }
    } else {
     $$1138 = $36; //@line 12380
    }
   }
   if (!($3 & 2)) {
    if ($2 | 0) {
     label = 38; //@line 12388
    }
   } else {
    SAFE_HEAP_STORE($2 + 4 | 0, $$1138 | 0, 4);
    label = 38; //@line 12393
   }
   if ((label | 0) == 38) {
    SAFE_HEAP_STORE($2 | 0, $$1138 + 7 & -4 | 0, 4);
   }
   $$6 = SAFE_HEAP_LOAD($$1138 >> 0 | 0, 1, 0) | 0 | 0; //@line 12403
  }
 } while (0);
 return $$6 | 0; //@line 12406
}
function _parser_parse_for_statement_start($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $2 = 0, $22 = 0, $26 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11362
 STACKTOP = STACKTOP + 96 | 0; //@line 11363
 $1 = sp + 88 | 0; //@line 11364
 $2 = sp + 72 | 0; //@line 11365
 $3 = sp + 24 | 0; //@line 11366
 $4 = sp + 8 | 0; //@line 11367
 $5 = sp; //@line 11368
 _lexer_next_token($0); //@line 11369
 $6 = $0 + 188 | 0; //@line 11370
 if ((SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0) != 52) {
  _parser_raise_error($0, 39); //@line 11374
 }
 _parser_scan_until($0, $2, 41); //@line 11377
 do {
  if ((SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0) == 41) {
   _lexer_next_token($0); //@line 11382
   _parser_parse_expression($0, 0); //@line 11383
   if ((SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0) != 55) {
    _parser_raise_error($0, 41); //@line 11387
   }
   _parser_emit_cbc_forward_branch($0, 261, $3); //@line 11390
   SAFE_HEAP_STORE($3 + 8 | 0, SAFE_HEAP_LOAD($0 + 260 | 0, 4, 0) | 0 | 0, 4);
   _parser_save_range($0, $4, SAFE_HEAP_LOAD($0 + 220 | 0, 4, 0) | 0 | 0); //@line 11397
   _parser_set_range($0, $2); //@line 11398
   _lexer_next_token($0); //@line 11399
   if ((SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0) == 66) {
    _lexer_expect_identifier($0, 0); //@line 11403
    $22 = (SAFE_HEAP_LOAD($0 + 208 | 0, 4, 0) | 0 | 0) + 7 | 0; //@line 11406
    SAFE_HEAP_STORE($22 >> 0 | 0, SAFE_HEAP_LOAD($22 >> 0 | 0, 1, 0) | 0 | 1 | 0, 1);
    $26 = SAFE_HEAP_LOAD($0 + 212 | 0, 2, 0) | 0 | 0; //@line 11411
    _lexer_next_token($0); //@line 11412
    if ((SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0) == 15) {
     _parser_emit_cbc_forward_branch($0, 1, $5); //@line 11416
     _lexer_next_token($0); //@line 11417
     _parser_parse_expression($0, 5); //@line 11418
     _parser_set_branch_to_current_position($0, $5); //@line 11419
    }
    _parser_emit_cbc($0, 260); //@line 11421
    _parser_emit_cbc_literal($0, 202, $26); //@line 11422
   } else {
    _parser_parse_expression($0, 0); //@line 11424
    $29 = $0 + 240 | 0; //@line 11425
    switch (SAFE_HEAP_LOAD($29 | 0, 2, 0) | 0 | 0) {
    case 40:
     {
      if (!(SAFE_HEAP_LOAD($0 + 238 >> 0 | 0, 1, 0) | 0)) {
       SAFE_HEAP_STORE($29 | 0, 0 | 0, 2);
       $$0 = 202; //@line 11434
      } else {
       label = 17; //@line 11436
      }
      break;
     }
    case 52:
     {
      SAFE_HEAP_STORE($29 | 0, 0 | 0, 2);
      $$0 = 199; //@line 11442
      break;
     }
    case 53:
     {
      SAFE_HEAP_STORE($29 | 0, 0 | 0, 2);
      $$0 = 208; //@line 11447
      break;
     }
    case 54:
     {
      SAFE_HEAP_STORE($29 | 0, 41 | 0, 2);
      $$0 = 199; //@line 11452
      break;
     }
    case 55:
     {
      SAFE_HEAP_STORE($29 | 0, 48 | 0, 2);
      $$0 = 199; //@line 11457
      break;
     }
    default:
     {
      label = 17; //@line 11461
     }
    }
    if ((label | 0) == 17) {
     _parser_emit_cbc($0, 272); //@line 11465
     $$0 = 199; //@line 11466
    }
    _parser_emit_cbc($0, 260); //@line 11468
    _parser_flush_cbc($0); //@line 11469
    SAFE_HEAP_STORE($29 | 0, $$0 | 0, 2);
   }
   if (!(SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0)) {
    _parser_flush_cbc($0); //@line 11475
    _parser_set_range($0, $4); //@line 11476
    _lexer_next_token($0); //@line 11477
    SAFE_HEAP_STORE($1 | 0, 0 | 0, 4);
    _parser_stack_push($0, $3, 12); //@line 11479
    _parser_stack_push($0, $1, 4); //@line 11480
    _parser_stack_push_uint8($0, 10); //@line 11481
    _parser_stack_iterator_init($0, $0 + 180 | 0); //@line 11483
    break;
   } else {
    _parser_raise_error($0, 46); //@line 11486
   }
  } else {
   SAFE_HEAP_STORE($2 + 4 | 0, SAFE_HEAP_LOAD($0 + 220 | 0, 4, 0) | 0 | 0, 4);
   _parser_set_range($0, $2); //@line 11494
   _lexer_next_token($0); //@line 11495
   switch (SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0) {
   case 58:
    {
     break;
    }
   case 66:
    {
     _parser_parse_var_statement($0); //@line 11502
     label = 25; //@line 11503
     break;
    }
   default:
    {
     _parser_parse_expression($0, 1); //@line 11507
     label = 25; //@line 11508
    }
   }
   if ((label | 0) == 25) {
    if ((SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0) != 58) {
     _parser_raise_error($0, 45); //@line 11515
    }
   }
   _parser_emit_cbc_forward_branch($0, 1, $3); //@line 11519
   SAFE_HEAP_STORE($3 + 40 | 0, SAFE_HEAP_LOAD($0 + 260 | 0, 4, 0) | 0 | 0, 4);
   _parser_scan_until($0, $3 + 8 | 0, 58); //@line 11525
   _parser_scan_until($0, $3 + 24 | 0, 55); //@line 11527
   _lexer_next_token($0); //@line 11528
   SAFE_HEAP_STORE($1 | 0, 0 | 0, 4);
   _parser_stack_push($0, $3, 44); //@line 11530
   _parser_stack_push($0, $1, 4); //@line 11531
   _parser_stack_push_uint8($0, 9); //@line 11532
   _parser_stack_iterator_init($0, $0 + 180 | 0); //@line 11534
  }
 } while (0);
 STACKTOP = sp; //@line 11537
 return;
}
function _ecma_append_chars_to_string($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0109 = 0, $$0110 = 0, $$0111 = 0, $$0114 = 0, $$0115 = 0, $$0116$off0 = 0, $$0117$off0 = 0, $$3 = 0, $$4 = 0, $$off0 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $28 = 0, $30 = 0, $33 = 0, $4 = 0, $43 = 0, $49 = 0, $5 = 0, $50 = 0, $57 = 0, $6 = 0, $63 = 0, $7 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3721
 STACKTOP = STACKTOP + 16 | 0; //@line 3722
 $4 = sp + 4 | 0; //@line 3723
 $5 = sp; //@line 3724
 $6 = $0 + 4 | 0; //@line 3725
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0; //@line 3726
 $9 = SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0 | 0; //@line 3728
 if (!$7) {
  if (($9 & 7) == 1) {
   _ecma_deref_ecma_string($0); //@line 3734
   $$4 = _ecma_new_ecma_string_from_utf8($1, $2) | 0; //@line 3736
  } else {
   $$off0 = $9 & 255; //@line 3738
   label = 5; //@line 3739
  }
 } else {
  $$off0 = $9 & 255; //@line 3743
  label = 5; //@line 3744
 }
 if ((label | 0) == 5) {
  switch ($$off0 & 7) {
  case 3:
   {
    $$0111 = $0 + 8 | 0; //@line 3756
    $$0114 = $7 & 65535; //@line 3756
    $$0115 = SAFE_HEAP_LOAD($0 + 4 + 2 | 0, 2, 1) | 0 | 0; //@line 3756
    $$0116$off0 = 0; //@line 3756
    $$0117$off0 = 0; //@line 3756
    break;
   }
  case 4:
   {
    $$0111 = $0 + 12 | 0; //@line 3763
    $$0114 = $7; //@line 3763
    $$0115 = SAFE_HEAP_LOAD($0 + 8 | 0, 4, 0) | 0 | 0; //@line 3763
    $$0116$off0 = 0; //@line 3763
    $$0117$off0 = 0; //@line 3763
    break;
   }
  case 0:
   {
    $22 = _ecma_uint32_to_utf8_string($7, $4, 10) | 0; //@line 3767
    $$0111 = $4; //@line 3768
    $$0114 = $22; //@line 3768
    $$0115 = $22; //@line 3768
    $$0116$off0 = 1; //@line 3768
    $$0117$off0 = 1; //@line 3768
    break;
   }
  case 1:
   {
    $23 = _lit_get_magic_string_utf8($7) | 0; //@line 3772
    $25 = _lit_get_magic_string_size(SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0) | 0; //@line 3774
    $$0111 = $23; //@line 3775
    $$0114 = $25; //@line 3775
    $$0115 = $25; //@line 3775
    $$0116$off0 = 0; //@line 3775
    $$0117$off0 = 1; //@line 3775
    break;
   }
  default:
   {
    $26 = _lit_get_magic_string_ex_utf8($7) | 0; //@line 3779
    $28 = _lit_get_magic_string_ex_size(SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0) | 0; //@line 3781
    $$0111 = $26; //@line 3783
    $$0114 = $28; //@line 3783
    $$0115 = _lit_utf8_string_length($26, $28) | 0; //@line 3783
    $$0116$off0 = 0; //@line 3783
    $$0117$off0 = 1; //@line 3783
   }
  }
  $30 = $$0114 + $2 | 0; //@line 3786
  if ($30 >>> 0 < ($$0114 | $2) >>> 0) {
   _jerry_fatal(10); //@line 3790
  }
  $33 = _lit_is_utf8_string_pair_magic($$0111, $$0114, $1, $2) | 0; //@line 3793
  L17 : do {
   if (($33 | 0) == 82) {
    do {
     if ($$0116$off0 & $30 >>> 0 < 11) {
      _memcpy($4 + $$0114 | 0, $1 | 0, $2 | 0) | 0; //@line 3802
      if (_ecma_string_to_array_index($4, $30, $5) | 0) {
       _ecma_deref_ecma_string($0); //@line 3805
       $$3 = _ecma_new_ecma_string_from_uint32(SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0) | 0; //@line 3808
       break L17;
      } else {
       break;
      }
     }
    } while (0);
    if (_lit_get_magic_string_ex_count() | 0) {
     $43 = _lit_is_ex_utf8_string_pair_magic($$0111, $$0114, $1, $2) | 0; //@line 3818
     if ($43 >>> 0 < (_lit_get_magic_string_ex_count() | 0) >>> 0) {
      _ecma_deref_ecma_string($0); //@line 3822
      $$3 = _ecma_get_magic_string_ex($43) | 0; //@line 3824
      break;
     }
    }
    if ($30 >>> 0 < 65536) {
     $49 = _ecma_alloc_string_buffer($30 + 8 | 0) | 0; //@line 3831
     SAFE_HEAP_STORE($49 | 0, 11 | 0, 2);
     $50 = $49 + 4 | 0; //@line 3833
     SAFE_HEAP_STORE($50 | 0, $30 | 0, 2);
     SAFE_HEAP_STORE($50 + 2 | 0, $$0115 + $3 | 0, 2);
     $$0109 = $49 + 8 | 0; //@line 3841
     $$0110 = $49; //@line 3841
    } else {
     $57 = _ecma_alloc_string_buffer($30 + 12 | 0) | 0; //@line 3844
     SAFE_HEAP_STORE($57 | 0, 12 | 0, 2);
     SAFE_HEAP_STORE($57 + 4 | 0, $30 | 0, 4);
     SAFE_HEAP_STORE($57 + 8 | 0, $$0115 + $3 | 0, 4);
     $$0109 = $57 + 12 | 0; //@line 3852
     $$0110 = $57; //@line 3852
    }
    $63 = SAFE_HEAP_LOAD($0 + 2 | 0, 2, 0) | 0 | 0; //@line 3855
    if ($$0117$off0) {
     $$0 = _lit_utf8_string_calc_hash($$0111, $$0114) | 0; //@line 3858
    } else {
     $$0 = $63; //@line 3860
    }
    SAFE_HEAP_STORE($$0110 + 2 | 0, _lit_utf8_string_hash_combine($$0, $1, $2) | 0 | 0, 2);
    _memcpy($$0109 | 0, $$0111 | 0, $$0114 | 0) | 0; //@line 3865
    _memcpy($$0109 + $$0114 | 0, $1 | 0, $2 | 0) | 0; //@line 3867
    _ecma_deref_ecma_string($0); //@line 3868
    $$3 = $$0110; //@line 3869
   } else {
    _ecma_deref_ecma_string($0); //@line 3871
    $$3 = _ecma_get_magic_string($33) | 0; //@line 3873
   }
  } while (0);
  $$4 = $$3; //@line 3876
 }
 STACKTOP = sp; //@line 3878
 return $$4 | 0; //@line 3878
}
function _ecma_builtin_object_dispatch_routine($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $18 = 0, $22 = 0, $26 = 0, $30 = 0, $34 = 0, $38 = 0, $41 = 0, $45 = 0, $46 = 0, $49 = 0, $53 = 0, $54 = 0, $57 = 0, $6 = 0, $61 = 0, $62 = 0, $65 = 0, $68 = 0, $72 = 0, $73 = 0, $74 = 0;
 do {
  switch ($0 << 16 >> 16) {
  case 8:
   {
    if (!$3) {
     $6 = 72; //@line 5465
    } else {
     $6 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 5468
    }
    $$0 = _ecma_builtin_object_object_get_prototype_of($6) | 0; //@line 5471
    break;
   }
  case 9:
   {
    if (!$3) {
     $10 = 72; //@line 5477
    } else {
     $10 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 5480
    }
    $$0 = _ecma_builtin_object_object_get_own_property_names($10) | 0; //@line 5483
    break;
   }
  case 10:
   {
    if (!$3) {
     $14 = 72; //@line 5489
    } else {
     $14 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 5492
    }
    $$0 = _ecma_builtin_object_object_seal($14) | 0; //@line 5495
    break;
   }
  case 11:
   {
    if (!$3) {
     $18 = 72; //@line 5501
    } else {
     $18 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 5504
    }
    $$0 = _ecma_builtin_object_object_freeze($18) | 0; //@line 5507
    break;
   }
  case 12:
   {
    if (!$3) {
     $22 = 72; //@line 5513
    } else {
     $22 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 5516
    }
    $$0 = _ecma_builtin_object_object_prevent_extensions($22) | 0; //@line 5519
    break;
   }
  case 13:
   {
    if (!$3) {
     $26 = 72; //@line 5525
    } else {
     $26 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 5528
    }
    $$0 = _ecma_builtin_object_object_is_sealed($26) | 0; //@line 5531
    break;
   }
  case 14:
   {
    if (!$3) {
     $30 = 72; //@line 5537
    } else {
     $30 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 5540
    }
    $$0 = _ecma_builtin_object_object_is_frozen($30) | 0; //@line 5543
    break;
   }
  case 15:
   {
    if (!$3) {
     $34 = 72; //@line 5549
    } else {
     $34 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 5552
    }
    $$0 = _ecma_builtin_object_object_is_extensible($34) | 0; //@line 5555
    break;
   }
  case 16:
   {
    if (!$3) {
     $38 = 72; //@line 5561
    } else {
     $38 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 5564
    }
    $$0 = _ecma_builtin_object_object_keys($38) | 0; //@line 5567
    break;
   }
  case 17:
   {
    if (!$3) {
     $45 = 72; //@line 5573
     $46 = 72; //@line 5573
    } else {
     $41 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 5575
     if (($3 | 0) == 1) {
      $45 = $41; //@line 5578
      $46 = 72; //@line 5578
     } else {
      $45 = $41; //@line 5582
      $46 = SAFE_HEAP_LOAD($2 + 4 | 0, 4, 0) | 0 | 0; //@line 5582
     }
    }
    $$0 = _ecma_builtin_object_object_get_own_property_descriptor($45, $46) | 0; //@line 5586
    break;
   }
  case 18:
   {
    if (!$3) {
     $53 = 72; //@line 5592
     $54 = 72; //@line 5592
    } else {
     $49 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 5594
     if (($3 | 0) == 1) {
      $53 = $49; //@line 5597
      $54 = 72; //@line 5597
     } else {
      $53 = $49; //@line 5601
      $54 = SAFE_HEAP_LOAD($2 + 4 | 0, 4, 0) | 0 | 0; //@line 5601
     }
    }
    $$0 = _ecma_builtin_object_object_create($53, $54) | 0; //@line 5605
    break;
   }
  case 19:
   {
    if (!$3) {
     $61 = 72; //@line 5611
     $62 = 72; //@line 5611
    } else {
     $57 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 5613
     if (($3 | 0) == 1) {
      $61 = $57; //@line 5616
      $62 = 72; //@line 5616
     } else {
      $61 = $57; //@line 5620
      $62 = SAFE_HEAP_LOAD($2 + 4 | 0, 4, 0) | 0 | 0; //@line 5620
     }
    }
    $$0 = _ecma_builtin_object_object_define_properties($61, $62) | 0; //@line 5624
    break;
   }
  case 20:
   {
    if (!$3) {
     $72 = 72; //@line 5630
     $73 = 72; //@line 5630
     $74 = 72; //@line 5630
    } else {
     $65 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 5632
     if (($3 | 0) == 1) {
      $72 = $65; //@line 5635
      $73 = 72; //@line 5635
      $74 = 72; //@line 5635
     } else {
      $68 = SAFE_HEAP_LOAD($2 + 4 | 0, 4, 0) | 0 | 0; //@line 5638
      if ($3 >>> 0 > 2) {
       $72 = $65; //@line 5643
       $73 = $68; //@line 5643
       $74 = SAFE_HEAP_LOAD($2 + 8 | 0, 4, 0) | 0 | 0; //@line 5643
      } else {
       $72 = $65; //@line 5645
       $73 = $68; //@line 5645
       $74 = 72; //@line 5645
      }
     }
    }
    $$0 = _ecma_builtin_object_object_define_property($72, $73, $74) | 0; //@line 5650
    break;
   }
  default:
   {}
  }
 } while (0);
 return $$0 | 0; //@line 5658
}
function _parser_parse_switch_statement_start($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$055$off0 = 0, $$056 = 0, $$058$off0 = 0, $$1$off0 = 0, $$157 = 0, $$159$off0 = 0, $$2 = 0, $1 = 0, $13 = 0, $15 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11178
 STACKTOP = STACKTOP + 64 | 0; //@line 11179
 $1 = sp + 44 | 0; //@line 11180
 $2 = sp + 40 | 0; //@line 11181
 $3 = sp + 32 | 0; //@line 11182
 $4 = sp + 16 | 0; //@line 11183
 $5 = sp; //@line 11184
 _parser_parse_enclosed_expr($0); //@line 11185
 $6 = $0 + 188 | 0; //@line 11186
 if ((SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0) != 51) {
  _parser_raise_error($0, 40); //@line 11190
 }
 _parser_save_range($0, $4, SAFE_HEAP_LOAD($0 + 220 | 0, 4, 0) | 0 | 0); //@line 11195
 _lexer_next_token($0); //@line 11196
 L4 : do {
  switch (SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0) {
  case 54:
   {
    _parser_emit_cbc($0, 4); //@line 11201
    _parser_flush_cbc($0); //@line 11202
    _parser_stack_push_uint8($0, 1); //@line 11203
    _parser_stack_iterator_init($0, $0 + 180 | 0); //@line 11205
    break;
   }
  case 77:
  case 63:
   {
    $13 = $1 + 8 | 0; //@line 11209
    SAFE_HEAP_STORE($13 | 0, 0 | 0, 4);
    SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
    _parser_stack_push($0, $1, 12); //@line 11212
    _parser_stack_iterator_init($0, $3); //@line 11213
    _parser_stack_push($0, $2, 4); //@line 11214
    _parser_stack_push_uint8($0, 5); //@line 11215
    _parser_stack_iterator_init($0, $0 + 180 | 0); //@line 11217
    $$055$off0 = 0; //@line 11218
    $$056 = 0; //@line 11218
    $$058$off0 = 0; //@line 11218
    L8 : while (1) {
     _parser_scan_until($0, $5, 63); //@line 11220
     $15 = SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0; //@line 11221
     switch ($15 << 24 >> 24) {
     case 77:
      {
       if ($$058$off0) {
        label = 9; //@line 11225
        break L8;
       }
       _lexer_next_token($0); //@line 11228
       if ((SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0) == 59) {
        $$1$off0 = $$055$off0; //@line 11232
        $$159$off0 = 1; //@line 11232
        $$2 = $$056; //@line 11232
       } else {
        label = 11; //@line 11234
        break L8;
       }
       break;
      }
     case 54:
     case 63:
      {
       do {
        if ($$055$off0) {
         if ($15 << 24 >> 24 == 63) {
          $$0 = 37; //@line 11244
         } else {
          _parser_emit_cbc($0, 101); //@line 11246
          $$0 = 9; //@line 11247
         }
         $19 = _parser_emit_cbc_forward_branch_item($0, $$0, 0) | 0; //@line 11249
         if (!$$056) {
          SAFE_HEAP_STORE($13 | 0, $19 | 0, 4);
          _parser_stack_iterator_write($3, $1, 12); //@line 11253
          $$157 = $19; //@line 11254
          break;
         } else {
          SAFE_HEAP_STORE($$056 | 0, $19 | 0, 4);
          $$157 = $19; //@line 11258
          break;
         }
        } else {
         $$157 = $$056; //@line 11262
        }
       } while (0);
       if ((SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0) == 54) {
        label = 22; //@line 11268
        break L8;
       }
       _lexer_next_token($0); //@line 11271
       _parser_parse_expression($0, 0); //@line 11272
       if ((SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0) == 59) {
        $$1$off0 = 1; //@line 11276
        $$159$off0 = $$058$off0; //@line 11276
        $$2 = $$157; //@line 11276
       } else {
        label = 20; //@line 11278
        break L8;
       }
       break;
      }
     default:
      {
       $$1$off0 = $$055$off0; //@line 11284
       $$159$off0 = $$058$off0; //@line 11284
       $$2 = $$056; //@line 11284
      }
     }
     _lexer_next_token($0); //@line 11287
     $$055$off0 = $$1$off0; //@line 11288
     $$056 = $$2; //@line 11288
     $$058$off0 = $$159$off0; //@line 11288
    }
    if ((label | 0) == 9) {
     _parser_raise_error($0, 36); //@line 11291
    } else if ((label | 0) == 11) {
     _parser_raise_error($0, 43); //@line 11295
    } else if ((label | 0) == 20) {
     _parser_raise_error($0, 43); //@line 11299
    } else if ((label | 0) == 22) {
     if (!$$055$off0) {
      _parser_emit_cbc($0, 4); //@line 11304
     }
     _parser_emit_cbc_forward_branch($0, 1, $1); //@line 11306
     _parser_stack_iterator_write($3, $1, 12); //@line 11307
     if (!$$058$off0) {
      _parser_stack_change_last_uint8($0, 6); //@line 11309
     }
     _parser_set_range($0, $4); //@line 11311
     _lexer_next_token($0); //@line 11312
     break L4;
    }
    break;
   }
  default:
   {
    _parser_raise_error($0, 60); //@line 11318
   }
  }
 } while (0);
 STACKTOP = sp; //@line 11323
 return;
}
function _parser_parse_continue_statement($0) {
 $0 = $0 | 0;
 var $$0$ph = 0, $$037$off0$ph = 0, $$3 = 0, $$4 = 0, $1 = 0, $15 = 0, $19 = 0, $2 = 0, $23 = 0, $28 = 0, $29 = 0, $3 = 0, $34 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $46 = 0, $47 = 0, $brmerge = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11762
 STACKTOP = STACKTOP + 32 | 0; //@line 11763
 $1 = sp + 8 | 0; //@line 11764
 $2 = sp; //@line 11765
 $3 = sp + 20 | 0; //@line 11766
 $4 = sp + 16 | 0; //@line 11767
 _lexer_next_token($0); //@line 11768
 _parser_stack_iterator_init($0, $1); //@line 11769
 do {
  if (!((SAFE_HEAP_LOAD($0 + 191 >> 0 | 0, 1, 0) | 0) & 1)) {
   if ((SAFE_HEAP_LOAD($0 + 188 >> 0 | 0, 1, 0) | 0 | 0) == 1) {
    if (!(SAFE_HEAP_LOAD($0 + 206 >> 0 | 0, 1, 0) | 0)) {
     SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
     $$0$ph = 1; //@line 11785
     $$037$off0$ph = 0; //@line 11785
     L5 : while (1) {
      $15 = _parser_stack_iterator_read_uint8($1) | 0; //@line 11787
      if (!($15 << 24 >> 24)) {
       label = 6; //@line 11790
       break;
      } else {
       $19 = $15; //@line 11793
      }
      while (1) {
       if (!($19 << 24 >> 24 == 2 & (SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0) != 0)) {
        break;
       }
       _parser_stack_iterator_skip($1, 1); //@line 11803
       _parser_stack_iterator_read($1, $3, 12); //@line 11804
       if (_lexer_compare_identifier_to_current($0, $3) | 0) {
        label = 14; //@line 11807
        break L5;
       }
       _parser_stack_iterator_skip($1, 12); //@line 11810
       $34 = _parser_stack_iterator_read_uint8($1) | 0; //@line 11811
       if (!($34 << 24 >> 24)) {
        label = 6; //@line 11814
        break L5;
       } else {
        $19 = $34; //@line 11817
       }
      }
      $brmerge = $$037$off0$ph | ($19 + -11 & 255) < 2; //@line 11822
      if (($19 + -7 & 255) < 4) {
       $23 = $1; //@line 11831
       $28 = SAFE_HEAP_LOAD($23 + 4 | 0, 4, 0) | 0 | 0; //@line 11836
       $29 = $2; //@line 11837
       SAFE_HEAP_STORE($29 | 0, SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0, 4);
       SAFE_HEAP_STORE($29 + 4 | 0, $28 | 0, 4);
      } else {
       SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
      }
      _parser_stack_iterator_skip($1, _parser_statement_length($19) | 0); //@line 11847
      $$0$ph = $brmerge ? 25 : $$0$ph; //@line 11848
      $$037$off0$ph = $$037$off0$ph | $19 << 24 >> 24 == 10 & ($brmerge ^ 1); //@line 11848
     }
     if ((label | 0) == 6) {
      _parser_raise_error($0, 64); //@line 11851
     } else if ((label | 0) == 14) {
      _parser_stack_iterator_skip($2, 1); //@line 11855
      _parser_stack_iterator_read($2, $4, 4); //@line 11856
      $38 = _parser_emit_cbc_forward_branch_item($0, $$0$ph & 65535, SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0) | 0; //@line 11859
      SAFE_HEAP_STORE($4 | 0, $38 | 0, 4);
      $39 = $38 + 8 | 0; //@line 11861
      SAFE_HEAP_STORE($39 | 0, SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 128 | 0, 4);
      _parser_stack_iterator_write($2, $4, 4); //@line 11865
      _lexer_next_token($0); //@line 11866
      break;
     }
    } else {
     $$3 = 1; //@line 11870
     label = 15; //@line 11871
    }
   } else {
    $$3 = 1; //@line 11874
    label = 15; //@line 11875
   }
  } else {
   $$3 = 1; //@line 11878
   label = 15; //@line 11879
  }
 } while (0);
 do {
  if ((label | 0) == 15) {
   L20 : while (1) {
    label = 0; //@line 11885
    $42 = _parser_stack_iterator_read_uint8($1) | 0; //@line 11886
    switch ($42 << 24 >> 24) {
    case 0:
     {
      label = 16; //@line 11889
      break L20;
      break;
     }
    case 10:
    case 9:
    case 8:
    case 7:
     {
      label = 19; //@line 11894
      break L20;
      break;
     }
    case 12:
    case 11:
     {
      $$4 = 25; //@line 11899
      break;
     }
    default:
     {
      $$4 = $$3; //@line 11903
     }
    }
    _parser_stack_iterator_skip($1, _parser_statement_length($42) | 0); //@line 11907
    $$3 = $$4; //@line 11908
    label = 15; //@line 11909
   }
   if ((label | 0) == 16) {
    _parser_raise_error($0, 63); //@line 11912
   } else if ((label | 0) == 19) {
    _parser_stack_iterator_skip($1, 1); //@line 11916
    _parser_stack_iterator_read($1, $2, 4); //@line 11917
    $46 = _parser_emit_cbc_forward_branch_item($0, $$3 & 65535, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0) | 0; //@line 11920
    SAFE_HEAP_STORE($2 | 0, $46 | 0, 4);
    $47 = $46 + 8 | 0; //@line 11922
    SAFE_HEAP_STORE($47 | 0, SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 128 | 0, 4);
    _parser_stack_iterator_write($1, $2, 4); //@line 11926
    break;
   }
  }
 } while (0);
 STACKTOP = sp; //@line 11931
 return;
}
function _parser_error_to_string($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 do {
  switch ($0 | 0) {
  case 1:
   {
    $$0 = 9517; //@line 13369
    break;
   }
  case 2:
   {
    $$0 = 9481; //@line 13373
    break;
   }
  case 3:
   {
    $$0 = 9435; //@line 13377
    break;
   }
  case 4:
   {
    $$0 = 9398; //@line 13381
    break;
   }
  case 5:
   {
    $$0 = 9358; //@line 13385
    break;
   }
  case 6:
   {
    $$0 = 9326; //@line 13389
    break;
   }
  case 7:
   {
    $$0 = 9299; //@line 13393
    break;
   }
  case 8:
   {
    $$0 = 9274; //@line 13397
    break;
   }
  case 9:
   {
    $$0 = 9241; //@line 13401
    break;
   }
  case 10:
   {
    $$0 = 9197; //@line 13405
    break;
   }
  case 11:
   {
    $$0 = 9154; //@line 13409
    break;
   }
  case 12:
   {
    $$0 = 9138; //@line 13413
    break;
   }
  case 13:
   {
    $$0 = 9115; //@line 13417
    break;
   }
  case 14:
   {
    $$0 = 9075; //@line 13421
    break;
   }
  case 15:
   {
    $$0 = 9047; //@line 13425
    break;
   }
  case 16:
   {
    $$0 = 9026; //@line 13429
    break;
   }
  case 17:
   {
    $$0 = 9002; //@line 13433
    break;
   }
  case 18:
   {
    $$0 = 8953; //@line 13437
    break;
   }
  case 19:
   {
    $$0 = 8929; //@line 13441
    break;
   }
  case 20:
   {
    $$0 = 8909; //@line 13445
    break;
   }
  case 21:
   {
    $$0 = 8889; //@line 13449
    break;
   }
  case 22:
   {
    $$0 = 8869; //@line 13453
    break;
   }
  case 23:
   {
    $$0 = 8837; //@line 13457
    break;
   }
  case 24:
   {
    $$0 = 8808; //@line 13461
    break;
   }
  case 25:
   {
    $$0 = 8779; //@line 13465
    break;
   }
  case 26:
   {
    $$0 = 8733; //@line 13469
    break;
   }
  case 27:
   {
    $$0 = 8687; //@line 13473
    break;
   }
  case 28:
   {
    $$0 = 8632; //@line 13477
    break;
   }
  case 29:
   {
    $$0 = 8588; //@line 13481
    break;
   }
  case 30:
   {
    $$0 = 8536; //@line 13485
    break;
   }
  case 31:
   {
    $$0 = 8479; //@line 13489
    break;
   }
  case 32:
   {
    $$0 = 8428; //@line 13493
    break;
   }
  case 33:
   {
    $$0 = 8385; //@line 13497
    break;
   }
  case 34:
   {
    $$0 = 8337; //@line 13501
    break;
   }
  case 35:
   {
    $$0 = 8294; //@line 13505
    break;
   }
  case 36:
   {
    $$0 = 8254; //@line 13509
    break;
   }
  case 37:
   {
    $$0 = 8209; //@line 13513
    break;
   }
  case 38:
   {
    $$0 = 8167; //@line 13517
    break;
   }
  case 39:
   {
    $$0 = 8147; //@line 13521
    break;
   }
  case 40:
   {
    $$0 = 8127; //@line 13525
    break;
   }
  case 41:
   {
    $$0 = 8107; //@line 13529
    break;
   }
  case 42:
   {
    $$0 = 8087; //@line 13533
    break;
   }
  case 43:
   {
    $$0 = 8067; //@line 13537
    break;
   }
  case 44:
   {
    $$0 = 8017; //@line 13541
    break;
   }
  case 45:
   {
    $$0 = 7997; //@line 13545
    break;
   }
  case 46:
   {
    $$0 = 7976; //@line 13549
    break;
   }
  case 47:
   {
    $$0 = 7942; //@line 13553
    break;
   }
  case 48:
   {
    $$0 = 7909; //@line 13557
    break;
   }
  case 49:
   {
    $$0 = 7868; //@line 13561
    break;
   }
  case 50:
   {
    $$0 = 7819; //@line 13565
    break;
   }
  case 51:
   {
    $$0 = 7798; //@line 13569
    break;
   }
  case 52:
   {
    $$0 = 7777; //@line 13573
    break;
   }
  case 53:
   {
    $$0 = 7748; //@line 13577
    break;
   }
  case 54:
   {
    $$0 = 7728; //@line 13581
    break;
   }
  case 55:
   {
    $$0 = 7698; //@line 13585
    break;
   }
  case 56:
   {
    $$0 = 7674; //@line 13589
    break;
   }
  case 57:
   {
    $$0 = 7633; //@line 13593
    break;
   }
  case 58:
   {
    $$0 = 7592; //@line 13597
    break;
   }
  case 59:
   {
    $$0 = 7572; //@line 13601
    break;
   }
  case 60:
   {
    $$0 = 7551; //@line 13605
    break;
   }
  case 61:
   {
    $$0 = 7502; //@line 13609
    break;
   }
  case 62:
   {
    $$0 = 7453; //@line 13613
    break;
   }
  case 63:
   {
    $$0 = 7411; //@line 13617
    break;
   }
  case 64:
   {
    $$0 = 7359; //@line 13621
    break;
   }
  case 65:
   {
    $$0 = 7310; //@line 13625
    break;
   }
  case 66:
   {
    $$0 = 7288; //@line 13629
    break;
   }
  case 67:
   {
    $$0 = 7270; //@line 13633
    break;
   }
  case 68:
   {
    $$0 = 7232; //@line 13637
    break;
   }
  case 69:
   {
    $$0 = 7200; //@line 13641
    break;
   }
  default:
   {
    $$0 = 7190; //@line 13645
   }
  }
 } while (0);
 return $$0 | 0; //@line 13649
}
function _parser_parse_function_arguments($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $20 = 0, $29 = 0, $3 = 0, $36 = 0, $38 = 0, $40 = 0, $43 = 0, $44 = 0, $49 = 0, $56 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0, $68 = 0, $8 = 0, $9 = 0, label = 0;
 $2 = $0 + 188 | 0; //@line 16419
 $3 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0; //@line 16420
 L1 : do {
  if (($3 & 255 | 0) != ($1 | 0)) {
   $6 = $0 + 246 | 0; //@line 16425
   L3 : do {
    if ($3 << 24 >> 24 == 1) {
     $8 = $0 + 206 | 0; //@line 16429
     $9 = $0 + 200 | 0; //@line 16430
     $10 = $0 + 168 | 0; //@line 16431
     $11 = $0 + 208 | 0; //@line 16432
     $12 = $0 + 214 | 0; //@line 16433
     $13 = $0 + 264 | 0; //@line 16434
     $14 = $0 + 242 | 0; //@line 16435
     $15 = $0 + 189 | 0; //@line 16436
     while (1) {
      $16 = SAFE_HEAP_LOAD($6 | 0, 2, 0) | 0 | 0; //@line 16438
      if (SAFE_HEAP_LOAD($8 >> 0 | 0, 1, 0) | 0 | 0) {
       break L3;
      }
      _lexer_construct_literal_object($0, $9, 0); //@line 16444
      $20 = $16 << 16 >> 16 == (SAFE_HEAP_LOAD($6 | 0, 2, 0) | 0 | 0); //@line 16446
      if ($20) {
       label = 9; //@line 16448
      } else {
       if (!(SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0)) {
        if (!(SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0)) {
         label = 15; //@line 16456
        } else {
         label = 9; //@line 16458
        }
       } else {
        label = 9; //@line 16461
       }
      }
      if ((label | 0) == 9) {
       label = 0; //@line 16465
       SAFE_HEAP_STORE($10 | 0, SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 128 | 0, 4);
       if ((SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0 | 0) == 2) {
        $29 = (SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0) + 7 | 0; //@line 16473
        SAFE_HEAP_STORE($29 >> 0 | 0, (SAFE_HEAP_LOAD($29 >> 0 | 0, 1, 0) | 0) & -3 | 0, 1);
        SAFE_HEAP_STORE($10 | 0, (SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0) & -1793 | 512 | 0, 4);
       }
       if ($20) {
        if (($16 & 65535) > 32766) {
         label = 13; //@line 16485
         break;
        }
        $36 = _parser_list_append($0, $13) | 0; //@line 16488
        $38 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0; //@line 16490
        $40 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0; //@line 16492
        $43 = SAFE_HEAP_LOAD($38 + 4 | 0, 4, 0) | 0 | 0; //@line 16495
        $44 = $36; //@line 16496
        SAFE_HEAP_STORE($44 | 0, $40 | 0, 4);
        SAFE_HEAP_STORE($44 + 4 | 0, $43 | 0, 4);
        $49 = _bitshift64Lshr($40 | 0, $43 | 0, 56) | 0; //@line 16503
        SAFE_HEAP_STORE($36 + 7 >> 0 | 0, $49 & 64 | 21 | 0, 1);
        SAFE_HEAP_STORE($6 | 0, (SAFE_HEAP_LOAD($6 | 0, 2, 0) | 0 | 0) + 1 << 16 >> 16 | 0, 2);
        $56 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0; //@line 16512
        SAFE_HEAP_STORE($56 + 6 >> 0 | 0, 5 | 0, 1);
        $58 = $56 + 7 | 0; //@line 16515
        SAFE_HEAP_STORE($58 >> 0 | 0, (SAFE_HEAP_LOAD($58 >> 0 | 0, 1, 0) | 0) & 16 | 0, 1);
        SAFE_HEAP_STORE($56 | 0, 0 | 0, 4);
       } else {
        label = 15; //@line 16521
       }
      }
      if ((label | 0) == 15) {
       label = 0; //@line 16525
       $62 = (SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0) + 7 | 0; //@line 16527
       SAFE_HEAP_STORE($62 >> 0 | 0, SAFE_HEAP_LOAD($62 >> 0 | 0, 1, 0) | 0 | 21 | 0, 1);
      }
      $66 = (SAFE_HEAP_LOAD($14 | 0, 2, 0) | 0 | 0) + 1 << 16 >> 16; //@line 16533
      SAFE_HEAP_STORE($14 | 0, $66 | 0, 2);
      if (($66 & 65535) > 255) {
       label = 17; //@line 16537
       break;
      }
      _lexer_next_token($0); //@line 16540
      $68 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0; //@line 16541
      if ($68 << 24 >> 24 != 60) {
       label = 20; //@line 16544
       break;
      }
      _lexer_next_token($0); //@line 16547
      if ((SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0) != 1) {
       break L3;
      }
     }
     if ((label | 0) == 13) {
      _parser_raise_error($0, 2); //@line 16555
     } else if ((label | 0) == 17) {
      _parser_raise_error($0, 5); //@line 16559
     } else if ((label | 0) == 20) {
      if (($68 & 255 | 0) == ($1 | 0)) {
       SAFE_HEAP_STORE($0 + 244 | 0, SAFE_HEAP_LOAD($14 | 0, 2, 0) | 0 | 0 | 0, 2);
       break L1;
      } else {
       _parser_raise_error($0, ($1 | 0) == 55 ? 41 : 51); //@line 16573
      }
     }
    }
   } while (0);
   _parser_raise_error($0, 51); //@line 16579
  }
 } while (0);
 return;
}
function _ecma_op_create_arguments_object($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0131 = 0, $$0132135 = 0, $$0133134 = 0, $$sink = 0, $11 = 0, $20 = 0, $24 = 0, $26 = 0, $32 = 0, $34 = 0, $39 = 0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $5 = 0, $51 = 0, $52 = 0, $57 = 0, $58 = 0, $6 = 0, $62 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $74 = 0, $76 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 11396
 STACKTOP = STACKTOP + 32 | 0; //@line 11397
 $5 = sp + 16 | 0; //@line 11398
 $6 = sp; //@line 11399
 $9 = SAFE_HEAP_LOAD($4 + 4 | 0, 2, 1) | 0 | 0; //@line 11402
 $11 = ($9 & 8 | 0) != 0; //@line 11404
 if (!($9 & 4)) {
  $$0 = SAFE_HEAP_LOAD($4 + 7 >> 0 | 0, 1, 1) | 0 | 0; //@line 11411
  $$sink = 2; //@line 11411
 } else {
  $$0 = SAFE_HEAP_LOAD($4 + 8 | 0, 2, 1) | 0 | 0; //@line 11416
  $$sink = 3; //@line 11416
 }
 $20 = _ecma_builtin_get(0) | 0; //@line 11418
 if (($3 | 0) != 0 & ($11 ^ 1) & ($$0 | 0) != 0) {
  $24 = $$0 << 1; //@line 11426
  $26 = _ecma_create_object($20, $24 + 16 | 0, 6) | 0; //@line 11428
  SAFE_HEAP_STORE($26 + 8 >> 0 | 0, 0 | 0, 1);
  SAFE_HEAP_STORE($26 + 12 | 0, $1 | 0, 4);
  SAFE_HEAP_STORE($26 + 10 | 0, $$0 | 0, 2);
  $32 = $26 + 16 | 0; //@line 11437
  _memcpy($32 | 0, $4 + ($$sink * 6 | 0) | 0, $24 | 0) | 0; //@line 11438
  $$0132135 = 0; //@line 11439
  do {
   $34 = SAFE_HEAP_LOAD($32 + ($$0132135 << 1) | 0, 2, 0) | 0 | 0; //@line 11442
   if ($34 << 16 >> 16) {
    _ecma_ref_ecma_string(_jmem_decompress_pointer($34 & 65535) | 0); //@line 11447
   }
   $$0132135 = $$0132135 + 1 | 0; //@line 11449
  } while (($$0132135 | 0) != ($$0 | 0));
  $$0131 = $26; //@line 11452
 } else {
  $39 = _ecma_create_object($20, 16, 1) | 0; //@line 11459
  SAFE_HEAP_STORE($39 + 8 | 0, 51 | 0, 2);
  $$0131 = $39; //@line 11462
 }
 _ecma_deref_object($20); //@line 11464
 if ($3 | 0) {
  $$0133134 = 0; //@line 11467
  do {
   $45 = _ecma_new_ecma_string_from_uint32($$0133134) | 0; //@line 11469
   $46 = _ecma_create_named_data_property($$0131, $45, 28, 0) | 0; //@line 11470
   SAFE_HEAP_STORE($46 | 0, _ecma_copy_value_if_not_object(SAFE_HEAP_LOAD($2 + ($$0133134 << 2) | 0, 4, 0) | 0 | 0) | 0 | 0, 4);
   _ecma_deref_ecma_string($45); //@line 11475
   $$0133134 = $$0133134 + 1 | 0; //@line 11476
  } while (($$0133134 | 0) != ($3 | 0));
 }
 $42 = _ecma_new_ecma_length_string() | 0; //@line 11485
 $43 = _ecma_create_named_data_property($$0131, $42, 20, 0) | 0; //@line 11486
 SAFE_HEAP_STORE($43 | 0, _ecma_make_uint32_value($3) | 0 | 0, 4);
 _ecma_deref_ecma_string($42); //@line 11489
 _ecma_make_empty_property_descriptor($5); //@line 11490
 if ($11) {
  $51 = _ecma_builtin_get(6) | 0; //@line 11492
  _ecma_make_empty_property_descriptor($6); //@line 11493
  $52 = $6; //@line 11494
  $57 = SAFE_HEAP_LOAD($52 + 4 | 0, 4, 0) | 0 | 0; //@line 11499
  $58 = $5; //@line 11500
  SAFE_HEAP_STORE($58 | 0, SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0, 4);
  SAFE_HEAP_STORE($58 + 4 | 0, $57 | 0, 4);
  $62 = SAFE_HEAP_LOAD($5 | 0, 2, 0) | 0 | 0; //@line 11506
  SAFE_HEAP_STORE($5 + 8 | 0, $51 | 0, 4);
  SAFE_HEAP_STORE($5 + 12 | 0, $51 | 0, 4);
  SAFE_HEAP_STORE($5 | 0, $62 & -487 | 166 | 0, 2);
  $67 = _ecma_get_magic_string(29) | 0; //@line 11514
  _ecma_op_object_define_own_property($$0131, $67, $5, 0) | 0; //@line 11515
  _ecma_deref_ecma_string($67); //@line 11516
  $68 = _ecma_get_magic_string(30) | 0; //@line 11517
  _ecma_op_object_define_own_property($$0131, $68, $5, 0) | 0; //@line 11518
  _ecma_deref_ecma_string($68); //@line 11519
  _ecma_deref_object($51); //@line 11520
  $69 = _ecma_get_magic_string(53) | 0; //@line 11521
  _ecma_op_create_immutable_binding($1, $69, _ecma_make_object_value($$0131) | 0); //@line 11523
  $76 = $69; //@line 11524
 } else {
  $71 = _ecma_get_magic_string(29) | 0; //@line 11526
  $72 = _ecma_create_named_data_property($$0131, $71, 20, 0) | 0; //@line 11527
  SAFE_HEAP_STORE($72 | 0, _ecma_make_object_value($0) | 0 | 0, 4);
  _ecma_deref_ecma_string($71); //@line 11530
  $74 = _ecma_get_magic_string(53) | 0; //@line 11531
  _ecma_op_create_mutable_binding($1, $74, 0) | 0; //@line 11532
  _ecma_op_set_mutable_binding($1, $74, _ecma_make_object_value($$0131) | 0, 0) | 0; //@line 11534
  $76 = $74; //@line 11535
 }
 _ecma_deref_ecma_string($76); //@line 11537
 _ecma_deref_object($$0131); //@line 11538
 STACKTOP = sp; //@line 11539
 return;
}
function _parser_emit_cbc_backward_branch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$054 = 0, $$1$off0 = 0, $$2$off0 = 0, $$sink3 = 0, $10 = 0, $11 = 0, $12 = 0, $16 = 0, $17 = 0, $21 = 0, $23 = 0, $25 = 0, $29 = 0, $31 = 0, $32 = 0, $40 = 0, $41 = 0, $42 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $55 = 0, $57 = 0, $6 = 0, $61 = 0, $63 = 0, $66 = 0, $70 = 0, $72 = 0, $74 = 0, $77 = 0, $79 = 0, $9 = 0, label = 0;
 if (SAFE_HEAP_LOAD($0 + 240 | 0, 2, 0) | 0 | 0) {
  _parser_flush_cbc($0); //@line 13095
 }
 $6 = $0 + 168 | 0; //@line 13097
 SAFE_HEAP_STORE($6 | 0, SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 65536 | 0, 4);
 $9 = $0 + 260 | 0; //@line 13101
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0; //@line 13102
 $11 = $10 - $2 | 0; //@line 13103
 $12 = $1 & 65535; //@line 13104
 if (($1 & 65535) < 256) {
  $$0 = SAFE_HEAP_LOAD(6556 + $12 >> 0 | 0, 1, 0) | 0 | 0; //@line 13109
  $$054 = $1; //@line 13109
  $41 = $10; //@line 13109
 } else {
  $16 = $0 + 256 | 0; //@line 13111
  $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0; //@line 13112
  if ($17 >>> 0 > 59) {
   _parser_cbc_stream_alloc_page($0, $0 + 248 | 0); //@line 13116
   $23 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0; //@line 13118
  } else {
   $23 = $17; //@line 13120
  }
  $21 = SAFE_HEAP_LOAD($0 + 252 | 0, 4, 0) | 0 | 0; //@line 13123
  SAFE_HEAP_STORE($16 | 0, $23 + 1 | 0, 4);
  SAFE_HEAP_STORE($21 + 4 + $23 >> 0 | 0, 0 | 0, 1);
  $25 = $12 + 65280 | 0; //@line 13128
  $29 = SAFE_HEAP_LOAD(6793 + ($25 & 65535) >> 0 | 0, 1, 0) | 0 | 0; //@line 13132
  $31 = (SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0) + 1 | 0; //@line 13134
  SAFE_HEAP_STORE($9 | 0, $31 | 0, 4);
  $$0 = $29; //@line 13136
  $$054 = $25 & 65535; //@line 13136
  $41 = $31; //@line 13136
 }
 $32 = $0 + 172 | 0; //@line 13138
 SAFE_HEAP_STORE($32 | 0, (($$0 & 255) >>> 5) + 65532 + (SAFE_HEAP_LOAD($32 | 0, 2, 1) | 0 | 0) | 0, 2);
 $40 = $41 + 2 | 0; //@line 13147
 SAFE_HEAP_STORE($9 | 0, $40 | 0, 4);
 $42 = $11 >>> 0 > 65535; //@line 13149
 if ($42) {
  $$1$off0 = ($$054 & 65535) + 2 & 255; //@line 13154
  $$sink3 = 2; //@line 13154
  label = 12; //@line 13155
 } else {
  if ($11 >>> 0 > 255) {
   $$1$off0 = $$054 + 1 & 255; //@line 13162
   $$sink3 = 1; //@line 13162
   label = 12; //@line 13163
  } else {
   $$2$off0 = $$054 & 255; //@line 13165
  }
 }
 if ((label | 0) == 12) {
  SAFE_HEAP_STORE($9 | 0, $40 + $$sink3 | 0, 4);
  $$2$off0 = $$1$off0; //@line 13171
 }
 $48 = $0 + 248 | 0; //@line 13173
 $49 = $0 + 256 | 0; //@line 13174
 $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0; //@line 13175
 if ($50 >>> 0 > 59) {
  _parser_cbc_stream_alloc_page($0, $48); //@line 13178
  $55 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0; //@line 13180
 } else {
  $55 = $50; //@line 13182
 }
 $52 = $0 + 252 | 0; //@line 13184
 $53 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0; //@line 13185
 SAFE_HEAP_STORE($49 | 0, $55 + 1 | 0, 4);
 SAFE_HEAP_STORE($53 + 4 + $55 >> 0 | 0, $$2$off0 | 0, 1);
 if ($42) {
  $57 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0; //@line 13191
  if ($57 >>> 0 > 59) {
   _parser_cbc_stream_alloc_page($0, $48); //@line 13194
   $63 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0; //@line 13196
  } else {
   $63 = $57; //@line 13198
  }
  $61 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0; //@line 13202
  SAFE_HEAP_STORE($49 | 0, $63 + 1 | 0, 4);
  SAFE_HEAP_STORE($61 + 4 + $63 >> 0 | 0, $11 >>> 16 | 0, 1);
  label = 20; //@line 13207
 } else {
  if ($11 >>> 0 > 255) {
   label = 20; //@line 13211
  }
 }
 if ((label | 0) == 20) {
  $66 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0; //@line 13215
  if ($66 >>> 0 > 59) {
   _parser_cbc_stream_alloc_page($0, $48); //@line 13218
   $72 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0; //@line 13220
  } else {
   $72 = $66; //@line 13222
  }
  $70 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0; //@line 13226
  SAFE_HEAP_STORE($49 | 0, $72 + 1 | 0, 4);
  SAFE_HEAP_STORE($70 + 4 + $72 >> 0 | 0, $11 >>> 8 | 0, 1);
 }
 $74 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0; //@line 13232
 if ($74 >>> 0 > 59) {
  _parser_cbc_stream_alloc_page($0, $48); //@line 13235
  $79 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0; //@line 13237
 } else {
  $79 = $74; //@line 13239
 }
 $77 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0; //@line 13242
 SAFE_HEAP_STORE($49 | 0, $79 + 1 | 0, 4);
 SAFE_HEAP_STORE($77 + 4 + $79 >> 0 | 0, $11 | 0, 1);
 return;
}
function _pop_arg($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0) + (4 - 1) & ~(4 - 1); //@line 3567
      $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0; //@line 3568
      SAFE_HEAP_STORE($2 | 0, $9 + 4 | 0, 4);
      SAFE_HEAP_STORE($0 | 0, $10 | 0, 4);
      break L1;
      break;
     }
    case 10:
     {
      $16 = (SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0) + (4 - 1) & ~(4 - 1); //@line 3587
      $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0; //@line 3588
      SAFE_HEAP_STORE($2 | 0, $16 + 4 | 0, 4);
      $20 = $0; //@line 3593
      SAFE_HEAP_STORE($20 | 0, $17 | 0, 4);
      SAFE_HEAP_STORE($20 + 4 | 0, (($17 | 0) < 0) << 31 >> 31 | 0, 4);
      break L1;
      break;
     }
    case 11:
     {
      $29 = (SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0) + (4 - 1) & ~(4 - 1); //@line 3614
      $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0; //@line 3615
      SAFE_HEAP_STORE($2 | 0, $29 + 4 | 0, 4);
      $31 = $0; //@line 3618
      SAFE_HEAP_STORE($31 | 0, $30 | 0, 4);
      SAFE_HEAP_STORE($31 + 4 | 0, 0 | 0, 4);
      break L1;
      break;
     }
    case 12:
     {
      $40 = (SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0) + (8 - 1) & ~(8 - 1); //@line 3639
      $41 = $40; //@line 3640
      $43 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0; //@line 3642
      $46 = SAFE_HEAP_LOAD($41 + 4 | 0, 4, 0) | 0 | 0; //@line 3645
      SAFE_HEAP_STORE($2 | 0, $40 + 8 | 0, 4);
      $47 = $0; //@line 3648
      SAFE_HEAP_STORE($47 | 0, $43 | 0, 4);
      SAFE_HEAP_STORE($47 + 4 | 0, $46 | 0, 4);
      break L1;
      break;
     }
    case 13:
     {
      $56 = (SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0) + (4 - 1) & ~(4 - 1); //@line 3669
      $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0; //@line 3670
      SAFE_HEAP_STORE($2 | 0, $56 + 4 | 0, 4);
      $59 = ($57 & 65535) << 16 >> 16; //@line 3674
      $62 = $0; //@line 3677
      SAFE_HEAP_STORE($62 | 0, $59 | 0, 4);
      SAFE_HEAP_STORE($62 + 4 | 0, (($59 | 0) < 0) << 31 >> 31 | 0, 4);
      break L1;
      break;
     }
    case 14:
     {
      $71 = (SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0) + (4 - 1) & ~(4 - 1); //@line 3698
      $72 = SAFE_HEAP_LOAD($71 | 0, 4, 0) | 0 | 0; //@line 3699
      SAFE_HEAP_STORE($2 | 0, $71 + 4 | 0, 4);
      $73 = $0; //@line 3703
      SAFE_HEAP_STORE($73 | 0, $72 & 65535 | 0, 4);
      SAFE_HEAP_STORE($73 + 4 | 0, 0 | 0, 4);
      break L1;
      break;
     }
    case 15:
     {
      $82 = (SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0) + (4 - 1) & ~(4 - 1); //@line 3724
      $83 = SAFE_HEAP_LOAD($82 | 0, 4, 0) | 0 | 0; //@line 3725
      SAFE_HEAP_STORE($2 | 0, $82 + 4 | 0, 4);
      $85 = ($83 & 255) << 24 >> 24; //@line 3729
      $88 = $0; //@line 3732
      SAFE_HEAP_STORE($88 | 0, $85 | 0, 4);
      SAFE_HEAP_STORE($88 + 4 | 0, (($85 | 0) < 0) << 31 >> 31 | 0, 4);
      break L1;
      break;
     }
    case 16:
     {
      $97 = (SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0) + (4 - 1) & ~(4 - 1); //@line 3753
      $98 = SAFE_HEAP_LOAD($97 | 0, 4, 0) | 0 | 0; //@line 3754
      SAFE_HEAP_STORE($2 | 0, $97 + 4 | 0, 4);
      $99 = $0; //@line 3758
      SAFE_HEAP_STORE($99 | 0, $98 & 255 | 0, 4);
      SAFE_HEAP_STORE($99 + 4 | 0, 0 | 0, 4);
      break L1;
      break;
     }
    case 17:
     {
      $108 = (SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0) + (8 - 1) & ~(8 - 1); //@line 3779
      $109 = +(+SAFE_HEAP_LOAD_D($108 | 0, 8)); //@line 3780
      SAFE_HEAP_STORE($2 | 0, $108 + 8 | 0, 4);
      SAFE_HEAP_STORE_D($0 | 0, +$109, 8);
      break L1;
      break;
     }
    case 18:
     {
      $115 = (SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0) + (8 - 1) & ~(8 - 1); //@line 3799
      $116 = +(+SAFE_HEAP_LOAD_D($115 | 0, 8)); //@line 3800
      SAFE_HEAP_STORE($2 | 0, $115 + 8 | 0, 4);
      SAFE_HEAP_STORE_D($0 | 0, +$116, 8);
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function _ecma_op_object_find_own($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0129 = 0, $$0131 = 0, $$1130 = 0, $$13 = 0, $13 = 0, $17 = 0, $3 = 0, $30 = 0, $38 = 0, $42 = 0, $45 = 0, $52 = 0, $71 = 0, $77 = 0, label = 0;
 $3 = _ecma_get_object_type($1) | 0; //@line 12476
 L1 : do {
  switch ($3 | 0) {
  case 1:
   {
    if ((SAFE_HEAP_LOAD($1 + 8 | 0, 2, 0) | 0 | 0) == 28) {
     if (_ecma_string_is_length($2) | 0) {
      $$13 = _ecma_make_uint32_value(_ecma_string_get_length(_ecma_get_string_from_value(SAFE_HEAP_LOAD($1 + 12 | 0, 4, 0) | 0 | 0) | 0) | 0) | 0; //@line 12491
      break L1;
     }
     $13 = _ecma_string_get_array_index($2) | 0; //@line 12494
     if (($13 | 0) == -1) {
      label = 15; //@line 12497
     } else {
      $17 = _ecma_get_string_from_value(SAFE_HEAP_LOAD($1 + 12 | 0, 4, 0) | 0 | 0) | 0; //@line 12501
      if ($13 >>> 0 < (_ecma_string_get_length($17) | 0) >>> 0) {
       $$13 = _ecma_make_string_value(_ecma_new_ecma_string_from_code_unit(_ecma_string_get_char_at_pos($17, $13) | 0) | 0) | 0; //@line 12508
      } else {
       label = 15; //@line 12510
      }
     }
    } else {
     label = 15; //@line 12514
    }
    break;
   }
  case 4:
   {
    if (_ecma_string_is_length($2) | 0) {
     $$13 = _ecma_make_uint32_value(SAFE_HEAP_LOAD($1 + 8 | 0, 4, 0) | 0 | 0) | 0; //@line 12524
    } else {
     label = 15; //@line 12526
    }
    break;
   }
  case 6:
   {
    if (!(SAFE_HEAP_LOAD($1 + 8 >> 0 | 0, 1, 0) | 0)) {
     $30 = _ecma_string_get_array_index($2) | 0; //@line 12535
     if (($30 | 0) == -1) {
      label = 15; //@line 12538
     } else {
      if ($30 >>> 0 < (SAFE_HEAP_LOAD($1 + 10 | 0, 2, 1) | 0 | 0) >>> 0) {
       $38 = SAFE_HEAP_LOAD($1 + 16 + ($30 << 1) | 0, 2, 0) | 0 | 0; //@line 12547
       if (!($38 << 16 >> 16)) {
        label = 15; //@line 12550
       } else {
        $42 = _jmem_decompress_pointer($38 & 65535) | 0; //@line 12554
        $$13 = _ecma_op_get_binding_value(SAFE_HEAP_LOAD($1 + 12 | 0, 4, 0) | 0 | 0, $42, 1) | 0; //@line 12557
       }
      } else {
       label = 15; //@line 12560
      }
     }
    } else {
     label = 15; //@line 12564
    }
    break;
   }
  default:
   {
    label = 15; //@line 12569
   }
  }
 } while (0);
 L16 : do {
  if ((label | 0) == 15) {
   $45 = _ecma_find_named_property($1, $2) | 0; //@line 12575
   if (!$45) {
    L20 : do {
     if (_ecma_get_object_is_builtin($1) | 0) {
      $$0129 = _ecma_builtin_try_to_instantiate_property($1, $2) | 0; //@line 12582
     } else {
      if (!(_ecma_is_normal_or_arrow_function($3) | 0)) {
       switch ($3 | 0) {
       case 3:
        {
         $$0129 = _ecma_op_external_function_try_to_lazy_instantiate_property($1, $2) | 0; //@line 12589
         break L20;
         break;
        }
       case 5:
        {
         $$0129 = _ecma_op_bound_function_try_to_lazy_instantiate_property($1, $2) | 0; //@line 12595
         break L20;
         break;
        }
       default:
        {
         $$13 = 120; //@line 12600
         break L16;
        }
       }
      }
      if (!(_ecma_string_is_length($2) | 0)) {
       $$0129 = _ecma_op_function_try_to_lazy_instantiate_property($1, $2) | 0; //@line 12608
       break;
      }
      $52 = SAFE_HEAP_LOAD($1 + 12 | 0, 4, 0) | 0 | 0; //@line 12612
      if (!((SAFE_HEAP_LOAD($52 + 4 | 0, 2, 0) | 0) & 4)) {
       $$0131 = SAFE_HEAP_LOAD($52 + 7 >> 0 | 0, 1, 1) | 0 | 0; //@line 12621
      } else {
       $$0131 = SAFE_HEAP_LOAD($52 + 8 | 0, 2, 1) | 0 | 0; //@line 12626
      }
      $$13 = _ecma_make_uint32_value($$0131) | 0; //@line 12629
      break L16;
     }
    } while (0);
    if (!$$0129) {
     $$13 = 120; //@line 12635
     break;
    } else {
     $$1130 = $$0129; //@line 12638
    }
   } else {
    $$1130 = $45; //@line 12641
   }
   $71 = $$1130 + 7 & -4; //@line 12646
   if (((SAFE_HEAP_LOAD($$1130 >> 0 | 0, 1, 0) | 0) & 3) == 1) {
    $$13 = _ecma_fast_copy_value(SAFE_HEAP_LOAD($71 | 0, 4, 0) | 0 | 0) | 0; //@line 12653
    break;
   }
   $77 = _ecma_get_named_accessor_property_getter($71) | 0; //@line 12656
   if (!$77) {
    $$13 = 72; //@line 12659
   } else {
    $$13 = _ecma_op_function_call($77, $0, 0, 0) | 0; //@line 12662
   }
  }
 } while (0);
 return $$13 | 0; //@line 12666
}
function _vm_stack_find_finally($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0 = 0, $$0$ph = 0, $$083$be = 0, $$083100 = 0, $$08399 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $23 = 0, $26 = 0, $28 = 0, $38 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $55 = 0, $6 = 0, $60 = 0, $66 = 0, $7 = 0, $72 = 0, $73 = 0, $9 = 0, label = 0;
 $4 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 14366
 $$ = ($2 | 0) == 0 ? $3 : -1; //@line 14368
 $6 = $0 + 40 | 0; //@line 14369
 $7 = SAFE_HEAP_LOAD($6 | 0, 2, 0) | 0 | 0; //@line 14370
 L1 : do {
  if (!($7 << 16 >> 16)) {
   $$08399 = $4; //@line 14374
   $$3 = 0; //@line 14374
  } else {
   $9 = $0 + 8 | 0; //@line 14376
   $10 = ($2 | 0) == 1; //@line 14377
   $11 = $0 + 24 | 0; //@line 14378
   $$083100 = $4; //@line 14379
   $42 = $7; //@line 14379
   L3 : while (1) {
    $12 = $$083100 + -4 | 0; //@line 14381
    $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0; //@line 14382
    $14 = $13 >>> 4; //@line 14383
    if ($$ >>> 0 < $14 >>> 0) {
     $$08399 = $$083100; //@line 14386
     $$3 = 0; //@line 14386
     break L1;
    }
    $16 = $13 & 15; //@line 14389
    $17 = ($16 | 0) == 3; //@line 14390
    do {
     if (($16 + -3 | 0) >>> 0 < 2) {
      if (($$ | 0) == ($14 | 0)) {
       $$08399 = $$083100; //@line 14397
       $$3 = 0; //@line 14397
       break L1;
      }
      $20 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0; //@line 14400
      $21 = $20 + $14 | 0; //@line 14401
      if (!$17) {
       _ecma_deref_object(SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0); //@line 14404
       $47 = $$083100 + -8 | 0; //@line 14405
       SAFE_HEAP_STORE($11 | 0, _ecma_get_object_from_value(SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0) | 0 | 0, 4);
       if ((SAFE_HEAP_LOAD($21 >> 0 | 0, 1, 0) | 0 | 0) != 16) {
        label = 13; //@line 14412
        break L3;
       }
       $55 = (SAFE_HEAP_LOAD($6 | 0, 2, 1) | 0 | 0) + 65534 & 65535; //@line 14418
       SAFE_HEAP_STORE($6 | 0, $55 | 0, 2);
       $$083$be = $47; //@line 14420
       $73 = $55; //@line 14420
       break;
      }
      $23 = SAFE_HEAP_LOAD($21 + 1 >> 0 | 0, 1, 0) | 0 | 0; //@line 14424
      if (($23 + -17 & 255) >= 3) {
       $$0$ph = $21; //@line 14428
       label = 15; //@line 14429
       break L3;
      }
      $26 = $23 & 3; //@line 14433
      $28 = _vm_decode_branch_offset($21 + 2 | 0, $26) | 0; //@line 14435
      if ($10) {
       label = 9; //@line 14437
       break L3;
      }
      $38 = $21 + $28 | 0; //@line 14440
      if ((SAFE_HEAP_LOAD($38 >> 0 | 0, 1, 0) | 0 | 0) != 16) {
       $$0$ph = $38; //@line 14444
       label = 15; //@line 14445
       break L3;
      }
      $44 = ($42 & 65535) + 65534 & 65535; //@line 14450
      SAFE_HEAP_STORE($6 | 0, $44 | 0, 2);
      $$083$be = $$083100 + -8 | 0; //@line 14453
      $73 = $44; //@line 14453
     } else {
      $72 = _vm_stack_context_abort($0, $$083100) | 0; //@line 14455
      $$083$be = $72; //@line 14457
      $73 = SAFE_HEAP_LOAD($6 | 0, 2, 0) | 0 | 0; //@line 14457
     }
    } while (0);
    if (!($73 << 16 >> 16)) {
     $$08399 = $$083$be; //@line 14462
     $$3 = 0; //@line 14462
     break L1;
    } else {
     $$083100 = $$083$be; //@line 14465
     $42 = $73; //@line 14465
    }
   }
   if ((label | 0) == 9) {
    SAFE_HEAP_STORE($12 | 0, $28 + $21 - $20 << 4 | 4 | 0, 4);
    SAFE_HEAP_STORE($0 + 4 | 0, $21 + ($26 + 2) | 0, 4);
    $$08399 = $$083100; //@line 14480
    $$3 = 1; //@line 14480
    break;
   } else if ((label | 0) == 13) {
    $$0 = $21; //@line 14485
    $66 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0; //@line 14485
   } else if ((label | 0) == 15) {
    $$0 = $$0$ph; //@line 14489
    $66 = $20; //@line 14489
   }
   $60 = (SAFE_HEAP_LOAD($$0 + 1 >> 0 | 0, 1, 0) | 0) & 3; //@line 14494
   SAFE_HEAP_STORE($12 | 0, (_vm_decode_branch_offset($$0 + 2 | 0, $60) | 0) + $$0 - $66 << 4 | $2 | 0, 4);
   SAFE_HEAP_STORE($0 + 4 | 0, $$0 + ($60 + 2) | 0, 4);
   $$08399 = $$083100; //@line 14507
   $$3 = 1; //@line 14507
  }
 } while (0);
 SAFE_HEAP_STORE($1 | 0, $$08399 | 0, 4);
 return $$3 | 0; //@line 14511
}
function _parse_update_branches($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$0$ph = 0, $$089$ph = 0, $$089$ph$phi = 0, $$090 = 0, $$091 = 0, $$092 = 0, $$093 = 0, $$094 = 0, $$095 = 0, $$097$ph = 0, $$098 = 0, $$1 = 0, $$102 = 0, $$1101 = 0, $$196 = 0, $$2 = 0, $10 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0, $4 = 0, $61 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $cbc_ext_flags$sink = 0, $scevgep106 = 0;
 $2 = $0 + 248 | 0; //@line 18340
 $4 = $0 + 252 | 0; //@line 18342
 $7 = SAFE_HEAP_LOAD($0 + 256 | 0, 4, 0) | 0 | 0; //@line 18345
 $8 = $7 >>> 0 > 59; //@line 18346
 $$ = $8 ? 0 : SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0; //@line 18347
 $$102 = $8 ? 0 : $7; //@line 18348
 $$0$ph = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 18349
 $$089$ph = 0; //@line 18349
 $$097$ph = 0; //@line 18349
 L1 : while (1) {
  $9 = ($$0$ph | 0) != ($$ | 0); //@line 18351
  $10 = $1 + $$097$ph | 0; //@line 18352
  $$098 = 0; //@line 18353
  do {
   if (!($$098 >>> 0 < $$102 >>> 0 | $9)) {
    break L1;
   }
   if ((SAFE_HEAP_LOAD($$0$ph + 4 + $$098 >> 0 | 0, 1, 0) | 0 | 0) < 0) {
    if (!$$098) {
     $$093 = 0; //@line 18366
    } else {
     $$093 = (SAFE_HEAP_LOAD($$098 + -1 + ($$0$ph + 4) >> 0 | 0, 1, 0) | 0) & 127; //@line 18372
    }
    $20 = $$093 & 255; //@line 18374
    $21 = $10 + $20 | 0; //@line 18375
    $22 = SAFE_HEAP_LOAD($21 >> 0 | 0, 1, 0) | 0 | 0; //@line 18376
    if (!($22 << 24 >> 24)) {
     $24 = $21 + 1 | 0; //@line 18379
     $$095 = $24; //@line 18381
     $27 = SAFE_HEAP_LOAD($24 >> 0 | 0, 1, 0) | 0 | 0; //@line 18381
     $cbc_ext_flags$sink = 6793; //@line 18381
    } else {
     $$095 = $21; //@line 18383
     $27 = $22; //@line 18383
     $cbc_ext_flags$sink = 6556; //@line 18383
    }
    $$094 = SAFE_HEAP_LOAD($cbc_ext_flags$sink + ($27 & 255) >> 0 | 0, 1, 0) | 0 | 0; //@line 18387
    $30 = $27 & 3; //@line 18389
    $31 = $$095 + 1 | 0; //@line 18390
    $$090 = $30; //@line 18391
    $$091 = 0; //@line 18391
    $$196 = $31; //@line 18391
    while (1) {
     $$091 = SAFE_HEAP_LOAD($$196 >> 0 | 0, 1, 1) | 0 | $$091 << 8; //@line 18396
     $$090 = $$090 + -1 | 0; //@line 18398
     if (!$$090) {
      break;
     } else {
      $$196 = $$196 + 1 | 0; //@line 18403
     }
    }
    $scevgep106 = $31 + $30 | 0; //@line 18406
    do {
     if (!($$094 & 16)) {
      if ($$091 >>> 0 < $$098 >>> 0) {
       $$092 = $30; //@line 18420
       $$1 = $20 - ((SAFE_HEAP_LOAD($$098 + -1 - $$091 + ($$0$ph + 4) >> 0 | 0, 1, 0) | 0) & 127) | 0; //@line 18420
       $$2 = $scevgep106; //@line 18420
       break;
      }
      if (($$091 | 0) == ($$098 | 0)) {
       $$092 = $30; //@line 18425
       $$1 = $20; //@line 18425
       $$2 = $scevgep106; //@line 18425
      } else {
       $$092 = $30; //@line 18429
       $$1 = _parser_update_backward_branch($$089$ph, $$091 - $$098 | 0, $$093) | 0; //@line 18429
       $$2 = $scevgep106; //@line 18429
      }
     } else {
      $$092 = $30; //@line 18434
      $$1 = _parser_update_forward_branch($$0$ph, $$091 + $$098 | 0, $$093) | 0; //@line 18434
      $$2 = $scevgep106; //@line 18434
     }
    } while (0);
    while (1) {
     $$2 = $$2 + -1 | 0; //@line 18438
     SAFE_HEAP_STORE($$2 >> 0 | 0, $$1 | 0, 1);
     $$092 = $$092 + -1 | 0; //@line 18442
     if (!$$092) {
      break;
     } else {
      $$1 = $$1 >>> 8; //@line 18447
     }
    }
   }
   $$098 = $$098 + 1 | 0; //@line 18451
  } while ($$098 >>> 0 <= 59);
  $61 = SAFE_HEAP_LOAD($$0$ph | 0, 4, 0) | 0 | 0; //@line 18459
  SAFE_HEAP_STORE($$0$ph | 0, $$089$ph | 0, 4);
  $66 = ((SAFE_HEAP_LOAD($$0$ph + 63 >> 0 | 0, 1, 0) | 0) & 127) + $$097$ph | 0; //@line 18465
  $$089$ph$phi = $$0$ph; //@line 18466
  $$0$ph = $61; //@line 18466
  $$097$ph = $66; //@line 18466
  $$089$ph = $$089$ph$phi; //@line 18466
 }
 if (!$$) {
  $$1101 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0; //@line 18471
 } else {
  SAFE_HEAP_STORE($$ | 0, $$089$ph | 0, 4);
  $$1101 = $$; //@line 18474
 }
 SAFE_HEAP_STORE($4 | 0, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($2 | 0, $$1101 | 0, 4);
 return;
}
function _ecma_builtin_object_object_define_properties($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01 = 0, $$01012 = 0, $$0102$lcssa = 0, $$01028 = 0, $$098$lcssa = 0, $$09810 = 0, $$0999 = 0, $$1 = 0, $$11003 = 0, $$1103 = 0, $$2 = 0, $$2104 = 0, $$3$lcssa = 0, $$34 = 0, $$4 = 0, $$5 = 0, $$7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $18 = 0, $21 = 0, $26 = 0, $33 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0;
 if (_ecma_is_value_object($0) | 0) {
  $4 = _ecma_get_object_from_value($0) | 0; //@line 6110
  $5 = _ecma_op_to_object($1) | 0; //@line 6111
  if (($5 | 0) == 24) {
   $$7 = 24; //@line 6114
  } else {
   $7 = _ecma_get_object_from_value($5) | 0; //@line 6116
   $8 = _ecma_op_object_get_property_names($7, 0, 1, 0) | 0; //@line 6117
   $10 = SAFE_HEAP_LOAD($8 + 4 | 0, 4, 0) | 0 | 0; //@line 6119
   $11 = _ecma_collection_iterator_init($8) | 0; //@line 6120
   $12 = $10 << 4; //@line 6121
   $13 = _jmem_heap_alloc_block($12) | 0; //@line 6122
   L4 : do {
    if (!$11) {
     $$0102$lcssa = 0; //@line 6126
     $$098$lcssa = 8; //@line 6126
    } else {
     $$01028 = 0; //@line 6128
     $$09810 = 8; //@line 6128
     $$0999 = $11; //@line 6128
     while (1) {
      if (!(_ecma_is_value_empty($$09810) | 0)) {
       $$0102$lcssa = $$01028; //@line 6132
       $$098$lcssa = $$09810; //@line 6132
       break L4;
      }
      $18 = _ecma_op_object_get($7, _ecma_get_string_from_value(SAFE_HEAP_LOAD($$0999 | 0, 4, 0) | 0 | 0) | 0) | 0; //@line 6137
      if (($18 | 0) == 24) {
       $$2 = 24; //@line 6140
       $$2104 = $$01028; //@line 6140
      } else {
       $21 = _ecma_op_to_property_descriptor($18, $13 + ($$01028 << 4) | 0) | 0; //@line 6143
       if (($21 | 0) == 24) {
        $$1 = 24; //@line 6146
        $$1103 = $$01028; //@line 6146
       } else {
        _ecma_free_value($21); //@line 6149
        $$1 = $$09810; //@line 6150
        $$1103 = $$01028 + 1 | 0; //@line 6150
       }
       _ecma_free_value($18); //@line 6152
       $$2 = $$1; //@line 6153
       $$2104 = $$1103; //@line 6153
      }
      $$0999 = _ecma_collection_iterator_next($$0999) | 0; //@line 6155
      if (!$$0999) {
       $$0102$lcssa = $$2104; //@line 6158
       $$098$lcssa = $$2; //@line 6158
       break;
      } else {
       $$01028 = $$2104; //@line 6161
       $$09810 = $$2; //@line 6161
      }
     }
    }
   } while (0);
   $26 = _ecma_collection_iterator_init($8) | 0; //@line 6166
   L15 : do {
    if (!$10) {
     $$3$lcssa = $$098$lcssa; //@line 6170
    } else {
     $$01012 = 0; //@line 6172
     $$11003 = $26; //@line 6172
     $$34 = $$098$lcssa; //@line 6172
     while (1) {
      if (!(_ecma_is_value_empty($$34) | 0)) {
       $$3$lcssa = $$34; //@line 6176
       break L15;
      }
      $33 = _ecma_op_object_define_own_property($4, _ecma_get_string_from_value(SAFE_HEAP_LOAD($$11003 | 0, 4, 0) | 0 | 0) | 0, $13 + ($$01012 << 4) | 0, 1) | 0; //@line 6182
      if (($33 | 0) == 24) {
       $$4 = 24; //@line 6185
      } else {
       _ecma_free_value($33); //@line 6187
       $$4 = $$34; //@line 6188
      }
      $$11003 = _ecma_collection_iterator_next($$11003) | 0; //@line 6190
      $$01012 = $$01012 + 1 | 0; //@line 6191
      if ($$01012 >>> 0 >= $10 >>> 0) {
       $$3$lcssa = $$4; //@line 6196
       break;
      } else {
       $$34 = $$4; //@line 6194
      }
     }
    }
   } while (0);
   if ($$0102$lcssa | 0) {
    $$01 = 0; //@line 6204
    do {
     _ecma_free_property_descriptor($13 + ($$01 << 4) | 0); //@line 6207
     $$01 = $$01 + 1 | 0; //@line 6208
    } while (($$01 | 0) != ($$0102$lcssa | 0));
   }
   if ($13 | 0) {
    _jmem_heap_free_block($13, $12); //@line 6219
   }
   _ecma_free_values_collection($8, 1); //@line 6221
   if (_ecma_is_value_empty($$3$lcssa) | 0) {
    $$5 = _ecma_copy_value($0) | 0; //@line 6225
   } else {
    $$5 = $$3$lcssa; //@line 6227
   }
   _ecma_free_value($5); //@line 6229
   $$7 = $$5; //@line 6230
  }
 } else {
  $$7 = _ecma_raise_type_error(6512) | 0; //@line 6234
 }
 return $$7 | 0; //@line 6236
}
function _parser_scan_statement($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $7 = 0;
 L1 : do {
  switch ($1 | 0) {
  case 74:
  case 68:
  case 80:
  case 62:
  case 64:
  case 58:
   {
    $$0 = 0; //@line 16944
    break;
   }
  case 67:
  case 72:
  case 76:
  case 73:
  case 78:
   {
    _lexer_next_token($0); //@line 16948
    if ((SAFE_HEAP_LOAD($0 + 188 >> 0 | 0, 1, 0) | 0 | 0) == 52) {
     _parser_stack_push_uint8($0, 2); //@line 16953
     SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
     $$0 = 0; //@line 16955
     break L1;
    } else {
     _parser_raise_error($0, 39); //@line 16958
    }
    break;
   }
  case 71:
   {
    _lexer_next_token($0); //@line 16964
    $7 = $0 + 188 | 0; //@line 16965
    if ((SAFE_HEAP_LOAD($7 >> 0 | 0, 1, 0) | 0 | 0) == 52) {
     _lexer_next_token($0); //@line 16969
     _parser_stack_push_uint8($0, 2); //@line 16970
     SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
     $$0 = (SAFE_HEAP_LOAD($7 >> 0 | 0, 1, 0) | 0 | 0) != 66; //@line 16974
     break L1;
    } else {
     _parser_raise_error($0, 39); //@line 16977
    }
    break;
   }
  case 79:
  case 66:
   {
    SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
    $$0 = 0; //@line 16984
    break;
   }
  case 69:
   {
    _lexer_next_token($0); //@line 16988
    if (!((SAFE_HEAP_LOAD($0 + 191 >> 0 | 0, 1, 0) | 0) & 1)) {
     if ((SAFE_HEAP_LOAD($0 + 188 >> 0 | 0, 1, 0) | 0 | 0) == 58) {
      $$0 = 1; //@line 16998
     } else {
      SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
      $$0 = 1; //@line 17001
     }
    } else {
     $$0 = 1; //@line 17004
    }
    break;
   }
  case 70:
  case 61:
   {
    _lexer_next_token($0); //@line 17009
    if (!((SAFE_HEAP_LOAD($0 + 191 >> 0 | 0, 1, 0) | 0) & 1)) {
     if ((SAFE_HEAP_LOAD($0 + 188 >> 0 | 0, 1, 0) | 0 | 0) == 1) {
      if (!(SAFE_HEAP_LOAD($0 + 206 >> 0 | 0, 1, 0) | 0)) {
       $$0 = 0; //@line 17023
       break L1;
      }
     }
    }
    $$0 = 1; //@line 17028
    break;
   }
  case 77:
   {
    _lexer_next_token($0); //@line 17032
    if ((SAFE_HEAP_LOAD($0 + 188 >> 0 | 0, 1, 0) | 0 | 0) == 59) {
     $$0 = 0; //@line 17037
    } else {
     _parser_raise_error($0, 43); //@line 17039
    }
    break;
   }
  case 63:
   {
    _parser_stack_push_uint8($0, 4); //@line 17045
    SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
    $$0 = 0; //@line 17047
    break;
   }
  case 54:
   {
    if (($2 + -7 | 0) >>> 0 >= 3) {
     SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
     $$0 = 1; //@line 17055
     break L1;
    }
    _parser_stack_pop_uint8($0); //@line 17058
    switch ($2 | 0) {
    case 8:
     {
      SAFE_HEAP_STORE($3 | 0, 2 | 0, 4);
      $$0 = 0; //@line 17062
      break L1;
      break;
     }
    case 9:
     {
      break;
     }
    default:
     {
      $$0 = 0; //@line 17070
      break L1;
     }
    }
    SAFE_HEAP_STORE($3 | 0, 2 | 0, 4);
    _lexer_next_token($0); //@line 17075
    switch (SAFE_HEAP_LOAD($0 + 188 >> 0 | 0, 1, 0) | 0 | 0) {
    case 54:
    case 60:
     {
      $$0 = 1; //@line 17080
      break L1;
      break;
     }
    default:
     {}
    }
    _parser_raise_error($0, 50); //@line 17087
    break;
   }
  case 51:
   {
    _parser_stack_push_uint8($0, 7); //@line 17092
    $$0 = 0; //@line 17093
    break;
   }
  case 75:
   {
    _parser_stack_push_uint8($0, 7); //@line 17097
    SAFE_HEAP_STORE($3 | 0, 5 | 0, 4);
    $$0 = 0; //@line 17099
    break;
   }
  default:
   {
    SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
    if (($1 | 0) == 1) {
     if (!(SAFE_HEAP_LOAD($0 + 206 >> 0 | 0, 1, 0) | 0)) {
      _lexer_next_token($0); //@line 17110
      if ((SAFE_HEAP_LOAD($0 + 188 >> 0 | 0, 1, 0) | 0 | 0) == 59) {
       SAFE_HEAP_STORE($3 | 0, 4 | 0, 4);
       $$0 = 0; //@line 17116
       break L1;
      } else {
       SAFE_HEAP_STORE($3 | 0, 2 | 0, 4);
       $$0 = 1; //@line 17120
       break L1;
      }
     } else {
      $$0 = 1; //@line 17124
     }
    } else {
     $$0 = 1; //@line 17127
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 17132
}
function _parser_copy_identifiers($0) {
 $0 = $0 | 0;
 var $1 = 0, $15 = 0, $2 = 0, $26 = 0, $28 = 0, $3 = 0, $30 = 0, $33 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $44 = 0, $5 = 0, $53 = 0, $55 = 0, $60 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17451
 STACKTOP = STACKTOP + 64 | 0; //@line 17452
 $1 = sp + 40 | 0; //@line 17453
 $2 = sp + 16 | 0; //@line 17454
 $3 = sp; //@line 17455
 $5 = SAFE_HEAP_LOAD($0 + 176 | 0, 4, 0) | 0 | 0; //@line 17457
 do {
  if ($5 | 0) {
   $7 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0; //@line 17461
   if ($7 & 2 | 0) {
    if ((SAFE_HEAP_LOAD($0 + 168 | 0, 4, 0) | 0) & 2048 | 0) {
     SAFE_HEAP_STORE($5 | 0, $7 | 2048 | 0, 4);
     break;
    }
    $15 = $5 + 44 | 0; //@line 17474
    SAFE_HEAP_STORE($2 | 0, SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0, 4);
    SAFE_HEAP_STORE($2 + 4 | 0, SAFE_HEAP_LOAD($15 + 4 | 0, 4, 0) | 0 | 0, 4);
    SAFE_HEAP_STORE($2 + 8 | 0, SAFE_HEAP_LOAD($15 + 8 | 0, 4, 0) | 0 | 0, 4);
    SAFE_HEAP_STORE($2 + 12 | 0, SAFE_HEAP_LOAD($0 + 276 | 0, 4, 0) | 0 | 0, 4);
    SAFE_HEAP_STORE($2 + 16 | 0, SAFE_HEAP_LOAD($0 + 280 | 0, 4, 0) | 0 | 0, 4);
    SAFE_HEAP_STORE($2 + 20 | 0, SAFE_HEAP_LOAD($0 + 284 | 0, 4, 0) | 0 | 0, 4);
    _parser_list_iterator_init($0 + 264 | 0, $1); //@line 17489
    $26 = _parser_list_iterator_next($1) | 0; //@line 17490
    L7 : do {
     if ($26 | 0) {
      $28 = $5 + 24 | 0; //@line 17494
      $30 = $26; //@line 17495
      while (1) {
       if (!(SAFE_HEAP_LOAD($30 + 6 >> 0 | 0, 1, 0) | 0)) {
        $33 = $30 + 7 | 0; //@line 17501
        if (!((SAFE_HEAP_LOAD($33 >> 0 | 0, 1, 0) | 0) & 1)) {
         _parser_list_iterator_init($2, $3); //@line 17506
         $37 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0; //@line 17507
         $39 = SAFE_HEAP_LOAD($30 + 4 | 0, 2, 0) | 0 | 0; //@line 17509
         $40 = $39 & 65535; //@line 17510
         $41 = _parser_list_iterator_next($3) | 0; //@line 17511
         L14 : do {
          if (!$41) {
           label = 15; //@line 17515
          } else {
           $44 = $41; //@line 17517
           while (1) {
            if (!(SAFE_HEAP_LOAD($44 + 6 >> 0 | 0, 1, 0) | 0)) {
             if ((SAFE_HEAP_LOAD($44 + 4 | 0, 2, 0) | 0 | 0) == $39 << 16 >> 16) {
              if (!(_memcmp(SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0, $37, $40) | 0)) {
               break;
              }
             }
            }
            $53 = _parser_list_iterator_next($3) | 0; //@line 17535
            if (!$53) {
             label = 15; //@line 17538
             break L14;
            } else {
             $44 = $53; //@line 17541
            }
           }
           $55 = $44 + 7 | 0; //@line 17544
           SAFE_HEAP_STORE($55 >> 0 | 0, SAFE_HEAP_LOAD($55 >> 0 | 0, 1, 0) | 0 | 2 | 0, 1);
          }
         } while (0);
         if ((label | 0) == 15) {
          label = 0; //@line 17551
          if ((SAFE_HEAP_LOAD($28 | 0, 2, 1) | 0 | 0) > 32766) {
           break;
          }
          $60 = _parser_list_append($0, $2) | 0; //@line 17557
          SAFE_HEAP_STORE($15 | 0, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0, 4);
          SAFE_HEAP_STORE($15 + 4 | 0, SAFE_HEAP_LOAD($2 + 4 | 0, 4, 0) | 0 | 0, 4);
          SAFE_HEAP_STORE($15 + 8 | 0, SAFE_HEAP_LOAD($2 + 8 | 0, 4, 0) | 0 | 0, 4);
          SAFE_HEAP_STORE($60 + 4 | 0, $39 | 0, 2);
          SAFE_HEAP_STORE($60 + 6 >> 0 | 0, 0 | 0, 1);
          SAFE_HEAP_STORE($60 + 7 >> 0 | 0, (SAFE_HEAP_LOAD($33 >> 0 | 0, 1, 0) | 0) & 64 | 34 | 0, 1);
          SAFE_HEAP_STORE($60 | 0, $37 | 0, 4);
          SAFE_HEAP_STORE($33 >> 0 | 0, SAFE_HEAP_LOAD($33 >> 0 | 0, 1, 0) | 0 | 64 | 0, 1);
          SAFE_HEAP_STORE($28 | 0, (SAFE_HEAP_LOAD($28 | 0, 2, 0) | 0 | 0) + 1 << 16 >> 16 | 0, 2);
         }
        }
       }
       $30 = _parser_list_iterator_next($1) | 0; //@line 17578
       if (!$30) {
        break L7;
       }
      }
      _parser_raise_error($0, 2); //@line 17586
     }
    } while (0);
   }
  }
 } while (0);
 STACKTOP = sp; //@line 17593
 return;
}
function _parser_parse_try_statement_end($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $16 = 0, $2 = 0, $23 = 0, $26 = 0, $28 = 0, $29 = 0, $33 = 0, $36 = 0, $40 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12001
 STACKTOP = STACKTOP + 32 | 0; //@line 12002
 $1 = sp + 8 | 0; //@line 12003
 $2 = sp; //@line 12004
 _parser_stack_iterator_init($0, $2); //@line 12005
 _parser_stack_iterator_skip($2, 1); //@line 12006
 _parser_stack_iterator_read($2, $1, 12); //@line 12007
 _lexer_next_token($0); //@line 12008
 L1 : do {
  if ((SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) == 2) {
   _parser_flush_cbc($0); //@line 12013
   $5 = $0 + 172 | 0; //@line 12014
   SAFE_HEAP_STORE($5 | 0, (SAFE_HEAP_LOAD($5 | 0, 2, 1) | 0 | 0) + 65534 | 0, 2);
   _parser_emit_cbc($0, 16); //@line 12020
   _parser_set_branch_to_current_position($0, $1 + 4 | 0); //@line 12022
   label = 8; //@line 12023
  } else {
   _parser_set_branch_to_current_position($0, $1 + 4 | 0); //@line 12026
   $12 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 12027
   switch ($12 | 0) {
   case 1:
    {
     if ((SAFE_HEAP_LOAD($0 + 188 >> 0 | 0, 1, 0) | 0 | 0) == 68) {
      label = 8; //@line 12034
      break L1;
     }
     _parser_flush_cbc($0); //@line 12037
     $16 = $0 + 172 | 0; //@line 12038
     SAFE_HEAP_STORE($16 | 0, (SAFE_HEAP_LOAD($16 | 0, 2, 1) | 0 | 0) + 65534 | 0, 2);
     _parser_emit_cbc($0, 16); //@line 12044
     _parser_flush_cbc($0); //@line 12045
     SAFE_HEAP_STORE($1 | 0, 2 | 0, 4);
     label = 10; //@line 12047
     break L1;
     break;
    }
   case 0:
    {
     if (((SAFE_HEAP_LOAD($0 + 188 >> 0 | 0, 1, 0) | 0 | 0) + -67 & 255) < 2) {
      label = 8; //@line 12057
      break L1;
     }
     _parser_raise_error($0, 48); //@line 12060
     break;
    }
   default:
    {
     $23 = $12; //@line 12065
     label = 9; //@line 12066
     break L1;
    }
   }
  }
 } while (0);
 if ((label | 0) == 8) {
  $23 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 12074
  label = 9; //@line 12075
 }
 if ((label | 0) == 9) {
  if (($23 | 0) == 2) {
   label = 10; //@line 12080
  } else {
   $26 = $0 + 188 | 0; //@line 12082
   $28 = (SAFE_HEAP_LOAD($26 >> 0 | 0, 1, 0) | 0 | 0) == 67; //@line 12084
   _lexer_next_token($0); //@line 12085
   $29 = SAFE_HEAP_LOAD($26 >> 0 | 0, 1, 0) | 0 | 0; //@line 12086
   do {
    if ($28) {
     if ($29 << 24 >> 24 != 52) {
      _parser_raise_error($0, 39); //@line 12091
     }
     _lexer_expect_identifier($0, 0); //@line 12094
     $33 = (SAFE_HEAP_LOAD($0 + 208 | 0, 4, 0) | 0 | 0) + 7 | 0; //@line 12097
     SAFE_HEAP_STORE($33 >> 0 | 0, SAFE_HEAP_LOAD($33 >> 0 | 0, 1, 0) | 0 | 2 | 0, 1);
     $36 = $0 + 168 | 0; //@line 12101
     SAFE_HEAP_STORE($36 | 0, SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 1024 | 0, 4);
     $40 = SAFE_HEAP_LOAD($0 + 212 | 0, 2, 0) | 0 | 0; //@line 12106
     _lexer_next_token($0); //@line 12107
     if ((SAFE_HEAP_LOAD($26 >> 0 | 0, 1, 0) | 0 | 0) != 55) {
      _parser_raise_error($0, 41); //@line 12111
     }
     _lexer_next_token($0); //@line 12114
     if ((SAFE_HEAP_LOAD($26 >> 0 | 0, 1, 0) | 0 | 0) == 51) {
      SAFE_HEAP_STORE($1 | 0, 1 | 0, 4);
      _parser_emit_cbc_forward_branch($0, 273, $1 + 4 | 0); //@line 12120
      _parser_emit_cbc_literal($0, 202, $40); //@line 12121
      _parser_flush_cbc($0); //@line 12122
      break;
     } else {
      _parser_raise_error($0, 40); //@line 12125
     }
    } else {
     if ($29 << 24 >> 24 == 51) {
      SAFE_HEAP_STORE($1 | 0, 2 | 0, 4);
      _parser_emit_cbc_forward_branch($0, 277, $1 + 4 | 0); //@line 12133
      break;
     } else {
      _parser_raise_error($0, 40); //@line 12136
     }
    }
   } while (0);
   _lexer_next_token($0); //@line 12141
   _parser_stack_iterator_write($2, $1, 12); //@line 12142
  }
 }
 if ((label | 0) == 10) {
  _parser_stack_pop($0, 0, 13); //@line 12146
  _parser_stack_iterator_init($0, $0 + 180 | 0); //@line 12148
 }
 STACKTOP = sp; //@line 12150
 return;
}
function _ecma_compare_ecma_strings_relational($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$033 = 0, $$034 = 0, $$035 = 0, $$036 = 0, $$off0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $32 = 0, $34 = 0, $37 = 0, $39 = 0, $53 = 0, $55 = 0, $58 = 0, $60 = 0, $extract$t39 = 0, sp = 0;
 sp = STACKTOP; //@line 4767
 STACKTOP = STACKTOP + 32 | 0; //@line 4768
 $2 = sp + 10 | 0; //@line 4769
 $3 = sp; //@line 4770
 L1 : do {
  if (($0 | 0) == ($1 | 0)) {
   $$036 = 0; //@line 4774
  } else {
   $10 = SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0 | 0; //@line 4781
   do {
    if ((SAFE_HEAP_LOAD($0 + 2 | 0, 2, 0) | 0 | 0) == (SAFE_HEAP_LOAD($1 + 2 | 0, 2, 0) | 0 | 0)) {
     $11 = $10 & 7; //@line 4784
     $extract$t39 = $10 & 255; //@line 4788
     if ($11 << 16 >> 16 == ((SAFE_HEAP_LOAD($1 | 0, 2, 0) | 0) & 7)) {
      if (($11 & 65535) < 3) {
       if ((SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0) == (SAFE_HEAP_LOAD($1 + 4 | 0, 4, 0) | 0 | 0)) {
        $$036 = 0; //@line 4799
        break L1;
       } else {
        $$off0 = $10 & 255; //@line 4802
        break;
       }
      } else {
       if (_ecma_compare_ecma_strings_longpath($0, $1) | 0) {
        $$036 = 0; //@line 4809
        break L1;
       } else {
        $$off0 = $10 & 255; //@line 4812
        break;
       }
      }
     } else {
      $$off0 = $extract$t39; //@line 4817
     }
    } else {
     $$off0 = $10 & 255; //@line 4821
    }
   } while (0);
   switch ($$off0 & 7) {
   case 3:
    {
     $$033 = SAFE_HEAP_LOAD($0 + 4 | 0, 2, 1) | 0 | 0; //@line 4831
     $$035 = $0 + 8 | 0; //@line 4831
     break;
    }
   case 4:
    {
     $$033 = SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0; //@line 4838
     $$035 = $0 + 12 | 0; //@line 4838
     break;
    }
   case 0:
    {
     $$033 = _ecma_uint32_to_utf8_string(SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0, $2, 10) | 0; //@line 4845
     $$035 = $2; //@line 4845
     break;
    }
   case 1:
    {
     $32 = $0 + 4 | 0; //@line 4849
     $34 = _lit_get_magic_string_utf8(SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0) | 0; //@line 4851
     $$033 = _lit_get_magic_string_size(SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0) | 0; //@line 4854
     $$035 = $34; //@line 4854
     break;
    }
   default:
    {
     $37 = $0 + 4 | 0; //@line 4858
     $39 = _lit_get_magic_string_ex_utf8(SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0) | 0; //@line 4860
     $$033 = _lit_get_magic_string_ex_size(SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0) | 0; //@line 4863
     $$035 = $39; //@line 4863
    }
   }
   switch ((SAFE_HEAP_LOAD($1 | 0, 2, 0) | 0) & 7) {
   case 3:
    {
     $$0 = SAFE_HEAP_LOAD($1 + 4 | 0, 2, 1) | 0 | 0; //@line 4875
     $$034 = $1 + 8 | 0; //@line 4875
     break;
    }
   case 4:
    {
     $$0 = SAFE_HEAP_LOAD($1 + 4 | 0, 4, 0) | 0 | 0; //@line 4882
     $$034 = $1 + 12 | 0; //@line 4882
     break;
    }
   case 0:
    {
     $$0 = _ecma_uint32_to_utf8_string(SAFE_HEAP_LOAD($1 + 4 | 0, 4, 0) | 0 | 0, $3, 10) | 0; //@line 4889
     $$034 = $3; //@line 4889
     break;
    }
   case 1:
    {
     $53 = $1 + 4 | 0; //@line 4893
     $55 = _lit_get_magic_string_utf8(SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0) | 0; //@line 4895
     $$0 = _lit_get_magic_string_size(SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0) | 0; //@line 4898
     $$034 = $55; //@line 4898
     break;
    }
   default:
    {
     $58 = $1 + 4 | 0; //@line 4902
     $60 = _lit_get_magic_string_ex_utf8(SAFE_HEAP_LOAD($58 | 0, 4, 0) | 0 | 0) | 0; //@line 4904
     $$0 = _lit_get_magic_string_ex_size(SAFE_HEAP_LOAD($58 | 0, 4, 0) | 0 | 0) | 0; //@line 4907
     $$034 = $60; //@line 4907
    }
   }
   $$036 = _lit_compare_utf8_strings_relational($$035, $$033, $$034, $$0) | 0; //@line 4911
  }
 } while (0);
 STACKTOP = sp; //@line 4914
 return $$036 | 0; //@line 4914
}
function _ecma_op_abstract_equality_compare($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$071 = 0, $$073 = 0, $$172 = 0, $$174 = 0, $$2 = 0, $$tr$be = 0, $$tr75$be = 0, $$tr7595 = 0, $$tr94 = 0, $12 = 0, $17 = 0, $19 = 0, $29 = 0, $31 = 0, $40 = 0, $6 = 0.0, label = 0;
 L1 : do {
  if (($0 | 0) == ($1 | 0)) {
   $$2 = 56; //@line 6380
  } else {
   $$tr7595 = $1; //@line 6382
   $$tr94 = $0; //@line 6382
   while (1) {
    if (_ecma_are_values_integer_numbers($$tr94, $$tr7595) | 0) {
     $$2 = 40; //@line 6386
     break L1;
    }
    if (_ecma_is_value_number($$tr94) | 0) {
     if (_ecma_is_value_number($$tr7595) | 0) {
      label = 5; //@line 6393
      break;
     } else {
      $$071 = $$tr7595; //@line 6396
      $$073 = $$tr94; //@line 6396
     }
    } else {
     $$071 = $$tr94; //@line 6399
     $$073 = $$tr7595; //@line 6399
    }
    if (_ecma_is_value_string($$071) | 0) {
     if (_ecma_is_value_string($$073) | 0) {
      label = 8; //@line 6405
      break;
     }
     if (_ecma_is_value_number($$073) | 0) {
      label = 10; //@line 6410
      break;
     } else {
      $$172 = $$073; //@line 6413
      $$174 = $$071; //@line 6413
     }
    } else {
     $$172 = $$071; //@line 6416
     $$174 = $$073; //@line 6416
    }
    if (_ecma_is_value_boolean($$174) | 0) {
     if (_ecma_is_value_boolean($$172) | 0) {
      $$2 = 40; //@line 6422
      break L1;
     }
     $$tr$be = $$172; //@line 6428
     $$tr75$be = _ecma_make_integer_value((_ecma_is_value_true($$174) | 0) & 1) | 0; //@line 6428
    } else {
     if (_ecma_is_value_object($$172) | 0) {
      label = 17; //@line 6432
      break;
     }
     if (!(_ecma_is_value_boolean($$172) | 0)) {
      label = 23; //@line 6437
      break;
     }
     $$tr$be = _ecma_make_integer_value((_ecma_is_value_true($$172) | 0) & 1) | 0; //@line 6443
     $$tr75$be = $$174; //@line 6443
    }
    if (($$tr$be | 0) == ($$tr75$be | 0)) {
     $$2 = 56; //@line 6447
     break L1;
    } else {
     $$tr7595 = $$tr75$be; //@line 6450
     $$tr94 = $$tr$be; //@line 6450
    }
   }
   if ((label | 0) == 5) {
    $6 = +_ecma_get_number_from_value($$tr94); //@line 6454
    $$2 = _ecma_make_boolean_value($6 == +_ecma_get_number_from_value($$tr7595)) | 0; //@line 6458
    break;
   } else if ((label | 0) == 8) {
    $12 = _ecma_get_string_from_value($$071) | 0; //@line 6462
    $$2 = _ecma_make_boolean_value(_ecma_compare_ecma_strings($12, _ecma_get_string_from_value($$073) | 0) | 0) | 0; //@line 6466
    break;
   } else if ((label | 0) == 10) {
    $17 = _ecma_op_to_number($$071) | 0; //@line 6470
    if (($17 | 0) == 24) {
     $$2 = 24; //@line 6473
     break;
    }
    $19 = _ecma_op_abstract_equality_compare($17, $$073) | 0; //@line 6476
    _ecma_free_value($17); //@line 6477
    return $19 | 0; //@line 6478
   } else if ((label | 0) == 17) {
    if (!(_ecma_is_value_string($$174) | 0)) {
     if (!(_ecma_is_value_number($$174) | 0)) {
      $$2 = 40; //@line 6485
      break;
     }
    }
    $29 = _ecma_op_to_primitive($$172, 0) | 0; //@line 6489
    if (($29 | 0) == 24) {
     $$2 = 24; //@line 6492
     break;
    }
    $31 = _ecma_op_abstract_equality_compare($29, $$174) | 0; //@line 6495
    _ecma_free_value($29); //@line 6496
    return $31 | 0; //@line 6497
   } else if ((label | 0) == 23) {
    if (!(_ecma_is_value_undefined($$172) | 0)) {
     if (!(_ecma_is_value_null($$172) | 0)) {
      $$2 = 40; //@line 6504
      break;
     }
    }
    if (_ecma_is_value_undefined($$174) | 0) {
     $40 = 1; //@line 6510
    } else {
     $40 = _ecma_is_value_null($$174) | 0; //@line 6513
    }
    $$2 = _ecma_make_boolean_value($40) | 0; //@line 6516
    break;
   }
  }
 } while (0);
 return $$2 | 0; //@line 6521
}
function _ecma_builtin_function_prototype_object_apply($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$07687 = 0, $$077$lcssa93 = 0, $$077$lcssa94 = 0, $$07786 = 0, $$07985 = 0, $$081 = 0, $$1 = 0, $$178 = 0, $$2 = 0, $$4 = 0, $$7 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $3 = 0, $6 = 0, label = 0, sp = 0, $$07985$looptemp = 0;
 sp = STACKTOP; //@line 3450
 STACKTOP = STACKTOP + 16 | 0; //@line 3451
 $3 = sp; //@line 3452
 do {
  if (_ecma_op_is_callable($0) | 0) {
   $6 = _ecma_get_object_from_value($0) | 0; //@line 3456
   if (!(_ecma_is_value_null($2) | 0)) {
    if (!(_ecma_is_value_undefined($2) | 0)) {
     if (!(_ecma_is_value_object($2) | 0)) {
      $$7 = _ecma_raise_type_error(6512) | 0; //@line 3464
      break;
     }
     $12 = _ecma_get_object_from_value($2) | 0; //@line 3467
     $13 = _ecma_op_object_get_by_magic_id($12, 33) | 0; //@line 3468
     if (($13 | 0) == 24) {
      $$7 = 24; //@line 3471
      break;
     }
     $15 = _ecma_get_number($13, $3) | 0; //@line 3474
     do {
      if (_ecma_is_value_empty($15) | 0) {
       $18 = _ecma_number_to_uint32(+(+SAFE_HEAP_LOAD_D($3 | 0, 8))) | 0; //@line 3479
       if ($18 >>> 0 > 65534) {
        $$4 = _ecma_raise_range_error(6196) | 0; //@line 3483
        break;
       }
       $21 = $18 << 2; //@line 3486
       $22 = _jmem_heap_alloc_block($21) | 0; //@line 3487
       if (!$18) {
        $$077$lcssa94 = 0; //@line 3490
        label = 17; //@line 3491
       } else {
        $$07687 = $15; //@line 3493
        $$07786 = 0; //@line 3493
        $$07985 = 0; //@line 3493
        while (1) {
         $23 = _ecma_new_ecma_string_from_uint32($$07985) | 0; //@line 3495
         $24 = _ecma_op_object_get($12, $23) | 0; //@line 3496
         $$07985$looptemp = $$07985;
         $$07985 = $$07985 + 1 | 0; //@line 3498
         if (($24 | 0) == 24) {
          $$1 = 24; //@line 3500
          $$178 = $$07786; //@line 3500
         } else {
          SAFE_HEAP_STORE($22 + ($$07985$looptemp << 2) | 0, _ecma_copy_value($24) | 0 | 0, 4);
          _ecma_free_value($24); //@line 3505
          $$1 = $$07687; //@line 3506
          $$178 = $$07985; //@line 3506
         }
         _ecma_deref_ecma_string($23); //@line 3508
         $28 = _ecma_is_value_empty($$1) | 0; //@line 3509
         if ($$07985 >>> 0 >= $18 >>> 0 | $28 ^ 1) {
          break;
         } else {
          $$07687 = $$1; //@line 3516
          $$07786 = $$178; //@line 3516
         }
        }
        if ($28) {
         $$077$lcssa94 = $$178; //@line 3520
         label = 17; //@line 3521
        } else {
         $$077$lcssa93 = $$178; //@line 3523
         $$2 = $$1; //@line 3523
        }
       }
       if ((label | 0) == 17) {
        $$077$lcssa93 = $$077$lcssa94; //@line 3528
        $$2 = _ecma_op_function_call($6, $1, $22, $18) | 0; //@line 3528
       }
       if (!$$077$lcssa93) {
        if (!$22) {
         $$4 = $$2; //@line 3534
         break;
        }
       } else {
        $$081 = 0; //@line 3538
        do {
         _ecma_free_value(SAFE_HEAP_LOAD($22 + ($$081 << 2) | 0, 4, 0) | 0 | 0); //@line 3542
         $$081 = $$081 + 1 | 0; //@line 3543
        } while (($$081 | 0) != ($$077$lcssa93 | 0));
       }
       _jmem_heap_free_block($22, $21); //@line 3552
       $$4 = $$2; //@line 3553
      } else {
       $$4 = $15; //@line 3555
      }
     } while (0);
     _ecma_free_value($13); //@line 3558
     $$7 = $$4; //@line 3559
     break;
    }
   }
   $$7 = _ecma_op_function_call($6, $1, 0, 0) | 0; //@line 3564
  } else {
   $$7 = _ecma_raise_type_error(6161) | 0; //@line 3567
  }
 } while (0);
 STACKTOP = sp; //@line 3570
 return $$7 | 0; //@line 3570
}
function _ecma_op_function_call($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0102 = 0, $$2 = 0, $$tr = 0, $$tr108 = 0, $10 = 0, $11 = 0, $13 = 0, $17 = 0, $24 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $39 = 0, $41 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $55 = 0, $57 = 0, $8 = 0, label = 0;
 $$tr = $0; //@line 10685
 $$tr108 = $1; //@line 10685
 L1 : while (1) {
  switch (_ecma_get_object_type($$tr) | 0) {
  case 2:
   {
    label = 3; //@line 10690
    break L1;
    break;
   }
  case 3:
   {
    label = 17; //@line 10695
    break L1;
    break;
   }
  default:
   {}
  }
  SAFE_HEAP_STORE(134116 * 4 | 0, (SAFE_HEAP_LOAD(134116 * 4 | 0, 4, 0) | 0) & -3 | 0, 4);
  $39 = SAFE_HEAP_LOAD($$tr + 8 | 0, 4, 0) | 0 | 0; //@line 10706
  $41 = SAFE_HEAP_LOAD($$tr + 12 | 0, 4, 0) | 0 | 0; //@line 10708
  if (!(_ecma_is_value_integer_number($41) | 0)) {
   $$tr = $39; //@line 10711
   $$tr108 = $41; //@line 10711
   continue;
  }
  $44 = SAFE_HEAP_LOAD($$tr + 16 | 0, 4, 0) | 0 | 0; //@line 10715
  $45 = _ecma_get_integer_from_value($41) | 0; //@line 10716
  if ($45 >>> 0 > 1) {
   label = 21; //@line 10719
   break;
  } else {
   $$tr = $39; //@line 10722
   $$tr108 = $44; //@line 10722
  }
 }
 do {
  if ((label | 0) == 3) {
   if (_ecma_get_object_is_builtin($$tr) | 0) {
    $$2 = _ecma_builtin_dispatch_call($$tr, $$tr108, $2, $3) | 0; //@line 10730
    break;
   }
   $8 = SAFE_HEAP_LOAD($$tr + 8 | 0, 4, 0) | 0 | 0; //@line 10734
   $10 = SAFE_HEAP_LOAD($$tr + 12 | 0, 4, 0) | 0 | 0; //@line 10736
   $11 = $10 + 4 | 0; //@line 10737
   $13 = SAFE_HEAP_LOAD($11 | 0, 2, 1) | 0 | 0; //@line 10739
   $17 = ($13 & 32 | 0) == 0; //@line 10743
   do {
    if (!($13 & 8)) {
     if (!(_ecma_is_value_undefined($$tr108) | 0)) {
      if (!(_ecma_is_value_null($$tr108) | 0)) {
       $$0102 = _ecma_op_to_object($$tr108) | 0; //@line 10751
       break;
      }
     }
     $$0102 = _ecma_make_object_value(_ecma_builtin_get(7) | 0) | 0; //@line 10757
    } else {
     $$0102 = _ecma_copy_value($$tr108) | 0; //@line 10760
    }
   } while (0);
   if ($17) {
    $24 = _ecma_create_decl_lex_env($8) | 0; //@line 10764
    if ((SAFE_HEAP_LOAD($11 | 0, 2, 0) | 0) & 16) {
     _ecma_op_create_arguments_object($$tr, $24, $2, $3, $10); //@line 10769
    }
    $29 = _vm_run($10, $$0102, $24, 0, $2, $3) | 0; //@line 10771
    _ecma_deref_object($24); //@line 10772
    $57 = $29; //@line 10773
   } else {
    $57 = _vm_run($10, $$0102, $8, 0, $2, $3) | 0; //@line 10776
   }
   _ecma_free_value($$0102); //@line 10778
   $$2 = $57; //@line 10779
  } else if ((label | 0) == 17) {
   $31 = SAFE_HEAP_LOAD($$tr + 8 | 0, 4, 0) | 0 | 0; //@line 10783
   $32 = _ecma_make_object_value($$tr) | 0; //@line 10784
   $33 = FUNCTION_TABLE_iiiii[(SAFE_FT_MASK($31 | 0, 0 | 0) | 0) & 0]($32, $$tr108, $2, $3) | 0; //@line 10785
   if (_ecma_is_value_error_reference($33) | 0) {
    SAFE_HEAP_STORE(134113 * 4 | 0, _ecma_clear_error_reference($33, 1) | 0 | 0, 4);
    $$2 = 24; //@line 10790
   } else {
    $$2 = $33; //@line 10792
   }
  } else if ((label | 0) == 21) {
   $47 = $45 + -1 | 0; //@line 10796
   $48 = $47 + $3 | 0; //@line 10797
   $49 = $48 << 2; //@line 10798
   $50 = _jmem_heap_alloc_block($49) | 0; //@line 10799
   _memcpy($50 | 0, $$tr + 20 | 0, $47 << 2 | 0) | 0; //@line 10802
   _memcpy($50 + ($47 << 2) | 0, $2 | 0, $3 << 2 | 0) | 0; //@line 10805
   $55 = _ecma_op_function_call($39, $44, $50, $48) | 0; //@line 10806
   if (!$50) {
    $$2 = $55; //@line 10809
   } else {
    _jmem_heap_free_block($50, $49); //@line 10811
    $$2 = $55; //@line 10812
   }
  }
 } while (0);
 return $$2 | 0; //@line 10816
}
function _parser_append_object_literal_item($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$sroa$0$054 = 0, $$sroa$0$2 = 0, $$sroa$0$3 = 0, $$sroa$12$055 = 0, $$sroa$12$2 = 0, $$sroa$12$3 = 0, $11 = 0, $12 = 0, $15 = 0, $19 = 0, $22 = 0, $25 = 0, $3 = 0, $31 = 0, $35 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $3 = $0 + 288 | 0; //@line 16256
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0; //@line 16257
 $5 = $0 + 296 | 0; //@line 16258
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0; //@line 16259
 $7 = $4 + 4 + $6 | 0; //@line 16260
 $8 = $7 + -1 | 0; //@line 16261
 $9 = SAFE_HEAP_LOAD($8 >> 0 | 0, 1, 0) | 0 | 0; //@line 16262
 L1 : do {
  if (!($9 << 24 >> 24)) {
   label = 3; //@line 16266
  } else {
   $11 = $1 & 65535; //@line 16268
   $12 = $0 + 168 | 0; //@line 16269
   $$sroa$0$054 = $4; //@line 16270
   $$sroa$12$055 = $6; //@line 16270
   $35 = $9; //@line 16270
   $47 = $8; //@line 16270
   $50 = $7; //@line 16270
   while (1) {
    if (($$sroa$12$055 | 0) == 1) {
     $15 = SAFE_HEAP_LOAD($$sroa$0$054 | 0, 4, 0) | 0 | 0; //@line 16274
     $$sroa$0$2 = $15; //@line 16278
     $$sroa$12$2 = 59; //@line 16278
     $31 = SAFE_HEAP_LOAD($15 + 63 >> 0 | 0, 1, 1) | 0 | 0; //@line 16278
    } else {
     $19 = $$sroa$12$055 + -2 | 0; //@line 16280
     $22 = SAFE_HEAP_LOAD($$sroa$0$054 + 4 + $19 >> 0 | 0, 1, 1) | 0 | 0; //@line 16283
     if (!$19) {
      $$sroa$0$2 = SAFE_HEAP_LOAD($$sroa$0$054 | 0, 4, 0) | 0 | 0; //@line 16287
      $$sroa$12$2 = 60; //@line 16287
      $31 = $22; //@line 16287
     } else {
      $$sroa$0$2 = $$sroa$0$054; //@line 16289
      $$sroa$12$2 = $19; //@line 16289
      $31 = $22; //@line 16289
     }
    }
    $25 = $$sroa$12$2 + -1 | 0; //@line 16292
    if (!$25) {
     $$sroa$0$3 = SAFE_HEAP_LOAD($$sroa$0$2 | 0, 4, 0) | 0 | 0; //@line 16301
     $$sroa$12$3 = 60; //@line 16301
    } else {
     $$sroa$0$3 = $$sroa$0$2; //@line 16303
     $$sroa$12$3 = $25; //@line 16303
    }
    if (((SAFE_HEAP_LOAD($$sroa$0$2 + 4 + $25 >> 0 | 0, 1, 1) | 0 | 0) << 8 | $31 | 0) == ($11 | 0)) {
     break;
    }
    $42 = $$sroa$0$3 + 4 + $$sroa$12$3 | 0; //@line 16309
    $43 = $42 + -1 | 0; //@line 16310
    $44 = SAFE_HEAP_LOAD($43 >> 0 | 0, 1, 0) | 0 | 0; //@line 16311
    if (!($44 << 24 >> 24)) {
     label = 3; //@line 16314
     break L1;
    } else {
     $$sroa$0$054 = $$sroa$0$3; //@line 16317
     $$sroa$12$055 = $$sroa$12$3; //@line 16317
     $35 = $44; //@line 16317
     $47 = $43; //@line 16317
     $50 = $42; //@line 16317
    }
   }
   switch ($2 | 0) {
   case 1:
    {
     if ($35 << 24 >> 24 == 1) {
      if (!((SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0) & 1)) {
       break L1;
      } else {
       label = 16; //@line 16330
      }
     } else {
      label = 16; //@line 16333
     }
     break;
    }
   case 2:
    {
     if ($35 << 24 >> 24 != 3) {
      label = 16; //@line 16340
     }
     break;
    }
   case 3:
    {
     if ($35 << 24 >> 24 != 2) {
      label = 16; //@line 16347
     }
     break;
    }
   default:
    {
     label = 16; //@line 16352
    }
   }
   if ((label | 0) == 16) {
    _parser_raise_error($0, 68); //@line 16356
   }
   $46 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0; //@line 16359
   SAFE_HEAP_STORE($47 >> 0 | 0, 4 | 0, 1);
   if (($50 | 0) == ((SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0) + ($46 + 4) | 0)) {
    SAFE_HEAP_STORE($0 + 304 >> 0 | 0, 4 | 0, 1);
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  _parser_stack_push_uint16($0, $1); //@line 16371
  _parser_stack_push_uint8($0, $2 & 255); //@line 16373
 }
 return;
}
function _parser_flush_cbc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$sink66 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $28 = 0, $3 = 0, $31 = 0, $39 = 0, $48 = 0, $5 = 0, $57 = 0, $66 = 0, $75 = 0, $76 = 0, $80 = 0, $82 = 0, $86 = 0, $87 = 0;
 $1 = $0 + 240 | 0; //@line 12645
 $2 = SAFE_HEAP_LOAD($1 | 0, 2, 0) | 0 | 0; //@line 12646
 $3 = $2 & 65535; //@line 12647
 if ($2 << 16 >> 16) {
  $5 = $0 + 168 | 0; //@line 12650
  SAFE_HEAP_STORE($5 | 0, SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 65536 | 0, 4);
  if (($2 & 65535) < 256) {
   $10 = SAFE_HEAP_LOAD(6556 + $3 >> 0 | 0, 1, 0) | 0 | 0; //@line 12657
   $11 = $0 + 256 | 0; //@line 12658
   $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0; //@line 12659
   if ($12 >>> 0 > 59) {
    _parser_cbc_stream_alloc_page($0, $0 + 248 | 0); //@line 12663
    $19 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0; //@line 12665
   } else {
    $19 = $12; //@line 12667
   }
   $17 = SAFE_HEAP_LOAD($0 + 252 | 0, 4, 0) | 0 | 0; //@line 12671
   SAFE_HEAP_STORE($11 | 0, $19 + 1 | 0, 4);
   SAFE_HEAP_STORE($17 + 4 + $19 >> 0 | 0, $2 | 0, 1);
   $$0 = $10; //@line 12676
   $$sink66 = 1; //@line 12676
  } else {
   $21 = $3 + -256 | 0; //@line 12678
   $23 = SAFE_HEAP_LOAD(6793 + $21 >> 0 | 0, 1, 0) | 0 | 0; //@line 12680
   _parser_emit_two_bytes($0, 0, $21 & 255); //@line 12682
   $$0 = $23; //@line 12683
   $$sink66 = 2; //@line 12683
  }
  $25 = $0 + 260 | 0; //@line 12685
  SAFE_HEAP_STORE($25 | 0, (SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0) + $$sink66 | 0, 4);
  $28 = $0 + 172 | 0; //@line 12689
  $31 = $$0 & 255; //@line 12692
  SAFE_HEAP_STORE($28 | 0, ($31 >>> 5) + 65532 + (SAFE_HEAP_LOAD($28 | 0, 2, 1) | 0 | 0) | 0, 2);
  if ($31 & 3 | 0) {
   $39 = SAFE_HEAP_LOAD($0 + 232 | 0, 2, 0) | 0 | 0; //@line 12702
   _parser_emit_two_bytes($0, $39 & 255, ($39 & 65535) >>> 8 & 255); //@line 12706
   SAFE_HEAP_STORE($25 | 0, (SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0) + 2 | 0, 4);
  }
  if ($31 & 2 | 0) {
   $48 = SAFE_HEAP_LOAD($0 + 234 | 0, 2, 0) | 0 | 0; //@line 12715
   _parser_emit_two_bytes($0, $48 & 255, ($48 & 65535) >>> 8 & 255); //@line 12719
   SAFE_HEAP_STORE($25 | 0, (SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0) + 2 | 0, 4);
   if (!($31 & 1)) {
    $57 = SAFE_HEAP_LOAD($0 + 236 | 0, 2, 0) | 0 | 0; //@line 12727
    _parser_emit_two_bytes($0, $57 & 255, ($57 & 65535) >>> 8 & 255); //@line 12731
    SAFE_HEAP_STORE($25 | 0, (SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0) + 2 | 0, 4);
   }
  }
  if ($31 & 4 | 0) {
   $66 = SAFE_HEAP_LOAD($0 + 234 | 0, 2, 0) | 0 | 0; //@line 12741
   if ($31 & 16 | 0) {
    SAFE_HEAP_STORE($28 | 0, (SAFE_HEAP_LOAD($28 | 0, 2, 1) | 0 | 0) - ($66 & 255) | 0, 2);
   }
   $75 = $0 + 256 | 0; //@line 12754
   $76 = SAFE_HEAP_LOAD($75 | 0, 4, 0) | 0 | 0; //@line 12755
   if ($76 >>> 0 > 59) {
    _parser_cbc_stream_alloc_page($0, $0 + 248 | 0); //@line 12759
    $82 = SAFE_HEAP_LOAD($75 | 0, 4, 0) | 0 | 0; //@line 12761
   } else {
    $82 = $76; //@line 12763
   }
   $80 = SAFE_HEAP_LOAD($0 + 252 | 0, 4, 0) | 0 | 0; //@line 12766
   SAFE_HEAP_STORE($75 | 0, $82 + 1 | 0, 4);
   SAFE_HEAP_STORE($80 + 4 + $82 >> 0 | 0, $66 | 0, 1);
   SAFE_HEAP_STORE($25 | 0, (SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0) + 1 | 0, 4);
  }
  $86 = SAFE_HEAP_LOAD($28 | 0, 2, 0) | 0 | 0; //@line 12775
  $87 = $0 + 174 | 0; //@line 12776
  if (($86 & 65535) > (SAFE_HEAP_LOAD($87 | 0, 2, 1) | 0 | 0)) {
   SAFE_HEAP_STORE($87 | 0, $86 | 0, 2);
   if (($86 & 65535) > 1024) {
    _parser_raise_error($0, 4); //@line 12783
   }
  }
  SAFE_HEAP_STORE($1 | 0, 0 | 0, 2);
 }
 return;
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 2412
 $7 = ($2 | 0) != 0; //@line 2416
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 2420
   $$03555 = $0; //@line 2421
   $$03654 = $2; //@line 2421
   while (1) {
    if ((SAFE_HEAP_LOAD($$03555 >> 0 | 0, 1, 0) | 0 | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 2426
     $$036$lcssa64 = $$03654; //@line 2426
     label = 6; //@line 2427
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 2430
    $12 = $$03654 + -1 | 0; //@line 2431
    $16 = ($12 | 0) != 0; //@line 2435
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 2438
     $$03654 = $12; //@line 2438
    } else {
     $$035$lcssa = $11; //@line 2440
     $$036$lcssa = $12; //@line 2440
     $$lcssa = $16; //@line 2440
     label = 5; //@line 2441
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 2446
   $$036$lcssa = $2; //@line 2446
   $$lcssa = $7; //@line 2446
   label = 5; //@line 2447
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 2452
   $$036$lcssa64 = $$036$lcssa; //@line 2452
   label = 6; //@line 2453
  } else {
   $$2 = $$035$lcssa; //@line 2455
   $$3 = 0; //@line 2455
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 2461
   if ((SAFE_HEAP_LOAD($$035$lcssa65 >> 0 | 0, 1, 0) | 0 | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 2464
    $$3 = $$036$lcssa64; //@line 2464
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 2466
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 2470
      $$13745 = $$036$lcssa64; //@line 2470
      while (1) {
       $23 = (SAFE_HEAP_LOAD($$046 | 0, 4, 0) | 0) ^ $20; //@line 2473
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 2482
       $30 = $$13745 + -4 | 0; //@line 2483
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 2486
        $$13745 = $30; //@line 2486
       } else {
        $$0$lcssa = $29; //@line 2488
        $$137$lcssa = $30; //@line 2488
        label = 11; //@line 2489
        break L11;
       }
      }
      $$140 = $$046; //@line 2493
      $$23839 = $$13745; //@line 2493
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 2495
      $$137$lcssa = $$036$lcssa64; //@line 2495
      label = 11; //@line 2496
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 2502
      $$3 = 0; //@line 2502
      break;
     } else {
      $$140 = $$0$lcssa; //@line 2505
      $$23839 = $$137$lcssa; //@line 2505
     }
    }
    while (1) {
     if ((SAFE_HEAP_LOAD($$140 >> 0 | 0, 1, 0) | 0 | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 2512
      $$3 = $$23839; //@line 2512
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 2515
     $$23839 = $$23839 + -1 | 0; //@line 2516
     if (!$$23839) {
      $$2 = $35; //@line 2519
      $$3 = 0; //@line 2519
      break;
     } else {
      $$140 = $35; //@line 2522
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 2530
}
function _parser_parse_break_statement($0) {
 $0 = $0 | 0;
 var $$0$ph = 0, $$141 = 0, $$2 = 0, $$3 = 0, $1 = 0, $13 = 0, $17 = 0, $2 = 0, $20 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11625
 STACKTOP = STACKTOP + 32 | 0; //@line 11626
 $1 = sp + 16 | 0; //@line 11627
 $2 = sp; //@line 11628
 _lexer_next_token($0); //@line 11629
 _parser_stack_iterator_init($0, $1); //@line 11630
 do {
  if (!((SAFE_HEAP_LOAD($0 + 191 >> 0 | 0, 1, 0) | 0) & 1)) {
   if ((SAFE_HEAP_LOAD($0 + 188 >> 0 | 0, 1, 0) | 0 | 0) == 1) {
    if (!(SAFE_HEAP_LOAD($0 + 206 >> 0 | 0, 1, 0) | 0)) {
     $$0$ph = 1; //@line 11645
     L5 : while (1) {
      L7 : while (1) {
       $13 = _parser_stack_iterator_read_uint8($1) | 0; //@line 11648
       switch ($13 << 24 >> 24) {
       case 0:
        {
         label = 7; //@line 11651
         break L5;
         break;
        }
       case 12:
       case 11:
       case 10:
        {
         label = 10; //@line 11656
         break L7;
         break;
        }
       case 2:
        {
         break;
        }
       default:
        {
         $$141 = $$0$ph; //@line 11664
         break L7;
        }
       }
       _parser_stack_iterator_skip($1, 1); //@line 11668
       _parser_stack_iterator_read($1, $2, 12); //@line 11669
       if (_lexer_compare_identifier_to_current($0, $2) | 0) {
        label = 12; //@line 11672
        break L5;
       }
       _parser_stack_iterator_skip($1, 12); //@line 11675
      }
      if ((label | 0) == 10) {
       label = 0; //@line 11678
       $$141 = 25; //@line 11679
      }
      _parser_stack_iterator_skip($1, _parser_statement_length($13) | 0); //@line 11682
      $$0$ph = $$141; //@line 11683
     }
     if ((label | 0) == 7) {
      _parser_raise_error($0, 62); //@line 11686
     } else if ((label | 0) == 12) {
      $17 = $2 + 8 | 0; //@line 11691
      SAFE_HEAP_STORE($17 | 0, _parser_emit_cbc_forward_branch_item($0, $$0$ph & 65535, SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0) | 0 | 0, 4);
      _parser_stack_iterator_write($1, $2, 12); //@line 11695
      _lexer_next_token($0); //@line 11696
      break;
     }
    } else {
     $$2 = 1; //@line 11700
     label = 13; //@line 11701
    }
   } else {
    $$2 = 1; //@line 11704
    label = 13; //@line 11705
   }
  } else {
   $$2 = 1; //@line 11708
   label = 13; //@line 11709
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   while (1) {
    label = 0; //@line 11715
    $20 = _parser_stack_iterator_read_uint8($1) | 0; //@line 11716
    if (!($20 << 24 >> 24)) {
     label = 14; //@line 11719
     break;
    }
    $$3 = $20 << 24 >> 24 == 12 | ($20 | 1) << 24 >> 24 == 11 ? 25 : $$2; //@line 11726
    if (($20 + -5 & 255) < 6) {
     label = 16; //@line 11730
     break;
    }
    _parser_stack_iterator_skip($1, _parser_statement_length($20) | 0); //@line 11734
    $$2 = $$3; //@line 11735
    label = 13; //@line 11736
   }
   if ((label | 0) == 14) {
    _parser_raise_error($0, 61); //@line 11739
   } else if ((label | 0) == 16) {
    _parser_stack_iterator_skip($1, 1); //@line 11743
    _parser_stack_iterator_read($1, $2, 4); //@line 11744
    SAFE_HEAP_STORE($2 | 0, _parser_emit_cbc_forward_branch_item($0, $$3 & 65535, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0) | 0 | 0, 4);
    _parser_stack_iterator_write($1, $2, 4); //@line 11749
    break;
   }
  }
 } while (0);
 STACKTOP = sp; //@line 11754
 return;
}
function _ecma_create_property($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$072 = 0, $$076 = 0, $$079$in = 0, $$080$off0 = 0, $$1 = 0, $$175$off0 = 0, $$177 = 0, $$3 = 0, $$sink = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $26 = 0, $29 = 0, $30 = 0, $33 = 0, $35 = 0, $38 = 0, $41 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6165
 STACKTOP = STACKTOP + 16 | 0; //@line 6166
 $5 = sp; //@line 6167
 $6 = $0 + 4 | 0; //@line 6168
 $7 = SAFE_HEAP_LOAD($6 | 0, 2, 0) | 0 | 0; //@line 6169
 if (!($7 << 16 >> 16)) {
  label = 12; //@line 6172
 } else {
  $10 = _jmem_decompress_pointer($7 & 65535) | 0; //@line 6175
  $11 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0; //@line 6176
  if ($11 << 24 >> 24 == 4) {
   $16 = _jmem_decompress_pointer(SAFE_HEAP_LOAD($10 + 2 | 0, 2, 1) | 0 | 0) | 0; //@line 6182
   $$079$in = $16; //@line 6184
   $$080$off0 = 1; //@line 6184
   $17 = SAFE_HEAP_LOAD($16 >> 0 | 0, 1, 0) | 0 | 0; //@line 6184
  } else {
   $$079$in = $10; //@line 6186
   $$080$off0 = 0; //@line 6186
   $17 = $11; //@line 6186
  }
  if (!($17 << 24 >> 24)) {
   if (!$1) {
    SAFE_HEAP_STORE($$079$in + 12 | 0, 0 | 0, 2);
    $$072 = $2; //@line 6194
   } else {
    SAFE_HEAP_STORE($$079$in + 12 | 0, _ecma_string_to_property_name($1, $5) | 0 | 0, 2);
    $$072 = SAFE_HEAP_LOAD($5 >> 0 | 0, 1, 0) | 0 | $2; //@line 6201
   }
   SAFE_HEAP_STORE($$079$in >> 0 | 0, $$072 | 0, 1);
   if ($4 | 0) {
    SAFE_HEAP_STORE($4 | 0, $$079$in | 0, 4);
   }
   $26 = $$079$in + 4 | 0; //@line 6208
   SAFE_HEAP_STORE($26 | 0, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0, 4);
   if (($1 | 0) != 0 & $$080$off0) {
    _ecma_property_hashmap_insert($0, $1, $$079$in, 0); //@line 6214
    $$1 = $26; //@line 6215
   } else {
    $$1 = $26; //@line 6217
   }
  } else {
   label = 12; //@line 6220
  }
 }
 if ((label | 0) == 12) {
  $29 = _ecma_alloc_property_pair() | 0; //@line 6224
  $30 = SAFE_HEAP_LOAD($6 | 0, 2, 0) | 0 | 0; //@line 6225
  if (!($30 << 16 >> 16)) {
   $$175$off0 = 0; //@line 6228
   $$177 = $6; //@line 6228
   $38 = 0; //@line 6228
  } else {
   $33 = _jmem_decompress_pointer($30 & 65535) | 0; //@line 6231
   $35 = (SAFE_HEAP_LOAD($33 >> 0 | 0, 1, 0) | 0 | 0) == 4; //@line 6233
   $$076 = $35 ? $33 + 2 | 0 : $6; //@line 6235
   $$175$off0 = $35; //@line 6237
   $$177 = $$076; //@line 6237
   $38 = SAFE_HEAP_LOAD($$076 | 0, 2, 0) | 0 | 0; //@line 6237
  }
  SAFE_HEAP_STORE($29 + 2 | 0, $38 | 0, 2);
  SAFE_HEAP_STORE($29 >> 0 | 0, 0 | 0, 1);
  SAFE_HEAP_STORE($29 + 12 | 0, 0 | 0, 2);
  if (!$1) {
   $$3 = $2; //@line 6246
   $$sink = 0; //@line 6246
  } else {
   $41 = _ecma_string_to_property_name($1, $5) | 0; //@line 6248
   $$3 = SAFE_HEAP_LOAD($5 >> 0 | 0, 1, 0) | 0 | $2; //@line 6251
   $$sink = $41; //@line 6251
  }
  SAFE_HEAP_STORE($29 + 14 | 0, $$sink | 0, 2);
  $45 = $29 + 1 | 0; //@line 6255
  SAFE_HEAP_STORE($45 >> 0 | 0, $$3 | 0, 1);
  SAFE_HEAP_STORE($$177 | 0, _jmem_compress_pointer($29) | 0 | 0, 2);
  if ($4 | 0) {
   SAFE_HEAP_STORE($4 | 0, $45 | 0, 4);
  }
  SAFE_HEAP_STORE($29 + 8 | 0, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0, 4);
  if (($1 | 0) != 0 & $$175$off0) {
   _ecma_property_hashmap_insert($0, $1, $29, 1); //@line 6269
  }
  $$1 = $29 + 8 | 0; //@line 6272
 }
 STACKTOP = sp; //@line 6274
 return $$1 | 0; //@line 6274
}
function _parser_emit_unary_lvalue_opcode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $33 = 0, $7 = 0, $8 = 0, label = 0;
 $2 = $0 + 240 | 0; //@line 15903
 $3 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 15904
 L1 : do {
  if (($3 + -40 & 65535) < 3) {
   if (!(SAFE_HEAP_LOAD($0 + 238 >> 0 | 0, 1, 0) | 0)) {
    $7 = $0 + 168 | 0; //@line 15913
    $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0; //@line 15914
    L4 : do {
     if (!($8 & 1)) {
      $19 = $3 << 16 >> 16 == 40; //@line 15920
      if (($1 | 0) != 149) {
       $27 = $1 + 3 & 65535; //@line 15923
       if ($19) {
        $28 = $27; //@line 15925
        label = 17; //@line 15926
        break;
       } else {
        $29 = $3; //@line 15929
        $33 = $27; //@line 15929
        break;
       }
      }
      SAFE_HEAP_STORE($7 | 0, $8 | 1024 | 0, 4);
      if ($19) {
       SAFE_HEAP_STORE($2 | 0, 150 | 0, 2);
       break L1;
      }
      if ($3 << 16 >> 16 == 41) {
       SAFE_HEAP_STORE($2 | 0, 40 | 0, 2);
       _parser_emit_cbc_literal($0, 150, SAFE_HEAP_LOAD($0 + 234 | 0, 2, 0) | 0 | 0); //@line 15944
       break L1;
      } else {
       SAFE_HEAP_STORE($2 | 0, 41 | 0, 2);
       _parser_emit_cbc_literal($0, 150, SAFE_HEAP_LOAD($0 + 236 | 0, 2, 0) | 0 | 0); //@line 15950
       break L1;
      }
     } else {
      switch (SAFE_HEAP_LOAD($0 + 239 >> 0 | 0, 1, 0) | 0 | 0) {
      case 0:
       {
        if (($1 | 0) == 149) {
         _parser_raise_error($0, 32); //@line 15960
        } else {
         $14 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 15963
         $17 = $1 + 3 & 65535; //@line 15966
         if ($14 << 16 >> 16 == 40) {
          $28 = $17; //@line 15968
          label = 17; //@line 15969
          break L4;
         } else {
          $29 = $14; //@line 15972
          $33 = $17; //@line 15972
          break L4;
         }
        }
        break;
       }
      case 1:
       {
        $$0 = 33; //@line 15979
        break;
       }
      default:
       {
        $$0 = 34; //@line 15983
       }
      }
      _parser_raise_error($0, $$0); //@line 15986
     }
    } while (0);
    if ((label | 0) == 17) {
     SAFE_HEAP_STORE($2 | 0, $28 | 0, 2);
     break;
    }
    if ($29 << 16 >> 16 == 41) {
     SAFE_HEAP_STORE($2 | 0, 40 | 0, 2);
     _parser_emit_cbc_literal($0, $33, SAFE_HEAP_LOAD($0 + 234 | 0, 2, 0) | 0 | 0); //@line 15999
     break;
    } else {
     SAFE_HEAP_STORE($2 | 0, 41 | 0, 2);
     _parser_emit_cbc_literal($0, $33, SAFE_HEAP_LOAD($0 + 236 | 0, 2, 0) | 0 | 0); //@line 16005
     break;
    }
   } else {
    label = 21; //@line 16009
   }
  } else {
   label = 21; //@line 16012
  }
 } while (0);
 L29 : do {
  if ((label | 0) == 21) {
   switch ($3 << 16 >> 16) {
   case 52:
    {
     SAFE_HEAP_STORE($2 | 0, $1 | 0, 2);
     break L29;
     break;
    }
   case 53:
    {
     SAFE_HEAP_STORE($2 | 0, 40 | 0, 2);
     break;
    }
   case 54:
    {
     SAFE_HEAP_STORE($2 | 0, 41 | 0, 2);
     break;
    }
   case 55:
    {
     SAFE_HEAP_STORE($2 | 0, 48 | 0, 2);
     break;
    }
   default:
    {
     _parser_emit_cbc($0, ($1 | 0) == 149 ? 276 : 272); //@line 16039
    }
   }
   _parser_emit_cbc($0, $1 & 65535); //@line 16043
  }
 } while (0);
 return;
}
function _parser_process_binary_opcodes($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $24 = 0, $3 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $47 = 0, $48 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15480
 STACKTOP = STACKTOP + 16 | 0; //@line 15481
 $2 = sp; //@line 15482
 $3 = $0 + 304 | 0; //@line 15483
 $4 = SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 0) | 0 | 0; //@line 15484
 L1 : do {
  if (($4 + -15 & 255) < 36) {
   $7 = $0 + 240 | 0; //@line 15490
   $8 = $0 + 234 | 0; //@line 15491
   $9 = $0 + 172 | 0; //@line 15492
   $10 = $0 + 174 | 0; //@line 15493
   $12 = $4 & 255; //@line 15494
   $16 = $4; //@line 15494
   L3 : while (1) {
    if ((SAFE_HEAP_LOAD(9608 + ($12 + -15) >> 0 | 0, 1, 1) | 0 | 0) < ($1 & 255)) {
     break L1;
    }
    _parser_push_result($0); //@line 15503
    _parser_stack_pop_uint8($0); //@line 15504
    do {
     if ($16 << 24 >> 24 == 15) {
      $18 = SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 0) | 0 | 0; //@line 15508
      $19 = $18 & 255; //@line 15509
      _parser_stack_pop_uint8($0); //@line 15510
      if ($18 << 24 >> 24 == -54 & (SAFE_HEAP_LOAD($7 | 0, 2, 0) | 0 | 0) == 40) {
       SAFE_HEAP_STORE($8 | 0, _parser_stack_pop_uint16($0) | 0 | 0, 2);
       SAFE_HEAP_STORE($7 | 0, 205 | 0, 2);
       break;
      }
      if (!((SAFE_HEAP_LOAD(6556 + $19 >> 0 | 0, 1, 0) | 0) & 1)) {
       $$0 = $19; //@line 15526
       label = 22; //@line 15527
      } else {
       _parser_emit_cbc_literal($0, $18 & 255, _parser_stack_pop_uint16($0) | 0); //@line 15531
       if ($18 << 24 >> 24 == -45) {
        $35 = SAFE_HEAP_LOAD($10 | 0, 2, 0) | 0 | 0; //@line 15535
        if ((SAFE_HEAP_LOAD($9 | 0, 2, 1) | 0 | 0) >= ($35 & 65535)) {
         $37 = $35 + 1 << 16 >> 16; //@line 15538
         SAFE_HEAP_STORE($10 | 0, $37 | 0, 2);
         if (($37 & 65535) > 1024) {
          break L3;
         }
        }
       }
      }
     } else {
      if (($16 & 255) < 27) {
       $40 = $12 << 1; //@line 15550
       if ((SAFE_HEAP_LOAD($7 | 0, 2, 0) | 0 | 0) != 40) {
        $$0 = $40 + 182 | 0; //@line 15555
        label = 22; //@line 15556
        break;
       }
       SAFE_HEAP_STORE($7 | 0, $40 + 183 | 0, 2);
       break;
      }
      if (($16 & -2) << 24 >> 24 == 28) {
       _parser_stack_pop($0, $2, 8); //@line 15567
       _parser_set_branch_to_current_position($0, $2); //@line 15568
       break;
      }
      $47 = $12 * 3 | 0; //@line 15571
      $48 = SAFE_HEAP_LOAD($7 | 0, 2, 0) | 0 | 0; //@line 15572
      if ($48 << 16 >> 16 == 40) {
       SAFE_HEAP_STORE($7 | 0, $47 + 65533 | 0, 2);
       break;
      }
      if ($48 << 16 >> 16 == 41) {
       SAFE_HEAP_STORE($7 | 0, $47 + 65534 | 0, 2);
      } else {
       $$0 = $47 + -4 | 0; //@line 15587
       label = 22; //@line 15588
      }
     }
    } while (0);
    if ((label | 0) == 22) {
     label = 0; //@line 15593
     _parser_emit_cbc($0, $$0 & 65535); //@line 15595
    }
    $24 = SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 0) | 0 | 0; //@line 15597
    if (($24 + -15 & 255) < 36) {
     $12 = $24 & 255; //@line 15602
     $16 = $24; //@line 15602
    } else {
     break L1;
    }
   }
   _parser_raise_error($0, 4); //@line 15607
  }
 } while (0);
 STACKTOP = sp; //@line 15611
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 6146
 }
 ret = dest | 0; //@line 6149
 dest_end = dest + num | 0; //@line 6150
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 6154
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 1, 0) | 0, 1); //@line 6155
   dest = dest + 1 | 0; //@line 6156
   src = src + 1 | 0; //@line 6157
   num = num - 1 | 0; //@line 6158
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 6160
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 6161
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0, 4); //@line 6163
   SAFE_HEAP_STORE(dest + 4 | 0, SAFE_HEAP_LOAD(src + 4 | 0, 4, 0) | 0, 4); //@line 6164
   SAFE_HEAP_STORE(dest + 8 | 0, SAFE_HEAP_LOAD(src + 8 | 0, 4, 0) | 0, 4); //@line 6165
   SAFE_HEAP_STORE(dest + 12 | 0, SAFE_HEAP_LOAD(src + 12 | 0, 4, 0) | 0, 4); //@line 6166
   SAFE_HEAP_STORE(dest + 16 | 0, SAFE_HEAP_LOAD(src + 16 | 0, 4, 0) | 0, 4); //@line 6167
   SAFE_HEAP_STORE(dest + 20 | 0, SAFE_HEAP_LOAD(src + 20 | 0, 4, 0) | 0, 4); //@line 6168
   SAFE_HEAP_STORE(dest + 24 | 0, SAFE_HEAP_LOAD(src + 24 | 0, 4, 0) | 0, 4); //@line 6169
   SAFE_HEAP_STORE(dest + 28 | 0, SAFE_HEAP_LOAD(src + 28 | 0, 4, 0) | 0, 4); //@line 6170
   SAFE_HEAP_STORE(dest + 32 | 0, SAFE_HEAP_LOAD(src + 32 | 0, 4, 0) | 0, 4); //@line 6171
   SAFE_HEAP_STORE(dest + 36 | 0, SAFE_HEAP_LOAD(src + 36 | 0, 4, 0) | 0, 4); //@line 6172
   SAFE_HEAP_STORE(dest + 40 | 0, SAFE_HEAP_LOAD(src + 40 | 0, 4, 0) | 0, 4); //@line 6173
   SAFE_HEAP_STORE(dest + 44 | 0, SAFE_HEAP_LOAD(src + 44 | 0, 4, 0) | 0, 4); //@line 6174
   SAFE_HEAP_STORE(dest + 48 | 0, SAFE_HEAP_LOAD(src + 48 | 0, 4, 0) | 0, 4); //@line 6175
   SAFE_HEAP_STORE(dest + 52 | 0, SAFE_HEAP_LOAD(src + 52 | 0, 4, 0) | 0, 4); //@line 6176
   SAFE_HEAP_STORE(dest + 56 | 0, SAFE_HEAP_LOAD(src + 56 | 0, 4, 0) | 0, 4); //@line 6177
   SAFE_HEAP_STORE(dest + 60 | 0, SAFE_HEAP_LOAD(src + 60 | 0, 4, 0) | 0, 4); //@line 6178
   dest = dest + 64 | 0; //@line 6179
   src = src + 64 | 0; //@line 6180
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0, 4); //@line 6183
   dest = dest + 4 | 0; //@line 6184
   src = src + 4 | 0; //@line 6185
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 6189
  while ((dest | 0) < (aligned_dest_end | 0)) {
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 1, 0) | 0, 1); //@line 6191
   SAFE_HEAP_STORE(dest + 1 | 0, SAFE_HEAP_LOAD(src + 1 | 0, 1, 0) | 0, 1); //@line 6192
   SAFE_HEAP_STORE(dest + 2 | 0, SAFE_HEAP_LOAD(src + 2 | 0, 1, 0) | 0, 1); //@line 6193
   SAFE_HEAP_STORE(dest + 3 | 0, SAFE_HEAP_LOAD(src + 3 | 0, 1, 0) | 0, 1); //@line 6194
   dest = dest + 4 | 0; //@line 6195
   src = src + 4 | 0; //@line 6196
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 1, 0) | 0, 1); //@line 6201
  dest = dest + 1 | 0; //@line 6202
  src = src + 1 | 0; //@line 6203
 }
 return ret | 0; //@line 6205
}
function _ecma_number_to_utf8_string($0, $1, $2) {
 $0 = +$0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$086 = 0.0, $$087 = 0, $$2 = 0, $$sink = 0, $$sink91 = 0, $22 = 0, $3 = 0, $34 = 0, $35 = 0, $38 = 0, $44 = 0, $52 = 0, $63 = 0, $67 = 0, $69 = 0, $70 = 0, $72 = 0, sp = 0;
 sp = STACKTOP; //@line 2503
 STACKTOP = STACKTOP + 16 | 0; //@line 2504
 $3 = sp; //@line 2505
 do {
  if (_ecma_number_is_nan($0) | 0) {
   $$2 = (_lit_copy_magic_string_to_buffer(6, $1, $2) | 0) - $1 | 0; //@line 2513
  } else {
   if (_ecma_number_is_zero($0) | 0) {
    SAFE_HEAP_STORE($1 >> 0 | 0, 48 | 0, 1);
    $$2 = 1; //@line 2518
    break;
   }
   if (_ecma_number_is_negative($0) | 0) {
    SAFE_HEAP_STORE($1 >> 0 | 0, 45 | 0, 1);
    $$086 = -$0; //@line 2526
    $$087 = $1 + 1 | 0; //@line 2526
   } else {
    $$086 = $0; //@line 2528
    $$087 = $1; //@line 2528
   }
   if (_ecma_number_is_infinity($$086) | 0) {
    $$2 = (_lit_copy_magic_string_to_buffer(42, $$087, $1 + $2 - $$087 | 0) | 0) - $1 | 0; //@line 2540
    break;
   }
   $22 = _ecma_number_to_uint32($$086) | 0; //@line 2543
   if (+($22 >>> 0) == $$086) {
    $$2 = $$087 + (_ecma_uint32_to_utf8_string($22, $$087, $1 + $2 - $$087 | 0) | 0) - $1 | 0; //@line 2556
    break;
   }
   $34 = _ecma_number_to_decimal($$086, $$087, $3) | 0; //@line 2559
   $35 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0; //@line 2560
   do {
    if (($34 | 0) <= ($35 | 0) & ($35 | 0) < 22) {
     $38 = $$087 + $34 | 0; //@line 2566
     _memset($38 | 0, 48, $35 - $34 | 0) | 0; //@line 2568
     $$sink91 = $38 + ((SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0) - $34) | 0; //@line 2572
    } else {
     if (($35 + -1 | 0) >>> 0 < 21) {
      $44 = $$087 + $35 | 0; //@line 2577
      _memmove($44 + 1 | 0, $44 | 0, $34 - $35 | 0) | 0; //@line 2580
      SAFE_HEAP_STORE($$087 + (SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0) >> 0 | 0, 46 | 0, 1);
      $$sink91 = $$087 + ($34 + 1) | 0; //@line 2586
      break;
     }
     if (($35 + 5 | 0) >>> 0 < 6) {
      $52 = $$087 + 2 | 0; //@line 2592
      _memmove($52 + (0 - $35) | 0, $$087 | 0, $34 | 0) | 0; //@line 2595
      _memset($52 | 0, 48, 0 - (SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0) | 0) | 0; //@line 2598
      SAFE_HEAP_STORE($$087 >> 0 | 0, 48 | 0, 1);
      SAFE_HEAP_STORE($$087 + 1 >> 0 | 0, 46 | 0, 1);
      $$sink91 = $$087 + ($34 + 2 - (SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0)) | 0; //@line 2606
      break;
     }
     $63 = $$087 + 1 | 0; //@line 2610
     if (($34 | 0) == 1) {
      $$sink = 1; //@line 2612
      $69 = $35; //@line 2612
     } else {
      _memmove($$087 + 2 | 0, $63 | 0, $34 + -1 | 0) | 0; //@line 2617
      SAFE_HEAP_STORE($63 >> 0 | 0, 46 | 0, 1);
      $$sink = $34 + 1 | 0; //@line 2620
      $69 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0; //@line 2620
     }
     $67 = $$087 + $$sink | 0; //@line 2622
     SAFE_HEAP_STORE($67 >> 0 | 0, 101 | 0, 1);
     $70 = ($69 | 0) > 0; //@line 2625
     $72 = $67 + 2 | 0; //@line 2627
     SAFE_HEAP_STORE($67 + 1 >> 0 | 0, ($70 ? 43 : 45) | 0, 1);
     $$sink91 = $72 + (_ecma_uint32_to_utf8_string($70 ? $69 + -1 | 0 : 1 - $69 | 0, $72, $1 + $2 - $72 | 0) | 0) | 0; //@line 2638
    }
   } while (0);
   $$2 = $$sink91 - $1 | 0; //@line 2644
  }
 } while (0);
 STACKTOP = sp; //@line 2647
 return $$2 | 0; //@line 2647
}
function _ecma_find_or_create_literal_number($0) {
 $0 = +$0;
 var $$06890 = 0, $$069$lcssa = 0, $$06989 = 0, $$07287 = 0, $$17088 = 0, $$271 = 0, $$6 = 0, $$sink = 0, $1 = 0, $10 = 0, $12 = 0, $15 = 0.0, $2 = 0, $21 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $4 = 0, $5 = 0, $9 = 0, $scevgep = 0, label = 0;
 $1 = _ecma_make_number_value($0) | 0; //@line 7545
 $2 = SAFE_HEAP_LOAD(134105 * 4 | 0, 4, 0) | 0 | 0; //@line 7546
 L1 : do {
  if (!$2) {
   $$069$lcssa = 0; //@line 7550
   label = 13; //@line 7551
  } else {
   $$06890 = $2; //@line 7553
   $$06989 = 0; //@line 7553
   L2 : while (1) {
    $$07287 = 0; //@line 7555
    $$17088 = $$06989; //@line 7555
    while (1) {
     $4 = $$06890 + 2 + ($$07287 << 1) | 0; //@line 7557
     $5 = SAFE_HEAP_LOAD($4 | 0, 2, 0) | 0 | 0; //@line 7558
     do {
      if (!($5 << 16 >> 16)) {
       $$271 = ($$17088 | 0) == 0 ? $4 : $$17088; //@line 7564
      } else {
       $9 = _jmem_decompress_pointer($5 & 65535) | 0; //@line 7567
       $10 = _ecma_is_value_integer_number($1) | 0; //@line 7568
       $12 = SAFE_HEAP_LOAD($9 + 4 | 0, 4, 0) | 0 | 0; //@line 7570
       if ($10) {
        if (($12 | 0) == ($1 | 0)) {
         $$6 = $5; //@line 7574
         break L1;
        } else {
         $$271 = $$17088; //@line 7577
         break;
        }
       }
       if (_ecma_is_value_float_number($12) | 0) {
        $15 = +_ecma_get_float_from_value($12); //@line 7583
        if ($15 == +_ecma_get_float_from_value($1)) {
         break L2;
        } else {
         $$271 = $$17088; //@line 7589
        }
       } else {
        $$271 = $$17088; //@line 7592
       }
      }
     } while (0);
     $$07287 = $$07287 + 1 | 0; //@line 7596
     if (($$07287 | 0) >= 3) {
      break;
     } else {
      $$17088 = $$271; //@line 7599
     }
    }
    $21 = SAFE_HEAP_LOAD($$06890 | 0, 2, 0) | 0 | 0; //@line 7604
    if (!($21 << 16 >> 16)) {
     $$069$lcssa = $$271; //@line 7607
     label = 13; //@line 7608
     break L1;
    }
    $$06890 = _jmem_decompress_pointer($21 & 65535) | 0; //@line 7612
    if (!$$06890) {
     $$069$lcssa = $$271; //@line 7615
     label = 13; //@line 7616
     break L1;
    } else {
     $$06989 = $$271; //@line 7619
    }
   }
   _ecma_free_value($1); //@line 7622
   $$6 = SAFE_HEAP_LOAD($4 | 0, 2, 0) | 0 | 0; //@line 7624
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   $26 = _ecma_alloc_string() | 0; //@line 7629
   SAFE_HEAP_STORE($26 | 0, 13 | 0, 2);
   SAFE_HEAP_STORE($26 + 4 | 0, $1 | 0, 4);
   $28 = _jmem_compress_pointer($26) | 0; //@line 7633
   if ($$069$lcssa | 0) {
    SAFE_HEAP_STORE($$069$lcssa | 0, $28 | 0, 2);
    $$6 = $28; //@line 7637
    break;
   }
   $30 = _jmem_pools_alloc(8) | 0; //@line 7640
   SAFE_HEAP_STORE($30 + 2 | 0, $28 | 0, 2);
   $scevgep = $30 + 4 | 0; //@line 7643
   SAFE_HEAP_STORE($scevgep | 0, 0 | 0, 2);
   SAFE_HEAP_STORE($scevgep + 2 | 0, 0 >>> 16 | 0, 2);
   $32 = SAFE_HEAP_LOAD(134105 * 4 | 0, 4, 0) | 0 | 0; //@line 7645
   if (!$32) {
    $$sink = 0; //@line 7648
   } else {
    $$sink = _jmem_compress_pointer($32) | 0; //@line 7651
   }
   SAFE_HEAP_STORE($30 | 0, $$sink | 0, 2);
   SAFE_HEAP_STORE(134105 * 4 | 0, $30 | 0, 4);
   $$6 = $28; //@line 7655
  }
 } while (0);
 return $$6 | 0; //@line 7658
}
function _ecma_number_make_from_sign_mantissa_and_exponent($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0.0, $$03040 = 0, $$03347 = 0, $$134$lcssa = 0, $$134$ph = 0, $$13442 = 0, $$136 = 0, $10 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $27 = 0, $31 = 0, $32 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $51 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $67 = 0, $70 = 0, $71 = 0, $73 = 0, label = 0;
 if ($2 >>> 0 > 2097151 | ($2 | 0) == 2097151 & $1 >>> 0 > 4294967295) {
  $$03347 = $3; //@line 3179
  $20 = $1; //@line 3179
  $21 = $2; //@line 3179
  while (1) {
   $19 = $$03347 + 1 | 0; //@line 3181
   $22 = _bitshift64Lshr($20 | 0, $21 | 0, 1) | 0; //@line 3182
   $23 = tempRet0; //@line 3183
   $27 = 0 == 0 & ($23 & 2145386496 | 0) == 0; //@line 3187
   $31 = _i64Add(($27 ? $20 & 1 : 0) | 0, ($27 ? 0 : 0) | 0, $22 | 0, $23 | 0) | 0; //@line 3191
   $32 = tempRet0; //@line 3192
   if ($32 >>> 0 > 2097151 | ($32 | 0) == 2097151 & $31 >>> 0 > 4294967295) {
    $$03347 = $19; //@line 3199
    $20 = $31; //@line 3199
    $21 = $32; //@line 3199
   } else {
    $$134$ph = $19; //@line 3201
    $10 = $32; //@line 3201
    $14 = $31; //@line 3201
    break;
   }
  }
 } else {
  $$134$ph = $3; //@line 3206
  $10 = $2; //@line 3206
  $14 = $1; //@line 3206
 }
 if ((($14 | 0) != 0 | ($10 | 0) != 0) & (0 == 0 & ($10 & 1048576 | 0) == 0)) {
  $$13442 = $$134$ph; //@line 3217
  $39 = $14; //@line 3217
  $40 = $10; //@line 3217
  while (1) {
   $38 = $$13442 + -1 | 0; //@line 3219
   $41 = _bitshift64Shl($39 | 0, $40 | 0, 1) | 0; //@line 3220
   $42 = tempRet0; //@line 3221
   if ((($41 | 0) != 0 | ($42 | 0) != 0) & (0 == 0 & ($42 & 1048576 | 0) == 0)) {
    $$13442 = $38; //@line 3231
    $39 = $41; //@line 3231
    $40 = $42; //@line 3231
   } else {
    $$134$lcssa = $38; //@line 3233
    $67 = $42; //@line 3233
    $73 = $41; //@line 3233
    break;
   }
  }
 } else {
  $$134$lcssa = $$134$ph; //@line 3238
  $67 = $10; //@line 3238
  $73 = $14; //@line 3238
 }
 $51 = $$134$lcssa + 1074 | 0; //@line 3240
 if (($51 | 0) < 1) {
  if (($$134$lcssa | 0) < -1074) {
   $$03040 = $51; //@line 3245
   $55 = $73; //@line 3245
   $56 = $67; //@line 3245
   while (1) {
    $57 = _bitshift64Lshr($55 | 0, $56 | 0, 1) | 0; //@line 3248
    $58 = tempRet0; //@line 3249
    if (($$03040 | 0) < -1) {
     $$03040 = $$03040 + 1 | 0; //@line 3252
     $55 = $57; //@line 3252
     $56 = $58; //@line 3252
    } else {
     $60 = $57; //@line 3254
     $61 = $58; //@line 3254
     break;
    }
   }
  } else {
   $60 = $73; //@line 3259
   $61 = $67; //@line 3259
  }
  $62 = _i64Add($60 | 0, $61 | 0, 1, 0) | 0; //@line 3261
  $64 = _bitshift64Lshr($62 | 0, tempRet0 | 0, 1) | 0; //@line 3263
  $$136 = 0; //@line 3265
  $70 = $64; //@line 3265
  $71 = tempRet0; //@line 3265
  label = 11; //@line 3266
 } else {
  if ($51 >>> 0 > 2046) {
   $$0 = +_ecma_number_make_infinity($0); //@line 3272
  } else {
   $$136 = $51; //@line 3274
   $70 = $73; //@line 3274
   $71 = $67 & -1048577; //@line 3274
   label = 11; //@line 3275
  }
 }
 if ((label | 0) == 11) {
  $$0 = +_ecma_number_pack($0, $$136, $70, $71); //@line 3280
 }
 return +$$0;
}
function _lexer_compare_identifier_to_current($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$058 = 0, $$058$pn = 0, $$062 = 0, $$063 = 0, $$063$$058 = 0, $$069 = 0, $$271$ph74 = 0, $$27178 = 0, $$3 = 0, $$36180 = 0, $$366 = 0, $$4$ph75 = 0, $$479 = 0, $12 = 0, $14 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $31 = 0, $32 = 0, $35 = 0, $4 = 0, $42 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 9554
 STACKTOP = STACKTOP + 16 | 0; //@line 9555
 $2 = sp; //@line 9556
 $4 = SAFE_HEAP_LOAD($0 + 204 | 0, 2, 0) | 0 | 0; //@line 9558
 $5 = $4 & 65535; //@line 9559
 L1 : do {
  if ($4 << 16 >> 16 == (SAFE_HEAP_LOAD($1 + 4 | 0, 2, 0) | 0 | 0)) {
   $12 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 9568
   $14 = SAFE_HEAP_LOAD($0 + 200 | 0, 4, 0) | 0 | 0; //@line 9570
   if (!(SAFE_HEAP_LOAD($0 + 207 >> 0 | 0, 1, 0) | 0)) {
    if (!(SAFE_HEAP_LOAD($1 + 7 >> 0 | 0, 1, 0) | 0)) {
     $$3 = (_memcmp($14, $12, $5) | 0) == 0; //@line 9578
     break;
    }
   }
   $$058 = $14; //@line 9582
   $$063 = $12; //@line 9582
   $$069 = $5; //@line 9582
   L7 : while (1) {
    $20 = SAFE_HEAP_LOAD($$058 >> 0 | 0, 1, 0) | 0 | 0; //@line 9584
    $21 = $20 << 24 >> 24 == 92; //@line 9585
    $22 = SAFE_HEAP_LOAD($$063 >> 0 | 0, 1, 0) | 0 | 0; //@line 9586
    $23 = $22 << 24 >> 24 == 92; //@line 9587
    if ($21 | $23) {
     if ($21 & $23) {
      $24 = _lexer_hex_to_character($0, $$058, 6) | 0; //@line 9592
      if ($24 << 16 >> 16 != (_lexer_hex_to_character($0, $$063, 6) | 0) << 16 >> 16) {
       break;
      }
      $$058$pn = $$058; //@line 9601
      $$271$ph74 = (_lit_char_get_utf8_length($24) | 0) + $$069 | 0; //@line 9601
      $$4$ph75 = $$063 + 6 | 0; //@line 9601
     } else {
      $$063$$058 = $23 ? $$063 : $$058; //@line 9604
      $31 = _lit_char_to_utf8_bytes($2, _lexer_hex_to_character($0, $$063$$058, 6) | 0) | 0; //@line 9606
      $32 = $$069 - $31 | 0; //@line 9607
      $$062 = 0; //@line 9608
      $$366 = $23 ? $$058 : $$063; //@line 9608
      while (1) {
       $35 = $$366 + 1 | 0; //@line 9612
       if ((SAFE_HEAP_LOAD($2 + $$062 >> 0 | 0, 1, 0) | 0 | 0) != (SAFE_HEAP_LOAD($$366 >> 0 | 0, 1, 0) | 0 | 0)) {
        break L7;
       }
       $$062 = $$062 + 1 | 0; //@line 9618
       if ($$062 >>> 0 >= $31 >>> 0) {
        $$058$pn = $$063$$058; //@line 9623
        $$271$ph74 = $32; //@line 9623
        $$4$ph75 = $35; //@line 9623
        break;
       } else {
        $$366 = $35; //@line 9621
       }
      }
     }
     $$27178 = $$271$ph74; //@line 9629
     $$36180 = $$058$pn + 6 | 0; //@line 9629
     $$479 = $$4$ph75; //@line 9629
    } else {
     $42 = $20 << 24 >> 24 == $22 << 24 >> 24; //@line 9633
     if ($42) {
      $$27178 = ($42 << 31 >> 31) + $$069 | 0; //@line 9637
      $$36180 = $$058 + 1 | 0; //@line 9637
      $$479 = $$063 + 1 | 0; //@line 9637
     } else {
      $$3 = 0; //@line 9639
      break L1;
     }
    }
    if (!$$27178) {
     $$3 = 1; //@line 9645
     break L1;
    } else {
     $$058 = $$36180; //@line 9648
     $$063 = $$479; //@line 9648
     $$069 = $$27178; //@line 9648
    }
   }
   $$3 = 0; //@line 9651
  } else {
   $$3 = 0; //@line 9653
  }
 } while (0);
 STACKTOP = sp; //@line 9656
 return $$3 | 0; //@line 9656
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $3 = 0, $36 = 0, $37 = 0, $4 = 0, $43 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2144
 STACKTOP = STACKTOP + 48 | 0; //@line 2145
 $vararg_buffer3 = sp + 16 | 0; //@line 2146
 $vararg_buffer = sp; //@line 2147
 $3 = sp + 32 | 0; //@line 2148
 $4 = $0 + 28 | 0; //@line 2149
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0; //@line 2150
 SAFE_HEAP_STORE($3 | 0, $5 | 0, 4);
 $7 = $0 + 20 | 0; //@line 2153
 $9 = (SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0) - $5 | 0; //@line 2155
 SAFE_HEAP_STORE($3 + 4 | 0, $9 | 0, 4);
 SAFE_HEAP_STORE($3 + 8 | 0, $1 | 0, 4);
 SAFE_HEAP_STORE($3 + 12 | 0, $2 | 0, 4);
 $12 = $9 + $2 | 0; //@line 2161
 $13 = $0 + 60 | 0; //@line 2162
 SAFE_HEAP_STORE($vararg_buffer | 0, SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($vararg_buffer + 4 | 0, $3 | 0, 4);
 SAFE_HEAP_STORE($vararg_buffer + 8 | 0, 2 | 0, 4);
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 2171
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 2175
  } else {
   $$04756 = 2; //@line 2177
   $$04855 = $12; //@line 2177
   $$04954 = $3; //@line 2177
   $25 = $17; //@line 2177
   while (1) {
    if (($25 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $25 | 0; //@line 2183
    $36 = SAFE_HEAP_LOAD($$04954 + 4 | 0, 4, 0) | 0 | 0; //@line 2185
    $37 = $25 >>> 0 > $36 >>> 0; //@line 2186
    $$150 = $37 ? $$04954 + 8 | 0 : $$04954; //@line 2188
    $$1 = ($37 << 31 >> 31) + $$04756 | 0; //@line 2190
    $$0 = $25 - ($37 ? $36 : 0) | 0; //@line 2192
    SAFE_HEAP_STORE($$150 | 0, (SAFE_HEAP_LOAD($$150 | 0, 4, 0) | 0 | 0) + $$0 | 0, 4);
    $43 = $$150 + 4 | 0; //@line 2196
    SAFE_HEAP_STORE($43 | 0, (SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0) - $$0 | 0, 4);
    SAFE_HEAP_STORE($vararg_buffer3 | 0, SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0, 4);
    SAFE_HEAP_STORE($vararg_buffer3 + 4 | 0, $$150 | 0, 4);
    SAFE_HEAP_STORE($vararg_buffer3 + 8 | 0, $$1 | 0, 4);
    $25 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 2208
    if (($$04855 | 0) == ($25 | 0)) {
     label = 3; //@line 2211
     break L1;
    } else {
     $$04756 = $$1; //@line 2214
     $$04954 = $$150; //@line 2214
    }
   }
   SAFE_HEAP_STORE($0 + 16 | 0, 0 | 0, 4);
   SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
   SAFE_HEAP_STORE($7 | 0, 0 | 0, 4);
   SAFE_HEAP_STORE($0 | 0, SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 32 | 0, 4);
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 2226
   } else {
    $$051 = $2 - (SAFE_HEAP_LOAD($$04954 + 4 | 0, 4, 0) | 0 | 0) | 0; //@line 2231
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = SAFE_HEAP_LOAD($0 + 44 | 0, 4, 0) | 0 | 0; //@line 2237
  SAFE_HEAP_STORE($0 + 16 | 0, $20 + (SAFE_HEAP_LOAD($0 + 48 | 0, 4, 0) | 0 | 0) | 0, 4);
  SAFE_HEAP_STORE($4 | 0, $20 | 0, 4);
  SAFE_HEAP_STORE($7 | 0, $20 | 0, 4);
  $$051 = $2; //@line 2245
 }
 STACKTOP = sp; //@line 2247
 return $$051 | 0; //@line 2247
}
function _opfunc_addition($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$054 = 0, $$055 = 0, $$061$off0 = 0, $$066$off0 = 0, $$258 = 0, $$359 = 0, $$460 = 0, $$7 = 0, $$not = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $3 = 0, $6 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13716
 STACKTOP = STACKTOP + 16 | 0; //@line 13717
 $2 = sp + 8 | 0; //@line 13718
 $3 = sp; //@line 13719
 if (_ecma_is_value_object($0) | 0) {
  $6 = _ecma_op_object_default_value(_ecma_get_object_from_value($0) | 0, 0) | 0; //@line 13723
  if (($6 | 0) == 24) {
   $$7 = 24; //@line 13726
  } else {
   $$054 = $6; //@line 13728
   $$061$off0 = 1; //@line 13728
   label = 3; //@line 13729
  }
 } else {
  $$054 = $0; //@line 13732
  $$061$off0 = 0; //@line 13732
  label = 3; //@line 13733
 }
 L3 : do {
  if ((label | 0) == 3) {
   do {
    if (_ecma_is_value_object($1) | 0) {
     $9 = _ecma_op_object_default_value(_ecma_get_object_from_value($1) | 0, 0) | 0; //@line 13741
     $$not = ($9 | 0) != 24; //@line 13742
     if ($$not | $$061$off0 ^ 1) {
      if ($$not) {
       $$055 = $9; //@line 13747
       $$066$off0 = 1; //@line 13747
       break;
      } else {
       $$7 = 24; //@line 13750
       break L3;
      }
     } else {
      _ecma_free_value($$054); //@line 13754
      $$7 = 24; //@line 13755
      break L3;
     }
    } else {
     $$055 = $1; //@line 13759
     $$066$off0 = 0; //@line 13759
    }
   } while (0);
   if (_ecma_is_value_string($$054) | 0) {
    label = 9; //@line 13764
   } else {
    if (_ecma_is_value_string($$055) | 0) {
     label = 9; //@line 13768
    } else {
     $20 = _ecma_get_number($$054, $2) | 0; //@line 13770
     if (_ecma_is_value_empty($20) | 0) {
      $22 = _ecma_get_number($$055, $3) | 0; //@line 13773
      if (_ecma_is_value_empty($22) | 0) {
       $$258 = _ecma_make_number_value(+(+SAFE_HEAP_LOAD_D($2 | 0, 8)) + +(+SAFE_HEAP_LOAD_D($3 | 0, 8))) | 0; //@line 13780
      } else {
       $$258 = $22; //@line 13782
      }
      $$359 = $$258; //@line 13784
     } else {
      $$359 = $20; //@line 13786
     }
     $$460 = $$359; //@line 13788
    }
   }
   do {
    if ((label | 0) == 9) {
     $12 = _ecma_op_to_string($$054) | 0; //@line 13793
     if (($12 | 0) == 24) {
      $$7 = 24; //@line 13796
      break L3;
     }
     $14 = _ecma_get_string_from_value($12) | 0; //@line 13799
     $15 = _ecma_op_to_string($$055) | 0; //@line 13800
     if (($15 | 0) == 24) {
      _ecma_deref_ecma_string($14); //@line 13803
      $$7 = 24; //@line 13804
      break L3;
     } else {
      $17 = _ecma_get_string_from_value($15) | 0; //@line 13807
      $19 = _ecma_make_string_value(_ecma_concat_ecma_strings($14, $17) | 0) | 0; //@line 13809
      _ecma_deref_ecma_string($17); //@line 13810
      $$460 = $19; //@line 13811
      break;
     }
    }
   } while (0);
   if ($$061$off0) {
    _ecma_free_value($$054); //@line 13817
   }
   if ($$066$off0) {
    _ecma_free_value($$055); //@line 13820
    $$7 = $$460; //@line 13821
   } else {
    $$7 = $$460; //@line 13823
   }
  }
 } while (0);
 STACKTOP = sp; //@line 13827
 return $$7 | 0; //@line 13827
}
function _lexer_construct_number_object($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$069 = 0.0, $$072 = 0, $$073$lcssa87 = 0, $$07381 = 0, $$07382 = 0, $$170 = 0.0, $$2 = 0, $$sink = 0, $11 = 0, $14 = 0, $21 = 0.0, $23 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $4 = 0, $44 = 0, $49 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9171
 STACKTOP = STACKTOP + 16 | 0; //@line 9172
 $3 = sp; //@line 9173
 $4 = $0 + 204 | 0; //@line 9174
 $9 = SAFE_HEAP_LOAD($4 | 0, 2, 1) | 0 | 0; //@line 9179
 $11 = SAFE_HEAP_LOAD($0 + 200 | 0, 4, 0) | 0 | 0; //@line 9181
 if ((SAFE_HEAP_LOAD($0 + 190 >> 0 | 0, 1, 0) | 0 | 0) == 2) {
  $14 = $11 + $9 + -1 | 0; //@line 9184
  $$069 = 0.0; //@line 9185
  $$072 = $11; //@line 9185
  while (1) {
   $$072 = $$072 + 1 | 0; //@line 9187
   $21 = $$069 * 8.0 + +((SAFE_HEAP_LOAD($$072 >> 0 | 0, 1, 1) | 0 | 0) + -48 | 0); //@line 9193
   if ($$072 >>> 0 >= $14 >>> 0) {
    $$170 = $21; //@line 9198
    break;
   } else {
    $$069 = $21; //@line 9196
   }
  }
 } else {
  $$170 = +_ecma_utf8_string_to_number($11, $9); //@line 9204
 }
 if ($1) {
  $23 = ~~$$170; //@line 9207
  if (($23 | 0) < 257 & +($23 | 0) == $$170) {
   if (($23 | 0) != 0 | $2 ^ 1) {
    SAFE_HEAP_STORE($0 + 212 | 0, $23 | 0, 2);
    $$2 = 1; //@line 9220
   } else {
    label = 9; //@line 9222
   }
  } else {
   label = 9; //@line 9225
  }
 } else {
  label = 9; //@line 9228
 }
 if ((label | 0) == 9) {
  $30 = _ecma_find_or_create_literal_number($2 ? -$$170 : $$170) | 0; //@line 9233
  $31 = $0 + 264 | 0; //@line 9234
  _parser_list_iterator_init($31, $3); //@line 9235
  $32 = _parser_list_iterator_next($3) | 0; //@line 9236
  L13 : do {
   if (!$32) {
    $$073$lcssa87 = 0; //@line 9240
    label = 15; //@line 9241
   } else {
    $$07382 = 0; //@line 9243
    $35 = $32; //@line 9243
    do {
     if ((SAFE_HEAP_LOAD($35 + 6 >> 0 | 0, 1, 0) | 0 | 0) == 2) {
      if ((SAFE_HEAP_LOAD($35 | 0, 2, 0) | 0 | 0) == $30 << 16 >> 16) {
       $$07381 = $$07382; //@line 9252
       $$sink = $35; //@line 9252
       break L13;
      }
     }
     $$07382 = $$07382 + 1 | 0; //@line 9256
     $35 = _parser_list_iterator_next($3) | 0; //@line 9257
    } while (($35 | 0) != 0);
    if ($$07382 >>> 0 > 32766) {
     _parser_raise_error($0, 2); //@line 9267
    } else {
     $$073$lcssa87 = $$07382; //@line 9270
     label = 15; //@line 9271
    }
   }
  } while (0);
  if ((label | 0) == 15) {
   $44 = _parser_list_append($0, $31) | 0; //@line 9276
   SAFE_HEAP_STORE($44 + 4 | 0, SAFE_HEAP_LOAD($4 | 0, 2, 0) | 0 | 0 | 0, 2);
   SAFE_HEAP_STORE($44 + 7 >> 0 | 0, 0 | 0, 1);
   $49 = $0 + 246 | 0; //@line 9283
   SAFE_HEAP_STORE($49 | 0, (SAFE_HEAP_LOAD($49 | 0, 2, 0) | 0 | 0) + 1 << 16 >> 16 | 0, 2);
   SAFE_HEAP_STORE($44 | 0, $30 | 0, 2);
   SAFE_HEAP_STORE($44 + 6 >> 0 | 0, 2 | 0, 1);
   $$07381 = $$073$lcssa87; //@line 9289
   $$sink = $44; //@line 9289
  }
  SAFE_HEAP_STORE($0 + 208 | 0, $$sink | 0, 4);
  SAFE_HEAP_STORE($0 + 212 | 0, $$07381 | 0, 2);
  SAFE_HEAP_STORE($0 + 214 >> 0 | 0, 0 | 0, 1);
  $$2 = 0; //@line 9298
 }
 STACKTOP = sp; //@line 9300
 return $$2 | 0; //@line 9300
}
function _jmem_heap_stats_print() {
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, sp = 0;
 sp = STACKTOP; //@line 14466
 STACKTOP = STACKTOP + 80 | 0; //@line 14467
 $vararg_buffer13 = sp + 56 | 0; //@line 14468
 $vararg_buffer = sp; //@line 14469
 $1 = SAFE_HEAP_LOAD(134119 * 4 | 0, 4, 0) | 0 | 0; //@line 14471
 $2 = SAFE_HEAP_LOAD(134120 * 4 | 0, 4, 0) | 0 | 0; //@line 14472
 $3 = SAFE_HEAP_LOAD(134121 * 4 | 0, 4, 0) | 0 | 0; //@line 14473
 $4 = SAFE_HEAP_LOAD(134122 * 4 | 0, 4, 0) | 0 | 0; //@line 14474
 $5 = SAFE_HEAP_LOAD(134123 * 4 | 0, 4, 0) | 0 | 0; //@line 14475
 $6 = SAFE_HEAP_LOAD(134124 * 4 | 0, 4, 0) | 0 | 0; //@line 14476
 $7 = SAFE_HEAP_LOAD(134125 * 4 | 0, 4, 0) | 0 | 0; //@line 14477
 $8 = SAFE_HEAP_LOAD(134126 * 4 | 0, 4, 0) | 0 | 0; //@line 14478
 $9 = SAFE_HEAP_LOAD(134127 * 4 | 0, 4, 0) | 0 | 0; //@line 14479
 $10 = SAFE_HEAP_LOAD(134128 * 4 | 0, 4, 0) | 0 | 0; //@line 14480
 $11 = SAFE_HEAP_LOAD(134129 * 4 | 0, 4, 0) | 0 | 0; //@line 14481
 $12 = SAFE_HEAP_LOAD(134130 * 4 | 0, 4, 0) | 0 | 0; //@line 14482
 SAFE_HEAP_STORE($vararg_buffer | 0, SAFE_HEAP_LOAD(134118 * 4 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($vararg_buffer + 4 | 0, $1 | 0, 4);
 SAFE_HEAP_STORE($vararg_buffer + 8 | 0, $2 | 0, 4);
 SAFE_HEAP_STORE($vararg_buffer + 12 | 0, $3 | 0, 4);
 SAFE_HEAP_STORE($vararg_buffer + 16 | 0, $4 | 0, 4);
 SAFE_HEAP_STORE($vararg_buffer + 20 | 0, $5 | 0, 4);
 SAFE_HEAP_STORE($vararg_buffer + 24 | 0, $6 | 0, 4);
 SAFE_HEAP_STORE($vararg_buffer + 28 | 0, $7 | 0, 4);
 SAFE_HEAP_STORE($vararg_buffer + 32 | 0, $8 | 0, 4);
 SAFE_HEAP_STORE($vararg_buffer + 36 | 0, $9 | 0, 4);
 SAFE_HEAP_STORE($vararg_buffer + 40 | 0, $10 | 0, 4);
 SAFE_HEAP_STORE($vararg_buffer + 44 | 0, $11 | 0, 4);
 SAFE_HEAP_STORE($vararg_buffer + 48 | 0, $12 | 0, 4);
 _jerry_port_log(2, 4202, $vararg_buffer); //@line 14508
 $13 = SAFE_HEAP_LOAD(134131 * 4 | 0, 4, 0) | 0 | 0; //@line 14509
 $14 = SAFE_HEAP_LOAD(134132 * 4 | 0, 4, 0) | 0 | 0; //@line 14510
 $19 = SAFE_HEAP_LOAD(134135 * 4 | 0, 4, 0) | 0 | 0; //@line 14515
 $20 = SAFE_HEAP_LOAD(134133 * 4 | 0, 4, 0) | 0 | 0; //@line 14516
 $25 = SAFE_HEAP_LOAD(134136 * 4 | 0, 4, 0) | 0 | 0; //@line 14521
 $26 = SAFE_HEAP_LOAD(134134 * 4 | 0, 4, 0) | 0 | 0; //@line 14522
 SAFE_HEAP_STORE($vararg_buffer13 | 0, ($13 >>> 0) / ($14 >>> 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($vararg_buffer13 + 4 | 0, (((($13 >>> 0) % ($14 >>> 0) | 0) * 1e4 | 0) >>> 0) / ($14 >>> 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($vararg_buffer13 + 8 | 0, ($19 >>> 0) / ($20 >>> 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($vararg_buffer13 + 12 | 0, (((($19 >>> 0) % ($20 >>> 0) | 0) * 1e4 | 0) >>> 0) / ($20 >>> 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($vararg_buffer13 + 16 | 0, ($25 >>> 0) / ($26 >>> 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($vararg_buffer13 + 20 | 0, (((($25 >>> 0) % ($26 >>> 0) | 0) * 1e4 | 0) >>> 0) / ($26 >>> 0) | 0 | 0, 4);
 _jerry_port_log(2, 4655, $vararg_buffer13); //@line 14538
 STACKTOP = sp; //@line 14539
 return;
}
function _parser_parse_for_statement_end($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 12315
 STACKTOP = STACKTOP + 96 | 0; //@line 12316
 $1 = sp + 48 | 0; //@line 12317
 $2 = sp + 44 | 0; //@line 12318
 $3 = sp + 24 | 0; //@line 12319
 $4 = sp + 8 | 0; //@line 12320
 $5 = sp; //@line 12321
 _parser_stack_iterator_init($0, $5); //@line 12322
 _parser_stack_iterator_skip($5, 1); //@line 12323
 _parser_stack_iterator_read($5, $2, 4); //@line 12324
 _parser_stack_iterator_skip($5, 4); //@line 12325
 _parser_stack_iterator_read($5, $1, 44); //@line 12326
 _parser_save_range($0, $4, SAFE_HEAP_LOAD($0 + 220 | 0, 4, 0) | 0 | 0); //@line 12329
 $8 = $0 + 188 | 0; //@line 12330
 SAFE_HEAP_STORE($3 | 0, SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($3 + 4 | 0, SAFE_HEAP_LOAD($8 + 4 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($3 + 8 | 0, SAFE_HEAP_LOAD($8 + 8 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($3 + 12 | 0, SAFE_HEAP_LOAD($8 + 12 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($3 + 16 | 0, SAFE_HEAP_LOAD($8 + 16 | 0, 4, 0) | 0 | 0, 4);
 _parser_set_range($0, $1 + 24 | 0); //@line 12333
 _lexer_next_token($0); //@line 12334
 _parser_set_continues_to_current_position($0, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0); //@line 12336
 if (SAFE_HEAP_LOAD($8 >> 0 | 0, 1, 0) | 0 | 0) {
  _parser_parse_expression($0, 1); //@line 12340
  if (SAFE_HEAP_LOAD($8 >> 0 | 0, 1, 0) | 0 | 0) {
   _parser_raise_error($0, 59); //@line 12344
  }
 }
 _parser_set_branch_to_current_position($0, $1); //@line 12348
 _parser_set_range($0, $1 + 8 | 0); //@line 12350
 _lexer_next_token($0); //@line 12351
 L5 : do {
  if (!(SAFE_HEAP_LOAD($8 >> 0 | 0, 1, 0) | 0)) {
   $$0 = 5; //@line 12356
  } else {
   _parser_parse_expression($0, 0); //@line 12358
   if (SAFE_HEAP_LOAD($8 >> 0 | 0, 1, 0) | 0 | 0) {
    _parser_raise_error($0, 59); //@line 12362
   }
   $20 = $0 + 240 | 0; //@line 12365
   switch (SAFE_HEAP_LOAD($20 | 0, 2, 0) | 0 | 0) {
   case 78:
    {
     SAFE_HEAP_STORE($20 | 0, 0 | 0, 2);
     $$0 = 21; //@line 12370
     break L5;
     break;
    }
   case 44:
    {
     SAFE_HEAP_STORE($20 | 0, 0 | 0, 2);
     $$0 = 5; //@line 12376
     break L5;
     break;
    }
   default:
    {
     $$0 = 13; //@line 12381
     break L5;
    }
   }
  }
 } while (0);
 _parser_stack_pop($0, 0, 49); //@line 12387
 _parser_stack_iterator_init($0, $0 + 180 | 0); //@line 12389
 _parser_emit_cbc_backward_branch($0, $$0, SAFE_HEAP_LOAD($1 + 40 | 0, 4, 0) | 0 | 0); //@line 12392
 _parser_set_breaks_to_current_position($0, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0); //@line 12394
 _parser_set_range($0, $4); //@line 12395
 SAFE_HEAP_STORE($8 | 0, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($8 + 4 | 0, SAFE_HEAP_LOAD($3 + 4 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($8 + 8 | 0, SAFE_HEAP_LOAD($3 + 8 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($8 + 12 | 0, SAFE_HEAP_LOAD($3 + 12 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($8 + 16 | 0, SAFE_HEAP_LOAD($3 + 16 | 0, 4, 0) | 0 | 0, 4);
 STACKTOP = sp; //@line 12397
 return;
}
function _ecma_instantiate_builtin($0) {
 $0 = $0 | 0;
 var $$sink = 0, $$sink47 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0;
 switch ($0 | 0) {
 case 0:
  {
   $$sink = _ecma_builtin_init_object(0, 0, 0, 1) | 0; //@line 8556
   $$sink47 = 536360; //@line 8556
   break;
  }
 case 1:
  {
   $2 = SAFE_HEAP_LOAD(134092 * 4 | 0, 4, 0) | 0 | 0; //@line 8560
   if (!$2) {
    _ecma_instantiate_builtin(2); //@line 8563
    $4 = SAFE_HEAP_LOAD(134092 * 4 | 0, 4, 0) | 0 | 0; //@line 8565
   } else {
    $4 = $2; //@line 8567
   }
   $$sink = _ecma_builtin_init_object(1, $4, 2, 1) | 0; //@line 8570
   $$sink47 = 536364; //@line 8570
   break;
  }
 case 2:
  {
   $6 = SAFE_HEAP_LOAD(134090 * 4 | 0, 4, 0) | 0 | 0; //@line 8574
   if (!$6) {
    _ecma_instantiate_builtin(0); //@line 8577
    $8 = SAFE_HEAP_LOAD(134090 * 4 | 0, 4, 0) | 0 | 0; //@line 8579
   } else {
    $8 = $6; //@line 8581
   }
   $$sink = _ecma_builtin_init_object(2, $8, 2, 1) | 0; //@line 8584
   $$sink47 = 536368; //@line 8584
   break;
  }
 case 3:
  {
   $10 = SAFE_HEAP_LOAD(134092 * 4 | 0, 4, 0) | 0 | 0; //@line 8588
   if (!$10) {
    _ecma_instantiate_builtin(2); //@line 8591
    $12 = SAFE_HEAP_LOAD(134092 * 4 | 0, 4, 0) | 0 | 0; //@line 8593
   } else {
    $12 = $10; //@line 8595
   }
   $$sink = _ecma_builtin_init_object(3, $12, 2, 1) | 0; //@line 8598
   $$sink47 = 536372; //@line 8598
   break;
  }
 case 4:
  {
   $14 = SAFE_HEAP_LOAD(134092 * 4 | 0, 4, 0) | 0 | 0; //@line 8602
   if (!$14) {
    _ecma_instantiate_builtin(2); //@line 8605
    $16 = SAFE_HEAP_LOAD(134092 * 4 | 0, 4, 0) | 0 | 0; //@line 8607
   } else {
    $16 = $14; //@line 8609
   }
   $$sink = _ecma_builtin_init_object(4, $16, 2, 1) | 0; //@line 8612
   $$sink47 = 536376; //@line 8612
   break;
  }
 case 5:
  {
   $18 = SAFE_HEAP_LOAD(134090 * 4 | 0, 4, 0) | 0 | 0; //@line 8616
   if (!$18) {
    _ecma_instantiate_builtin(0); //@line 8619
    $20 = SAFE_HEAP_LOAD(134090 * 4 | 0, 4, 0) | 0 | 0; //@line 8621
   } else {
    $20 = $18; //@line 8623
   }
   $$sink = _ecma_builtin_init_object(5, $20, 0, 1) | 0; //@line 8626
   $$sink47 = 536380; //@line 8626
   break;
  }
 case 6:
  {
   $22 = SAFE_HEAP_LOAD(134092 * 4 | 0, 4, 0) | 0 | 0; //@line 8630
   if (!$22) {
    _ecma_instantiate_builtin(2); //@line 8633
    $24 = SAFE_HEAP_LOAD(134092 * 4 | 0, 4, 0) | 0 | 0; //@line 8635
   } else {
    $24 = $22; //@line 8637
   }
   $$sink = _ecma_builtin_init_object(6, $24, 2, 0) | 0; //@line 8640
   $$sink47 = 536384; //@line 8640
   break;
  }
 case 7:
  {
   $26 = SAFE_HEAP_LOAD(134090 * 4 | 0, 4, 0) | 0 | 0; //@line 8644
   if (!$26) {
    _ecma_instantiate_builtin(0); //@line 8647
    $28 = SAFE_HEAP_LOAD(134090 * 4 | 0, 4, 0) | 0 | 0; //@line 8649
   } else {
    $28 = $26; //@line 8651
   }
   $$sink = _ecma_builtin_init_object(7, $28, 0, 1) | 0; //@line 8654
   $$sink47 = 536388; //@line 8654
   break;
  }
 default:
  {}
 }
 SAFE_HEAP_STORE($$sink47 | 0, $$sink | 0, 4);
 return;
}
function _ecma_find_named_property($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$050 = 0, $$055 = 0, $$1 = 0, $$2 = 0, $$254 = 0, $$260 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $26 = 0, $3 = 0, $30 = 0, $32 = 0, $35 = 0, $5 = 0, $7 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6316
 STACKTOP = STACKTOP + 16 | 0; //@line 6317
 $2 = sp; //@line 6318
 $3 = _ecma_lcache_lookup($0, $1) | 0; //@line 6319
 do {
  if (!$3) {
   $5 = _ecma_get_property_list($0) | 0; //@line 6323
   if (!$5) {
    $$1 = 0; //@line 6326
   } else {
    $7 = SAFE_HEAP_LOAD($5 >> 0 | 0, 1, 0) | 0 | 0; //@line 6328
    if ($7 << 24 >> 24 == 4) {
     $9 = _ecma_property_hashmap_find($5, $1, $2) | 0; //@line 6331
     if ($9 | 0) {
      if (!((SAFE_HEAP_LOAD($9 >> 0 | 0, 1, 0) | 0) & 32)) {
       _ecma_lcache_insert($0, SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0, $9); //@line 6339
      }
     }
     $$1 = $9; //@line 6342
     break;
    } else {
     $$050 = 0; //@line 6345
     $$055 = $5; //@line 6345
     $16 = $7; //@line 6345
    }
    while (1) {
     if ($16 & 3) {
      $18 = $$055 + 12 | 0; //@line 6351
      if (_ecma_string_compare_to_property_name($16, SAFE_HEAP_LOAD($18 | 0, 2, 0) | 0 | 0, $1) | 0) {
       label = 10; //@line 6355
       break;
      }
     }
     $22 = $$055 + 1 | 0; //@line 6359
     $23 = SAFE_HEAP_LOAD($22 >> 0 | 0, 1, 0) | 0 | 0; //@line 6360
     if ($23 & 3) {
      $26 = $$055 + 14 | 0; //@line 6364
      if (_ecma_string_compare_to_property_name($23, SAFE_HEAP_LOAD($26 | 0, 2, 0) | 0 | 0, $1) | 0) {
       label = 13; //@line 6368
       break;
      }
     }
     $30 = $$050 + 1 | 0; //@line 6372
     $32 = SAFE_HEAP_LOAD($$055 + 2 | 0, 2, 0) | 0 | 0; //@line 6374
     if (!($32 << 16 >> 16)) {
      $$2 = $30; //@line 6377
      $$254 = 0; //@line 6377
      $$260 = 0; //@line 6377
      break;
     }
     $35 = _jmem_decompress_pointer($32 & 65535) | 0; //@line 6381
     if (!$35) {
      $$2 = $30; //@line 6384
      $$254 = 0; //@line 6384
      $$260 = 0; //@line 6384
      break;
     }
     $$050 = $30; //@line 6388
     $$055 = $35; //@line 6388
     $16 = SAFE_HEAP_LOAD($35 >> 0 | 0, 1, 0) | 0 | 0; //@line 6388
    }
    if ((label | 0) == 10) {
     $$2 = $$050; //@line 6392
     $$254 = SAFE_HEAP_LOAD($18 | 0, 2, 0) | 0 | 0; //@line 6392
     $$260 = $$055; //@line 6392
    } else if ((label | 0) == 13) {
     $$2 = $$050; //@line 6396
     $$254 = SAFE_HEAP_LOAD($26 | 0, 2, 0) | 0 | 0; //@line 6396
     $$260 = $22; //@line 6396
    }
    if ($$2 >>> 0 > 15) {
     _ecma_property_hashmap_create($0); //@line 6400
    }
    if (!$$260) {
     $$1 = 0; //@line 6404
    } else {
     if (!((SAFE_HEAP_LOAD($$260 >> 0 | 0, 1, 0) | 0) & 32)) {
      _ecma_lcache_insert($0, $$254, $$260); //@line 6410
      $$1 = $$260; //@line 6411
     } else {
      $$1 = $$260; //@line 6413
     }
    }
   }
  } else {
   $$1 = $3; //@line 6418
  }
 } while (0);
 STACKTOP = sp; //@line 6421
 return $$1 | 0; //@line 6421
}
function _lexer_expect_object_literal_id($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $10 = 0, $11 = 0, $15 = 0, $16 = 0, $20 = 0, $4 = 0, $6 = 0, $9 = 0, label = 0;
 _lexer_skip_spaces($0); //@line 9427
 $4 = $0 + 188 | 0; //@line 9430
 SAFE_HEAP_STORE($0 + 192 | 0, SAFE_HEAP_LOAD($0 + 224 | 0, 4, 0) | 0 | 0, 4);
 $6 = $0 + 228 | 0; //@line 9433
 SAFE_HEAP_STORE($0 + 196 | 0, SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0, 4);
 $9 = $0 + 216 | 0; //@line 9437
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0; //@line 9438
 $11 = $0 + 220 | 0; //@line 9439
 L1 : do {
  if ($10 >>> 0 < (SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0) >>> 0) {
   L3 : do {
    if (_lit_char_is_identifier_start($10) | 0) {
     label = 4; //@line 9447
    } else {
     $15 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0; //@line 9449
     $16 = SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0; //@line 9450
     switch ($16 << 24 >> 24) {
     case 92:
      {
       label = 4; //@line 9453
       break L3;
       break;
      }
     case 39:
     case 34:
      {
       _lexer_parse_string($0); //@line 9458
       label = 17; //@line 9459
       break L3;
       break;
      }
     default:
      {}
     }
     if ($16 << 24 >> 24 == 125 & ($1 ^ 1)) {
      SAFE_HEAP_STORE($4 >> 0 | 0, 54 | 0, 1);
      SAFE_HEAP_STORE($9 | 0, $15 + 1 | 0, 4);
      SAFE_HEAP_STORE($6 | 0, (SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0) + 1 | 0, 4);
      break;
     }
     $$ = $16 << 24 >> 24 == 46 ? $15 + 1 | 0 : $15; //@line 9480
     if ($$ >>> 0 >= (SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0) >>> 0) {
      break L1;
     }
     if (((SAFE_HEAP_LOAD($$ >> 0 | 0, 1, 0) | 0 | 0) + -48 & 255) >= 10) {
      break L1;
     }
     _lexer_parse_number($0); //@line 9492
     _lexer_construct_number_object($0, 0, 0) | 0; //@line 9493
    }
   } while (0);
   do {
    if ((label | 0) == 4) {
     _lexer_parse_identifier($0, 0); //@line 9498
     if ($1) {
      label = 17; //@line 9500
     } else {
      if ((SAFE_HEAP_LOAD($0 + 204 | 0, 2, 0) | 0 | 0) == 3) {
       _lexer_skip_spaces($0); //@line 9506
       $20 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0; //@line 9507
       if ($20 >>> 0 < (SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0) >>> 0) {
        if ((SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0) == 58) {
         label = 17; //@line 9514
        } else {
         if (_lexer_compare_identifier_to_current($0, 1012) | 0) {
          SAFE_HEAP_STORE($4 >> 0 | 0, 82 | 0, 1);
          break;
         }
         if (_lexer_compare_identifier_to_current($0, 1020) | 0) {
          SAFE_HEAP_STORE($4 >> 0 | 0, 83 | 0, 1);
         } else {
          label = 17; //@line 9525
         }
        }
       } else {
        label = 17; //@line 9529
       }
      } else {
       label = 17; //@line 9532
      }
     }
    }
   } while (0);
   if ((label | 0) == 17) {
    _lexer_construct_literal_object($0, $0 + 200 | 0, 1); //@line 9539
   }
   return;
  }
 } while (0);
 _parser_raise_error($0, 55); //@line 9544
}
function _jmem_heap_alloc_block_internal($0) {
 $0 = $0 | 0;
 var $$053 = 0, $$055 = 0, $$057 = 0, $$3$ph = 0, $$sink = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $29 = 0, $34 = 0, $35 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $storemerge = 0;
 $2 = $0 + 7 & -8; //@line 14180
 $4 = SAFE_HEAP_LOAD(3018 * 4 | 0, 4, 0) | 0 | 0; //@line 14182
 $5 = ($4 | 0) == -1; //@line 14183
 L1 : do {
  if (($2 | 0) == 8) {
   if ($5) {
    $$3$ph = 0; //@line 14187
   } else {
    $6 = $4; //@line 14189
    SAFE_HEAP_STORE(134111 * 4 | 0, (SAFE_HEAP_LOAD(134111 * 4 | 0, 4, 0) | 0 | 0) + 8 | 0, 4);
    _jmem_heap_stat_alloc_iter(); //@line 14193
    $10 = SAFE_HEAP_LOAD($6 + 4 | 0, 4, 0) | 0 | 0; //@line 14195
    $12 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0; //@line 14197
    if (($10 | 0) == 8) {
     $storemerge = $12; //@line 14199
    } else {
     $13 = SAFE_HEAP_LOAD(3018 * 4 | 0, 4, 0) | 0 | 0; //@line 14201
     $14 = $13 + 8 | 0; //@line 14202
     SAFE_HEAP_STORE($13 + 12 | 0, $10 + -8 | 0, 4);
     SAFE_HEAP_STORE($14 | 0, $12 | 0, 4);
     $storemerge = $14; //@line 14208
    }
    SAFE_HEAP_STORE(3018 * 4 | 0, $storemerge | 0, 4);
    if (($6 | 0) == (SAFE_HEAP_LOAD(134099 * 4 | 0, 4, 0) | 0 | 0)) {
     SAFE_HEAP_STORE(134099 * 4 | 0, $storemerge | 0, 4);
     $$3$ph = $6; //@line 14215
    } else {
     $$3$ph = $6; //@line 14217
    }
   }
  } else {
   if ($5) {
    $$3$ph = 0; //@line 14222
   } else {
    $$055 = $4; //@line 14224
    $$057 = 12072; //@line 14224
    while (1) {
     $20 = $$055; //@line 14226
     _jmem_heap_stat_alloc_iter(); //@line 14227
     $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0; //@line 14228
     $23 = SAFE_HEAP_LOAD($20 + 4 | 0, 4, 0) | 0 | 0; //@line 14230
     if ($23 >>> 0 >= $2 >>> 0) {
      break;
     }
     if (($21 | 0) == -1) {
      $$3$ph = 0; //@line 14237
      break L1;
     } else {
      $$055 = $21; //@line 14240
      $$057 = $20; //@line 14240
     }
    }
    SAFE_HEAP_STORE(134111 * 4 | 0, (SAFE_HEAP_LOAD(134111 * 4 | 0, 4, 0) | 0 | 0) + $2 | 0, 4);
    $29 = $$055 + $2 | 0; //@line 14248
    if ($23 >>> 0 > $2 >>> 0) {
     SAFE_HEAP_STORE($29 + 4 | 0, $23 - $2 | 0, 4);
     SAFE_HEAP_STORE($29 | 0, $21 | 0, 4);
     $$sink = $29; //@line 14255
    } else {
     $$sink = $21; //@line 14257
    }
    SAFE_HEAP_STORE($$057 | 0, $$sink | 0, 4);
    SAFE_HEAP_STORE(134099 * 4 | 0, $$057 | 0, 4);
    $$3$ph = $20; //@line 14261
   }
  }
 } while (0);
 $34 = SAFE_HEAP_LOAD(134111 * 4 | 0, 4, 0) | 0 | 0; //@line 14265
 $35 = SAFE_HEAP_LOAD(134112 * 4 | 0, 4, 0) | 0 | 0; //@line 14266
 if ($34 >>> 0 >= $35 >>> 0) {
  $38 = $35; //@line 14269
  do {
   $38 = $38 + 8192 | 0; //@line 14271
  } while ($34 >>> 0 >= $38 >>> 0);
  SAFE_HEAP_STORE(134112 * 4 | 0, $38 | 0, 4);
 }
 if (!$$3$ph) {
  $$053 = 0; //@line 14283
 } else {
  _jmem_heap_stat_alloc($0); //@line 14285
  $$053 = $$3$ph; //@line 14286
 }
 return $$053 | 0; //@line 14288
}
function _ecma_builtin_error_prototype_object_to_string($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0105 = 0, $$0106 = 0, $$0107 = 0, $$2 = 0, $$4 = 0, $12 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $31 = 0, $36 = 0, $4 = 0;
 if (_ecma_is_value_object($0) | 0) {
  $3 = _ecma_get_object_from_value($0) | 0; //@line 3260
  $4 = _ecma_op_object_get_by_magic_id($3, 15) | 0; //@line 3261
  if (($4 | 0) == 24) {
   $$4 = 24; //@line 3264
  } else {
   if (_ecma_is_value_undefined($4) | 0) {
    $$0105 = _ecma_make_string_value(_ecma_get_magic_string(20) | 0) | 0; //@line 3270
   } else {
    $$0105 = _ecma_op_to_string($4) | 0; //@line 3273
   }
   if (($$0105 | 0) == 24) {
    $$2 = _ecma_copy_value(24) | 0; //@line 3278
   } else {
    $12 = _ecma_op_object_get_by_magic_id($3, 39) | 0; //@line 3280
    if (($12 | 0) == 24) {
     $$2 = 24; //@line 3283
    } else {
     if (_ecma_is_value_undefined($12) | 0) {
      $$0106 = _ecma_make_string_value(_ecma_get_magic_string(0) | 0) | 0; //@line 3289
     } else {
      $$0106 = _ecma_op_to_string($12) | 0; //@line 3292
     }
     if (($$0106 | 0) == 24) {
      $$0 = _ecma_copy_value(24) | 0; //@line 3297
     } else {
      $20 = _ecma_get_string_from_value($$0105) | 0; //@line 3299
      $21 = _ecma_get_string_from_value($$0106) | 0; //@line 3300
      do {
       if (_ecma_string_is_empty($20) | 0) {
        _ecma_ref_ecma_string($21); //@line 3304
        $$0107 = $21; //@line 3305
       } else {
        if (_ecma_string_is_empty($21) | 0) {
         _ecma_ref_ecma_string($20); //@line 3309
         $$0107 = $20; //@line 3310
         break;
        }
        $24 = _ecma_string_get_size($20) | 0; //@line 3313
        $25 = _ecma_string_get_size($21) | 0; //@line 3314
        $26 = _lit_get_magic_string_size(3) | 0; //@line 3315
        $27 = _lit_get_magic_string_size(1) | 0; //@line 3316
        $30 = $25 + $24 + $26 + $27 | 0; //@line 3319
        $31 = _jmem_heap_alloc_block($30) | 0; //@line 3320
        _ecma_string_copy_to_cesu8_buffer($21, _lit_copy_magic_string_to_buffer(1, _lit_copy_magic_string_to_buffer(3, $31 + (_ecma_string_copy_to_cesu8_buffer($20, $31, $24) | 0) | 0, $26) | 0, $27) | 0, $25) | 0; //@line 3325
        $36 = _ecma_new_ecma_string_from_utf8($31, $30) | 0; //@line 3326
        if (!$31) {
         $$0107 = $36; //@line 3329
        } else {
         _jmem_heap_free_block($31, $30); //@line 3331
         $$0107 = $36; //@line 3332
        }
       }
      } while (0);
      $$0 = _ecma_make_string_value($$0107) | 0; //@line 3337
     }
     _ecma_free_value($$0106); //@line 3339
     _ecma_free_value($12); //@line 3340
     $$2 = $$0; //@line 3341
    }
   }
   _ecma_free_value($$0105); //@line 3344
   _ecma_free_value($4); //@line 3345
   $$4 = $$2; //@line 3346
  }
 } else {
  $$4 = _ecma_raise_type_error(6127) | 0; //@line 3350
 }
 return $$4 | 0; //@line 3352
}
function _ecma_builtin_function_dispatch_construct($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$046 = 0, $$047$off0 = 0, $$048 = 0, $$049$off0 = 0, $$050 = 0, $$051 = 0, $$1 = 0, $11 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $3 = 0, $31 = 0, $33 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 3727
 STACKTOP = STACKTOP + 16 | 0; //@line 3728
 $2 = sp + 8 | 0; //@line 3729
 $3 = sp + 4 | 0; //@line 3730
 $4 = sp; //@line 3731
 $5 = _ecma_builtin_function_helper_get_function_arguments($0, $1) | 0; //@line 3732
 do {
  if (($5 | 0) == 24) {
   $$1 = 24; //@line 3736
  } else {
   if (!$1) {
    $$051 = _ecma_make_string_value(_ecma_get_magic_string(0) | 0) | 0; //@line 3742
   } else {
    $11 = _ecma_op_to_string(SAFE_HEAP_LOAD($0 + ($1 + -1 << 2) | 0, 4, 0) | 0 | 0) | 0; //@line 3747
    if (($11 | 0) == 24) {
     _ecma_free_value($5); //@line 3750
     $$1 = 24; //@line 3751
     break;
    } else {
     $$051 = $11; //@line 3754
    }
   }
   $15 = _ecma_get_string_from_value($5) | 0; //@line 3757
   $16 = _ecma_get_string_from_value($$051) | 0; //@line 3758
   $17 = _ecma_string_get_chars($15, $2, 0) | 0; //@line 3759
   if (!$17) {
    $20 = _jmem_heap_alloc_block(SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0) | 0; //@line 3763
    _ecma_string_to_utf8_bytes($15, $20, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0); //@line 3765
    $$049$off0 = 1; //@line 3766
    $$050 = $20; //@line 3766
   } else {
    $$049$off0 = 0; //@line 3768
    $$050 = $17; //@line 3768
   }
   $22 = _ecma_string_get_chars($16, $3, 0) | 0; //@line 3770
   if (!$22) {
    $25 = _jmem_heap_alloc_block(SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0) | 0; //@line 3774
    _ecma_string_to_utf8_bytes($16, $25, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0); //@line 3776
    $$047$off0 = 1; //@line 3777
    $$048 = $25; //@line 3777
   } else {
    $$047$off0 = 0; //@line 3779
    $$048 = $22; //@line 3779
   }
   SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
   if ((_parser_parse_script($$050, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0, $$048, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0, 0, $4) | 0) == 24) {
    $$046 = 24; //@line 3787
   } else {
    $31 = _ecma_get_global_environment() | 0; //@line 3789
    $33 = _ecma_op_create_function_object($31, SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0) | 0; //@line 3791
    _ecma_bytecode_deref(SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0); //@line 3793
    $$046 = _ecma_make_object_value($33) | 0; //@line 3795
   }
   if ($$047$off0) {
    _jmem_heap_free_block($$048, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0); //@line 3799
   }
   if ($$049$off0) {
    _jmem_heap_free_block($$050, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0); //@line 3803
   }
   _ecma_deref_ecma_string($15); //@line 3805
   _ecma_deref_ecma_string($16); //@line 3806
   $$1 = $$046; //@line 3807
  }
 } while (0);
 STACKTOP = sp; //@line 3810
 return $$1 | 0; //@line 3810
}
function _parser_parse_function_statement($0) {
 $0 = $0 | 0;
 var $$ = 0, $$phi$trans$insert = 0, $$pre$phiZ2D = 0, $10 = 0, $12 = 0, $2 = 0, $22 = 0, $23 = 0, $28 = 0, $29 = 0, $34 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $44 = 0, $8 = 0, label = 0;
 _lexer_expect_identifier($0, 0); //@line 11052
 $2 = SAFE_HEAP_LOAD($0 + 214 >> 0 | 0, 1, 0) | 0 | 0; //@line 11054
 if ($2 << 24 >> 24 == 2) {
  $4 = $0 + 168 | 0; //@line 11057
  SAFE_HEAP_STORE($4 | 0, SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 512 | 0, 4);
 }
 $8 = SAFE_HEAP_LOAD($0 + 208 | 0, 4, 0) | 0 | 0; //@line 11063
 $$ = $2 << 24 >> 24 == 0 ? 6 : 134; //@line 11065
 $10 = $8 + 7 | 0; //@line 11066
 $12 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 1) | 0 | 0; //@line 11068
 do {
  if (!($12 & 4)) {
   $28 = $0 + 246 | 0; //@line 11077
   $29 = SAFE_HEAP_LOAD($28 | 0, 2, 0) | 0 | 0; //@line 11078
   if (((SAFE_HEAP_LOAD($0 + 212 | 0, 2, 1) | 0 | 0) + 1 | 0) == ($29 & 65535 | 0)) {
    SAFE_HEAP_STORE($10 >> 0 | 0, $12 | 5 | 0, 1);
    _lexer_construct_function_object($0, $$) | 0; //@line 11085
    _lexer_next_token($0); //@line 11086
   } else {
    $$pre$phiZ2D = $28; //@line 11088
    $34 = $29; //@line 11088
    label = 9; //@line 11089
   }
  } else {
   if (!($12 & 24)) {
    $22 = _parser_list_get($0 + 264 | 0, (SAFE_HEAP_LOAD($0 + 212 | 0, 2, 1) | 0 | 0) + 1 | 0) | 0; //@line 11100
    $23 = _parser_parse_function($0, $$) | 0; //@line 11101
    _util_free_literal($22); //@line 11102
    SAFE_HEAP_STORE($22 | 0, $23 | 0, 4);
    _lexer_next_token($0); //@line 11104
    break;
   } else {
    $$phi$trans$insert = $0 + 246 | 0; //@line 11107
    $$pre$phiZ2D = $$phi$trans$insert; //@line 11109
    $34 = SAFE_HEAP_LOAD($$phi$trans$insert | 0, 2, 0) | 0 | 0; //@line 11109
    label = 9; //@line 11110
    break;
   }
  }
 } while (0);
 do {
  if ((label | 0) == 9) {
   if (($34 & 65535) > 32766) {
    _parser_raise_error($0, 2); //@line 11119
   } else {
    $37 = _parser_list_append($0, $0 + 264 | 0) | 0; //@line 11123
    $38 = $8; //@line 11124
    $43 = SAFE_HEAP_LOAD($38 + 4 | 0, 4, 0) | 0 | 0; //@line 11129
    $44 = $37; //@line 11130
    SAFE_HEAP_STORE($44 | 0, SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0, 4);
    SAFE_HEAP_STORE($44 + 4 | 0, $43 | 0, 4);
    SAFE_HEAP_STORE($37 + 7 >> 0 | 0, (SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0) & 66 | 5 | 0, 1);
    SAFE_HEAP_STORE($8 + 6 >> 0 | 0, 5 | 0, 1);
    SAFE_HEAP_STORE($10 >> 0 | 0, (SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0) & 80 | 0, 1);
    SAFE_HEAP_STORE($8 + 4 | 0, SAFE_HEAP_LOAD($$pre$phiZ2D | 0, 2, 0) | 0 | 0 | 0, 2);
    SAFE_HEAP_STORE($$pre$phiZ2D | 0, (SAFE_HEAP_LOAD($$pre$phiZ2D | 0, 2, 0) | 0 | 0) + 1 << 16 >> 16 | 0, 2);
    _lexer_construct_function_object($0, $$) | 0; //@line 11152
    _lexer_next_token($0); //@line 11153
    break;
   }
  }
 } while (0);
 return;
}
function _ecma_gc_mark($0) {
 $0 = $0 | 0;
 var $$06568 = 0, $$067 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $30 = 0, $33 = 0, $7 = 0, label = 0;
 L1 : do {
  if (_ecma_is_lexical_environment($0) | 0) {
   $2 = _ecma_get_lex_env_outer_reference($0) | 0; //@line 985
   if ($2 | 0) {
    _ecma_gc_set_object_visited($2); //@line 988
   }
   if ((_ecma_get_lex_env_type($0) | 0) == 13) {
    label = 19; //@line 993
   } else {
    _ecma_gc_set_object_visited(_ecma_get_lex_env_binding_object($0) | 0); //@line 996
   }
  } else {
   $7 = _ecma_get_object_prototype($0) | 0; //@line 999
   if ($7 | 0) {
    _ecma_gc_set_object_visited($7); //@line 1002
   }
   switch (_ecma_get_object_type($0) | 0) {
   case 6:
    {
     _ecma_gc_set_object_visited(SAFE_HEAP_LOAD($0 + 12 | 0, 4, 0) | 0 | 0); //@line 1009
     label = 19; //@line 1010
     break L1;
     break;
    }
   case 5:
    {
     _ecma_gc_set_object_visited(SAFE_HEAP_LOAD($0 + 8 | 0, 4, 0) | 0 | 0); //@line 1017
     $15 = SAFE_HEAP_LOAD($0 + 12 | 0, 4, 0) | 0 | 0; //@line 1019
     if (!(_ecma_is_value_integer_number($15) | 0)) {
      if (!(_ecma_is_value_object($15) | 0)) {
       label = 19; //@line 1024
       break L1;
      }
      _ecma_gc_set_object_visited(_ecma_get_object_from_value($15) | 0); //@line 1028
      label = 19; //@line 1029
      break L1;
     }
     $19 = _ecma_get_integer_from_value($15) | 0; //@line 1032
     $20 = $0 + 16 | 0; //@line 1033
     if (($19 | 0) > 0) {
      $$06568 = 0; //@line 1036
     } else {
      label = 19; //@line 1038
      break L1;
     }
     do {
      $23 = SAFE_HEAP_LOAD($20 + ($$06568 << 2) | 0, 4, 0) | 0 | 0; //@line 1043
      if (_ecma_is_value_object($23) | 0) {
       _ecma_gc_set_object_visited(_ecma_get_object_from_value($23) | 0); //@line 1047
      }
      $$06568 = $$06568 + 1 | 0; //@line 1049
     } while (($$06568 | 0) != ($19 | 0));
     label = 19; //@line 1052
     break;
    }
   case 2:
    {
     if (_ecma_get_object_is_builtin($0) | 0) {
      label = 19; //@line 1063
      break L1;
     }
     _ecma_gc_set_object_visited(SAFE_HEAP_LOAD($0 + 8 | 0, 4, 0) | 0 | 0); //@line 1068
     label = 19; //@line 1069
     break L1;
     break;
    }
   default:
    {
     label = 19; //@line 1074
     break L1;
    }
   }
  }
 } while (0);
 L25 : do {
  if ((label | 0) == 19) {
   $30 = _ecma_get_property_list($0) | 0; //@line 1082
   if ($30 | 0) {
    $$067 = $30; //@line 1085
    do {
     _ecma_gc_mark_property($$067, 0); //@line 1087
     _ecma_gc_mark_property($$067, 1); //@line 1088
     $33 = SAFE_HEAP_LOAD($$067 + 2 | 0, 2, 0) | 0 | 0; //@line 1090
     if (!($33 << 16 >> 16)) {
      break L25;
     }
     $$067 = _jmem_decompress_pointer($33 & 65535) | 0; //@line 1096
    } while (($$067 | 0) != 0);
   }
  }
 } while (0);
 return;
}
function _vm_stack_context_abort($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$036$ph41 = 0, $$037$ph40 = 0, $$0373944 = 0, $$lcssa = 0, $11 = 0, $17 = 0, $19 = 0, $22 = 0, $28 = 0, $33 = 0, $37 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $6 = 0, $$036$ph41$looptemp = 0;
 switch ((SAFE_HEAP_LOAD($1 + -4 | 0, 4, 0) | 0) & 15) {
 case 2:
 case 1:
  {
   $4 = $1 + -8 | 0; //@line 14257
   _ecma_free_value(SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0); //@line 14259
   $6 = $0 + 40 | 0; //@line 14260
   SAFE_HEAP_STORE($6 | 0, (SAFE_HEAP_LOAD($6 | 0, 2, 1) | 0 | 0) + 65534 | 0, 2);
   $$0 = $4; //@line 14266
   break;
  }
 case 3:
 case 0:
  {
   $11 = $0 + 40 | 0; //@line 14270
   SAFE_HEAP_STORE($11 | 0, (SAFE_HEAP_LOAD($11 | 0, 2, 1) | 0 | 0) + 65534 | 0, 2);
   $$0 = $1 + -8 | 0; //@line 14277
   break;
  }
 case 5:
 case 4:
  {
   $17 = $0 + 24 | 0; //@line 14281
   _ecma_deref_object(SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0); //@line 14283
   $19 = $1 + -8 | 0; //@line 14284
   SAFE_HEAP_STORE($17 | 0, _ecma_get_object_from_value(SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0) | 0 | 0, 4);
   $22 = $0 + 40 | 0; //@line 14288
   SAFE_HEAP_STORE($22 | 0, (SAFE_HEAP_LOAD($22 | 0, 2, 1) | 0 | 0) + 65534 | 0, 2);
   $$0 = $19; //@line 14294
   break;
  }
 case 6:
  {
   $28 = SAFE_HEAP_LOAD($1 + -8 | 0, 4, 0) | 0 | 0; //@line 14299
   if ($28 | 0) {
    $$036$ph41 = $28; //@line 14304
    $$037$ph40 = SAFE_HEAP_LOAD($1 + -12 | 0, 4, 0) | 0 | 0; //@line 14304
    while (1) {
     $33 = SAFE_HEAP_LOAD($$036$ph41 + ($$037$ph40 << 2) | 0, 4, 0) | 0 | 0; //@line 14307
     if (_ecma_is_value_collection_chunk($33) | 0) {
      $$lcssa = $33; //@line 14310
     } else {
      $$0373944 = $$037$ph40; //@line 14312
      $37 = $33; //@line 14312
      while (1) {
       _ecma_free_value($37); //@line 14314
       $$0373944 = $$0373944 + 1 | 0; //@line 14315
       $40 = SAFE_HEAP_LOAD($$036$ph41 + ($$0373944 << 2) | 0, 4, 0) | 0 | 0; //@line 14317
       if (_ecma_is_value_collection_chunk($40) | 0) {
        $$lcssa = $40; //@line 14320
        break;
       } else {
        $37 = $40; //@line 14323
       }
      }
     }
     $$036$ph41$looptemp = $$036$ph41;
     $$036$ph41 = _ecma_get_collection_chunk_from_value($$lcssa) | 0; //@line 14327
     _jmem_heap_free_block($$036$ph41$looptemp, 24); //@line 14328
     if (!$$036$ph41) {
      break;
     } else {
      $$037$ph40 = 0; //@line 14333
     }
    }
   }
   $42 = $1 + -16 | 0; //@line 14337
   _ecma_free_value(SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0); //@line 14339
   $44 = $0 + 40 | 0; //@line 14340
   SAFE_HEAP_STORE($44 | 0, (SAFE_HEAP_LOAD($44 | 0, 2, 1) | 0 | 0) + 65532 | 0, 2);
   $$0 = $42; //@line 14346
   break;
  }
 default:
  {}
 }
 return $$0 | 0; //@line 14353
}
function _ecma_delete_property($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$05061 = 0, $$051 = 0, $$051$ph = 0, $$053$ph = 0, $$055 = 0, $$055$ph = 0, $$055$phi = 0, $$154 = 0, $$pre$phi67Z2D = 0, $$pre$phi69Z2D = 0, $11 = 0, $15 = 0, $17 = 0, $2 = 0, $32 = 0, $35 = 0, $7 = 0;
 $2 = _ecma_get_property_list($0) | 0; //@line 6493
 if (!$2) {
  $$051$ph = 0; //@line 6496
  $$053$ph = 0; //@line 6496
  $$055$ph = 0; //@line 6496
 } else {
  if ((SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0) == 4) {
   $7 = SAFE_HEAP_LOAD($2 + 2 | 0, 2, 0) | 0 | 0; //@line 6502
   if (!($7 << 16 >> 16)) {
    $$051$ph = 0; //@line 6505
    $$053$ph = 1; //@line 6505
    $$055$ph = $2; //@line 6505
   } else {
    $$051$ph = _jmem_decompress_pointer($7 & 65535) | 0; //@line 6509
    $$053$ph = 1; //@line 6509
    $$055$ph = $2; //@line 6509
   }
  } else {
   $$051$ph = $2; //@line 6512
   $$053$ph = 0; //@line 6512
   $$055$ph = 0; //@line 6512
  }
 }
 $$051 = $$051$ph; //@line 6515
 $$055 = $$055$ph; //@line 6515
 L6 : while (1) {
  $11 = $$051 + 4 | 0; //@line 6517
  $$05061 = 0; //@line 6518
  while (1) {
   if (($11 + ($$05061 << 2) | 0) == ($1 | 0)) {
    break L6;
   }
   $32 = $$05061 + 1 | 0; //@line 6525
   if (($32 | 0) < 2) {
    $$05061 = $32; //@line 6528
   } else {
    break;
   }
  }
  $35 = SAFE_HEAP_LOAD($$051 + 2 | 0, 2, 0) | 0 | 0; //@line 6534
  if (!($35 << 16 >> 16)) {
   $$055$phi = $$051; //@line 6537
   $$051 = 0; //@line 6537
   $$055 = $$055$phi; //@line 6537
   continue;
  }
  $$055$phi = $$051; //@line 6542
  $$051 = _jmem_decompress_pointer($35 & 65535) | 0; //@line 6542
  $$055 = $$055$phi; //@line 6542
 }
 if (($$053$ph | 0) == 1) {
  $15 = $$051 + $$05061 | 0; //@line 6546
  $17 = $$051 + 12 + ($$05061 << 1) | 0; //@line 6548
  $$154 = _ecma_property_hashmap_delete($0, SAFE_HEAP_LOAD($17 | 0, 2, 0) | 0 | 0, $15) | 0; //@line 6551
  $$pre$phi67Z2D = $17; //@line 6551
  $$pre$phi69Z2D = $15; //@line 6551
 } else {
  $$154 = $$053$ph; //@line 6556
  $$pre$phi67Z2D = $$051 + 12 + ($$05061 << 1) | 0; //@line 6556
  $$pre$phi69Z2D = $$051 + $$05061 | 0; //@line 6556
 }
 _ecma_free_property($0, SAFE_HEAP_LOAD($$pre$phi67Z2D | 0, 2, 0) | 0 | 0, $$pre$phi69Z2D); //@line 6559
 if (!(SAFE_HEAP_LOAD($$051 + (1 - $$05061) >> 0 | 0, 1, 0) | 0)) {
  SAFE_HEAP_STORE((($$055 | 0) == 0 ? $0 + 4 | 0 : $$055 + 2 | 0) | 0, SAFE_HEAP_LOAD($$051 + 2 | 0, 2, 0) | 0 | 0 | 0, 2);
  _ecma_dealloc_property_pair($$051); //@line 6572
  if (($$154 | 0) == 2) {
   _ecma_property_hashmap_free($0); //@line 6575
   _ecma_property_hashmap_create($0); //@line 6576
  }
 } else {
  if (($$154 | 0) == 2) {
   _ecma_property_hashmap_free($0); //@line 6581
   _ecma_property_hashmap_create($0); //@line 6582
  }
 }
 return;
}
function _parser_parse_while_statement_end($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$ph = 0, $1 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12248
 STACKTOP = STACKTOP + 80 | 0; //@line 12249
 $1 = sp + 48 | 0; //@line 12250
 $2 = sp + 44 | 0; //@line 12251
 $3 = sp + 24 | 0; //@line 12252
 $4 = sp + 8 | 0; //@line 12253
 $5 = sp; //@line 12254
 _parser_stack_iterator_init($0, $5); //@line 12255
 _parser_stack_iterator_skip($5, 1); //@line 12256
 _parser_stack_iterator_read($5, $2, 4); //@line 12257
 _parser_stack_iterator_skip($5, 4); //@line 12258
 _parser_stack_iterator_read($5, $1, 28); //@line 12259
 _parser_save_range($0, $4, SAFE_HEAP_LOAD($0 + 220 | 0, 4, 0) | 0 | 0); //@line 12262
 $8 = $0 + 188 | 0; //@line 12263
 SAFE_HEAP_STORE($3 | 0, SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($3 + 4 | 0, SAFE_HEAP_LOAD($8 + 4 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($3 + 8 | 0, SAFE_HEAP_LOAD($8 + 8 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($3 + 12 | 0, SAFE_HEAP_LOAD($8 + 12 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($3 + 16 | 0, SAFE_HEAP_LOAD($8 + 16 | 0, 4, 0) | 0 | 0, 4);
 _parser_set_branch_to_current_position($0, $1); //@line 12265
 _parser_set_continues_to_current_position($0, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0); //@line 12267
 _parser_set_range($0, $1 + 8 | 0); //@line 12269
 _lexer_next_token($0); //@line 12270
 _parser_parse_expression($0, 0); //@line 12271
 if (SAFE_HEAP_LOAD($8 >> 0 | 0, 1, 0) | 0 | 0) {
  _parser_raise_error($0, 59); //@line 12275
 }
 $13 = $0 + 240 | 0; //@line 12278
 switch (SAFE_HEAP_LOAD($13 | 0, 2, 0) | 0 | 0) {
 case 78:
  {
   $$0$ph = 21; //@line 12282
   label = 5; //@line 12283
   break;
  }
 case 44:
  {
   $$0$ph = 5; //@line 12287
   label = 5; //@line 12288
   break;
  }
 default:
  {
   $$0 = 13; //@line 12292
  }
 }
 if ((label | 0) == 5) {
  SAFE_HEAP_STORE($13 | 0, 0 | 0, 2);
  $$0 = $$0$ph; //@line 12297
 }
 _parser_stack_pop($0, 0, 33); //@line 12299
 _parser_stack_iterator_init($0, $0 + 180 | 0); //@line 12301
 _parser_emit_cbc_backward_branch($0, $$0, SAFE_HEAP_LOAD($1 + 24 | 0, 4, 0) | 0 | 0); //@line 12304
 _parser_set_breaks_to_current_position($0, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0); //@line 12306
 _parser_set_range($0, $4); //@line 12307
 SAFE_HEAP_STORE($8 | 0, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($8 + 4 | 0, SAFE_HEAP_LOAD($3 + 4 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($8 + 8 | 0, SAFE_HEAP_LOAD($3 + 8 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($8 + 12 | 0, SAFE_HEAP_LOAD($3 + 12 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($8 + 16 | 0, SAFE_HEAP_LOAD($3 + 16 | 0, 4, 0) | 0 | 0, 4);
 STACKTOP = sp; //@line 12309
 return;
}
function _ecma_op_object_get_own_property_descriptor($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$sink = 0, $18 = 0, $25 = 0, $3 = 0, $34 = 0, $4 = 0, $40 = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 13132
 STACKTOP = STACKTOP + 32 | 0; //@line 13133
 $3 = sp + 16 | 0; //@line 13134
 $4 = sp; //@line 13135
 $trunc = _ecma_op_object_get_own_property($0, $1, $3, 1) | 0; //@line 13136
 L1 : do {
  switch ($trunc << 24 >> 24) {
  case 4:
  case 0:
   {
    $$0 = 0; //@line 13140
    break;
   }
  default:
   {
    _ecma_make_empty_property_descriptor($4); //@line 13144
    SAFE_HEAP_STORE($2 | 0, SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0, 4);
    SAFE_HEAP_STORE($2 + 4 | 0, SAFE_HEAP_LOAD($4 + 4 | 0, 4, 0) | 0 | 0, 4);
    SAFE_HEAP_STORE($2 + 8 | 0, SAFE_HEAP_LOAD($4 + 8 | 0, 4, 0) | 0 | 0, 4);
    SAFE_HEAP_STORE($2 + 12 | 0, SAFE_HEAP_LOAD($4 + 12 | 0, 4, 0) | 0 | 0, 4);
    SAFE_HEAP_STORE($2 | 0, ((_ecma_is_property_enumerable($trunc) | 0) & 1) << 6 & 65535 | (SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0) & -97 | 32 | 0, 2);
    $18 = ((_ecma_is_property_configurable($trunc) | 0) & 1) << 8 & 65535 | (SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0) & -385 | 128; //@line 13160
    SAFE_HEAP_STORE($2 | 0, $18 | 0, 2);
    switch ($trunc & 3) {
    case 2:
     {
      $34 = _ecma_get_named_accessor_property_getter(SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0) | 0; //@line 13166
      SAFE_HEAP_STORE($2 + 8 | 0, $34 | 0, 4);
      SAFE_HEAP_STORE($2 | 0, SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 2 | 0, 2);
      if ($34 | 0) {
       _ecma_ref_object($34); //@line 13174
      }
      $40 = _ecma_get_named_accessor_property_setter(SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0) | 0; //@line 13177
      SAFE_HEAP_STORE($2 + 12 | 0, $40 | 0, 4);
      SAFE_HEAP_STORE($2 | 0, SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 4 | 0, 2);
      if (!$40) {
       $$0 = 1; //@line 13185
       break L1;
      }
      _ecma_ref_object($40); //@line 13188
      $$0 = 1; //@line 13189
      break L1;
      break;
     }
    case 1:
     {
      $$sink = _ecma_copy_value(SAFE_HEAP_LOAD(SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0, 4, 0) | 0 | 0) | 0; //@line 13198
      $25 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 13198
      break;
     }
    default:
     {
      $$sink = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0; //@line 13203
      $25 = $18; //@line 13203
     }
    }
    SAFE_HEAP_STORE($2 + 4 | 0, $$sink | 0, 4);
    SAFE_HEAP_STORE($2 | 0, $25 | 1 | 0, 2);
    SAFE_HEAP_STORE($2 | 0, ((_ecma_is_property_writable($trunc) | 0) & 1) << 4 & 65535 | (SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0) & -25 | 8 | 0, 2);
    $$0 = 1; //@line 13218
   }
  }
 } while (0);
 STACKTOP = sp; //@line 13222
 return $$0 | 0; //@line 13222
}
function _jerry_snapshot_set_offsets($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$07998 = 0, $$080$ph = 0, $$081 = 0, $$08295 = 0, $$084 = 0, $$085 = 0, $$086 = 0, $$087 = 0, $$088 = 0, $$089 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $50 = 0, $51 = 0, $8 = 0;
 $$084 = $0; //@line 364
 $$085 = $1; //@line 364
 while (1) {
  $4 = SAFE_HEAP_LOAD($$084 | 0, 2, 1) | 0 | 0; //@line 367
  $5 = $4 << 3; //@line 368
  $8 = SAFE_HEAP_LOAD($$084 + 4 | 0, 2, 1) | 0 | 0; //@line 371
  if ($8 & 1 | 0) {
   if (!($8 & 4)) {
    $$086 = SAFE_HEAP_LOAD($$084 + 10 >> 0 | 0, 1, 1) | 0 | 0; //@line 388
    $$087 = SAFE_HEAP_LOAD($$084 + 8 >> 0 | 0, 1, 1) | 0 | 0; //@line 388
    $$088 = SAFE_HEAP_LOAD($$084 + 7 >> 0 | 0, 1, 1) | 0 | 0; //@line 388
    $$089 = $$084 + 12 | 0; //@line 388
   } else {
    $$086 = SAFE_HEAP_LOAD($$084 + 14 | 0, 2, 1) | 0 | 0; //@line 400
    $$087 = SAFE_HEAP_LOAD($$084 + 10 | 0, 2, 1) | 0 | 0; //@line 400
    $$088 = SAFE_HEAP_LOAD($$084 + 8 | 0, 2, 1) | 0 | 0; //@line 400
    $$089 = $$084 + 18 | 0; //@line 400
   }
   if (($8 & 24 | 0) != 16 | ($$088 | 0) == 0) {
    $$080$ph = 0; //@line 407
   } else {
    $$08295 = 0; //@line 409
    do {
     $39 = $$089 + ($$08295 << 1) | 0; //@line 411
     $40 = SAFE_HEAP_LOAD($39 | 0, 2, 0) | 0 | 0; //@line 412
     if ($40 << 16 >> 16) {
      $$081 = $2; //@line 415
      while (1) {
       if ((SAFE_HEAP_LOAD($$081 | 0, 2, 0) | 0 | 0) == $40 << 16 >> 16) {
        break;
       } else {
        $$081 = $$081 + 4 | 0; //@line 423
       }
      }
      SAFE_HEAP_STORE($39 | 0, SAFE_HEAP_LOAD($$081 + 2 | 0, 2, 0) | 0 | 0 | 0, 2);
     }
     $$08295 = $$08295 + 1 | 0; //@line 430
    } while (($$08295 | 0) != ($$088 | 0));
    $$080$ph = $$088; //@line 433
   }
   if ($$087 >>> 0 > $$080$ph >>> 0) {
    _memset($$089 + ($$080$ph << 1) | 0, 0, $$087 - $$080$ph << 1 | 0) | 0; //@line 445
   }
   if ($$087 >>> 0 < $$086 >>> 0) {
    $$07998 = $$087; //@line 449
    do {
     $50 = $$089 + ($$07998 << 1) | 0; //@line 451
     $51 = SAFE_HEAP_LOAD($50 | 0, 2, 0) | 0 | 0; //@line 452
     if ($51 << 16 >> 16) {
      $$0 = $2; //@line 455
      while (1) {
       if ((SAFE_HEAP_LOAD($$0 | 0, 2, 0) | 0 | 0) == $51 << 16 >> 16) {
        break;
       } else {
        $$0 = $$0 + 4 | 0; //@line 463
       }
      }
      SAFE_HEAP_STORE($50 | 0, SAFE_HEAP_LOAD($$0 + 2 | 0, 2, 0) | 0 | 0 | 0, 2);
     }
     $$07998 = $$07998 + 1 | 0; //@line 470
    } while (($$07998 | 0) != ($$086 | 0));
   }
   SAFE_HEAP_STORE($$084 + 2 | 0, 1 | 0, 2);
  }
  $$085 = $$085 - $5 | 0; //@line 484
  if (!$$085) {
   break;
  } else {
   $$084 = $$084 + ($4 << 1 << 2) | 0; //@line 489
  }
 }
 return;
}
function _ecma_op_from_property_descriptor($0) {
 $0 = $0 | 0;
 var $$pre$phiZ2D = 0, $$sink = 0, $$sink2 = 0, $1 = 0, $10 = 0, $11 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $27 = 0, $32 = 0, $37 = 0, sp = 0;
 sp = STACKTOP; //@line 10014
 STACKTOP = STACKTOP + 16 | 0; //@line 10015
 $1 = sp; //@line 10016
 $2 = _ecma_op_create_object_object_noarg() | 0; //@line 10017
 _ecma_make_empty_property_descriptor($1); //@line 10018
 SAFE_HEAP_STORE($1 | 0, SAFE_HEAP_LOAD($1 | 0, 2, 0) | 0 | 505 | 0, 2);
 if (!((SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 9)) {
  $18 = SAFE_HEAP_LOAD($0 + 8 | 0, 4, 0) | 0 | 0; //@line 10027
  if (!$18) {
   $$sink = 72; //@line 10030
  } else {
   $$sink = _ecma_make_object_value($18) | 0; //@line 10033
  }
  $21 = $1 + 4 | 0; //@line 10035
  SAFE_HEAP_STORE($21 | 0, $$sink | 0, 4);
  $22 = _ecma_get_magic_string(7) | 0; //@line 10037
  _ecma_op_object_define_own_property($2, $22, $1, 0) | 0; //@line 10038
  _ecma_deref_ecma_string($22); //@line 10039
  $24 = SAFE_HEAP_LOAD($0 + 12 | 0, 4, 0) | 0 | 0; //@line 10041
  if (!$24) {
   $$sink2 = 72; //@line 10044
  } else {
   $$sink2 = _ecma_make_object_value($24) | 0; //@line 10047
  }
  SAFE_HEAP_STORE($21 | 0, $$sink2 | 0, 4);
  $27 = _ecma_get_magic_string(8) | 0; //@line 10050
  _ecma_op_object_define_own_property($2, $27, $1, 0) | 0; //@line 10051
  _ecma_deref_ecma_string($27); //@line 10052
  $$pre$phiZ2D = $21; //@line 10053
 } else {
  $10 = $1 + 4 | 0; //@line 10057
  SAFE_HEAP_STORE($10 | 0, SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0, 4);
  $11 = _ecma_get_magic_string(24) | 0; //@line 10059
  _ecma_op_object_define_own_property($2, $11, $1, 0) | 0; //@line 10060
  _ecma_deref_ecma_string($11); //@line 10061
  SAFE_HEAP_STORE($10 | 0, _ecma_make_boolean_value(((SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 16) != 0) | 0 | 0, 4);
  $16 = _ecma_get_magic_string(49) | 0; //@line 10067
  _ecma_op_object_define_own_property($2, $16, $1, 0) | 0; //@line 10068
  _ecma_deref_ecma_string($16); //@line 10069
  $$pre$phiZ2D = $10; //@line 10070
 }
 SAFE_HEAP_STORE($$pre$phiZ2D | 0, _ecma_make_boolean_value(((SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 64) != 0) | 0 | 0, 4);
 $32 = _ecma_get_magic_string(58) | 0; //@line 10077
 _ecma_op_object_define_own_property($2, $32, $1, 0) | 0; //@line 10078
 _ecma_deref_ecma_string($32); //@line 10079
 SAFE_HEAP_STORE($$pre$phiZ2D | 0, _ecma_make_boolean_value(((SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 256) != 0) | 0 | 0, 4);
 $37 = _ecma_get_magic_string(61) | 0; //@line 10085
 _ecma_op_object_define_own_property($2, $37, $1, 0) | 0; //@line 10086
 _ecma_deref_ecma_string($37); //@line 10087
 STACKTOP = sp; //@line 10088
 return $2 | 0; //@line 10088
}
function _ecma_builtin_global_dispatch_routine($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $18 = 0, $22 = 0, $26 = 0, $30 = 0, $34 = 0, $37 = 0, $41 = 0, $42 = 0, $6 = 0;
 do {
  switch ($0 << 16 >> 16) {
  case 8:
   {
    if (!$3) {
     $6 = 72; //@line 3884
    } else {
     $6 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 3887
    }
    $$0 = _ecma_builtin_global_object_eval($6) | 0; //@line 3890
    break;
   }
  case 9:
   {
    if (!$3) {
     $10 = 72; //@line 3896
    } else {
     $10 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 3899
    }
    $$0 = _ecma_builtin_global_object_parse_float($10) | 0; //@line 3902
    break;
   }
  case 10:
   {
    if (!$3) {
     $14 = 72; //@line 3908
    } else {
     $14 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 3911
    }
    $$0 = _ecma_builtin_global_object_is_nan($14) | 0; //@line 3914
    break;
   }
  case 11:
   {
    if (!$3) {
     $18 = 72; //@line 3920
    } else {
     $18 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 3923
    }
    $$0 = _ecma_builtin_global_object_is_finite($18) | 0; //@line 3926
    break;
   }
  case 12:
   {
    if (!$3) {
     $22 = 72; //@line 3932
    } else {
     $22 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 3935
    }
    $$0 = _ecma_builtin_global_object_decode_uri($22) | 0; //@line 3938
    break;
   }
  case 13:
   {
    if (!$3) {
     $26 = 72; //@line 3944
    } else {
     $26 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 3947
    }
    $$0 = _ecma_builtin_global_object_decode_uri_component($26) | 0; //@line 3950
    break;
   }
  case 14:
   {
    if (!$3) {
     $30 = 72; //@line 3956
    } else {
     $30 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 3959
    }
    $$0 = _ecma_builtin_global_object_encode_uri($30) | 0; //@line 3962
    break;
   }
  case 15:
   {
    if (!$3) {
     $34 = 72; //@line 3968
    } else {
     $34 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 3971
    }
    $$0 = _ecma_builtin_global_object_encode_uri_component($34) | 0; //@line 3974
    break;
   }
  case 16:
   {
    if (!$3) {
     $41 = 72; //@line 3980
     $42 = 72; //@line 3980
    } else {
     $37 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 3982
     if (($3 | 0) == 1) {
      $41 = $37; //@line 3985
      $42 = 72; //@line 3985
     } else {
      $41 = $37; //@line 3989
      $42 = SAFE_HEAP_LOAD($2 + 4 | 0, 4, 0) | 0 | 0; //@line 3989
     }
    }
    $$0 = _ecma_builtin_global_object_parse_int($41, $42) | 0; //@line 3993
    break;
   }
  default:
   {}
  }
 } while (0);
 return $$0 | 0; //@line 4001
}
function _ecma_string_get_chars($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$lcssa$i = 0, $$017$$i = 0, $$017$lcssa$i = 0, $$01720$i = 0, $$01819$i = 0, $$031 = 0, $$032 = 0, $$1 = 0, $17 = 0, $19 = 0, $20 = 0, $25 = 0, $27 = 0, $30 = 0, $32 = 0, $35 = 0, $4 = 0;
 switch ((SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 7) {
 case 3:
  {
   $4 = $0 + 4 | 0; //@line 4140
   $$031 = $0 + 8 | 0; //@line 4147
   $$032 = SAFE_HEAP_LOAD($4 | 0, 2, 1) | 0 | 0; //@line 4147
   $$1 = SAFE_HEAP_LOAD($4 + 2 | 0, 2, 1) | 0 | 0; //@line 4147
   break;
  }
 case 4:
  {
   $$031 = $0 + 12 | 0; //@line 4156
   $$032 = SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0; //@line 4156
   $$1 = SAFE_HEAP_LOAD($0 + 8 | 0, 4, 0) | 0 | 0; //@line 4156
   break;
  }
 case 0:
  {
   $17 = SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0; //@line 4161
   if ($17 >>> 0 < 100) {
    $$0$lcssa$i = 1; //@line 4164
    $$017$lcssa$i = 1; //@line 4164
   } else {
    $$01720$i = 1; //@line 4166
    $$01819$i = 100; //@line 4166
    while (1) {
     $19 = $$01819$i * 100 | 0; //@line 4168
     $20 = $$01720$i + 2 | 0; //@line 4169
     if ($20 >>> 0 > 8 | $19 >>> 0 > $17 >>> 0) {
      $$0$lcssa$i = $$01819$i; //@line 4174
      $$017$lcssa$i = $20; //@line 4174
      break;
     } else {
      $$01720$i = $20; //@line 4177
      $$01819$i = $19; //@line 4177
     }
    }
   }
   $$017$$i = (($$0$lcssa$i * 10 | 0) >>> 0 <= $17 >>> 0 & 1) + $$017$lcssa$i | 0; //@line 4184
   $$031 = 0; //@line 4185
   $$032 = $$017$$i; //@line 4185
   $$1 = $$017$$i; //@line 4185
   break;
  }
 case 1:
  {
   $25 = $0 + 4 | 0; //@line 4189
   $27 = _lit_get_magic_string_size(SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0) | 0; //@line 4191
   $$031 = _lit_get_magic_string_utf8(SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0) | 0; //@line 4194
   $$032 = $27; //@line 4194
   $$1 = $27; //@line 4194
   break;
  }
 default:
  {
   $30 = $0 + 4 | 0; //@line 4198
   $32 = _lit_get_magic_string_ex_size(SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0) | 0; //@line 4200
   if (!$2) {
    $$0 = 0; //@line 4203
   } else {
    $35 = _lit_get_magic_string_ex_utf8(SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0) | 0; //@line 4206
    $$0 = _lit_utf8_string_length($35, _lit_get_magic_string_ex_size(SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0) | 0) | 0; //@line 4210
   }
   $$031 = _lit_get_magic_string_ex_utf8(SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0) | 0; //@line 4214
   $$032 = $32; //@line 4214
   $$1 = $$0; //@line 4214
  }
 }
 SAFE_HEAP_STORE($1 | 0, $$032 | 0, 4);
 if ($2 | 0) {
  SAFE_HEAP_STORE($2 >> 0 | 0, ($$1 | 0) == ($$032 | 0) & 1 | 0, 1);
 }
 return $$031 | 0; //@line 4224
}
function _vm_execute($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$06169 = 0, $$06268 = 0, $$06372 = 0, $$065 = 0, $$066 = 0, $$067 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $41 = 0, $42 = 0;
 $3 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0; //@line 19046
 if (!((SAFE_HEAP_LOAD($3 + 4 | 0, 2, 0) | 0) & 4)) {
  $$065 = SAFE_HEAP_LOAD($3 + 7 >> 0 | 0, 1, 1) | 0 | 0; //@line 19058
  $$066 = SAFE_HEAP_LOAD($3 + 8 >> 0 | 0, 1, 1) | 0 | 0; //@line 19058
 } else {
  $$065 = SAFE_HEAP_LOAD($3 + 8 | 0, 2, 0) | 0 | 0; //@line 19064
  $$066 = SAFE_HEAP_LOAD($3 + 10 | 0, 2, 0) | 0 | 0; //@line 19064
 }
 $18 = $0 + 12 | 0; //@line 19066
 $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0; //@line 19067
 $20 = $$066 & 65535; //@line 19068
 SAFE_HEAP_STORE($0 + 16 | 0, $19 + ($20 << 2) | 0, 4);
 $23 = $$065 & 65535; //@line 19072
 $$ = $23 >>> 0 < $2 >>> 0 ? $23 : $2; //@line 19074
 if (!$$) {
  $35 = $19; //@line 19077
 } else {
  $$06372 = 0; //@line 19079
  do {
   $29 = _ecma_fast_copy_value(SAFE_HEAP_LOAD($1 + ($$06372 << 2) | 0, 4, 0) | 0 | 0) | 0; //@line 19083
   $30 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0; //@line 19084
   SAFE_HEAP_STORE($30 + ($$06372 << 2) | 0, $29 | 0, 4);
   $$06372 = $$06372 + 1 | 0; //@line 19087
  } while ($$06372 >>> 0 < $$ >>> 0);
  $35 = $30; //@line 19092
 }
 if ($20 >>> 0 > $$ >>> 0) {
  $$06169 = $$; //@line 19100
  $$06268 = $35 + ($$ << 2) | 0; //@line 19100
  while (1) {
   SAFE_HEAP_STORE($$06268 | 0, 72 | 0, 4);
   $$06169 = $$06169 + 1 | 0; //@line 19104
   if ($$06169 >>> 0 >= $20 >>> 0) {
    break;
   } else {
    $$06268 = $$06268 + 4 | 0; //@line 19107
   }
  }
 }
 SAFE_HEAP_STORE(134116 * 4 | 0, (SAFE_HEAP_LOAD(134116 * 4 | 0, 4, 0) | 0) & -3 | 0, 4);
 SAFE_HEAP_STORE(134107 * 4 | 0, $0 | 0, 4);
 _vm_init_loop($0); //@line 19117
 $41 = $0 + 43 | 0; //@line 19118
 L14 : while (1) {
  $42 = _vm_loop($0) | 0; //@line 19120
  switch (SAFE_HEAP_LOAD($41 >> 0 | 0, 1, 0) | 0 | 0) {
  case 0:
   {
    break L14;
    break;
   }
  case 1:
   {
    _opfunc_call($0); //@line 19128
    continue L14;
    break;
   }
  default:
   {
    _opfunc_construct($0); //@line 19133
    continue L14;
   }
  }
 }
 if ($$066 << 16 >> 16) {
  $$067 = 0; //@line 19140
  do {
   _ecma_fast_free_value(SAFE_HEAP_LOAD((SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0) + ($$067 << 2) | 0, 4, 0) | 0 | 0); //@line 19145
   $$067 = $$067 + 1 | 0; //@line 19146
  } while (($$067 | 0) != ($20 | 0));
 }
 SAFE_HEAP_STORE(134107 * 4 | 0, SAFE_HEAP_LOAD($0 + 28 | 0, 4, 0) | 0 | 0, 4);
 return $42 | 0; //@line 19158
}
function _jmem_heap_free_block($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$041 = 0, $$1$lcssa = 0, $$lcssa = 0, $$lcssa42 = 0, $$lcssa43 = 0, $$sink = 0, $$sink6 = 0, $$sink7 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $29 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0;
 _jmem_heap_stat_free_iter(); //@line 14340
 $2 = SAFE_HEAP_LOAD(134099 * 4 | 0, 4, 0) | 0 | 0; //@line 14341
 if ($0 >>> 0 > $2 >>> 0) {
  _jmem_heap_stat_skip(); //@line 14344
  $$041 = $2; //@line 14345
 } else {
  _jmem_heap_stat_nonskip(); //@line 14347
  $$041 = 12072; //@line 14348
 }
 $4 = $0; //@line 14350
 $5 = SAFE_HEAP_LOAD($$041 | 0, 4, 0) | 0 | 0; //@line 14351
 $7 = $5; //@line 14353
 if ($5 >>> 0 < $4 >>> 0) {
  $9 = $7; //@line 14355
  while (1) {
   _jmem_heap_stat_free_iter(); //@line 14357
   $8 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0; //@line 14358
   $11 = $8; //@line 14360
   if ($8 >>> 0 < $4 >>> 0) {
    $9 = $11; //@line 14362
   } else {
    $$1$lcssa = $9; //@line 14364
    $$lcssa = $11; //@line 14364
    $$lcssa42 = $8; //@line 14364
    $$lcssa43 = $9; //@line 14364
    break;
   }
  }
 } else {
  $$1$lcssa = $$041; //@line 14369
  $$lcssa = $7; //@line 14369
  $$lcssa42 = $5; //@line 14369
  $$lcssa43 = $$041; //@line 14369
 }
 $13 = $1 + 7 & -8; //@line 14372
 $14 = $$1$lcssa + 4 | 0; //@line 14373
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0; //@line 14374
 if (($$1$lcssa + $15 | 0) == ($0 | 0)) {
  $18 = $15 + $13 | 0; //@line 14378
  SAFE_HEAP_STORE($14 | 0, $18 | 0, 4);
  $$0 = $$1$lcssa; //@line 14380
  $21 = $18; //@line 14380
 } else {
  SAFE_HEAP_STORE($0 + 4 | 0, $13 | 0, 4);
  SAFE_HEAP_STORE($$lcssa43 | 0, $4 | 0, 4);
  $$0 = $0; //@line 14385
  $21 = $13; //@line 14385
 }
 if (($$0 + $21 | 0) == ($$lcssa | 0)) {
  SAFE_HEAP_STORE($$0 + 4 | 0, (SAFE_HEAP_LOAD($$lcssa + 4 | 0, 4, 0) | 0 | 0) + $21 | 0, 4);
  $$sink = SAFE_HEAP_LOAD($$lcssa | 0, 4, 0) | 0 | 0; //@line 14396
 } else {
  $$sink = $$lcssa42; //@line 14398
 }
 SAFE_HEAP_STORE($$0 | 0, $$sink | 0, 4);
 SAFE_HEAP_STORE(134099 * 4 | 0, $$1$lcssa | 0, 4);
 $$sink6 = $13; //@line 14403
 $$sink7 = 536444; //@line 14403
 $29 = SAFE_HEAP_LOAD(134111 * 4 | 0, 4, 0) | 0 | 0; //@line 14403
 while (1) {
  SAFE_HEAP_STORE($$sink7 | 0, $29 - $$sink6 | 0, 4);
  $29 = SAFE_HEAP_LOAD(134112 * 4 | 0, 4, 0) | 0 | 0; //@line 14409
  if (((SAFE_HEAP_LOAD(134111 * 4 | 0, 4, 0) | 0 | 0) + 8192 | 0) >>> 0 > $29 >>> 0) {
   break;
  } else {
   $$sink6 = 8192; //@line 14414
   $$sink7 = 536448; //@line 14414
  }
 }
 _jmem_heap_stat_free($1); //@line 14417
 return;
}
function _opfunc_call($0) {
 $0 = $0 | 0;
 var $$041 = 0, $$042 = 0, $$043 = 0, $$048 = 0, $$1 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $25 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $40 = 0, $42 = 0;
 $2 = SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0; //@line 2758
 $3 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0; //@line 2759
 $4 = $3 & 255; //@line 2760
 if (($3 & 255) > 180) {
  $$041 = ($4 + -181 | 0) / 6 | 0; //@line 2765
 } else {
  $$041 = SAFE_HEAP_LOAD($2 + 1 >> 0 | 0, 1, 1) | 0 | 0; //@line 2770
 }
 $13 = (($4 + -175 | 0) % 6 | 0 | 0) > 2; //@line 2774
 $14 = $0 + 16 | 0; //@line 2775
 $17 = (SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0) + (0 - $$041 << 2) | 0; //@line 2778
 do {
  if ($13) {
   $18 = $17 + -12 | 0; //@line 2781
   $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0; //@line 2782
   if (($19 | 0) == 136) {
    SAFE_HEAP_STORE($17 + -8 | 0, 72 | 0, 4);
    $$1 = 72; //@line 2787
    break;
   }
   if (_ecma_is_value_object($19) | 0) {
    $23 = _ecma_get_object_from_value($19) | 0; //@line 2792
    if (_ecma_is_lexical_environment($23) | 0) {
     $25 = _ecma_op_implicit_this_value($23) | 0; //@line 2795
     _ecma_free_value(SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0); //@line 2797
     SAFE_HEAP_STORE($18 | 0, $25 | 0, 4);
     $$1 = $25; //@line 2799
    } else {
     $$1 = $19; //@line 2801
    }
   } else {
    $$1 = $19; //@line 2804
   }
  } else {
   $$1 = 72; //@line 2807
  }
 } while (0);
 $27 = $17 + -4 | 0; //@line 2810
 $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0; //@line 2811
 if (_ecma_op_is_callable($28) | 0) {
  $$042 = _ecma_op_function_call(_ecma_get_object_from_value($28) | 0, $$1, $17, $$041) | 0; //@line 2816
 } else {
  $$042 = _ecma_raise_type_error(6026) | 0; //@line 2819
 }
 SAFE_HEAP_STORE(134116 * 4 | 0, (SAFE_HEAP_LOAD(134116 * 4 | 0, 4, 0) | 0) & -3 | 0, 4);
 if ($$041 | 0) {
  $$048 = 0; //@line 2826
  do {
   _ecma_fast_free_value(SAFE_HEAP_LOAD($17 + ($$048 << 2) | 0, 4, 0) | 0 | 0); //@line 2830
   $$048 = $$048 + 1 | 0; //@line 2831
  } while (($$048 | 0) != ($$041 | 0));
 }
 if ($13) {
  _ecma_free_value(SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0); //@line 2842
  $40 = $27 + -4 | 0; //@line 2843
  _ecma_free_value(SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0); //@line 2845
  $$043 = $40; //@line 2846
 } else {
  $$043 = $17; //@line 2848
 }
 $42 = $$043 + -4 | 0; //@line 2850
 _ecma_free_value(SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0); //@line 2852
 SAFE_HEAP_STORE($42 | 0, $$042 | 0, 4);
 SAFE_HEAP_STORE($14 | 0, $$043 | 0, 4);
 return;
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 2539
 STACKTOP = STACKTOP + 224 | 0; //@line 2540
 $3 = sp + 120 | 0; //@line 2541
 $4 = sp + 80 | 0; //@line 2542
 $5 = sp; //@line 2543
 $6 = sp + 136 | 0; //@line 2544
 dest = $4; //@line 2545
 stop = dest + 40 | 0; //@line 2545
 do {
  SAFE_HEAP_STORE(dest | 0, 0 | 0, 4);
  dest = dest + 4 | 0; //@line 2545
 } while ((dest | 0) < (stop | 0));
 SAFE_HEAP_STORE($3 | 0, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0, 4);
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 2551
 } else {
  if ((SAFE_HEAP_LOAD($0 + 76 | 0, 4, 0) | 0 | 0) > -1) {
   $39 = ___lockfile($0) | 0; //@line 2558
  } else {
   $39 = 0; //@line 2560
  }
  $13 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0; //@line 2562
  $14 = $13 & 32; //@line 2563
  if ((SAFE_HEAP_LOAD($0 + 74 >> 0 | 0, 1, 0) | 0 | 0) < 1) {
   SAFE_HEAP_STORE($0 | 0, $13 & -33 | 0, 4);
  }
  $19 = $0 + 48 | 0; //@line 2571
  if (!(SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0)) {
   $23 = $0 + 44 | 0; //@line 2575
   $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0; //@line 2576
   SAFE_HEAP_STORE($23 | 0, $6 | 0, 4);
   $25 = $0 + 28 | 0; //@line 2578
   SAFE_HEAP_STORE($25 | 0, $6 | 0, 4);
   $26 = $0 + 20 | 0; //@line 2580
   SAFE_HEAP_STORE($26 | 0, $6 | 0, 4);
   SAFE_HEAP_STORE($19 | 0, 80 | 0, 4);
   $28 = $0 + 16 | 0; //@line 2584
   SAFE_HEAP_STORE($28 | 0, $6 + 80 | 0, 4);
   $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 2586
   if (!$24) {
    $$1 = $29; //@line 2589
   } else {
    FUNCTION_TABLE_iiii[(SAFE_FT_MASK(SAFE_HEAP_LOAD($0 + 36 | 0, 4, 0) | 0 | 0, 3 | 0) | 0) & 3]($0, 0, 0) | 0; //@line 2593
    $$ = (SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0) == 0 ? -1 : $29; //@line 2596
    SAFE_HEAP_STORE($23 | 0, $24 | 0, 4);
    SAFE_HEAP_STORE($19 | 0, 0 | 0, 4);
    SAFE_HEAP_STORE($28 | 0, 0 | 0, 4);
    SAFE_HEAP_STORE($25 | 0, 0 | 0, 4);
    SAFE_HEAP_STORE($26 | 0, 0 | 0, 4);
    $$1 = $$; //@line 2602
   }
  } else {
   $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 2606
  }
  $35 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0; //@line 2608
  SAFE_HEAP_STORE($0 | 0, $35 | $14 | 0, 4);
  if ($39 | 0) {
   ___unlockfile($0); //@line 2616
  }
  $$0 = ($35 & 32 | 0) == 0 ? $$1 : -1; //@line 2618
 }
 STACKTOP = sp; //@line 2620
 return $$0 | 0; //@line 2620
}
function _ecma_find_or_create_literal_string($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$05976 = 0, $$06075 = 0, $$06373 = 0, $$16174 = 0, $$262 = 0, $$6 = 0, $$sink = 0, $16 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $26 = 0, $3 = 0, $6 = 0, $7 = 0, $scevgep = 0, label = 0;
 $2 = _ecma_new_ecma_string_from_utf8($0, $1) | 0; //@line 7449
 $3 = SAFE_HEAP_LOAD(134104 * 4 | 0, 4, 0) | 0 | 0; //@line 7450
 do {
  if (!$3) {
   $25 = _jmem_compress_pointer($2) | 0; //@line 7455
   label = 13; //@line 7456
  } else {
   $$05976 = $3; //@line 7458
   $$06075 = 0; //@line 7458
   L3 : while (1) {
    $$06373 = 0; //@line 7460
    $$16174 = $$06075; //@line 7460
    while (1) {
     $6 = $$05976 + 2 + ($$06373 << 1) | 0; //@line 7462
     $7 = SAFE_HEAP_LOAD($6 | 0, 2, 0) | 0 | 0; //@line 7463
     if (!($7 << 16 >> 16)) {
      $$262 = ($$16174 | 0) == 0 ? $6 : $$16174; //@line 7468
     } else {
      if (_ecma_compare_ecma_strings($2, _jmem_decompress_pointer($7 & 65535) | 0) | 0) {
       label = 8; //@line 7474
       break L3;
      } else {
       $$262 = $$16174; //@line 7477
      }
     }
     $$06373 = $$06373 + 1 | 0; //@line 7480
     if (($$06373 | 0) >= 3) {
      break;
     } else {
      $$16174 = $$262; //@line 7483
     }
    }
    $16 = SAFE_HEAP_LOAD($$05976 | 0, 2, 0) | 0 | 0; //@line 7488
    if (!($16 << 16 >> 16)) {
     break;
    }
    $$05976 = _jmem_decompress_pointer($16 & 65535) | 0; //@line 7494
    if (!$$05976) {
     break;
    } else {
     $$06075 = $$262; //@line 7499
    }
   }
   if ((label | 0) == 8) {
    _ecma_deref_ecma_string($2); //@line 7503
    $$6 = SAFE_HEAP_LOAD($6 | 0, 2, 0) | 0 | 0; //@line 7505
    break;
   }
   $21 = _jmem_compress_pointer($2) | 0; //@line 7508
   if (!$$262) {
    $25 = $21; //@line 7511
    label = 13; //@line 7512
   } else {
    SAFE_HEAP_STORE($$262 | 0, $21 | 0, 2);
    $$6 = $21; //@line 7515
   }
  }
 } while (0);
 if ((label | 0) == 13) {
  $23 = _jmem_pools_alloc(8) | 0; //@line 7520
  SAFE_HEAP_STORE($23 + 2 | 0, $25 | 0, 2);
  $scevgep = $23 + 4 | 0; //@line 7523
  SAFE_HEAP_STORE($scevgep | 0, 0 | 0, 2);
  SAFE_HEAP_STORE($scevgep + 2 | 0, 0 >>> 16 | 0, 2);
  $26 = SAFE_HEAP_LOAD(134104 * 4 | 0, 4, 0) | 0 | 0; //@line 7525
  if (!$26) {
   $$sink = 0; //@line 7528
  } else {
   $$sink = _jmem_compress_pointer($26) | 0; //@line 7531
  }
  SAFE_HEAP_STORE($23 | 0, $$sink | 0, 2);
  SAFE_HEAP_STORE(134104 * 4 | 0, $23 | 0, 4);
  $$6 = $25; //@line 7535
 }
 return $$6 | 0; //@line 7537
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0) + 1794895138 | 0; //@line 5224
 $7 = _swapc(SAFE_HEAP_LOAD($0 + 8 | 0, 4, 0) | 0 | 0, $4) | 0; //@line 5227
 $10 = _swapc(SAFE_HEAP_LOAD($0 + 12 | 0, 4, 0) | 0 | 0, $4) | 0; //@line 5230
 $13 = _swapc(SAFE_HEAP_LOAD($0 + 16 | 0, 4, 0) | 0 | 0, $4) | 0; //@line 5233
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 5239
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 5248
     $24 = $13 >>> 2; //@line 5249
     $$090 = 0; //@line 5250
     $$094 = $7; //@line 5250
     while (1) {
      $25 = $$094 >>> 1; //@line 5252
      $26 = $$090 + $25 | 0; //@line 5253
      $27 = $26 << 1; //@line 5254
      $28 = $27 + $23 | 0; //@line 5255
      $31 = _swapc(SAFE_HEAP_LOAD($0 + ($28 << 2) | 0, 4, 0) | 0 | 0, $4) | 0; //@line 5258
      $35 = _swapc(SAFE_HEAP_LOAD($0 + ($28 + 1 << 2) | 0, 4, 0) | 0 | 0, $4) | 0; //@line 5262
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 5268
       break L1;
      }
      if (SAFE_HEAP_LOAD($0 + ($35 + $31) >> 0 | 0, 1, 0) | 0 | 0) {
       $$4 = 0; //@line 5276
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 5280
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 5286
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 5291
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 5294
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 5294
      }
     }
     $46 = $27 + $24 | 0; //@line 5297
     $49 = _swapc(SAFE_HEAP_LOAD($0 + ($46 << 2) | 0, 4, 0) | 0 | 0, $4) | 0; //@line 5300
     $53 = _swapc(SAFE_HEAP_LOAD($0 + ($46 + 1 << 2) | 0, 4, 0) | 0 | 0, $4) | 0; //@line 5304
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (SAFE_HEAP_LOAD($0 + ($53 + $49) >> 0 | 0, 1, 0) | 0 | 0) == 0 ? $0 + $53 | 0 : 0; //@line 5316
     } else {
      $$4 = 0; //@line 5318
     }
    } else {
     $$4 = 0; //@line 5321
    }
   } else {
    $$4 = 0; //@line 5324
   }
  } else {
   $$4 = 0; //@line 5327
  }
 } while (0);
 return $$4 | 0; //@line 5330
}
function _parser_emit_cbc_forward_branch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$033$in = 0, $$034 = 0, $$pre$phi37Z2D = 0, $$pre$phiZ2D = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $25 = 0, $39 = 0, $40 = 0, $47 = 0, $48 = 0, $6 = 0, $9 = 0;
 if (SAFE_HEAP_LOAD($0 + 240 | 0, 2, 0) | 0 | 0) {
  _parser_flush_cbc($0); //@line 12974
 }
 $6 = $0 + 168 | 0; //@line 12976
 SAFE_HEAP_STORE($6 | 0, SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 65536 | 0, 4);
 $9 = $1 & 65535; //@line 12980
 if (($1 & 65535) < 256) {
  $$0 = 0; //@line 12986
  $$033$in = 6556 + $9 | 0; //@line 12986
  $$034 = $1; //@line 12986
  $$pre$phi37Z2D = $0 + 256 | 0; //@line 12986
  $$pre$phiZ2D = $0 + 252 | 0; //@line 12986
 } else {
  $12 = $0 + 256 | 0; //@line 12988
  $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0; //@line 12989
  if ($13 >>> 0 > 59) {
   _parser_cbc_stream_alloc_page($0, $0 + 248 | 0); //@line 12993
   $19 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0; //@line 12995
  } else {
   $19 = $13; //@line 12997
  }
  $16 = $0 + 252 | 0; //@line 12999
  $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0; //@line 13000
  SAFE_HEAP_STORE($12 | 0, $19 + 1 | 0, 4);
  SAFE_HEAP_STORE($17 + 4 + $19 >> 0 | 0, 0 | 0, 1);
  $21 = $9 + 65280 | 0; //@line 13005
  $$0 = 1; //@line 13009
  $$033$in = 6793 + ($21 & 65535) | 0; //@line 13009
  $$034 = $21 & 65535; //@line 13009
  $$pre$phi37Z2D = $12; //@line 13009
  $$pre$phiZ2D = $16; //@line 13009
 }
 $25 = $0 + 172 | 0; //@line 13012
 SAFE_HEAP_STORE($25 | 0, ((SAFE_HEAP_LOAD($$033$in >> 0 | 0, 1, 1) | 0 | 0) >>> 5) + 65532 + (SAFE_HEAP_LOAD($25 | 0, 2, 1) | 0 | 0) | 0, 2);
 _parser_emit_two_bytes($0, ($$034 & 65535) + 2 & 255, 0); //@line 13024
 SAFE_HEAP_STORE($2 | 0, SAFE_HEAP_LOAD($$pre$phiZ2D | 0, 4, 0) | 0 | 0, 4);
 $39 = $0 + 260 | 0; //@line 13029
 $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0; //@line 13030
 SAFE_HEAP_STORE($2 + 4 | 0, $40 << 8 | (SAFE_HEAP_LOAD($$pre$phi37Z2D | 0, 4, 0) | 0 | 0) + -1 | 0, 4);
 SAFE_HEAP_STORE($39 | 0, $40 + $$0 | 0, 4);
 _parser_emit_two_bytes($0, 0, 0); //@line 13037
 SAFE_HEAP_STORE($39 | 0, (SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0) + 4 | 0, 4);
 $47 = SAFE_HEAP_LOAD($25 | 0, 2, 0) | 0 | 0; //@line 13041
 $48 = $0 + 174 | 0; //@line 13042
 if (($47 & 65535) > (SAFE_HEAP_LOAD($48 | 0, 2, 1) | 0 | 0)) {
  SAFE_HEAP_STORE($48 | 0, $47 | 0, 2);
  if (($47 & 65535) > 1024) {
   _parser_raise_error($0, 4); //@line 13049
  }
 }
 return;
}
function _parser_scan_primary_expression_end($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$not = 0, $10 = 0, $13 = 0, $15 = 0, $22 = 0, $23 = 0, $9 = 0, label = 0;
 L1 : do {
  switch ($1 | 0) {
  case 27:
   {
    _parser_stack_push_uint8($0, 3); //@line 16822
    SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
    $$0 = 0; //@line 16824
    break;
   }
  case 60:
   {
    if (($2 | 0) == 6) {
     SAFE_HEAP_STORE($4 | 0, 6 | 0, 4);
     $$0 = 1; //@line 16831
     break L1;
    } else {
     SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
     $$0 = 0; //@line 16835
     break L1;
    }
    break;
   }
  case 59:
   {
    if (($2 + -3 | 0) >>> 0 < 2) {
     SAFE_HEAP_STORE($4 | 0, (($2 | 0) == 3 ? 0 : 4) | 0, 4);
     _parser_stack_pop_uint8($0); //@line 16847
     $$0 = 0; //@line 16848
     break L1;
    } else {
     SAFE_HEAP_STORE($4 | 0, 4 | 0, 4);
     $22 = 0; //@line 16852
     $23 = 0; //@line 16852
     label = 18; //@line 16853
     break L1;
    }
    break;
   }
  default:
   {
    if (($1 + -15 | 0) >>> 0 >= 36) {
     $9 = ($1 | 0) == 58; //@line 16862
     $10 = ($2 | 0) == 2; //@line 16863
     if (!($9 & $10)) {
      if (!(($1 | 0) == 56 & ($2 | 0) == 5)) {
       $13 = ($1 | 0) == 55; //@line 16870
       if (!($13 & ($2 | 0) == 1)) {
        $15 = ($1 | 0) == 54; //@line 16874
        if (!($15 & ($2 | 0) == 6)) {
         SAFE_HEAP_STORE($4 | 0, 4 | 0, 4);
         if (!($10 & $13)) {
          $22 = $9; //@line 16881
          $23 = $15; //@line 16881
          label = 18; //@line 16882
          break L1;
         }
         _parser_stack_pop_uint8($0); //@line 16885
         $$0 = 0; //@line 16886
         break L1;
        }
       }
      }
      _parser_stack_pop_uint8($0); //@line 16891
      SAFE_HEAP_STORE($4 | 0, 2 | 0, 4);
      $$0 = 0; //@line 16893
      break L1;
     }
    }
    SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
    $$0 = 0; //@line 16898
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  if (($2 + -7 | 0) >>> 0 > 1) {
   if (!(($2 | 0) == 0 & ($3 | 0) == 85)) {
    _parser_raise_error($0, 59); //@line 16910
   }
  }
  if ($23) {
   $$0 = 1; //@line 16915
  } else {
   $$not = ((SAFE_HEAP_LOAD($0 + 191 >> 0 | 0, 1, 0) | 0) & 1) != 0; //@line 16920
   if ($22 | $$not) {
    $$0 = $$not; //@line 16923
   } else {
    _parser_raise_error($0, 59); //@line 16925
   }
  }
 }
 return $$0 | 0; //@line 16930
}
function _lit_is_valid_utf8_string($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$050 = 0, $$051 = 0, $$055$off0$be = 0, $$055$off080 = 0, $$058$be = 0, $$05879 = 0, $$078 = 0, $$177 = 0, $$4 = 0, $$sink = 0, $16 = 0, $22 = 0, $25 = 0, $3 = 0, $32 = 0, $6 = 0;
 L1 : do {
  if (!$1) {
   $$4 = 1; //@line 15373
  } else {
   $$055$off080 = 1; //@line 15375
   $$05879 = 0; //@line 15375
   while (1) {
    $3 = $$05879 + 1 | 0; //@line 15377
    $6 = SAFE_HEAP_LOAD($0 + $$05879 >> 0 | 0, 1, 1) | 0 | 0; //@line 15380
    if (!($6 & 128)) {
     $$055$off0$be = 1; //@line 15384
     $$058$be = $3; //@line 15384
    } else {
     if (($6 & 224 | 0) == 192) {
      $$050 = 1; //@line 15389
      $$051 = 128; //@line 15389
      $$sink = 31; //@line 15389
     } else {
      if (($6 & 240 | 0) == 224) {
       $$050 = 2; //@line 15394
       $$051 = 2048; //@line 15394
       $$sink = 15; //@line 15394
      } else {
       if (($6 & 248 | 0) == 240) {
        $$050 = 3; //@line 15399
        $$051 = 65536; //@line 15399
        $$sink = 7; //@line 15399
       } else {
        $$4 = 0; //@line 15401
        break L1;
       }
      }
     }
     $16 = $$050 + $3 | 0; //@line 15406
     if ($16 >>> 0 > $1 >>> 0) {
      $$4 = 0; //@line 15409
      break L1;
     }
     $$078 = 0; //@line 15413
     $$177 = $$sink & $6; //@line 15413
     do {
      $22 = SAFE_HEAP_LOAD($0 + ($$078 + $3) >> 0 | 0, 1, 1) | 0 | 0; //@line 15418
      if (($22 & 192 | 0) != 128) {
       $$4 = 0; //@line 15422
       break L1;
      }
      $25 = $$177 << 6; //@line 15425
      $$177 = $22 & 63 | $25; //@line 15427
      $$078 = $$078 + 1 | 0; //@line 15428
     } while ($$078 >>> 0 < $$050 >>> 0);
     if ($$177 >>> 0 < $$051 >>> 0 | $$177 >>> 0 > 1114111) {
      $$4 = 0; //@line 15440
      break L1;
     }
     $32 = $25 & -1024; //@line 15443
     if (($32 | 0) == 55296) {
      $$055$off0$be = 0; //@line 15446
      $$058$be = $16; //@line 15446
     } else {
      if ($$055$off080 | ($32 | 0) != 56320) {
       $$055$off0$be = 1; //@line 15451
       $$058$be = $16; //@line 15451
      } else {
       $$4 = 0; //@line 15453
       break L1;
      }
     }
    }
    if ($$058$be >>> 0 < $1 >>> 0) {
     $$055$off080 = $$055$off0$be; //@line 15460
     $$05879 = $$058$be; //@line 15460
    } else {
     $$4 = 1; //@line 15462
     break;
    }
   }
  }
 } while (0);
 return $$4 | 0; //@line 15468
}
function _parser_save_context($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = 0, $28 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $7 = 0;
 $2 = $0 + 168 | 0; //@line 16304
 SAFE_HEAP_STORE($1 | 0, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0, 4);
 $4 = $0 + 172 | 0; //@line 16307
 SAFE_HEAP_STORE($1 + 4 | 0, SAFE_HEAP_LOAD($4 | 0, 2, 0) | 0 | 0 | 0, 2);
 $7 = $0 + 174 | 0; //@line 16311
 SAFE_HEAP_STORE($1 + 6 | 0, SAFE_HEAP_LOAD($7 | 0, 2, 0) | 0 | 0 | 0, 2);
 $10 = $0 + 176 | 0; //@line 16315
 SAFE_HEAP_STORE($1 + 8 | 0, SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0, 4);
 $14 = $0 + 180 | 0; //@line 16320
 $15 = $14; //@line 16321
 $20 = SAFE_HEAP_LOAD($15 + 4 | 0, 4, 0) | 0 | 0; //@line 16326
 $21 = $1 + 12 | 0; //@line 16327
 SAFE_HEAP_STORE($21 | 0, SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($21 + 4 | 0, $20 | 0, 4);
 $25 = $0 + 242 | 0; //@line 16333
 SAFE_HEAP_STORE($1 + 20 | 0, SAFE_HEAP_LOAD($25 | 0, 2, 0) | 0 | 0 | 0, 2);
 $28 = $0 + 244 | 0; //@line 16337
 SAFE_HEAP_STORE($1 + 22 | 0, SAFE_HEAP_LOAD($28 | 0, 2, 0) | 0 | 0 | 0, 2);
 $31 = $0 + 246 | 0; //@line 16341
 SAFE_HEAP_STORE($1 + 24 | 0, SAFE_HEAP_LOAD($31 | 0, 2, 0) | 0 | 0 | 0, 2);
 $34 = $1 + 28 | 0; //@line 16345
 $35 = $0 + 248 | 0; //@line 16346
 SAFE_HEAP_STORE($34 | 0, SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($34 + 4 | 0, SAFE_HEAP_LOAD($35 + 4 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($34 + 8 | 0, SAFE_HEAP_LOAD($35 + 8 | 0, 4, 0) | 0 | 0, 4);
 $36 = $0 + 260 | 0; //@line 16348
 SAFE_HEAP_STORE($1 + 40 | 0, SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0, 4);
 $39 = $1 + 44 | 0; //@line 16352
 $40 = $0 + 264 | 0; //@line 16353
 SAFE_HEAP_STORE($39 | 0, SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($39 + 4 | 0, SAFE_HEAP_LOAD($40 + 4 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($39 + 8 | 0, SAFE_HEAP_LOAD($40 + 8 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($2 | 0, (SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0) & 1 | 0, 4);
 SAFE_HEAP_STORE($4 | 0, 0 | 0, 2);
 SAFE_HEAP_STORE($7 | 0, 0 | 0, 2);
 SAFE_HEAP_STORE($10 | 0, $1 | 0, 4);
 SAFE_HEAP_STORE($14 | 0, 0 | 0, 4);
 SAFE_HEAP_STORE($25 | 0, 0 | 0, 2);
 SAFE_HEAP_STORE($28 | 0, 0 | 0, 2);
 SAFE_HEAP_STORE($31 | 0, 0 | 0, 2);
 _parser_cbc_stream_init($35); //@line 16365
 SAFE_HEAP_STORE($36 | 0, 0 | 0, 4);
 _parser_list_reset($40); //@line 16367
 return;
}
function _ecma_op_same_value($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $2 = _ecma_is_value_undefined($0) | 0; //@line 9617
 $3 = _ecma_is_value_null($0) | 0; //@line 9618
 $4 = _ecma_is_value_boolean($0) | 0; //@line 9619
 $5 = _ecma_is_value_number($0) | 0; //@line 9620
 $6 = _ecma_is_value_string($0) | 0; //@line 9621
 $7 = _ecma_is_value_object($0) | 0; //@line 9622
 $8 = _ecma_is_value_null($1) | 0; //@line 9623
 $9 = _ecma_is_value_boolean($1) | 0; //@line 9624
 $10 = _ecma_is_value_number($1) | 0; //@line 9625
 $11 = _ecma_is_value_string($1) | 0; //@line 9626
 $12 = _ecma_is_value_object($1) | 0; //@line 9627
 if ($2) {
  if (_ecma_is_value_undefined($1) | 0) {
   $$1 = 1; //@line 9631
  } else {
   label = 3; //@line 9633
  }
 } else {
  label = 3; //@line 9636
 }
 do {
  if ((label | 0) == 3) {
   if (!($3 & $8 | $4 & $9 | $5 & $10)) {
    if (!($6 & $11 | $7 & $12)) {
     $$1 = 0; //@line 9650
     break;
    }
   }
   if ($2 | $3) {
    $$1 = 1; //@line 9656
   } else {
    if (!$5) {
     if ($6) {
      $26 = _ecma_get_string_from_value($0) | 0; //@line 9660
      $$1 = _ecma_compare_ecma_strings($26, _ecma_get_string_from_value($1) | 0) | 0; //@line 9663
      break;
     }
     if ($4) {
      $29 = _ecma_is_value_true($0) | 0; //@line 9667
      $$1 = $29 ^ (_ecma_is_value_true($1) | 0) ^ 1; //@line 9671
      break;
     } else {
      $32 = _ecma_get_object_from_value($0) | 0; //@line 9674
      $$1 = ($32 | 0) == (_ecma_get_object_from_value($1) | 0); //@line 9677
      break;
     }
    }
    $15 = +_ecma_get_number_from_value($0); //@line 9681
    $16 = +_ecma_get_number_from_value($1); //@line 9682
    $17 = _ecma_number_is_nan($15) | 0; //@line 9683
    $18 = _ecma_number_is_nan($16) | 0; //@line 9684
    if ($17 | $18) {
     $$1 = $17 & $18; //@line 9688
     break;
    }
    if (_ecma_number_is_zero($15) | 0) {
     if (_ecma_number_is_zero($16) | 0) {
      $22 = _ecma_number_is_negative($15) | 0; //@line 9695
      if ($22 ^ (_ecma_number_is_negative($16) | 0)) {
       $$1 = 0; //@line 9699
       break;
      }
     }
    }
    $$1 = $15 == $16; //@line 9705
   }
  }
 } while (0);
 return $$1 | 0; //@line 9709
}
function _vm_op_get_value($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $$14852 = 0, $$3 = 0, $11 = 0, $2 = 0, $27 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2931
 STACKTOP = STACKTOP + 16 | 0; //@line 2932
 $vararg_buffer = sp; //@line 2933
 $2 = sp + 8 | 0; //@line 2934
 do {
  if (_ecma_is_value_object($0) | 0) {
   $4 = _ecma_get_object_from_value($0) | 0; //@line 2938
   if (_ecma_is_value_integer_number($1) | 0) {
    $6 = _ecma_get_integer_from_value($1) | 0; //@line 2941
    if ($6 >>> 0 < 65536) {
     _ecma_init_ecma_string_from_uint32($2, $6); //@line 2944
     $$14852 = $2; //@line 2945
    } else {
     label = 11; //@line 2947
    }
   } else {
    if (_ecma_is_value_string($1) | 0) {
     $9 = _ecma_get_string_from_value($1) | 0; //@line 2952
     if (!$9) {
      label = 11; //@line 2955
     } else {
      $$14852 = $9; //@line 2957
     }
    } else {
     label = 11; //@line 2960
    }
   }
   if ((label | 0) == 11) {
    label = 13; //@line 2964
    break;
   }
   $11 = _ecma_lcache_lookup($4, $$14852) | 0; //@line 2967
   if (!$11) {
    label = 10; //@line 2970
   } else {
    if (((SAFE_HEAP_LOAD($11 >> 0 | 0, 1, 0) | 0) & 3) == 1) {
     $$1 = _ecma_fast_copy_value(SAFE_HEAP_LOAD($11 + 7 & -4 | 0, 4, 0) | 0 | 0) | 0; //@line 2982
    } else {
     label = 10; //@line 2984
    }
   }
   if ((label | 0) == 10) {
    $$1 = _ecma_op_object_get(_ecma_get_object_from_value($0) | 0, $$14852) | 0; //@line 2990
   }
   $$3 = $$1; //@line 2992
  } else {
   label = 13; //@line 2994
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!(_ecma_is_value_undefined($0) | 0)) {
    if (!(_ecma_is_value_null($0) | 0)) {
     $27 = _ecma_op_to_string($1) | 0; //@line 3003
     if (($27 | 0) == 24) {
      $$3 = 24; //@line 3006
      break;
     }
     $29 = _ecma_get_string_from_value($27) | 0; //@line 3009
     $30 = _ecma_op_get_value_object_base($0, $29) | 0; //@line 3010
     _ecma_deref_ecma_string($29); //@line 3011
     $$3 = $30; //@line 3012
     break;
    }
   }
   SAFE_HEAP_STORE($vararg_buffer | 0, $1 | 0, 4);
   SAFE_HEAP_STORE($vararg_buffer + 4 | 0, $0 | 0, 4);
   $$3 = _ecma_raise_standard_error_with_format(5, 6097, $vararg_buffer) | 0; //@line 3020
  }
 } while (0);
 STACKTOP = sp; //@line 3023
 return $$3 | 0; //@line 3023
}
function _lexer_process_char_literal($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$ = 0, $$0$lcssa48 = 0, $$044 = 0, $10 = 0, $23 = 0, $26 = 0, $27 = 0, $30 = 0, $36 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9069
 STACKTOP = STACKTOP + 16 | 0; //@line 9070
 $5 = sp; //@line 9071
 $6 = $0 + 264 | 0; //@line 9072
 _parser_list_iterator_init($6, $5); //@line 9073
 $7 = _parser_list_iterator_next($5) | 0; //@line 9074
 do {
  if (!$7) {
   $$0$lcssa48 = 0; //@line 9078
   label = 9; //@line 9079
  } else {
   $$044 = 0; //@line 9081
   $10 = $7; //@line 9081
   while (1) {
    if ((SAFE_HEAP_LOAD($10 + 6 >> 0 | 0, 1, 0) | 0 | 0) == $3 << 24 >> 24) {
     if ((SAFE_HEAP_LOAD($10 + 4 | 0, 2, 1) | 0 | 0) == ($2 | 0)) {
      if (!(_memcmp(SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0, $1, $2) | 0)) {
       label = 5; //@line 9096
       break;
      }
     }
    }
    $26 = $$044 + 1 | 0; //@line 9101
    $27 = _parser_list_iterator_next($5) | 0; //@line 9102
    if (!$27) {
     break;
    } else {
     $$044 = $26; //@line 9107
     $10 = $27; //@line 9107
    }
   }
   if ((label | 0) == 5) {
    SAFE_HEAP_STORE($0 + 208 | 0, $10 | 0, 4);
    SAFE_HEAP_STORE($0 + 212 | 0, $$044 | 0, 2);
    $23 = $10 + 7 | 0; //@line 9116
    SAFE_HEAP_STORE($23 >> 0 | 0, (SAFE_HEAP_LOAD($23 >> 0 | 0, 1, 0) | 0) & -33 | 0, 1);
    break;
   }
   if ($26 >>> 0 > 32766) {
    _parser_raise_error($0, 2); //@line 9124
   } else {
    $$0$lcssa48 = $26; //@line 9127
    label = 9; //@line 9128
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  $$ = ($2 | 0) != 0 & $4; //@line 9134
  $30 = _parser_list_append($0, $6) | 0; //@line 9135
  SAFE_HEAP_STORE($30 + 4 | 0, $2 | 0, 2);
  SAFE_HEAP_STORE($30 + 6 >> 0 | 0, $3 | 0, 1);
  SAFE_HEAP_STORE($30 + 7 >> 0 | 0, ($$ ? 0 : 64) | 0, 1);
  if ($$) {
   $36 = _jmem_heap_alloc_block($2) | 0; //@line 9145
   SAFE_HEAP_STORE($30 | 0, $36 | 0, 4);
   _memcpy($36 | 0, $1 | 0, $2 | 0) | 0; //@line 9147
  } else {
   SAFE_HEAP_STORE($30 | 0, $1 | 0, 4);
  }
  SAFE_HEAP_STORE($0 + 208 | 0, $30 | 0, 4);
  SAFE_HEAP_STORE($0 + 212 | 0, $$0$lcssa48 | 0, 2);
  $40 = $0 + 246 | 0; //@line 9156
  SAFE_HEAP_STORE($40 | 0, (SAFE_HEAP_LOAD($40 | 0, 2, 0) | 0 | 0) + 1 << 16 >> 16 | 0, 2);
 }
 STACKTOP = sp; //@line 9161
 return;
}
function _parser_parse_object_literal($0) {
 $0 = $0 | 0;
 var $1 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 _parser_emit_cbc($0, 20); //@line 16097
 _parser_stack_push_uint8($0, 0); //@line 16098
 $1 = $0 + 188 | 0; //@line 16099
 $2 = $0 + 212 | 0; //@line 16100
 $3 = $0 + 240 | 0; //@line 16101
 $4 = $0 + 234 | 0; //@line 16102
 L1 : while (1) {
  _lexer_expect_object_literal_id($0, 0); //@line 16104
  $5 = SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0; //@line 16105
  switch ($5 << 24 >> 24) {
  case 54:
   {
    label = 8; //@line 16108
    break L1;
    break;
   }
  case 83:
  case 82:
   {
    $6 = $5 << 24 >> 24 == 82; //@line 16113
    _lexer_expect_object_literal_id($0, 1); //@line 16117
    $7 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 16118
    _parser_append_object_literal_item($0, $7, $6 ? 2 : 3); //@line 16119
    _parser_flush_cbc($0); //@line 16120
    $8 = _lexer_construct_function_object($0, $6 ? 22 : 38) | 0; //@line 16121
    _parser_emit_cbc_literal($0, 40, $7); //@line 16122
    SAFE_HEAP_STORE($3 | 0, ($6 ? 264 : 268) | 0, 2);
    SAFE_HEAP_STORE($4 | 0, $8 | 0, 2);
    _lexer_next_token($0); //@line 16125
    break;
   }
  default:
   {
    $9 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 16129
    _parser_append_object_literal_item($0, $9, 1); //@line 16130
    _lexer_next_token($0); //@line 16131
    if ((SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0) != 59) {
     label = 5; //@line 16135
     break L1;
    }
    _lexer_next_token($0); //@line 16138
    _parser_parse_expression($0, 4); //@line 16139
    _parser_emit_cbc_literal($0, 24, $9); //@line 16140
   }
  }
  switch (SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0) {
  case 60:
   {
    break;
   }
  case 54:
   {
    label = 8; //@line 16149
    break L1;
    break;
   }
  default:
   {
    label = 9; //@line 16154
    break L1;
   }
  }
 }
 if ((label | 0) == 5) {
  _parser_raise_error($0, 43); //@line 16160
 } else if ((label | 0) == 8) {
  $13 = $0 + 304 | 0; //@line 16164
  if (SAFE_HEAP_LOAD($13 >> 0 | 0, 1, 0) | 0 | 0) {
   do {
    _parser_stack_pop($0, 0, 3); //@line 16169
   } while ((SAFE_HEAP_LOAD($13 >> 0 | 0, 1, 0) | 0 | 0) != 0);
  }
  _parser_stack_pop_uint8($0); //@line 16177
  return;
 } else if ((label | 0) == 9) {
  _parser_raise_error($0, 50); //@line 16181
 }
}
function _ecma_concat_ecma_strings($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$034 = 0, $$035 = 0, $$036 = 0, $$off0 = 0, $10 = 0, $12 = 0, $2 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $30 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3954
 STACKTOP = STACKTOP + 16 | 0; //@line 3955
 $2 = sp; //@line 3956
 if (!(SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0)) {
  if (((SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 7) == 1) {
   _ecma_deref_ecma_string($0); //@line 3965
   _ecma_ref_ecma_string($1); //@line 3966
   $$0 = $1; //@line 3967
  } else {
   label = 4; //@line 3969
  }
 } else {
  label = 4; //@line 3972
 }
 do {
  if ((label | 0) == 4) {
   $9 = $1 + 4 | 0; //@line 3976
   $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0; //@line 3977
   $12 = SAFE_HEAP_LOAD($1 | 0, 2, 0) | 0 | 0; //@line 3979
   if (!$10) {
    if (($12 & 7) == 1) {
     $$0 = $0; //@line 3985
     break;
    } else {
     $$off0 = $12 & 255; //@line 3988
    }
   } else {
    $$off0 = $12 & 255; //@line 3992
   }
   switch ($$off0 & 7) {
   case 3:
    {
     $$034 = SAFE_HEAP_LOAD($1 + 4 + 2 | 0, 2, 1) | 0 | 0; //@line 4003
     $$035 = $10 & 65535; //@line 4003
     $$036 = $1 + 8 | 0; //@line 4003
     break;
    }
   case 4:
    {
     $$034 = SAFE_HEAP_LOAD($1 + 8 | 0, 4, 0) | 0 | 0; //@line 4010
     $$035 = $10; //@line 4010
     $$036 = $1 + 12 | 0; //@line 4010
     break;
    }
   case 0:
    {
     $24 = _ecma_uint32_to_utf8_string($10, $2, 10) | 0; //@line 4014
     $$034 = $24; //@line 4015
     $$035 = $24; //@line 4015
     $$036 = $2; //@line 4015
     break;
    }
   case 1:
    {
     $25 = _lit_get_magic_string_utf8($10) | 0; //@line 4019
     $27 = _lit_get_magic_string_size(SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0) | 0; //@line 4021
     $$034 = $27; //@line 4022
     $$035 = $27; //@line 4022
     $$036 = $25; //@line 4022
     break;
    }
   default:
    {
     $28 = _lit_get_magic_string_ex_utf8($10) | 0; //@line 4026
     $30 = _lit_get_magic_string_ex_size(SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0) | 0; //@line 4028
     $$034 = _lit_utf8_string_length($28, $30) | 0; //@line 4030
     $$035 = $30; //@line 4030
     $$036 = $28; //@line 4030
    }
   }
   $$0 = _ecma_append_chars_to_string($0, $$036, $$035, $$034) | 0; //@line 4034
  }
 } while (0);
 STACKTOP = sp; //@line 4037
 return $$0 | 0; //@line 4037
}
function _parser_free_jumps($0) {
 $0 = $0 | 0;
 var $$in19$ph = 0, $$in1922 = 0, $$in2021 = 0, $1 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, sp = 0, $$in2021$looptemp = 0;
 sp = STACKTOP; //@line 12556
 STACKTOP = STACKTOP + 16 | 0; //@line 12557
 $1 = sp + 4 | 0; //@line 12558
 $2 = sp; //@line 12559
 $3 = $1 + 8 | 0; //@line 12560
 $4 = $1 + 8 | 0; //@line 12561
 L1 : while (1) {
  $5 = _parser_stack_iterator_read_uint8($0) | 0; //@line 12563
  switch ($5 << 24 >> 24) {
  case 0:
   {
    break L1;
    break;
   }
  case 2:
   {
    _parser_stack_iterator_skip($0, 1); //@line 12570
    _parser_stack_iterator_read($0, $1, 12); //@line 12571
    _parser_stack_iterator_skip($0, 12); //@line 12572
    $$in19$ph = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0; //@line 12574
    break;
   }
  case 6:
  case 5:
   {
    _parser_stack_iterator_skip($0, 1); //@line 12578
    _parser_stack_iterator_read($0, $2, 4); //@line 12579
    _parser_stack_iterator_skip($0, 4); //@line 12580
    _parser_stack_iterator_read($0, $1, 12); //@line 12581
    _parser_stack_iterator_skip($0, 12); //@line 12582
    $8 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0; //@line 12583
    if ($8 | 0) {
     $$in2021 = $8; //@line 12586
     do {
      $$in2021$looptemp = $$in2021;
      $$in2021 = SAFE_HEAP_LOAD($$in2021 | 0, 4, 0) | 0 | 0; //@line 12588
      _parser_free($$in2021$looptemp, 12); //@line 12589
     } while (($$in2021 | 0) != 0);
    }
    $$in19$ph = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 12599
    break;
   }
  case 10:
  case 9:
  case 8:
  case 7:
   {
    _parser_stack_iterator_skip($0, 1); //@line 12603
    _parser_stack_iterator_read($0, $1, 4); //@line 12604
    _parser_stack_iterator_skip($0, (_parser_statement_length($5) | 0) + -1 | 0); //@line 12607
    $$in19$ph = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 12609
    break;
   }
  default:
   {
    _parser_stack_iterator_skip($0, _parser_statement_length($5) | 0); //@line 12614
    continue L1;
   }
  }
  if (!$$in19$ph) {
   continue;
  } else {
   $$in1922 = $$in19$ph; //@line 12622
  }
  while (1) {
   $17 = SAFE_HEAP_LOAD($$in1922 | 0, 4, 0) | 0 | 0; //@line 12625
   _parser_free($$in1922, 12); //@line 12626
   if (!$17) {
    continue L1;
   } else {
    $$in1922 = $17; //@line 12631
   }
  }
 }
 STACKTOP = sp; //@line 12635
 return;
}
function _parser_scan_primary_expression($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0;
 L1 : do {
  switch ($1 | 0) {
  case 65:
   {
    SAFE_HEAP_STORE($3 | 0, 1 | 0, 4);
    $$0 = 0; //@line 16665
    break;
   }
  case 19:
  case 49:
   {
    _lexer_construct_regexp_object($0, 1); //@line 16669
    SAFE_HEAP_STORE($3 | 0, 2 | 0, 4);
    $$0 = 0; //@line 16671
    break;
   }
  case 75:
   {
    _parser_stack_push_uint8($0, 8); //@line 16675
    SAFE_HEAP_STORE($3 | 0, 5 | 0, 4);
    $$0 = 0; //@line 16677
    break;
   }
  case 52:
   {
    _parser_stack_push_uint8($0, 1); //@line 16681
    SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
    $$0 = 0; //@line 16683
    break;
   }
  case 53:
   {
    _parser_stack_push_uint8($0, 5); //@line 16687
    SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
    $$0 = 0; //@line 16689
    break;
   }
  case 51:
   {
    _parser_stack_push_uint8($0, 6); //@line 16693
    SAFE_HEAP_STORE($3 | 0, 6 | 0, 4);
    $$0 = 1; //@line 16695
    break;
   }
  case 5:
  case 4:
  case 3:
  case 2:
  case 1:
   {
    SAFE_HEAP_STORE($3 | 0, 2 | 0, 4);
    $$0 = 0; //@line 16700
    break;
   }
  case 56:
   {
    if (($2 | 0) == 5) {
     _parser_stack_pop_uint8($0); //@line 16706
     SAFE_HEAP_STORE($3 | 0, 2 | 0, 4);
     $$0 = 0; //@line 16708
     break L1;
    } else {
     _parser_raise_error($0, 53); //@line 16711
    }
    break;
   }
  case 60:
   {
    if (($2 | 0) == 5) {
     SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
     $$0 = 0; //@line 16720
     break L1;
    } else {
     _parser_raise_error($0, 53); //@line 16723
    }
    break;
   }
  case 55:
   {
    SAFE_HEAP_STORE($3 | 0, 2 | 0, 4);
    switch ($2 | 0) {
    case 2:
     {
      SAFE_HEAP_STORE($3 | 0, 4 | 0, 4);
      break;
     }
    case 1:
     {
      break;
     }
    default:
     {
      _parser_raise_error($0, 53); //@line 16739
     }
    }
    _parser_stack_pop_uint8($0); //@line 16743
    $$0 = 0; //@line 16744
    break;
   }
  case 58:
   {
    if (($2 | 0) == 2) {
     SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
     $$0 = 0; //@line 16751
     break L1;
    } else {
     _parser_raise_error($0, 53); //@line 16754
    }
    break;
   }
  default:
   {
    _parser_raise_error($0, 53); //@line 16760
   }
  }
 } while (0);
 return $$0 | 0; //@line 16765
}
function _ecma_op_array_object_set_length($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$059 = 0, $$162 = 0.0, $$5 = 0, $11 = 0.0, $12 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $32 = 0, $4 = 0, $5 = 0, $7 = 0.0, $9 = 0;
 $4 = ($2 & 1 | 0) != 0; //@line 9393
 $5 = _ecma_op_to_number($1) | 0; //@line 9394
 do {
  if (($5 | 0) == 24) {
   $$5 = 24; //@line 9398
  } else {
   $7 = +_ecma_get_number_from_value($5); //@line 9400
   _ecma_free_value($5); //@line 9401
   if (_ecma_is_value_object($1) | 0) {
    $9 = _ecma_op_to_number($1) | 0; //@line 9404
    if (($9 | 0) == 24) {
     $$5 = 24; //@line 9407
     break;
    }
    $11 = +_ecma_get_number_from_value($9); //@line 9410
    _ecma_free_value($9); //@line 9411
    $$162 = $11; //@line 9412
   } else {
    $$162 = $7; //@line 9414
   }
   $12 = _ecma_number_to_uint32($$162) | 0; //@line 9416
   if (+($12 >>> 0) != $$162) {
    $$5 = _ecma_raise_range_error(3875) | 0; //@line 9421
    break;
   }
   if ($2 & 2 | 0) {
    $$5 = _ecma_reject($4) | 0; //@line 9428
    break;
   }
   $19 = $0 + 8 | 0; //@line 9431
   $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0; //@line 9432
   if ($$162 == +($20 >>> 0)) {
    if (!($2 & 4)) {
     $$5 = 56; //@line 9439
     break;
    }
    $27 = $0 + 12 | 0; //@line 9444
    $28 = SAFE_HEAP_LOAD($27 >> 0 | 0, 1, 0) | 0 | 0; //@line 9445
    if (!($2 & 8)) {
     SAFE_HEAP_STORE($27 >> 0 | 0, $28 & -17 | 0, 1);
     $$5 = 56; //@line 9449
     break;
    }
    if (_ecma_is_property_writable($28) | 0) {
     $$5 = 56; //@line 9454
     break;
    }
    $$5 = _ecma_reject($4) | 0; //@line 9458
    break;
   }
   $32 = $0 + 12 | 0; //@line 9461
   if (!(_ecma_is_property_writable(SAFE_HEAP_LOAD($32 >> 0 | 0, 1, 0) | 0 | 0) | 0)) {
    $$5 = _ecma_reject($4) | 0; //@line 9466
    break;
   }
   if ($12 >>> 0 < $20 >>> 0) {
    $$059 = _ecma_delete_array_properties($0, $12, $20) | 0; //@line 9472
   } else {
    $$059 = $12; //@line 9474
   }
   SAFE_HEAP_STORE($19 | 0, $$059 | 0, 4);
   if (($2 & 12 | 0) == 4) {
    SAFE_HEAP_STORE($32 >> 0 | 0, (SAFE_HEAP_LOAD($32 >> 0 | 0, 1, 0) | 0) & -17 | 0, 1);
   }
   if (($$059 | 0) == ($12 | 0)) {
    $$5 = 56; //@line 9486
   } else {
    $$5 = _ecma_reject($4) | 0; //@line 9489
   }
  }
 } while (0);
 return $$5 | 0; //@line 9493
}
function _ecma_raise_standard_error_with_format($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $$0$ph = 0, $$066 = 0, $$066$ph = 0, $$067 = 0, $$1 = 0, $$3 = 0, $16 = 0, $17 = 0, $2 = 0, $24 = 0, $29 = 0, $3 = 0, $32 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 10424
 STACKTOP = STACKTOP + 16 | 0; //@line 10425
 $2 = sp; //@line 10426
 $3 = _ecma_get_magic_string(0) | 0; //@line 10427
 SAFE_HEAP_STORE($2 | 0, $varargs | 0, 4);
 $$0$ph = $3; //@line 10429
 $$066$ph = $1; //@line 10429
 L1 : while (1) {
  $$066 = $$066$ph; //@line 10431
  L3 : while (1) {
   switch (SAFE_HEAP_LOAD($$066 >> 0 | 0, 1, 0) | 0 | 0) {
   case 0:
    {
     break L1;
     break;
    }
   case 37:
    {
     break L3;
     break;
    }
   default:
    {}
   }
   $$066 = $$066 + 1 | 0; //@line 10447
  }
  $8 = $$066 - $$066$ph | 0; //@line 10452
  if ($$066 >>> 0 > $$066$ph >>> 0) {
   $$1 = _ecma_append_chars_to_string($$0$ph, $$066$ph, $8, _lit_utf8_string_length($$066$ph, $8) | 0) | 0; //@line 10456
  } else {
   $$1 = $$0$ph; //@line 10458
  }
  $16 = (SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0) + (4 - 1) & ~(4 - 1); //@line 10471
  $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0; //@line 10472
  SAFE_HEAP_STORE($2 | 0, $16 + 4 | 0, 4);
  if (_ecma_is_value_object($17) | 0) {
   $$067 = _ecma_get_magic_string(_ecma_object_get_class_name(_ecma_get_object_from_value($17) | 0) | 0) | 0; //@line 10480
  } else {
   $$067 = _ecma_get_string_from_value(_ecma_op_to_string($17) | 0) | 0; //@line 10484
  }
  $24 = _ecma_concat_ecma_strings($$1, $$067) | 0; //@line 10486
  _ecma_deref_ecma_string($$067); //@line 10487
  $$0$ph = $24; //@line 10489
  $$066$ph = $$066 + 1 | 0; //@line 10489
 }
 $29 = $$066 - $$066$ph | 0; //@line 10494
 if ($$066$ph >>> 0 < $$066 >>> 0) {
  $$3 = _ecma_append_chars_to_string($$0$ph, $$066$ph, $29, _lit_utf8_string_length($$066$ph, $29) | 0) | 0; //@line 10498
 } else {
  $$3 = $$0$ph; //@line 10500
 }
 $32 = _ecma_new_standard_error_with_message(0, $$3) | 0; //@line 10502
 _ecma_deref_ecma_string($$3); //@line 10503
 SAFE_HEAP_STORE(134113 * 4 | 0, _ecma_make_object_value($32) | 0 | 0, 4);
 SAFE_HEAP_STORE(134116 * 4 | 0, SAFE_HEAP_LOAD(134116 * 4 | 0, 4, 0) | 0 | 8 | 0, 4);
 STACKTOP = sp; //@line 10509
 return 24; //@line 10509
}
function _ecma_property_hashmap_insert($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$1$lcssa = 0, $$153 = 0, $$lcssa = 0, $$sink = 0, $10 = 0, $11 = 0, $16 = 0, $20 = 0, $21 = 0, $28 = 0, $29 = 0, $33 = 0, $34 = 0, $42 = 0, $44 = 0, $51 = 0, $56 = 0, $7 = 0, $8 = 0;
 $7 = _jmem_decompress_pointer(SAFE_HEAP_LOAD($0 + 4 | 0, 2, 1) | 0 | 0) | 0; //@line 8152
 $8 = $7 + 8 | 0; //@line 8153
 $10 = $7 + 4 | 0; //@line 8155
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0; //@line 8156
 if ((SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0) >>> 0 < $11 >>> 3 >>> 0) {
  _ecma_property_hashmap_free($0); //@line 8160
  _ecma_property_hashmap_create($0); //@line 8161
 } else {
  $16 = SAFE_HEAP_LOAD($1 + 2 | 0, 2, 1) | 0 | 0; //@line 8165
  $20 = SAFE_HEAP_LOAD(3867 + ($16 & 7) >> 0 | 0, 1, 1) | 0 | 0; //@line 8169
  $21 = $11 + -1 | 0; //@line 8170
  if ($21 >>> 0 < 65536) {
   $$0 = $16 & $21; //@line 8174
  } else {
   $$0 = $16 << (SAFE_HEAP_LOAD($7 + 1 >> 0 | 0, 1, 1) | 0); //@line 8180
  }
  $28 = $7 + 16 | 0; //@line 8182
  $29 = $28 + ($$0 << 1) | 0; //@line 8183
  if (!(SAFE_HEAP_LOAD($29 | 0, 2, 0) | 0)) {
   $$1$lcssa = $$0; //@line 8187
   $$lcssa = $29; //@line 8187
  } else {
   $$153 = $$0; //@line 8189
   while (1) {
    $33 = $$153 + $20 & $21; //@line 8192
    $34 = $28 + ($33 << 1) | 0; //@line 8193
    if (!(SAFE_HEAP_LOAD($34 | 0, 2, 0) | 0)) {
     $$1$lcssa = $33; //@line 8197
     $$lcssa = $34; //@line 8197
     break;
    } else {
     $$153 = $33; //@line 8200
    }
   }
  }
  if (!$2) {
   $$sink = 0; //@line 8206
  } else {
   $$sink = _jmem_compress_pointer($2) | 0; //@line 8209
  }
  SAFE_HEAP_STORE($$lcssa | 0, $$sink | 0, 2);
  $42 = $28 + ((SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0) << 1) + ($$1$lcssa >>> 3) | 0; //@line 8215
  $44 = 1 << ($$1$lcssa & 7); //@line 8217
  if (!((SAFE_HEAP_LOAD($42 >> 0 | 0, 1, 1) | 0) & $44)) {
   SAFE_HEAP_STORE($8 | 0, (SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0) + -1 | 0, 4);
  }
  $51 = $7 + 12 | 0; //@line 8227
  SAFE_HEAP_STORE($51 | 0, (SAFE_HEAP_LOAD($51 | 0, 4, 0) | 0 | 0) + -1 | 0, 4);
  $56 = SAFE_HEAP_LOAD($42 >> 0 | 0, 1, 1) | 0 | 0; //@line 8233
  SAFE_HEAP_STORE($42 >> 0 | 0, (($3 | 0) == 0 ? $56 & ($44 ^ 255) : $56 | $44) | 0, 1);
 }
 return;
}
function _ecma_builtin_object_object_freeze($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$03 = 0, $$0352 = 0, $$1 = 0, $$2 = 0, $$4 = 0, $1 = 0, $10 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 5771
 STACKTOP = STACKTOP + 16 | 0; //@line 5772
 $1 = sp; //@line 5773
 if (_ecma_is_value_object($0) | 0) {
  $4 = _ecma_get_object_from_value($0) | 0; //@line 5776
  $5 = _ecma_op_object_get_property_names($4, 0, 0, 0) | 0; //@line 5777
  $6 = _ecma_collection_iterator_init($5) | 0; //@line 5778
  L3 : do {
   if (!$6) {
    $$0$lcssa = 8; //@line 5782
   } else {
    $$03 = 8; //@line 5784
    $$0352 = $6; //@line 5784
    while (1) {
     if (!(_ecma_is_value_empty($$03) | 0)) {
      $$0$lcssa = $$03; //@line 5788
      break L3;
     }
     $10 = _ecma_get_string_from_value(SAFE_HEAP_LOAD($$0352 | 0, 4, 0) | 0 | 0) | 0; //@line 5792
     $$0352 = _ecma_collection_iterator_next($$0352) | 0; //@line 5793
     if (_ecma_op_object_get_own_property_descriptor($4, $10, $1) | 0) {
      $13 = SAFE_HEAP_LOAD($1 | 0, 2, 0) | 0 | 0; //@line 5796
      if (($13 & 24) == 24) {
       $16 = $13 & -17; //@line 5800
       SAFE_HEAP_STORE($1 | 0, $16 | 0, 2);
       $18 = $16; //@line 5802
      } else {
       $18 = $13; //@line 5804
      }
      SAFE_HEAP_STORE($1 | 0, $18 & -257 | 0, 2);
      $19 = _ecma_op_object_define_own_property($4, $10, $1, 1) | 0; //@line 5808
      if (($19 | 0) == 24) {
       $$1 = 24; //@line 5811
      } else {
       _ecma_free_value($19); //@line 5813
       $$1 = $$03; //@line 5814
      }
      _ecma_free_property_descriptor($1); //@line 5816
      $$2 = $$1; //@line 5817
     } else {
      $$2 = $$03; //@line 5819
     }
     if (!$$0352) {
      $$0$lcssa = $$2; //@line 5823
      break;
     } else {
      $$03 = $$2; //@line 5826
     }
    }
   }
  } while (0);
  _ecma_free_values_collection($5, 1); //@line 5831
  if (_ecma_is_value_empty($$0$lcssa) | 0) {
   _ecma_set_object_extensible($4, 0); //@line 5834
   $$4 = _ecma_copy_value($0) | 0; //@line 5836
  } else {
   $$4 = $$0$lcssa; //@line 5838
  }
 } else {
  $$4 = _ecma_raise_type_error(6512) | 0; //@line 5842
 }
 STACKTOP = sp; //@line 5844
 return $$4 | 0; //@line 5844
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 5350
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0; //@line 5351
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0; //@line 5358
   label = 5; //@line 5359
  } else {
   $$1 = 0; //@line 5361
  }
 } else {
  $12 = $4; //@line 5365
  label = 5; //@line 5366
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 5370
   $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0; //@line 5371
   $14 = $10; //@line 5374
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[(SAFE_FT_MASK(SAFE_HEAP_LOAD($2 + 36 | 0, 4, 0) | 0 | 0, 3 | 0) | 0) & 3]($2, $0, $1) | 0; //@line 5379
    break;
   }
   L10 : do {
    if ((SAFE_HEAP_LOAD($2 + 75 >> 0 | 0, 1, 0) | 0 | 0) > -1) {
     $$038 = $1; //@line 5387
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 5391
       $$141 = $0; //@line 5391
       $$143 = $1; //@line 5391
       $31 = $14; //@line 5391
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 5394
      if ((SAFE_HEAP_LOAD($0 + $22 >> 0 | 0, 1, 0) | 0 | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 5401
      }
     }
     $28 = FUNCTION_TABLE_iiii[(SAFE_FT_MASK(SAFE_HEAP_LOAD($2 + 36 | 0, 4, 0) | 0 | 0, 3 | 0) | 0) & 3]($2, $0, $$038) | 0; //@line 5406
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 5409
      break L5;
     }
     $$139 = $$038; //@line 5415
     $$141 = $0 + $$038 | 0; //@line 5415
     $$143 = $1 - $$038 | 0; //@line 5415
     $31 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0; //@line 5415
    } else {
     $$139 = 0; //@line 5417
     $$141 = $0; //@line 5417
     $$143 = $1; //@line 5417
     $31 = $14; //@line 5417
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 5420
   SAFE_HEAP_STORE($9 | 0, (SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0) + $$143 | 0, 4);
   $$1 = $$139 + $$143 | 0; //@line 5425
  }
 } while (0);
 return $$1 | 0; //@line 5428
}
function _parser_parse_function($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre = 0, $16 = 0, $2 = 0, $20 = 0, $3 = 0, $31 = 0, $44 = 0, sp = 0;
 sp = STACKTOP; //@line 16204
 STACKTOP = STACKTOP + 64 | 0; //@line 16205
 $2 = sp; //@line 16206
 _parser_save_context($0, $2); //@line 16207
 $3 = $0 + 168 | 0; //@line 16208
 SAFE_HEAP_STORE($3 | 0, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | $1 | 0, 4);
 _lexer_next_token($0); //@line 16212
 $$pre = $0 + 188 | 0; //@line 16216
 if ((SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0) & 8 | 0) {
  if ((SAFE_HEAP_LOAD($$pre >> 0 | 0, 1, 0) | 0 | 0) == 1) {
   if (!(SAFE_HEAP_LOAD($0 + 206 >> 0 | 0, 1, 0) | 0)) {
    _lexer_construct_literal_object($0, $0 + 200 | 0, 0); //@line 16226
    $16 = SAFE_HEAP_LOAD($0 + 214 >> 0 | 0, 1, 0) | 0 | 0; //@line 16228
    if ($16 << 24 >> 24 != 2) {
     $20 = (SAFE_HEAP_LOAD($0 + 208 | 0, 4, 0) | 0 | 0) + 7 | 0; //@line 16233
     SAFE_HEAP_STORE($20 >> 0 | 0, SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 13 | 0, 1);
    }
    if ((SAFE_HEAP_LOAD($0 + 189 >> 0 | 0, 1, 0) | 0 | $16) << 24 >> 24) {
     SAFE_HEAP_STORE($3 | 0, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 128 | 0, 4);
    }
    _lexer_next_token($0); //@line 16247
   }
  }
 }
 if ((SAFE_HEAP_LOAD($$pre >> 0 | 0, 1, 0) | 0 | 0) != 52) {
  _parser_raise_error($0, 56); //@line 16254
 }
 _lexer_next_token($0); //@line 16257
 _parser_parse_function_arguments($0, 55); //@line 16258
 _lexer_next_token($0); //@line 16259
 $31 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0; //@line 16260
 if ($31 & 16 | 0) {
  if (SAFE_HEAP_LOAD($0 + 242 | 0, 2, 0) | 0 | 0) {
   _parser_raise_error($0, 57); //@line 16268
  }
 }
 if ($31 & 32 | 0) {
  if ((SAFE_HEAP_LOAD($0 + 242 | 0, 2, 0) | 0 | 0) != 1) {
   _parser_raise_error($0, 58); //@line 16279
  }
 }
 if ((SAFE_HEAP_LOAD($$pre >> 0 | 0, 1, 0) | 0 | 0) == 51) {
  _lexer_next_token($0); //@line 16286
  _parser_parse_statements($0); //@line 16287
  $44 = _parser_post_processing($0) | 0; //@line 16288
  _parser_restore_context($0, $2); //@line 16289
  STACKTOP = sp; //@line 16290
  return $44 | 0; //@line 16290
 } else {
  _parser_raise_error($0, 40); //@line 16292
 }
 return 0; //@line 16295
}
function _ecma_builtin_list_lazy_property_names($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$058 = 0, $$05763 = 0, $$05862 = 0, $$05961 = 0, $$sink = 0, $10 = 0, $17 = 0, $18 = 0, $19 = 0, $23 = 0, $24 = 0, $26 = 0, label = 0;
 if ((_ecma_get_object_type($0) | 0) == 2) {
  if ((SAFE_HEAP_LOAD($0 + 10 | 0, 2, 1) | 0 | 0) > 7) {
   $10 = _ecma_new_ecma_length_string() | 0; //@line 9088
   _ecma_append_to_values_collection($1 ? $3 : $2, _ecma_make_string_value($10) | 0, 1); //@line 9090
   _ecma_deref_ecma_string($10); //@line 9091
  } else {
   label = 4; //@line 9093
  }
 } else {
  label = 4; //@line 9096
 }
 if ((label | 0) == 4) {
  switch (_ecma_get_object_type($0) | 0) {
  case 1:
  case 4:
   {
    $$sink = 2; //@line 9102
    break;
   }
  default:
   {
    $$sink = 1; //@line 9106
   }
  }
  $17 = SAFE_HEAP_LOAD(88 + ((SAFE_HEAP_LOAD($0 + ($$sink << 3) >> 0 | 0, 1, 1) | 0 | 0) << 2) | 0, 4, 0) | 0 | 0; //@line 9113
  $18 = $1 ? $3 : $2; //@line 9114
  $19 = SAFE_HEAP_LOAD($17 | 0, 2, 0) | 0 | 0; //@line 9115
  if ($19 << 16 >> 16 != 82) {
   $$05763 = $17; //@line 9119
   $$05862 = 0; //@line 9119
   $$05961 = $0 + ($$sink << 3) + 4 | 0; //@line 9119
   $23 = $19; //@line 9119
   while (1) {
    $24 = ($$05862 | 0) == 32; //@line 9122
    $$05961 = $24 ? $$05961 + 4 | 0 : $$05961; //@line 9124
    $$$058 = $24 ? 0 : $$05862; //@line 9125
    $26 = _ecma_get_magic_string($23 & 65535) | 0; //@line 9126
    if (!((SAFE_HEAP_LOAD($$05961 | 0, 4, 0) | 0) & 1 << $$$058)) {
     label = 10; //@line 9132
    } else {
     if (_ecma_op_object_has_own_property($0, $26) | 0) {
      label = 10; //@line 9136
     }
    }
    if ((label | 0) == 10) {
     label = 0; //@line 9140
     _ecma_append_to_values_collection($18, _ecma_make_string_value($26) | 0, 1); //@line 9142
    }
    _ecma_deref_ecma_string($26); //@line 9144
    $$05763 = $$05763 + 6 | 0; //@line 9145
    $23 = SAFE_HEAP_LOAD($$05763 | 0, 2, 0) | 0 | 0; //@line 9147
    if ($23 << 16 >> 16 == 82) {
     break;
    } else {
     $$05862 = $$$058 + 1 | 0; //@line 9152
    }
   }
  }
 }
 return;
}
function _snapshot_add_compiled_code($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$07277 = 0, $$074 = 0, $$075 = 0, $$076$in = 0, $$1 = 0, $$sink = 0, $11 = 0, $12 = 0, $15 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $7 = 0;
 $4 = $3 + 4 | 0; //@line 266
 do {
  if (!(SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0)) {
   $7 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0; //@line 271
   if ($7 >>> 0 > 524287) {
    SAFE_HEAP_STORE($4 >> 0 | 0, 1 | 0, 1);
    $$1 = 0; //@line 275
    break;
   }
   $11 = ($7 + 524264 | 0) >>> 3 & 65535; //@line 280
   $12 = $1 + $7 | 0; //@line 281
   $15 = (SAFE_HEAP_LOAD($0 | 0, 2, 1) | 0) << 3; //@line 284
   if (($15 + $7 | 0) >>> 0 > $2 >>> 0) {
    SAFE_HEAP_STORE($4 >> 0 | 0, 1 | 0, 1);
    $$1 = 0; //@line 289
    break;
   }
   _memcpy($12 | 0, $0 | 0, $15 | 0) | 0; //@line 292
   SAFE_HEAP_STORE($3 | 0, (SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0) + $15 | 0, 4);
   if (!((SAFE_HEAP_LOAD($0 + 4 | 0, 2, 0) | 0) & 4)) {
    $$074 = SAFE_HEAP_LOAD($0 + 11 >> 0 | 0, 1, 1) | 0 | 0; //@line 308
    $$075 = SAFE_HEAP_LOAD($0 + 10 >> 0 | 0, 1, 1) | 0 | 0; //@line 308
    $$076$in = $12 + 12 | 0; //@line 308
    $40 = 2; //@line 308
   } else {
    $$074 = SAFE_HEAP_LOAD($0 + 16 | 0, 2, 1) | 0 | 0; //@line 317
    $$075 = SAFE_HEAP_LOAD($0 + 14 | 0, 2, 1) | 0 | 0; //@line 317
    $$076$in = $12 + 18 | 0; //@line 317
    $40 = 3; //@line 317
   }
   if ($$075 >>> 0 < $$074 >>> 0) {
    $39 = $0 + ($40 * 6 | 0) | 0; //@line 321
    $$07277 = $$075; //@line 322
    do {
     $44 = _jmem_decompress_pointer(SAFE_HEAP_LOAD($39 + ($$07277 << 1) | 0, 2, 1) | 0 | 0) | 0; //@line 327
     if (($44 | 0) == ($0 | 0)) {
      $$sink = $11; //@line 330
     } else {
      $$sink = _snapshot_add_compiled_code($44, $1, $2, $3) | 0; //@line 333
     }
     SAFE_HEAP_STORE($$076$in + ($$07277 << 1) | 0, $$sink | 0, 2);
     $$07277 = $$07277 + 1 | 0; //@line 337
    } while (($$07277 | 0) != ($$074 | 0));
    $$1 = $11; //@line 340
   } else {
    $$1 = $11; //@line 347
   }
  } else {
   $$1 = 0; //@line 350
  }
 } while (0);
 return $$1 | 0; //@line 353
}
function _jerry_parse_and_save_snapshot_with_args($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $23 = 0, $32 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 188
 STACKTOP = STACKTOP + 48 | 0; //@line 189
 $8 = sp + 40 | 0; //@line 190
 $9 = sp + 32 | 0; //@line 191
 $10 = sp + 8 | 0; //@line 192
 $11 = sp + 4 | 0; //@line 193
 $12 = sp; //@line 194
 SAFE_HEAP_STORE($8 | 0, 24 | 0, 4);
 $13 = $8 + 4 | 0; //@line 196
 SAFE_HEAP_STORE($13 >> 0 | 0, 0 | 0, 1);
 SAFE_HEAP_STORE($8 + 5 >> 0 | 0, 0 | 0, 1);
 if ((_parser_parse_script($2, $3, $0, $1, $5, $9) | 0) == 24) {
  _ecma_free_value(SAFE_HEAP_LOAD(134113 * 4 | 0, 4, 0) | 0 | 0); //@line 204
  $$1 = 0; //@line 205
 } else {
  _snapshot_add_compiled_code(SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0, $6, $7, $8) | 0; //@line 208
  if (!(SAFE_HEAP_LOAD($13 >> 0 | 0, 1, 0) | 0)) {
   SAFE_HEAP_STORE($10 | 0, 1498567242 | 0, 4);
   SAFE_HEAP_STORE($10 + 4 | 0, 8 | 0, 4);
   SAFE_HEAP_STORE($10 + 8 | 0, 0 | 0, 4);
   $23 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0; //@line 217
   SAFE_HEAP_STORE($10 + 12 | 0, $23 | 0, 4);
   SAFE_HEAP_STORE($10 + 16 | 0, 1 | 0, 4);
   SAFE_HEAP_STORE($10 + 20 | 0, ($4 ? 24 : 25) | 0, 4);
   SAFE_HEAP_STORE($11 | 0, 0 | 0, 4);
   if (_ecma_save_literals_for_snapshot($6, $7, $8, $11, $12) | 0) {
    _jerry_snapshot_set_offsets($6 + 24 | 0, $23 + -24 | 0, SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0); //@line 231
    if ($7 >>> 0 >= 24) {
     _memcpy($6 | 0, $10 | 0, 24) | 0; //@line 234
    }
    $32 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0; //@line 236
    if ($32 | 0) {
     _jmem_heap_free_block($32, (SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0) << 2); //@line 241
    }
    _ecma_bytecode_deref(SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0); //@line 244
    $$0 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0; //@line 246
   } else {
    $$0 = 0; //@line 248
   }
   $$1 = $$0; //@line 250
  } else {
   $$1 = 0; //@line 252
  }
 }
 STACKTOP = sp; //@line 255
 return $$1 | 0; //@line 255
}
function _ecma_op_function_construct($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$2 = 0, $$tr = 0, $10 = 0, $15 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $27 = 0, label = 0;
 $$tr = $0; //@line 10825
 L1 : while (1) {
  switch (_ecma_get_object_type($$tr) | 0) {
  case 2:
   {
    label = 3; //@line 10830
    break L1;
    break;
   }
  case 3:
   {
    label = 7; //@line 10835
    break L1;
    break;
   }
  default:
   {}
  }
  $10 = SAFE_HEAP_LOAD($$tr + 8 | 0, 4, 0) | 0 | 0; //@line 10843
  if (!(_ecma_is_constructor(_ecma_make_object_value($10) | 0) | 0)) {
   label = 9; //@line 10847
   break;
  }
  $15 = SAFE_HEAP_LOAD($$tr + 12 | 0, 4, 0) | 0 | 0; //@line 10851
  if (!(_ecma_is_value_integer_number($15) | 0)) {
   $$tr = $10; //@line 10854
   continue;
  }
  $17 = _ecma_get_integer_from_value($15) | 0; //@line 10857
  if ($17 >>> 0 > 1) {
   label = 12; //@line 10860
   break;
  } else {
   $$tr = $10; //@line 10863
  }
 }
 do {
  if ((label | 0) == 3) {
   if (_ecma_get_object_is_builtin($$tr) | 0) {
    if (!(_ecma_builtin_function_is_routine($$tr) | 0)) {
     $$2 = _ecma_builtin_dispatch_construct($$tr, $1, $2) | 0; //@line 10873
     break;
    }
   }
   $$2 = _ecma_op_function_construct_simple_or_external($$tr, $1, $2) | 0; //@line 10878
  } else if ((label | 0) == 7) {
   $$2 = _ecma_op_function_construct_simple_or_external($$tr, $1, $2) | 0; //@line 10882
  } else if ((label | 0) == 9) {
   $$2 = _ecma_raise_type_error(6002) | 0; //@line 10886
  } else if ((label | 0) == 12) {
   $19 = $17 + -1 | 0; //@line 10889
   $20 = $19 + $2 | 0; //@line 10890
   $21 = $20 << 2; //@line 10891
   $22 = _jmem_heap_alloc_block($21) | 0; //@line 10892
   _memcpy($22 | 0, $$tr + 20 | 0, $19 << 2 | 0) | 0; //@line 10895
   _memcpy($22 + ($19 << 2) | 0, $1 | 0, $2 << 2 | 0) | 0; //@line 10898
   $27 = _ecma_op_function_construct($10, $22, $20) | 0; //@line 10899
   if (!$22) {
    $$2 = $27; //@line 10902
   } else {
    _jmem_heap_free_block($22, $21); //@line 10904
    $$2 = $27; //@line 10905
   }
  }
 } while (0);
 return $$2 | 0; //@line 10909
}
function _ecma_new_values_collection($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$05864 = 0, $$05963 = 0, $$06062 = 0, $$1 = 0, $$161 = 0, $$sink = 0, $11 = 0, $14 = 0, $20 = 0, $3 = 0, $5 = 0, $storemerge = 0, label = 0;
 $3 = _jmem_pools_alloc(8) | 0; //@line 5698
 SAFE_HEAP_STORE($3 + 4 | 0, $1 | 0, 4);
 SAFE_HEAP_STORE($3 | 0, 0 | 0, 2);
 $5 = $3 + 2 | 0; //@line 5702
 SAFE_HEAP_STORE($5 | 0, 0 | 0, 2);
 if ($1 | 0) {
  $$05864 = 0; //@line 5706
  $$05963 = 0; //@line 5706
  $$06062 = 5; //@line 5706
  while (1) {
   if (($$06062 | 0) > 4) {
    $11 = _jmem_pools_alloc(24) | 0; //@line 5710
    $14 = ($11 | 0) == 0; //@line 5713
    if (!(SAFE_HEAP_LOAD($5 | 0, 2, 0) | 0)) {
     if ($14) {
      $$sink = 0; //@line 5716
     } else {
      $$sink = _jmem_compress_pointer($11) | 0; //@line 5719
     }
     SAFE_HEAP_STORE($3 | 0, $$sink | 0, 2);
     $storemerge = $$sink; //@line 5722
    } else {
     SAFE_HEAP_STORE($$05864 + 20 | 0, _ecma_make_collection_chunk_value($11) | 0 | 0, 4);
     if ($14) {
      $storemerge = 0; //@line 5728
     } else {
      $storemerge = _jmem_compress_pointer($11) | 0; //@line 5731
     }
    }
    SAFE_HEAP_STORE($5 | 0, $storemerge | 0, 2);
    $$1 = $11; //@line 5735
    $$161 = 0; //@line 5735
   } else {
    $$1 = $$05864; //@line 5737
    $$161 = $$06062; //@line 5737
   }
   $20 = SAFE_HEAP_LOAD($0 + ($$05963 << 2) | 0, 4, 0) | 0 | 0; //@line 5740
   if ($2) {
    label = 13; //@line 5742
   } else {
    if (_ecma_is_value_object($20) | 0) {
     $$0 = $20; //@line 5746
    } else {
     label = 13; //@line 5748
    }
   }
   if ((label | 0) == 13) {
    label = 0; //@line 5752
    $$0 = _ecma_copy_value($20) | 0; //@line 5754
   }
   $$06062 = $$161 + 1 | 0; //@line 5756
   SAFE_HEAP_STORE($$1 + ($$161 << 2) | 0, $$0 | 0, 4);
   $$05963 = $$05963 + 1 | 0; //@line 5759
   if (($$05963 | 0) == ($1 | 0)) {
    break;
   } else {
    $$05864 = $$1; //@line 5764
   }
  }
  SAFE_HEAP_STORE($$1 + ($$06062 << 2) | 0, _ecma_make_collection_chunk_value(0) | 0 | 0, 4);
 }
 return $3 | 0; //@line 5771
}
function _ecma_string_get_utf8_size($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i = 0, $$017$lcssa$i = 0, $$01720$i = 0, $$01819$i = 0, $$1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $28 = 0, $3 = 0, $30 = 0, $4 = 0;
 switch ((SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 7) {
 case 3:
  {
   $2 = $0 + 4 | 0; //@line 4994
   $3 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 4995
   $4 = $3 & 65535; //@line 4996
   if ($3 << 16 >> 16 == (SAFE_HEAP_LOAD($2 + 2 | 0, 2, 0) | 0 | 0)) {
    $$1 = $4; //@line 5001
   } else {
    $$1 = _lit_get_utf8_size_of_cesu8_string($0 + 8 | 0, $4) | 0; //@line 5005
   }
   break;
  }
 case 4:
  {
   $11 = SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0; //@line 5011
   $12 = $0 + 8 | 0; //@line 5012
   if (($11 | 0) == (SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0)) {
    $$1 = $11; //@line 5016
   } else {
    $$1 = _lit_get_utf8_size_of_cesu8_string($12, $11) | 0; //@line 5019
   }
   break;
  }
 case 0:
  {
   $17 = SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0; //@line 5025
   if ($17 >>> 0 < 100) {
    $$0$lcssa$i = 1; //@line 5028
    $$017$lcssa$i = 1; //@line 5028
   } else {
    $$01720$i = 1; //@line 5030
    $$01819$i = 100; //@line 5030
    while (1) {
     $19 = $$01819$i * 100 | 0; //@line 5032
     $20 = $$01720$i + 2 | 0; //@line 5033
     if ($20 >>> 0 > 8 | $19 >>> 0 > $17 >>> 0) {
      $$0$lcssa$i = $$01819$i; //@line 5038
      $$017$lcssa$i = $20; //@line 5038
      break;
     } else {
      $$01720$i = $20; //@line 5041
      $$01819$i = $19; //@line 5041
     }
    }
   }
   $$1 = (($$0$lcssa$i * 10 | 0) >>> 0 <= $17 >>> 0 & 1) + $$017$lcssa$i | 0; //@line 5049
   break;
  }
 case 1:
  {
   $$1 = _lit_get_magic_string_size(SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0) | 0; //@line 5056
   break;
  }
 default:
  {
   $28 = $0 + 4 | 0; //@line 5060
   $30 = _lit_get_magic_string_ex_utf8(SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0) | 0; //@line 5062
   $$1 = _lit_get_utf8_size_of_cesu8_string($30, _lit_get_magic_string_ex_size(SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0) | 0) | 0; //@line 5066
  }
 }
 return $$1 | 0; //@line 5069
}
function _nextafter($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $$0 = 0.0, $14 = 0, $16 = 0, $2 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $44 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $8 = 0, $or$cond = 0, label = 0;
 SAFE_HEAP_STORE_D(tempDoublePtr | 0, +$0, 8);
 $2 = SAFE_HEAP_LOAD(tempDoublePtr | 0, 4, 0) | 0 | 0; //@line 5621
 $3 = SAFE_HEAP_LOAD(tempDoublePtr + 4 | 0, 4, 0) | 0 | 0; //@line 5622
 SAFE_HEAP_STORE_D(tempDoublePtr | 0, +$1, 8);
 $4 = SAFE_HEAP_LOAD(tempDoublePtr | 0, 4, 0) | 0 | 0; //@line 5623
 $5 = SAFE_HEAP_LOAD(tempDoublePtr + 4 | 0, 4, 0) | 0 | 0; //@line 5624
 $6 = ___DOUBLE_BITS_317($0) | 0; //@line 5625
 $8 = tempRet0 & 2147483647; //@line 5627
 do {
  if ($8 >>> 0 > 2146435072 | ($8 | 0) == 2146435072 & $6 >>> 0 > 0) {
   label = 3; //@line 5635
  } else {
   $14 = ___DOUBLE_BITS_317($1) | 0; //@line 5637
   $16 = tempRet0 & 2147483647; //@line 5639
   if ($16 >>> 0 > 2146435072 | ($16 | 0) == 2146435072 & $14 >>> 0 > 0) {
    label = 3; //@line 5646
   } else {
    if (($2 | 0) == ($4 | 0) & ($3 | 0) == ($5 | 0)) {
     $$0 = $1; //@line 5652
    } else {
     $26 = $3 & 2147483647; //@line 5654
     $27 = $5 & 2147483647; //@line 5655
     if (($2 | 0) == 0 & ($26 | 0) == 0) {
      if (($4 | 0) == 0 & ($27 | 0) == 0) {
       $$0 = $1; //@line 5664
       break;
      }
      $47 = $5 & -2147483648; //@line 5668
      $48 = 1; //@line 5668
     } else {
      $4 ^ $2; //@line 5675
      $or$cond = $26 >>> 0 > $27 >>> 0 | ($26 | 0) == ($27 | 0) & $2 >>> 0 > $4 >>> 0 | ($5 ^ $3 | 0) < 0; //@line 5678
      $44 = _i64Add(($or$cond ? -1 : 1) | 0, ($or$cond ? -1 : 0) | 0, $2 | 0, $3 | 0) | 0; //@line 5681
      $47 = tempRet0; //@line 5683
      $48 = $44; //@line 5683
     }
     SAFE_HEAP_STORE(tempDoublePtr | 0, $48 | 0, 4);
     SAFE_HEAP_STORE(tempDoublePtr + 4 | 0, $47 | 0, 4);
     $$0 = +(+SAFE_HEAP_LOAD_D(tempDoublePtr | 0, 8)); //@line 5686
    }
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $$0 = $0 + $1; //@line 5693
 }
 return +$$0;
}
function _ecma_op_abstract_relational_compare($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $10 = 0, $13 = 0, $15 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6609
 STACKTOP = STACKTOP + 16 | 0; //@line 6610
 $3 = sp + 8 | 0; //@line 6611
 $4 = sp; //@line 6612
 $5 = _ecma_op_to_primitive($0, 1) | 0; //@line 6613
 if (($5 | 0) == 24) {
  $$4 = 24; //@line 6616
 } else {
  $7 = _ecma_op_to_primitive($1, 1) | 0; //@line 6618
  if (($7 | 0) == 24) {
   $$3 = 24; //@line 6621
  } else {
   $9 = $2 ? $5 : $7; //@line 6623
   $10 = $2 ? $7 : $5; //@line 6624
   if (_ecma_is_value_string($9) | 0) {
    if (_ecma_is_value_string($10) | 0) {
     $25 = _ecma_get_string_from_value($9) | 0; //@line 6629
     $$2 = _ecma_make_boolean_value(_ecma_compare_ecma_strings_relational($25, _ecma_get_string_from_value($10) | 0) | 0) | 0; //@line 6633
    } else {
     label = 5; //@line 6635
    }
   } else {
    label = 5; //@line 6638
   }
   if ((label | 0) == 5) {
    $13 = _ecma_get_number($9, $3) | 0; //@line 6641
    if (_ecma_is_value_empty($13) | 0) {
     $15 = _ecma_get_number($10, $4) | 0; //@line 6644
     if (_ecma_is_value_empty($15) | 0) {
      if (_ecma_number_is_nan(+(+SAFE_HEAP_LOAD_D($3 | 0, 8))) | 0) {
       $$0 = 72; //@line 6650
      } else {
       if (_ecma_number_is_nan(+(+SAFE_HEAP_LOAD_D($4 | 0, 8))) | 0) {
        $$0 = 72; //@line 6655
       } else {
        $$0 = _ecma_make_boolean_value(+(+SAFE_HEAP_LOAD_D($3 | 0, 8)) < +(+SAFE_HEAP_LOAD_D($4 | 0, 8))) | 0; //@line 6661
       }
      }
     } else {
      $$0 = $15; //@line 6665
     }
     $$1 = $$0; //@line 6667
    } else {
     $$1 = $13; //@line 6669
    }
    $$2 = $$1; //@line 6671
   }
   _ecma_free_value($7); //@line 6673
   $$3 = $$2; //@line 6674
  }
  _ecma_free_value($5); //@line 6676
  $$4 = $$3; //@line 6677
 }
 STACKTOP = sp; //@line 6679
 return $$4 | 0; //@line 6679
}
function _ecma_builtin_function_prototype_object_bind($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$05559 = 0, $$05658 = 0, $$057 = 0, $12 = 0, $18 = 0, $22 = 0, $5 = 0, $8 = 0, label = 0;
 if (_ecma_op_is_callable($0) | 0) {
  $5 = _ecma_builtin_get(2) | 0; //@line 3611
  switch ($2 | 0) {
  case 0:
   {
    label = 5; //@line 3614
    break;
   }
  case 1:
   {
    if (_ecma_is_value_integer_number(SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) | 0) {
     label = 7; //@line 3621
    } else {
     label = 5; //@line 3623
    }
    break;
   }
  default:
   {
    label = 7; //@line 3628
   }
  }
  if ((label | 0) == 5) {
   $8 = _ecma_create_object($5, 16, 5) | 0; //@line 3632
   SAFE_HEAP_STORE($8 + 8 | 0, _ecma_get_object_from_value($0) | 0 | 0, 4);
   $12 = $8 + 12 | 0; //@line 3637
   SAFE_HEAP_STORE($12 | 0, 72 | 0, 4);
   if (!$2) {
    $$057 = $8; //@line 3641
   } else {
    SAFE_HEAP_STORE($12 | 0, _ecma_copy_value_if_not_object(SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) | 0 | 0, 4);
    $$057 = $8; //@line 3646
   }
  } else if ((label | 0) == 7) {
   $18 = _ecma_create_object($5, ($2 << 2) + 16 | 0, 5) | 0; //@line 3652
   SAFE_HEAP_STORE($18 + 8 | 0, _ecma_get_object_from_value($0) | 0 | 0, 4);
   $22 = $18 + 12 | 0; //@line 3657
   SAFE_HEAP_STORE($22 | 0, 72 | 0, 4);
   $$05559 = 0; //@line 3660
   $$05658 = $18 + 16 | 0; //@line 3660
   while (1) {
    SAFE_HEAP_STORE($$05658 | 0, _ecma_copy_value_if_not_object(SAFE_HEAP_LOAD($1 + ($$05559 << 2) | 0, 4, 0) | 0 | 0) | 0 | 0, 4);
    $$05559 = $$05559 + 1 | 0; //@line 3667
    if (($$05559 | 0) == ($2 | 0)) {
     break;
    } else {
     $$05658 = $$05658 + 4 | 0; //@line 3672
    }
   }
   SAFE_HEAP_STORE($22 | 0, _ecma_make_integer_value($2) | 0 | 0, 4);
   $$057 = $18; //@line 3677
  }
  _ecma_deref_object($5); //@line 3679
  $$0 = _ecma_make_object_value($$057) | 0; //@line 3681
 } else {
  $$0 = _ecma_raise_type_error(6161) | 0; //@line 3684
 }
 return $$0 | 0; //@line 3686
}
function _ecma_builtin_object_object_seal($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$02 = 0, $$0351 = 0, $$1 = 0, $$2 = 0, $$4 = 0, $1 = 0, $10 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 5701
 STACKTOP = STACKTOP + 16 | 0; //@line 5702
 $1 = sp; //@line 5703
 if (_ecma_is_value_object($0) | 0) {
  $4 = _ecma_get_object_from_value($0) | 0; //@line 5706
  $5 = _ecma_op_object_get_property_names($4, 0, 0, 0) | 0; //@line 5707
  $6 = _ecma_collection_iterator_init($5) | 0; //@line 5708
  L3 : do {
   if (!$6) {
    $$0$lcssa = 8; //@line 5712
   } else {
    $$02 = 8; //@line 5714
    $$0351 = $6; //@line 5714
    while (1) {
     if (!(_ecma_is_value_empty($$02) | 0)) {
      $$0$lcssa = $$02; //@line 5718
      break L3;
     }
     $10 = _ecma_get_string_from_value(SAFE_HEAP_LOAD($$0351 | 0, 4, 0) | 0 | 0) | 0; //@line 5722
     $$0351 = _ecma_collection_iterator_next($$0351) | 0; //@line 5723
     if (_ecma_op_object_get_own_property_descriptor($4, $10, $1) | 0) {
      SAFE_HEAP_STORE($1 | 0, (SAFE_HEAP_LOAD($1 | 0, 2, 0) | 0) & -257 | 0, 2);
      $15 = _ecma_op_object_define_own_property($4, $10, $1, 1) | 0; //@line 5729
      if (($15 | 0) == 24) {
       $$1 = 24; //@line 5732
      } else {
       _ecma_free_value($15); //@line 5734
       $$1 = $$02; //@line 5735
      }
      _ecma_free_property_descriptor($1); //@line 5737
      $$2 = $$1; //@line 5738
     } else {
      $$2 = $$02; //@line 5740
     }
     if (!$$0351) {
      $$0$lcssa = $$2; //@line 5744
      break;
     } else {
      $$02 = $$2; //@line 5747
     }
    }
   }
  } while (0);
  _ecma_free_values_collection($5, 1); //@line 5752
  if (_ecma_is_value_empty($$0$lcssa) | 0) {
   _ecma_set_object_extensible($4, 0); //@line 5755
   $$4 = _ecma_copy_value($0) | 0; //@line 5757
  } else {
   $$4 = $$0$lcssa; //@line 5759
  }
 } else {
  $$4 = _ecma_raise_type_error(6512) | 0; //@line 5763
 }
 STACKTOP = sp; //@line 5765
 return $$4 | 0; //@line 5765
}
function _ecma_new_ecma_string_from_utf8($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$050 = 0, $$051 = 0, $$3 = 0, $13 = 0, $19 = 0, $2 = 0, $20 = 0, $27 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 3387
 STACKTOP = STACKTOP + 16 | 0; //@line 3388
 $2 = sp; //@line 3389
 $3 = _lit_is_utf8_string_magic($0, $1) | 0; //@line 3390
 L1 : do {
  if (($3 | 0) == 82) {
   do {
    if (((SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0) + -48 & 255) < 10) {
     if (_ecma_string_to_array_index($0, $1, $2) | 0) {
      $$3 = _ecma_new_ecma_string_from_uint32(SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0) | 0; //@line 3403
      break L1;
     } else {
      break;
     }
    }
   } while (0);
   if (_lit_get_magic_string_ex_count() | 0) {
    $13 = _lit_is_ex_utf8_string_magic($0, $1) | 0; //@line 3413
    if ($13 >>> 0 < (_lit_get_magic_string_ex_count() | 0) >>> 0) {
     $$3 = _ecma_get_magic_string_ex($13) | 0; //@line 3418
     break;
    }
   }
   if ($1 >>> 0 < 65536) {
    $19 = _ecma_alloc_string_buffer($1 + 8 | 0) | 0; //@line 3425
    SAFE_HEAP_STORE($19 | 0, 11 | 0, 2);
    $20 = $19 + 4 | 0; //@line 3427
    SAFE_HEAP_STORE($20 | 0, 0 | 0, 4);
    SAFE_HEAP_STORE($20 | 0, $1 | 0, 2);
    SAFE_HEAP_STORE($20 + 2 | 0, _lit_utf8_string_length($0, $1) | 0 | 0, 2);
    $$050 = $19 + 8 | 0; //@line 3436
    $$051 = $19; //@line 3436
   } else {
    $27 = _ecma_alloc_string_buffer($1 + 12 | 0) | 0; //@line 3439
    SAFE_HEAP_STORE($27 | 0, 12 | 0, 2);
    SAFE_HEAP_STORE($27 + 4 | 0, $1 | 0, 4);
    SAFE_HEAP_STORE($27 + 8 | 0, _lit_utf8_string_length($0, $1) | 0 | 0, 4);
    $$050 = $27 + 12 | 0; //@line 3447
    $$051 = $27; //@line 3447
   }
   SAFE_HEAP_STORE($$051 + 2 | 0, _lit_utf8_string_calc_hash($0, $1) | 0 | 0, 2);
   _memcpy($$050 | 0, $0 | 0, $1 | 0) | 0; //@line 3452
   $$3 = $$051; //@line 3453
  } else {
   $$3 = _ecma_get_magic_string($3) | 0; //@line 3456
  }
 } while (0);
 STACKTOP = sp; //@line 3459
 return $$3 | 0; //@line 3459
}
function _ecma_op_resolve_reference_value($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$04659 = 0, $$7 = 0, $13 = 0, $14 = 0, $19 = 0, $25 = 0, $29 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6814
 STACKTOP = STACKTOP + 16 | 0; //@line 6815
 $vararg_buffer = sp; //@line 6816
 L1 : do {
  if (!$0) {
   label = 12; //@line 6820
  } else {
   $$04659 = $0; //@line 6822
   while (1) {
    if ((_ecma_get_lex_env_type($$04659) | 0) == 13) {
     $5 = _ecma_find_named_property($$04659, $1) | 0; //@line 6827
     if ($5 | 0) {
      label = 4; //@line 6830
      break;
     }
    } else {
     $13 = _ecma_get_lex_env_binding_object($$04659) | 0; //@line 6834
     $14 = _ecma_lcache_lookup($13, $1) | 0; //@line 6835
     if ($14 | 0) {
      break;
     }
     $29 = _ecma_op_object_find($13, $1) | 0; //@line 6840
     if (_ecma_is_value_found($29) | 0) {
      $$7 = $29; //@line 6843
      break L1;
     }
    }
    $$04659 = _ecma_get_lex_env_outer_reference($$04659) | 0; //@line 6847
    if (!$$04659) {
     label = 12; //@line 6850
     break L1;
    }
   }
   if ((label | 0) == 4) {
    $$7 = _ecma_fast_copy_value(SAFE_HEAP_LOAD($5 + 7 & -4 | 0, 4, 0) | 0 | 0) | 0; //@line 6863
    break;
   }
   $19 = $14 + 7 & -4; //@line 6869
   if (((SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0) & 3) == 1) {
    $$7 = _ecma_fast_copy_value(SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0) | 0; //@line 6876
    break;
   }
   $25 = _ecma_get_named_accessor_property_getter($19) | 0; //@line 6879
   if (!$25) {
    $$7 = 72; //@line 6882
   } else {
    $$7 = _ecma_op_function_call($25, _ecma_make_object_value($13) | 0, 0, 0) | 0; //@line 6886
   }
  }
 } while (0);
 if ((label | 0) == 12) {
  SAFE_HEAP_STORE($vararg_buffer | 0, _ecma_make_string_value($1) | 0 | 0, 4);
  $$7 = _ecma_raise_standard_error_with_format(3, 6539, $vararg_buffer) | 0; //@line 6894
 }
 STACKTOP = sp; //@line 6896
 return $$7 | 0; //@line 6896
}
function _lit_is_ex_utf8_string_pair_magic($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$052$be = 0, $$05271 = 0, $$057$be = 0, $$05770 = 0, $$5 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $5 = 0;
 $4 = SAFE_HEAP_LOAD(134114 * 4 | 0, 4, 0) | 0 | 0; //@line 15264
 $5 = $3 + $1 | 0; //@line 15265
 L1 : do {
  if (!$4) {
   $$5 = 0; //@line 15269
  } else {
   if ($5 >>> 0 > (_lit_get_magic_string_ex_size($4 + -1 | 0) | 0) >>> 0) {
    $$5 = $4; //@line 15275
   } else {
    $$05271 = 0; //@line 15277
    $$05770 = $4; //@line 15277
    while (1) {
     $11 = ($$05271 + $$05770 | 0) >>> 1; //@line 15280
     $12 = _lit_get_magic_string_ex_utf8($11) | 0; //@line 15281
     $13 = _lit_get_magic_string_ex_size($11) | 0; //@line 15282
     do {
      if (($5 | 0) == ($13 | 0)) {
       $15 = _memcmp($12, $0, $1) | 0; //@line 15286
       if (!$15) {
        $20 = _memcmp($12 + $1 | 0, $2, $3) | 0; //@line 15290
        $22 = ($20 | 0) < 0; //@line 15292
        if (!$20) {
         $$5 = $11; //@line 15297
         break L1;
        } else {
         $$052$be = $22 ? $11 + 1 | 0 : $$05271; //@line 15300
         $$057$be = $22 ? $$05770 : $11; //@line 15300
         break;
        }
       } else {
        $17 = ($15 | 0) < 0; //@line 15304
        $$052$be = $17 ? $11 + 1 | 0 : $$05271; //@line 15308
        $$057$be = $17 ? $$05770 : $11; //@line 15308
        break;
       }
      } else {
       $24 = $5 >>> 0 > $13 >>> 0; //@line 15312
       $$052$be = $24 ? $11 + 1 | 0 : $$05271; //@line 15316
       $$057$be = $24 ? $$05770 : $11; //@line 15316
      }
     } while (0);
     if ($$052$be >>> 0 < $$057$be >>> 0) {
      $$05271 = $$052$be; //@line 15321
      $$05770 = $$057$be; //@line 15321
     } else {
      $$5 = $4; //@line 15323
      break;
     }
    }
   }
  }
 } while (0);
 return $$5 | 0; //@line 15330
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 5958
 value = value & 255; //@line 5960
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   SAFE_HEAP_STORE(ptr | 0, value | 0, 1); //@line 5963
   ptr = ptr + 1 | 0; //@line 5964
  }
  aligned_end = end & -4 | 0; //@line 5967
  block_aligned_end = aligned_end - 64 | 0; //@line 5968
  value4 = value | value << 8 | value << 16 | value << 24; //@line 5969
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   SAFE_HEAP_STORE(ptr | 0, value4 | 0, 4); //@line 5972
   SAFE_HEAP_STORE(ptr + 4 | 0, value4 | 0, 4); //@line 5973
   SAFE_HEAP_STORE(ptr + 8 | 0, value4 | 0, 4); //@line 5974
   SAFE_HEAP_STORE(ptr + 12 | 0, value4 | 0, 4); //@line 5975
   SAFE_HEAP_STORE(ptr + 16 | 0, value4 | 0, 4); //@line 5976
   SAFE_HEAP_STORE(ptr + 20 | 0, value4 | 0, 4); //@line 5977
   SAFE_HEAP_STORE(ptr + 24 | 0, value4 | 0, 4); //@line 5978
   SAFE_HEAP_STORE(ptr + 28 | 0, value4 | 0, 4); //@line 5979
   SAFE_HEAP_STORE(ptr + 32 | 0, value4 | 0, 4); //@line 5980
   SAFE_HEAP_STORE(ptr + 36 | 0, value4 | 0, 4); //@line 5981
   SAFE_HEAP_STORE(ptr + 40 | 0, value4 | 0, 4); //@line 5982
   SAFE_HEAP_STORE(ptr + 44 | 0, value4 | 0, 4); //@line 5983
   SAFE_HEAP_STORE(ptr + 48 | 0, value4 | 0, 4); //@line 5984
   SAFE_HEAP_STORE(ptr + 52 | 0, value4 | 0, 4); //@line 5985
   SAFE_HEAP_STORE(ptr + 56 | 0, value4 | 0, 4); //@line 5986
   SAFE_HEAP_STORE(ptr + 60 | 0, value4 | 0, 4); //@line 5987
   ptr = ptr + 64 | 0; //@line 5988
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   SAFE_HEAP_STORE(ptr | 0, value4 | 0, 4); //@line 5992
   ptr = ptr + 4 | 0; //@line 5993
  }
 }
 while ((ptr | 0) < (end | 0)) {
  SAFE_HEAP_STORE(ptr | 0, value | 0, 1); //@line 5998
  ptr = ptr + 1 | 0; //@line 5999
 }
 return end - num | 0; //@line 6001
}
function _vm_op_set_value($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$142 = 0, $$144 = 0, $$3 = 0, $10 = 0, $12 = 0, $13 = 0, $5 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3032
 STACKTOP = STACKTOP + 16 | 0; //@line 3033
 $vararg_buffer = sp; //@line 3034
 if (_ecma_is_value_object($0) | 0) {
  $$142 = $0; //@line 3037
  label = 4; //@line 3038
 } else {
  $5 = _ecma_op_to_object($0) | 0; //@line 3040
  _ecma_free_value($0); //@line 3041
  if (($5 | 0) == 24) {
   _ecma_free_value(24); //@line 3044
   _ecma_free_value(SAFE_HEAP_LOAD(134113 * 4 | 0, 4, 0) | 0 | 0); //@line 3046
   SAFE_HEAP_STORE($vararg_buffer | 0, $1 | 0, 4);
   SAFE_HEAP_STORE($vararg_buffer + 4 | 0, $0 | 0, 4);
   $8 = _ecma_raise_standard_error_with_format(5, 6068, $vararg_buffer) | 0; //@line 3050
   _ecma_free_value($1); //@line 3051
   $$3 = $8; //@line 3052
  } else {
   $$142 = $5; //@line 3054
   label = 4; //@line 3055
  }
 }
 do {
  if ((label | 0) == 4) {
   if (_ecma_is_value_string($1) | 0) {
    $$144 = $1; //@line 3062
   } else {
    $10 = _ecma_op_to_string($1) | 0; //@line 3064
    _ecma_fast_free_value($1); //@line 3065
    if (($10 | 0) == 24) {
     _ecma_free_value($$142); //@line 3068
     $$3 = 24; //@line 3069
     break;
    } else {
     $$144 = $10; //@line 3072
    }
   }
   $12 = _ecma_get_object_from_value($$142) | 0; //@line 3075
   $13 = _ecma_get_string_from_value($$144) | 0; //@line 3076
   if (_ecma_is_lexical_environment($12) | 0) {
    $$0 = _ecma_op_set_mutable_binding($12, $13, $2, $3) | 0; //@line 3080
   } else {
    $$0 = _ecma_op_object_put($12, $13, $2, $3) | 0; //@line 3083
   }
   _ecma_free_value($$142); //@line 3085
   _ecma_free_value($$144); //@line 3086
   $$3 = $$0; //@line 3087
  }
 } while (0);
 STACKTOP = sp; //@line 3090
 return $$3 | 0; //@line 3090
}
function _ecma_builtin_helper_object_to_string($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$134 = 0, $1 = 0, $14 = 0, $16 = 0, $17 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8403
 STACKTOP = STACKTOP + 32 | 0; //@line 8404
 $1 = sp; //@line 8405
 if (_ecma_is_value_undefined($0) | 0) {
  $$134 = 52; //@line 8408
  label = 5; //@line 8409
 } else {
  if (_ecma_is_value_null($0) | 0) {
   $$134 = 10; //@line 8413
   label = 5; //@line 8414
  } else {
   $4 = _ecma_op_to_object($0) | 0; //@line 8416
   if (($4 | 0) == 24) {
    $$1 = 24; //@line 8419
   } else {
    $7 = _ecma_object_get_class_name(_ecma_get_object_from_value($4) | 0) | 0; //@line 8422
    _ecma_free_value($4); //@line 8423
    $$134 = $7; //@line 8424
    label = 5; //@line 8425
   }
  }
 }
 if ((label | 0) == 5) {
  $8 = _llvm_stacksave() | 0; //@line 8430
  $9 = STACKTOP; //@line 8431
  STACKTOP = STACKTOP + 32 | 0; //@line 8431
  SAFE_HEAP_STORE($1 | 0, 4 | 0, 4);
  SAFE_HEAP_STORE($1 + 4 | 0, 35 | 0, 4);
  SAFE_HEAP_STORE($1 + 8 | 0, 1 | 0, 4);
  SAFE_HEAP_STORE($1 + 12 | 0, $$134 | 0, 4);
  SAFE_HEAP_STORE($1 + 16 | 0, 5 | 0, 4);
  $14 = $9; //@line 8441
  $16 = $9 + 27 | 0; //@line 8443
  $17 = _lit_copy_magic_string_to_buffer(4, $9, 27) | 0; //@line 8444
  $23 = 1; //@line 8446
  $25 = $17; //@line 8446
  $26 = $17; //@line 8446
  do {
   $26 = _lit_copy_magic_string_to_buffer(SAFE_HEAP_LOAD($1 + ($23 << 2) | 0, 4, 0) | 0 | 0, $26, $16 - $25 | 0) | 0; //@line 8451
   $23 = $23 + 1 | 0; //@line 8452
   $25 = $26; //@line 8453
  } while (($23 | 0) != 5);
  $22 = _ecma_make_string_value(_ecma_new_ecma_string_from_utf8($9, $25 - $14 | 0) | 0) | 0; //@line 8463
  _llvm_stackrestore($8 | 0); //@line 8464
  $$1 = $22; //@line 8465
 }
 STACKTOP = sp; //@line 8467
 return $$1 | 0; //@line 8467
}
function _ecma_builtin_object_object_is_frozen($0) {
 $0 = $0 | 0;
 var $$027 = 0, $$028 = 0, $$029 = 0, $10 = 0, $14 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, label = 0;
 L1 : do {
  if (_ecma_is_value_object($0) | 0) {
   $3 = _ecma_get_object_from_value($0) | 0; //@line 5923
   if (_ecma_get_object_extensible($3) | 0) {
    $$027 = 40; //@line 5926
   } else {
    $5 = _ecma_op_object_get_property_names($3, 0, 0, 0) | 0; //@line 5928
    $6 = _ecma_collection_iterator_init($5) | 0; //@line 5929
    do {
     if (!$6) {
      _ecma_free_values_collection($5, 1); //@line 5933
     } else {
      $$028 = 1; //@line 5935
      $$029 = $6; //@line 5935
      while (1) {
       $8 = _ecma_get_string_from_value(SAFE_HEAP_LOAD($$029 | 0, 4, 0) | 0 | 0) | 0; //@line 5938
       $$029 = _ecma_collection_iterator_next($$029) | 0; //@line 5939
       $10 = _ecma_op_object_get_own_property($3, $8, 0, 0) | 0; //@line 5940
       if (($10 & 3) != 2) {
        if (_ecma_is_property_writable($10) | 0) {
         label = 8; //@line 5946
         break;
        }
       }
       $14 = _ecma_is_property_configurable($10) | 0; //@line 5950
       $$028 = $14 ? 0 : $$028; //@line 5951
       if (!(($$029 | 0) != 0 & ($14 ^ 1))) {
        label = 10; //@line 5958
        break;
       }
      }
      if ((label | 0) == 8) {
       _ecma_free_values_collection($5, 1); //@line 5963
       $$027 = 40; //@line 5964
       break L1;
      } else if ((label | 0) == 10) {
       _ecma_free_values_collection($5, 1); //@line 5970
       if (!($$028 & 1)) {
        $$027 = 40; //@line 5972
        break L1;
       } else {
        break;
       }
      }
     }
    } while (0);
    $$027 = 56; //@line 5980
   }
  } else {
   $$027 = _ecma_raise_type_error(6512) | 0; //@line 5984
  }
 } while (0);
 return $$027 | 0; //@line 5987
}
function _ecma_property_hashmap_delete($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$054 = 0, $$3 = 0, $10 = 0, $17 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $32 = 0, $33 = 0, $37 = 0, $41 = 0, $6 = 0, $7 = 0, $9 = 0;
 $6 = _jmem_decompress_pointer(SAFE_HEAP_LOAD($0 + 4 | 0, 2, 1) | 0 | 0) | 0; //@line 8254
 $7 = $6 + 12 | 0; //@line 8255
 $9 = (SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0) + 1 | 0; //@line 8257
 SAFE_HEAP_STORE($7 | 0, $9 | 0, 4);
 $10 = $6 + 4 | 0; //@line 8259
 if ($9 >>> 0 > ((SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0) * 3 | 0) >>> 2 >>> 0) {
  $$3 = 2; //@line 8265
 } else {
  $17 = (_ecma_string_get_property_name_hash(SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0, $1) | 0) & 65535; //@line 8269
  $21 = SAFE_HEAP_LOAD(3867 + ($17 & 7) >> 0 | 0, 1, 1) | 0 | 0; //@line 8273
  $22 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0; //@line 8274
  $23 = $22 + -1 | 0; //@line 8275
  $24 = $6 + 16 | 0; //@line 8276
  $25 = $24 + ($22 << 1) | 0; //@line 8277
  if ($23 >>> 0 < 65536) {
   $$054 = $23 & $17; //@line 8281
  } else {
   $$054 = $17 << (SAFE_HEAP_LOAD($6 + 1 >> 0 | 0, 1, 1) | 0 | 0); //@line 8287
  }
  while (1) {
   $32 = $24 + ($$054 << 1) | 0; //@line 8290
   $33 = SAFE_HEAP_LOAD($32 | 0, 2, 0) | 0 | 0; //@line 8291
   if ($33 << 16 >> 16) {
    $37 = $25 + ($$054 >>> 3) | 0; //@line 8296
    $41 = 1 << ($$054 & 7); //@line 8300
    $$ = ((SAFE_HEAP_LOAD($37 >> 0 | 0, 1, 1) | 0 | 0) & $41 | 0) != 0 & 1; //@line 8303
    if (((_jmem_decompress_pointer($33 & 65535) | 0) + $$ | 0) == ($2 | 0)) {
     break;
    }
   }
   $$054 = $$054 + $21 & $23; //@line 8313
  }
  SAFE_HEAP_STORE($32 | 0, 0 | 0, 2);
  SAFE_HEAP_STORE($37 >> 0 | 0, SAFE_HEAP_LOAD($37 >> 0 | 0, 1, 1) | 0 | 0 | $41 | 0, 1);
  $$3 = 1; //@line 8321
 }
 return $$3 | 0; //@line 8323
}
function _lit_convert_cesu8_string_to_utf8_string($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$04350 = 0, $$04449 = 0, $$04548 = 0, $$046$lcssa = 0, $$04647 = 0, $$051 = 0, $$sink = 0, $16 = 0, $4 = 0, $5 = 0, label = 0, sp = 0, $$04449$looptemp = 0, $$04548$looptemp = 0;
 sp = STACKTOP; //@line 16084
 STACKTOP = STACKTOP + 16 | 0; //@line 16085
 $4 = sp; //@line 16086
 $5 = $0 + $1 | 0; //@line 16087
 if (($1 | 0) > 0) {
  $$04350 = $2; //@line 16090
  $$04449 = 0; //@line 16090
  $$04548 = 0; //@line 16090
  $$04647 = 0; //@line 16090
  $$051 = $0; //@line 16090
  while (1) {
   $$04449$looptemp = $$04449;
   $$04449 = _lit_read_code_unit_from_utf8($$051, $4) | 0; //@line 16092
   $$04548$looptemp = $$04548;
   $$04548 = SAFE_HEAP_LOAD($4 | 0, 2, 0) | 0 | 0; //@line 16093
   if (_lit_is_code_point_utf16_low_surrogate($$04548 & 65535) | 0) {
    if (_lit_is_code_point_utf16_high_surrogate($$04548$looptemp & 65535) | 0) {
     _lit_code_point_to_utf8(_lit_convert_surrogate_pair_to_code_point($$04548$looptemp, $$04548) | 0, $$04350 + (0 - $$04449$looptemp) | 0) | 0; //@line 16103
     $$sink = 1; //@line 16104
    } else {
     label = 6; //@line 16106
    }
   } else {
    label = 6; //@line 16109
   }
   if ((label | 0) == 6) {
    label = 0; //@line 16112
    _memcpy($$04350 | 0, $$051 | 0, $$04449 | 0) | 0; //@line 16113
    $$sink = $$04449; //@line 16114
   }
   $16 = $$sink + $$04647 | 0; //@line 16116
   $$051 = $$051 + $$04449 | 0; //@line 16118
   if ($$051 >>> 0 >= $5 >>> 0) {
    $$046$lcssa = $16; //@line 16123
    break;
   } else {
    $$04350 = $2 + $16 | 0; //@line 16121
    $$04647 = $16; //@line 16121
   }
  }
 } else {
  $$046$lcssa = 0; //@line 16128
 }
 STACKTOP = sp; //@line 16130
 return $$046$lcssa | 0; //@line 16130
}
function _do_number_bitwise_logic($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$030 = 0.0, $$1 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 13856
 STACKTOP = STACKTOP + 16 | 0; //@line 13857
 $3 = sp + 8 | 0; //@line 13858
 $4 = sp; //@line 13859
 $5 = _ecma_get_number($1, $3) | 0; //@line 13860
 if (_ecma_is_value_empty($5) | 0) {
  $7 = _ecma_get_number($2, $4) | 0; //@line 13863
  if (_ecma_is_value_empty($7) | 0) {
   $10 = _ecma_number_to_uint32(+(+SAFE_HEAP_LOAD_D($4 | 0, 8))) | 0; //@line 13867
   switch ($0 | 0) {
   case 0:
    {
     $$030 = +((_ecma_number_to_uint32(+(+SAFE_HEAP_LOAD_D($3 | 0, 8))) | 0) & $10 | 0); //@line 13874
     break;
    }
   case 1:
    {
     $$030 = +(_ecma_number_to_uint32(+(+SAFE_HEAP_LOAD_D($3 | 0, 8))) | 0 | $10 | 0); //@line 13882
     break;
    }
   case 2:
    {
     $$030 = +((_ecma_number_to_uint32(+(+SAFE_HEAP_LOAD_D($3 | 0, 8))) | 0) ^ $10 | 0); //@line 13890
     break;
    }
   case 3:
    {
     $$030 = +((_ecma_number_to_int32(+(+SAFE_HEAP_LOAD_D($3 | 0, 8))) | 0) << ($10 & 31) | 0); //@line 13899
     break;
    }
   case 4:
    {
     $$030 = +((_ecma_number_to_int32(+(+SAFE_HEAP_LOAD_D($3 | 0, 8))) | 0) >> ($10 & 31) | 0); //@line 13908
     break;
    }
   case 5:
    {
     $$030 = +((_ecma_number_to_uint32(+(+SAFE_HEAP_LOAD_D($3 | 0, 8))) | 0) >>> ($10 & 31) >>> 0); //@line 13917
     break;
    }
   case 6:
    {
     $$030 = +(~$10 | 0); //@line 13923
     break;
    }
   default:
    {
     $$030 = 0.0; //@line 13927
    }
   }
   $$0 = _ecma_make_number_value($$030) | 0; //@line 13931
  } else {
   $$0 = $7; //@line 13933
  }
  $$1 = $$0; //@line 13935
 } else {
  $$1 = $5; //@line 13937
 }
 STACKTOP = sp; //@line 13939
 return $$1 | 0; //@line 13939
}
function _ecma_op_create_array_object($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$05058 = 0, $$1 = 0, $$152 = 0, $$154 = 0, $$156 = 0, $11 = 0, $12 = 0, $17 = 0, $20 = 0, $4 = 0, $6 = 0.0, $7 = 0, label = 0;
 if (($1 | 0) == 1 & $2) {
  $4 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0; //@line 9327
  if (_ecma_is_value_number($4) | 0) {
   $6 = +_ecma_get_number_from_value($4); //@line 9330
   $7 = _ecma_number_to_uint32($6) | 0; //@line 9331
   if ($6 != +($7 >>> 0)) {
    $$1 = _ecma_raise_range_error(3875) | 0; //@line 9336
   } else {
    $$152 = $7; //@line 9338
    $$154 = 0; //@line 9338
    $$156 = 0; //@line 9338
    label = 5; //@line 9339
   }
  } else {
   $$152 = 1; //@line 9342
   $$154 = $0; //@line 9342
   $$156 = 1; //@line 9342
   label = 5; //@line 9343
  }
 } else {
  $$152 = $1; //@line 9346
  $$154 = $0; //@line 9346
  $$156 = $1; //@line 9346
  label = 5; //@line 9347
 }
 if ((label | 0) == 5) {
  $11 = _ecma_builtin_get(0) | 0; //@line 9350
  $12 = _ecma_create_object($11, 16, 4) | 0; //@line 9351
  _ecma_deref_object($11); //@line 9352
  SAFE_HEAP_STORE($12 + 8 | 0, $$152 | 0, 4);
  SAFE_HEAP_STORE($12 + 12 >> 0 | 0, 19 | 0, 1);
  if ($$156 | 0) {
   $$05058 = 0; //@line 9359
   do {
    $17 = $$154 + ($$05058 << 2) | 0; //@line 9361
    if (!(_ecma_is_value_array_hole(SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0) | 0)) {
     $20 = _ecma_new_ecma_string_from_uint32($$05058) | 0; //@line 9365
     _ecma_builtin_helper_def_prop($12, $20, SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0, 1, 1, 1, 0) | 0; //@line 9367
     _ecma_deref_ecma_string($20); //@line 9368
    }
    $$05058 = $$05058 + 1 | 0; //@line 9370
   } while (($$05058 | 0) != ($$156 | 0));
  }
  $$1 = _ecma_make_object_value($12) | 0; //@line 9380
 }
 return $$1 | 0; //@line 9382
}
function _vm_run($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$038 = 0, $$sink = 0, $12 = 0, $24 = 0, $48 = 0, $49 = 0, $51 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 18970
 STACKTOP = STACKTOP + 48 | 0; //@line 18971
 $6 = sp; //@line 18972
 if (!((SAFE_HEAP_LOAD($0 + 4 | 0, 2, 0) | 0) & 4)) {
  $24 = $0 + 12 | 0; //@line 18979
  $$0 = $24 + ((SAFE_HEAP_LOAD($0 + 11 >> 0 | 0, 1, 1) | 0 | 0) << 1) | 0; //@line 18991
  $$038 = (SAFE_HEAP_LOAD($0 + 6 >> 0 | 0, 1, 1) | 0 | 0) + (SAFE_HEAP_LOAD($0 + 8 >> 0 | 0, 1, 1) | 0 | 0) | 0; //@line 18991
  $$sink = $24; //@line 18991
 } else {
  $12 = $0 + 18 | 0; //@line 18993
  $$0 = $12 + ((SAFE_HEAP_LOAD($0 + 16 | 0, 2, 1) | 0 | 0) << 1) | 0; //@line 19005
  $$038 = (SAFE_HEAP_LOAD($0 + 6 | 0, 2, 1) | 0 | 0) + (SAFE_HEAP_LOAD($0 + 10 | 0, 2, 1) | 0 | 0) | 0; //@line 19005
  $$sink = $12; //@line 19005
 }
 SAFE_HEAP_STORE($6 + 20 | 0, $$sink | 0, 4);
 SAFE_HEAP_STORE($6 | 0, $0 | 0, 4);
 SAFE_HEAP_STORE($6 + 4 | 0, $$0 | 0, 4);
 SAFE_HEAP_STORE($6 + 8 | 0, $$0 | 0, 4);
 SAFE_HEAP_STORE($6 + 24 | 0, $2 | 0, 4);
 SAFE_HEAP_STORE($6 + 28 | 0, SAFE_HEAP_LOAD(134107 * 4 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($6 + 32 | 0, $1 | 0, 4);
 SAFE_HEAP_STORE($6 + 40 | 0, 0 | 0, 2);
 SAFE_HEAP_STORE($6 + 42 >> 0 | 0, $3 & 1 | 0, 1);
 SAFE_HEAP_STORE($6 + 43 >> 0 | 0, 0 | 0, 1);
 $48 = _llvm_stacksave() | 0; //@line 19029
 $49 = STACKTOP; //@line 19031
 STACKTOP = STACKTOP + ((1 * ((($$038 | 0) == 0 ? 1 : $$038) << 2) | 0) + 15 & -16) | 0; //@line 19031
 SAFE_HEAP_STORE($6 + 12 | 0, $49 | 0, 4);
 $51 = _vm_execute($6, $4, $5) | 0; //@line 19034
 _llvm_stackrestore($48 | 0); //@line 19035
 STACKTOP = sp; //@line 19036
 return $51 | 0; //@line 19036
}
function _lexer_scan_identifier($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $4 = 0, $9 = 0, label = 0;
 _lexer_skip_spaces($0); //@line 9664
 $4 = $0 + 188 | 0; //@line 9667
 SAFE_HEAP_STORE($0 + 192 | 0, SAFE_HEAP_LOAD($0 + 224 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($0 + 196 | 0, SAFE_HEAP_LOAD($0 + 228 | 0, 4, 0) | 0 | 0, 4);
 $9 = $0 + 216 | 0; //@line 9674
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0; //@line 9675
 $11 = $0 + 220 | 0; //@line 9676
 do {
  if ($10 >>> 0 < (SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0) >>> 0) {
   if (!(_lit_char_is_identifier_start($10) | 0)) {
    if ((SAFE_HEAP_LOAD((SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0) >> 0 | 0, 1, 0) | 0 | 0) != 92) {
     label = 12; //@line 9687
     break;
    }
   }
   _lexer_parse_identifier($0, 0); //@line 9691
   if ($1) {
    if ((SAFE_HEAP_LOAD($0 + 204 | 0, 2, 0) | 0 | 0) == 3) {
     _lexer_skip_spaces($0); //@line 9697
     $21 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0; //@line 9698
     if ($21 >>> 0 < (SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0) >>> 0) {
      if ((SAFE_HEAP_LOAD($21 >> 0 | 0, 1, 0) | 0 | 0) != 58) {
       if (_lexer_compare_identifier_to_current($0, 1012) | 0) {
        SAFE_HEAP_STORE($4 >> 0 | 0, 82 | 0, 1);
        break;
       }
       if (_lexer_compare_identifier_to_current($0, 1020) | 0) {
        SAFE_HEAP_STORE($4 >> 0 | 0, 83 | 0, 1);
       }
      }
     }
    }
   }
  } else {
   label = 12; //@line 9719
  }
 } while (0);
 L14 : do {
  if ((label | 0) == 12) {
   if ($1) {
    _lexer_next_token($0); //@line 9725
    switch (SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0 | 0) {
    case 54:
    case 1:
     {
      break L14;
      break;
     }
    default:
     {}
    }
   }
   _parser_raise_error($0, 51); //@line 9736
  }
 } while (0);
 return;
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $25 = 0, $29 = 0, $7 = 0, $phitmp = 0;
 do {
  if (!$0) {
   if (!(SAFE_HEAP_LOAD(349 * 4 | 0, 4, 0) | 0)) {
    $29 = 0; //@line 5492
   } else {
    $29 = _fflush(SAFE_HEAP_LOAD(349 * 4 | 0, 4, 0) | 0 | 0) | 0; //@line 5496
   }
   $$02325 = SAFE_HEAP_LOAD(___ofl_lock() | 0 | 0, 4, 0) | 0 | 0; //@line 5499
   if (!$$02325) {
    $$024$lcssa = $29; //@line 5502
   } else {
    $$02327 = $$02325; //@line 5504
    $$02426 = $29; //@line 5504
    while (1) {
     if ((SAFE_HEAP_LOAD($$02327 + 76 | 0, 4, 0) | 0 | 0) > -1) {
      $25 = ___lockfile($$02327) | 0; //@line 5511
     } else {
      $25 = 0; //@line 5513
     }
     if ((SAFE_HEAP_LOAD($$02327 + 20 | 0, 4, 0) | 0 | 0) >>> 0 > (SAFE_HEAP_LOAD($$02327 + 28 | 0, 4, 0) | 0 | 0) >>> 0) {
      $$1 = ___fflush_unlocked($$02327) | 0 | $$02426; //@line 5523
     } else {
      $$1 = $$02426; //@line 5525
     }
     if ($25 | 0) {
      ___unlockfile($$02327); //@line 5529
     }
     $$02327 = SAFE_HEAP_LOAD($$02327 + 56 | 0, 4, 0) | 0 | 0; //@line 5532
     if (!$$02327) {
      $$024$lcssa = $$1; //@line 5535
      break;
     } else {
      $$02426 = $$1; //@line 5538
     }
    }
   }
   ___ofl_unlock(); //@line 5542
   $$0 = $$024$lcssa; //@line 5543
  } else {
   if ((SAFE_HEAP_LOAD($0 + 76 | 0, 4, 0) | 0 | 0) <= -1) {
    $$0 = ___fflush_unlocked($0) | 0; //@line 5550
    break;
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 5554
   $7 = ___fflush_unlocked($0) | 0; //@line 5555
   if ($phitmp) {
    $$0 = $7; //@line 5557
   } else {
    ___unlockfile($0); //@line 5559
    $$0 = $7; //@line 5560
   }
  }
 } while (0);
 return $$0 | 0; //@line 5564
}
function _ecma_string_to_array_index($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$02940 = 0, $$03139 = 0, $$1 = 0, $12 = 0, $20 = 0, $21 = 0, $3 = 0, $7 = 0;
 $3 = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0; //@line 3475
 L1 : do {
  if ($3 << 24 >> 24 == 48) {
   SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
   $$1 = ($1 | 0) == 1; //@line 3481
  } else {
   if ($1 >>> 0 > 10) {
    $$1 = 0; //@line 3485
   } else {
    $7 = $0 + $1 | 0; //@line 3487
    $$ = ($1 | 0) == 10 ? $7 + -1 | 0 : $7; //@line 3490
    if (($3 + -48 & 255) > 9) {
     $$1 = 0; //@line 3494
    } else {
     $$02940 = 0; //@line 3496
     $$03139 = $0; //@line 3496
     $12 = $3; //@line 3496
     while (1) {
      $$03139 = $$03139 + 1 | 0; //@line 3500
      $$02940 = ($$02940 * 10 | 0) + -48 + ($12 & 255) | 0; //@line 3502
      if ($$03139 >>> 0 >= $$ >>> 0) {
       break;
      }
      $12 = SAFE_HEAP_LOAD($$03139 >> 0 | 0, 1, 0) | 0 | 0; //@line 3507
      if (($12 + -48 & 255) > 9) {
       $$1 = 0; //@line 3511
       break L1;
      }
     }
     if ($1 >>> 0 < 10) {
      SAFE_HEAP_STORE($2 | 0, $$02940 | 0, 4);
      $$1 = 1; //@line 3520
      break;
     }
     $20 = SAFE_HEAP_LOAD($$03139 >> 0 | 0, 1, 0) | 0 | 0; //@line 3523
     $21 = $20 & 255; //@line 3524
     if (($20 & 255) > 57) {
      $$1 = 0; //@line 3527
     } else {
      if ($$02940 >>> 0 > 429496729 | ($20 & 255) < 48) {
       $$1 = 0; //@line 3533
      } else {
       if (($$02940 | 0) == 429496729 & ($20 & 255) > 53) {
        $$1 = 0; //@line 3539
       } else {
        SAFE_HEAP_STORE($2 | 0, ($$02940 * 10 | 0) + -48 + $21 | 0, 4);
        $$1 = 1; //@line 3545
       }
      }
     }
    }
   }
  }
 } while (0);
 return $$1 | 0; //@line 3553
}
function _ecma_append_to_values_collection($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$041 = 0, $$042 = 0, $$sink = 0, $$sink3 = 0, $10 = 0, $11 = 0, $14 = 0, $16 = 0, $3 = 0, $4 = 0, $6 = 0, label = 0;
 $3 = $0 + 4 | 0; //@line 5827
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0; //@line 5828
 if (!$4) {
  $6 = _jmem_heap_alloc_block(24) | 0; //@line 5831
  if (!$6) {
   $$sink = 0; //@line 5834
  } else {
   $$sink = _jmem_compress_pointer($6) | 0; //@line 5837
  }
  SAFE_HEAP_STORE($0 | 0, $$sink | 0, 2);
  SAFE_HEAP_STORE($0 + 2 | 0, $$sink | 0, 2);
  $$041 = 0; //@line 5842
  $$042 = $6; //@line 5842
 } else {
  $10 = ($4 >>> 0) % 5 | 0; //@line 5844
  $11 = $0 + 2 | 0; //@line 5845
  $14 = _jmem_decompress_pointer(SAFE_HEAP_LOAD($11 | 0, 2, 1) | 0 | 0) | 0; //@line 5848
  if (!$10) {
   $16 = _jmem_heap_alloc_block(24) | 0; //@line 5851
   SAFE_HEAP_STORE($14 + 20 | 0, _ecma_make_collection_chunk_value($16) | 0 | 0, 4);
   if (!$16) {
    $$sink3 = 0; //@line 5857
   } else {
    $$sink3 = _jmem_compress_pointer($16) | 0; //@line 5860
   }
   SAFE_HEAP_STORE($11 | 0, $$sink3 | 0, 2);
   $$041 = 0; //@line 5863
   $$042 = $16; //@line 5863
  } else {
   $$041 = $10; //@line 5865
   $$042 = $14; //@line 5865
  }
 }
 if ($2) {
  label = 11; //@line 5869
 } else {
  if (_ecma_is_value_object($1) | 0) {
   $$0 = $1; //@line 5873
  } else {
   label = 11; //@line 5875
  }
 }
 if ((label | 0) == 11) {
  $$0 = _ecma_copy_value($1) | 0; //@line 5880
 }
 SAFE_HEAP_STORE($$042 + ($$041 << 2) | 0, $$0 | 0, 4);
 SAFE_HEAP_STORE($$042 + ($$041 + 1 << 2) | 0, _ecma_make_collection_chunk_value(0) | 0 | 0, 4);
 SAFE_HEAP_STORE($3 | 0, (SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0) + 1 | 0, 4);
 return;
}
function _parser_parse_script($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $17 = 0, $20 = 0, $23 = 0, $24 = 0, $6 = 0, $8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 18644
 STACKTOP = STACKTOP + 32 | 0; //@line 18645
 $vararg_buffer = sp; //@line 18646
 $6 = sp + 12 | 0; //@line 18647
 $8 = _parser_parse_source($0, $1, $2, $3, $4 & 1, $6) | 0; //@line 18649
 SAFE_HEAP_STORE($5 | 0, $8 | 0, 4);
 do {
  if (!$8) {
   $10 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0; //@line 18654
   if (($10 | 0) == 1) {
    SAFE_HEAP_STORE(134113 * 4 | 0, 88 | 0, 4);
    SAFE_HEAP_STORE(134116 * 4 | 0, SAFE_HEAP_LOAD(134116 * 4 | 0, 4, 0) | 0 | 8 | 0, 4);
    $$0 = 24; //@line 18661
    break;
   } else {
    $14 = _parser_error_to_string($10) | 0; //@line 18664
    $17 = _ecma_make_string_value(_ecma_new_ecma_string_from_utf8($14, _lit_zt_utf8_string_size($14) | 0) | 0) | 0; //@line 18667
    $20 = _ecma_make_uint32_value(SAFE_HEAP_LOAD($6 + 4 | 0, 4, 0) | 0 | 0) | 0; //@line 18670
    $23 = _ecma_make_uint32_value(SAFE_HEAP_LOAD($6 + 8 | 0, 4, 0) | 0 | 0) | 0; //@line 18673
    SAFE_HEAP_STORE($vararg_buffer | 0, $17 | 0, 4);
    SAFE_HEAP_STORE($vararg_buffer + 4 | 0, $20 | 0, 4);
    SAFE_HEAP_STORE($vararg_buffer + 8 | 0, $23 | 0, 4);
    $24 = _ecma_raise_standard_error_with_format(4, 5979, $vararg_buffer) | 0; //@line 18679
    _ecma_free_value($23); //@line 18680
    _ecma_free_value($20); //@line 18681
    _ecma_free_value($17); //@line 18682
    $$0 = $24; //@line 18683
    break;
   }
  } else {
   $$0 = 56; //@line 18687
  }
 } while (0);
 STACKTOP = sp; //@line 18690
 return $$0 | 0; //@line 18690
}
function _parser_parse_do_while_statement_end($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$ph = 0, $1 = 0, $2 = 0, $3 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12186
 STACKTOP = STACKTOP + 32 | 0; //@line 12187
 $1 = sp + 16 | 0; //@line 12188
 $2 = sp + 8 | 0; //@line 12189
 $3 = sp; //@line 12190
 if ((SAFE_HEAP_LOAD($0 + 188 >> 0 | 0, 1, 0) | 0 | 0) != 73) {
  _parser_raise_error($0, 47); //@line 12195
 }
 _parser_stack_iterator_init($0, $2); //@line 12198
 _parser_stack_iterator_skip($2, 1); //@line 12199
 _parser_stack_iterator_read($2, $1, 4); //@line 12200
 _parser_set_continues_to_current_position($0, SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0); //@line 12202
 _parser_parse_enclosed_expr($0); //@line 12203
 $8 = $0 + 240 | 0; //@line 12204
 switch (SAFE_HEAP_LOAD($8 | 0, 2, 0) | 0 | 0) {
 case 45:
  {
   SAFE_HEAP_STORE($8 | 0, 0 | 0, 2);
   break;
  }
 case 78:
  {
   $$0$ph = 21; //@line 12212
   label = 5; //@line 12213
   break;
  }
 case 44:
  {
   $$0$ph = 5; //@line 12217
   label = 5; //@line 12218
   break;
  }
 default:
  {
   $$0 = 13; //@line 12222
   label = 6; //@line 12223
  }
 }
 if ((label | 0) == 5) {
  SAFE_HEAP_STORE($8 | 0, 0 | 0, 2);
  $$0 = $$0$ph; //@line 12228
  label = 6; //@line 12229
 }
 if ((label | 0) == 6) {
  _parser_stack_iterator_skip($2, 4); //@line 12232
  _parser_stack_iterator_read($2, $3, 4); //@line 12233
  _parser_emit_cbc_backward_branch($0, $$0, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0); //@line 12235
 }
 _parser_stack_pop($0, 0, 9); //@line 12237
 _parser_stack_iterator_init($0, $0 + 180 | 0); //@line 12239
 _parser_set_breaks_to_current_position($0, SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0); //@line 12241
 STACKTOP = sp; //@line 12242
 return;
}
function _ecma_op_array_object_define_own_property($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$4 = 0, $15 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $30 = 0, $5 = 0, $9 = 0;
 do {
  if (_ecma_string_is_length($1) | 0) {
   $$ = $3 & 1; //@line 9506
   $5 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 9507
   $9 = ($5 & 65535) >>> 1; //@line 9512
   $15 = $9 & 4 | (($5 & 326) == 0 ? $$ : $$ | 2) | $9 & 8; //@line 9518
   if (!($5 & 1)) {
    $23 = _ecma_make_uint32_value(SAFE_HEAP_LOAD($0 + 8 | 0, 4, 0) | 0 | 0) | 0; //@line 9524
    $24 = _ecma_op_array_object_set_length($0, $23, $15) | 0; //@line 9525
    _ecma_fast_free_value($23); //@line 9526
    $$4 = $24; //@line 9527
    break;
   } else {
    $$4 = _ecma_op_array_object_set_length($0, SAFE_HEAP_LOAD($2 + 4 | 0, 4, 0) | 0 | 0, $15) | 0; //@line 9533
    break;
   }
  } else {
   $25 = _ecma_string_get_array_index($1) | 0; //@line 9537
   if (($25 | 0) == -1) {
    $$4 = _ecma_op_general_object_define_own_property($0, $1, $2, $3) | 0; //@line 9541
    break;
   }
   $28 = $0 + 8 | 0; //@line 9544
   $30 = $25 >>> 0 >= (SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0) >>> 0; //@line 9546
   if ($30) {
    if (!(_ecma_is_property_writable(SAFE_HEAP_LOAD($0 + 12 >> 0 | 0, 1, 0) | 0 | 0) | 0)) {
     $$4 = _ecma_reject($3) | 0; //@line 9553
     break;
    }
   }
   if (_ecma_is_value_false(_ecma_op_general_object_define_own_property($0, $1, $2, 0) | 0) | 0) {
    $$4 = _ecma_reject($3) | 0; //@line 9561
    break;
   }
   if ($30) {
    SAFE_HEAP_STORE($28 | 0, $25 + 1 | 0, 4);
    $$4 = 56; //@line 9567
   } else {
    $$4 = 56; //@line 9569
   }
  }
 } while (0);
 return $$4 | 0; //@line 9573
}
function _lit_is_valid_cesu8_string($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$037 = 0, $$038 = 0, $$042$be = 0, $$04259 = 0, $$058 = 0, $$157 = 0, $$4 = 0, $$sink = 0, $14 = 0, $20 = 0, $3 = 0, $6 = 0;
 L1 : do {
  if (!$1) {
   $$4 = 1; //@line 15479
  } else {
   $$04259 = 0; //@line 15481
   while (1) {
    $3 = $$04259 + 1 | 0; //@line 15483
    $6 = SAFE_HEAP_LOAD($0 + $$04259 >> 0 | 0, 1, 1) | 0 | 0; //@line 15486
    if (!($6 & 128)) {
     $$042$be = $3; //@line 15490
    } else {
     if (($6 & 224 | 0) == 192) {
      $$037 = 1; //@line 15495
      $$038 = 128; //@line 15495
      $$sink = 31; //@line 15495
     } else {
      if (($6 & 240 | 0) == 224) {
       $$037 = 2; //@line 15500
       $$038 = 2048; //@line 15500
       $$sink = 15; //@line 15500
      } else {
       $$4 = 0; //@line 15502
       break L1;
      }
     }
     $14 = $$037 + $3 | 0; //@line 15506
     if ($14 >>> 0 > $1 >>> 0) {
      $$4 = 0; //@line 15509
      break L1;
     }
     $$058 = 0; //@line 15513
     $$157 = $$sink & $6; //@line 15513
     do {
      $20 = SAFE_HEAP_LOAD($0 + ($$058 + $3) >> 0 | 0, 1, 1) | 0 | 0; //@line 15518
      if (($20 & 192 | 0) != 128) {
       $$4 = 0; //@line 15522
       break L1;
      }
      $$157 = $20 & 63 | $$157 << 6; //@line 15527
      $$058 = $$058 + 1 | 0; //@line 15528
     } while ($$058 >>> 0 < $$037 >>> 0);
     if ($$157 >>> 0 < $$038 >>> 0) {
      $$4 = 0; //@line 15538
      break L1;
     } else {
      $$042$be = $14; //@line 15541
     }
    }
    if ($$042$be >>> 0 < $1 >>> 0) {
     $$04259 = $$042$be; //@line 15546
    } else {
     $$4 = 1; //@line 15548
     break;
    }
   }
  }
 } while (0);
 return $$4 | 0; //@line 15554
}
function _ecma_op_bound_function_try_to_lazy_instantiate_property($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$038 = 0, $$039 = 0, $10 = 0, $14 = 0, $16 = 0, $2 = 0, $21 = 0, $5 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 11031
 STACKTOP = STACKTOP + 16 | 0; //@line 11032
 $2 = sp; //@line 11033
 do {
  if (_ecma_string_is_length($1) | 0) {
   $5 = SAFE_HEAP_LOAD($0 + 8 | 0, 4, 0) | 0 | 0; //@line 11038
   if ((_ecma_object_get_class_name($5) | 0) == 41) {
    $8 = _ecma_op_object_get($5, $1) | 0; //@line 11042
    $10 = SAFE_HEAP_LOAD($0 + 12 | 0, 4, 0) | 0 | 0; //@line 11044
    if (_ecma_is_value_integer_number($10) | 0) {
     $$039 = (_ecma_get_integer_from_value($10) | 0) + -1 | 0; //@line 11049
    } else {
     $$039 = 0; //@line 11051
    }
    $14 = (_ecma_get_integer_from_value($8) | 0) - $$039 | 0; //@line 11054
    $$038 = ($14 | 0) > 0 ? $14 : 0; //@line 11057
   } else {
    $$038 = 0; //@line 11059
   }
   $16 = _ecma_create_named_data_property($0, $1, 0, $2) | 0; //@line 11061
   SAFE_HEAP_STORE($16 | 0, _ecma_make_integer_value($$038) | 0 | 0, 4);
   $$0 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 11065
  } else {
   if (!(_ecma_compare_ecma_string_to_magic_id($1, 30) | 0)) {
    if (!(_ecma_compare_ecma_string_to_magic_id($1, 53) | 0)) {
     $$0 = 0; //@line 11071
     break;
    }
   }
   $21 = _ecma_builtin_get(6) | 0; //@line 11075
   _ecma_create_named_accessor_property($0, $1, $21, $21, 0, $2) | 0; //@line 11076
   _ecma_deref_object($21); //@line 11077
   $$0 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 11079
  }
 } while (0);
 STACKTOP = sp; //@line 11082
 return $$0 | 0; //@line 11082
}
function _parser_restore_context($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $16 = 0, $2 = 0, $21 = 0, $22 = 0, $35 = 0, $36 = 0, $40 = 0;
 $2 = $0 + 264 | 0; //@line 17391
 _parser_list_free($2); //@line 17392
 SAFE_HEAP_STORE($0 + 168 | 0, SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($0 + 172 | 0, SAFE_HEAP_LOAD($1 + 4 | 0, 2, 0) | 0 | 0 | 0, 2);
 SAFE_HEAP_STORE($0 + 174 | 0, SAFE_HEAP_LOAD($1 + 6 | 0, 2, 0) | 0 | 0 | 0, 2);
 SAFE_HEAP_STORE($0 + 176 | 0, SAFE_HEAP_LOAD($1 + 8 | 0, 4, 0) | 0 | 0, 4);
 $16 = $1 + 12 | 0; //@line 17410
 $21 = SAFE_HEAP_LOAD($16 + 4 | 0, 4, 0) | 0 | 0; //@line 17415
 $22 = $0 + 180 | 0; //@line 17416
 SAFE_HEAP_STORE($22 | 0, SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($22 + 4 | 0, $21 | 0, 4);
 SAFE_HEAP_STORE($0 + 242 | 0, SAFE_HEAP_LOAD($1 + 20 | 0, 2, 0) | 0 | 0 | 0, 2);
 SAFE_HEAP_STORE($0 + 244 | 0, SAFE_HEAP_LOAD($1 + 22 | 0, 2, 0) | 0 | 0 | 0, 2);
 SAFE_HEAP_STORE($0 + 246 | 0, SAFE_HEAP_LOAD($1 + 24 | 0, 2, 0) | 0 | 0 | 0, 2);
 $35 = $0 + 248 | 0; //@line 17434
 $36 = $1 + 28 | 0; //@line 17435
 SAFE_HEAP_STORE($35 | 0, SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($35 + 4 | 0, SAFE_HEAP_LOAD($36 + 4 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($35 + 8 | 0, SAFE_HEAP_LOAD($36 + 8 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($0 + 260 | 0, SAFE_HEAP_LOAD($1 + 40 | 0, 4, 0) | 0 | 0, 4);
 $40 = $1 + 44 | 0; //@line 17441
 SAFE_HEAP_STORE($2 | 0, SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($2 + 4 | 0, SAFE_HEAP_LOAD($40 + 4 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($2 + 8 | 0, SAFE_HEAP_LOAD($40 + 8 | 0, 4, 0) | 0 | 0, 4);
 return;
}
function _lit_is_utf8_string_pair_magic($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$036$be = 0, $$03648 = 0, $$039$be = 0, $$03947 = 0, $$3 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $19 = 0, $21 = 0, $4 = 0, $7 = 0, $9 = 0;
 $4 = $3 + $1 | 0; //@line 15143
 L1 : do {
  if ($4 >>> 0 > (_lit_get_magic_string_size(75) | 0) >>> 0) {
   $$3 = 82; //@line 15148
  } else {
   $7 = _lit_get_magic_string_size_block_start($4) | 0; //@line 15150
   $9 = _lit_get_magic_string_size_block_start($4 + 1 | 0) | 0; //@line 15152
   if ($7 >>> 0 < $9 >>> 0) {
    $$03648 = $9; //@line 15155
    $$03947 = $7; //@line 15155
    while (1) {
     $12 = ($$03648 + $$03947 | 0) >>> 1; //@line 15158
     $13 = _lit_get_magic_string_utf8($12) | 0; //@line 15159
     $14 = _memcmp($13, $0, $1) | 0; //@line 15160
     if (!$14) {
      $19 = _memcmp($13 + $1 | 0, $2, $3) | 0; //@line 15164
      $21 = ($19 | 0) > 0; //@line 15166
      if (!$19) {
       $$3 = $12; //@line 15171
       break L1;
      } else {
       $$036$be = $21 ? $12 : $$03648; //@line 15174
       $$039$be = $21 ? $$03947 : $12 + 1 | 0; //@line 15174
      }
     } else {
      $16 = ($14 | 0) > 0; //@line 15177
      $$036$be = $16 ? $12 : $$03648; //@line 15181
      $$039$be = $16 ? $$03947 : $12 + 1 | 0; //@line 15181
     }
     if ($$039$be >>> 0 < $$036$be >>> 0) {
      $$03648 = $$036$be; //@line 15185
      $$03947 = $$039$be; //@line 15185
     } else {
      $$3 = 82; //@line 15187
      break;
     }
    }
   } else {
    $$3 = 82; //@line 15192
   }
  }
 } while (0);
 return $$3 | 0; //@line 15196
}
function _ecma_op_to_string($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$1 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0;
 if (_ecma_is_value_object($0) | 0) {
  $2 = _ecma_op_to_primitive($0, 2) | 0; //@line 9901
  if (($2 | 0) == 24) {
   $$0 = 24; //@line 9904
  } else {
   $4 = _ecma_op_to_string($2) | 0; //@line 9906
   _ecma_free_value($2); //@line 9907
   return $4 | 0; //@line 9908
  }
 } else {
  do {
   if (_ecma_is_value_string($0) | 0) {
    $6 = _ecma_get_string_from_value($0) | 0; //@line 9914
    _ecma_ref_ecma_string($6); //@line 9915
    $$1 = $6; //@line 9916
   } else {
    if (_ecma_is_value_integer_number($0) | 0) {
     $8 = _ecma_get_integer_from_value($0) | 0; //@line 9920
     if (($8 | 0) < 0) {
      $$1 = _ecma_new_ecma_string_from_number(+($8 | 0)) | 0; //@line 9925
      break;
     } else {
      $$1 = _ecma_new_ecma_string_from_uint32($8) | 0; //@line 9929
      break;
     }
    }
    if (_ecma_is_value_float_number($0) | 0) {
     $$1 = _ecma_new_ecma_string_from_number(+_ecma_get_float_from_value($0)) | 0; //@line 9937
     break;
    }
    if (_ecma_is_value_undefined($0) | 0) {
     $$1 = _ecma_get_magic_string(57) | 0; //@line 9943
     break;
    }
    if (_ecma_is_value_null($0) | 0) {
     $$1 = _ecma_get_magic_string(16) | 0; //@line 9949
     break;
    }
    if (_ecma_is_value_true($0) | 0) {
     $$1 = _ecma_get_magic_string(18) | 0; //@line 9955
     break;
    } else {
     $$1 = _ecma_get_magic_string(22) | 0; //@line 9959
     break;
    }
   }
  } while (0);
  $$0 = _ecma_make_string_value($$1) | 0; //@line 9965
 }
 return $$0 | 0; //@line 9967
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 5008
  } else {
   if ($1 >>> 0 < 128) {
    SAFE_HEAP_STORE($0 >> 0 | 0, $1 | 0, 1);
    $$0 = 1; //@line 5014
    break;
   }
   if (!(SAFE_HEAP_LOAD(SAFE_HEAP_LOAD((___pthread_self_822() | 0) + 188 | 0, 4, 0) | 0 | 0, 4, 0) | 0)) {
    if (($1 & -128 | 0) == 57216) {
     SAFE_HEAP_STORE($0 >> 0 | 0, $1 | 0, 1);
     $$0 = 1; //@line 5028
     break;
    } else {
     SAFE_HEAP_STORE(___errno_location() | 0 | 0, 84 | 0, 4);
     $$0 = -1; //@line 5033
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    SAFE_HEAP_STORE($0 >> 0 | 0, $1 >>> 6 | 192 | 0, 1);
    SAFE_HEAP_STORE($0 + 1 >> 0 | 0, $1 & 63 | 128 | 0, 1);
    $$0 = 2; //@line 5048
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    SAFE_HEAP_STORE($0 >> 0 | 0, $1 >>> 12 | 224 | 0, 1);
    SAFE_HEAP_STORE($0 + 1 >> 0 | 0, $1 >>> 6 & 63 | 128 | 0, 1);
    SAFE_HEAP_STORE($0 + 2 >> 0 | 0, $1 & 63 | 128 | 0, 1);
    $$0 = 3; //@line 5071
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    SAFE_HEAP_STORE($0 >> 0 | 0, $1 >>> 18 | 240 | 0, 1);
    SAFE_HEAP_STORE($0 + 1 >> 0 | 0, $1 >>> 12 & 63 | 128 | 0, 1);
    SAFE_HEAP_STORE($0 + 2 >> 0 | 0, $1 >>> 6 & 63 | 128 | 0, 1);
    SAFE_HEAP_STORE($0 + 3 >> 0 | 0, $1 & 63 | 128 | 0, 1);
    $$0 = 4; //@line 5098
    break;
   } else {
    SAFE_HEAP_STORE(___errno_location() | 0 | 0, 84 | 0, 4);
    $$0 = -1; //@line 5103
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 5108
}
function _ecma_string_get_length($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$lcssa$i = 0, $$017$lcssa$i = 0, $$01720$i = 0, $$01819$i = 0, $11 = 0, $12 = 0, $20 = 0, $22 = 0, $9 = 0;
 switch ((SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 7) {
 case 3:
  {
   $$0 = SAFE_HEAP_LOAD($0 + 4 + 2 | 0, 2, 1) | 0 | 0; //@line 4375
   break;
  }
 case 4:
  {
   $$0 = SAFE_HEAP_LOAD($0 + 8 | 0, 4, 0) | 0 | 0; //@line 4381
   break;
  }
 case 0:
  {
   $9 = SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0; //@line 4386
   if ($9 >>> 0 < 100) {
    $$0$lcssa$i = 1; //@line 4389
    $$017$lcssa$i = 1; //@line 4389
   } else {
    $$01720$i = 1; //@line 4391
    $$01819$i = 100; //@line 4391
    while (1) {
     $11 = $$01819$i * 100 | 0; //@line 4393
     $12 = $$01720$i + 2 | 0; //@line 4394
     if ($12 >>> 0 > 8 | $11 >>> 0 > $9 >>> 0) {
      $$0$lcssa$i = $$01819$i; //@line 4399
      $$017$lcssa$i = $12; //@line 4399
      break;
     } else {
      $$01720$i = $12; //@line 4402
      $$01819$i = $11; //@line 4402
     }
    }
   }
   $$0 = (($$0$lcssa$i * 10 | 0) >>> 0 <= $9 >>> 0 & 1) + $$017$lcssa$i | 0; //@line 4410
   break;
  }
 case 1:
  {
   $$0 = _lit_get_magic_string_size(SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0) | 0; //@line 4417
   break;
  }
 default:
  {
   $20 = $0 + 4 | 0; //@line 4421
   $22 = _lit_get_magic_string_ex_utf8(SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0) | 0; //@line 4423
   $$0 = _lit_utf8_string_length($22, _lit_get_magic_string_ex_size(SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0) | 0) | 0; //@line 4427
  }
 }
 return $$0 | 0; //@line 4430
}
function _ecma_property_hashmap_find($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$051 = 0, $$3 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $22 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $5 = 0, $9 = 0, label = 0;
 $5 = SAFE_HEAP_LOAD($1 + 2 | 0, 2, 1) | 0 | 0; //@line 8335
 $9 = SAFE_HEAP_LOAD(3867 + ($5 & 7) >> 0 | 0, 1, 1) | 0 | 0; //@line 8339
 $11 = SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0; //@line 8341
 $12 = $11 + -1 | 0; //@line 8342
 $13 = $0 + 16 | 0; //@line 8343
 $14 = $13 + ($11 << 1) | 0; //@line 8344
 if ($12 >>> 0 < 65536) {
  $$051 = $12 & $5; //@line 8348
 } else {
  $$051 = $5 << (SAFE_HEAP_LOAD($0 + 1 >> 0 | 0, 1, 1) | 0 | 0); //@line 8354
 }
 while (1) {
  $22 = SAFE_HEAP_LOAD($13 + ($$051 << 1) | 0, 2, 0) | 0 | 0; //@line 8358
  $31 = ((SAFE_HEAP_LOAD($14 + ($$051 >>> 3) >> 0 | 0, 1, 1) | 0 | 0) & 1 << ($$051 & 7) | 0) != 0; //@line 8367
  if (!($22 << 16 >> 16)) {
   if (!$31) {
    $$3 = 0; //@line 8370
    break;
   }
  } else {
   $$ = $31 & 1; //@line 8375
   $33 = _jmem_decompress_pointer($22 & 65535) | 0; //@line 8376
   $34 = $33 + $$ | 0; //@line 8377
   $37 = $33 + 12 + ($$ << 1) | 0; //@line 8380
   if (_ecma_string_compare_to_property_name(SAFE_HEAP_LOAD($34 >> 0 | 0, 1, 0) | 0 | 0, SAFE_HEAP_LOAD($37 | 0, 2, 0) | 0 | 0, $1) | 0) {
    label = 6; //@line 8384
    break;
   }
  }
  $$051 = $$051 + $9 & $12; //@line 8390
 }
 if ((label | 0) == 6) {
  SAFE_HEAP_STORE($2 | 0, SAFE_HEAP_LOAD($37 | 0, 2, 0) | 0 | 0 | 0, 2);
  $$3 = $34; //@line 8395
 }
 return $$3 | 0; //@line 8397
}
function _parser_parse_label($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11936
 STACKTOP = STACKTOP + 32 | 0; //@line 11937
 $1 = sp + 16 | 0; //@line 11938
 $2 = sp; //@line 11939
 _parser_stack_iterator_init($0, $1); //@line 11940
 L1 : while (1) {
  $3 = _parser_stack_iterator_read_uint8($1) | 0; //@line 11942
  switch ($3 << 24 >> 24) {
  case 0:
   {
    label = 6; //@line 11945
    break L1;
    break;
   }
  case 2:
   {
    _parser_stack_iterator_skip($1, 1); //@line 11950
    _parser_stack_iterator_read($1, $2, 12); //@line 11951
    _parser_stack_iterator_skip($1, 12); //@line 11952
    if (_lexer_compare_identifier_to_current($0, $2) | 0) {
     label = 4; //@line 11955
     break L1;
    } else {
     continue L1;
    }
    break;
   }
  default:
   {
    _parser_stack_iterator_skip($1, _parser_statement_length($3) | 0); //@line 11964
    continue L1;
   }
  }
 }
 if ((label | 0) == 4) {
  _parser_raise_error($0, 67); //@line 11970
 } else if ((label | 0) == 6) {
  $7 = $0 + 200 | 0; //@line 11975
  $12 = SAFE_HEAP_LOAD($7 + 4 | 0, 4, 0) | 0 | 0; //@line 11980
  $13 = $2; //@line 11981
  SAFE_HEAP_STORE($13 | 0, SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0, 4);
  SAFE_HEAP_STORE($13 + 4 | 0, $12 | 0, 4);
  SAFE_HEAP_STORE($2 + 8 | 0, 0 | 0, 4);
  _parser_stack_push($0, $2, 12); //@line 11989
  _parser_stack_push_uint8($0, 2); //@line 11990
  _parser_stack_iterator_init($0, $0 + 180 | 0); //@line 11992
  STACKTOP = sp; //@line 11993
  return;
 }
}
function _parser_stack_push($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$041 = 0, $$042 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $storemerge = 0, label = 0;
 $3 = $0 + 288 | 0; //@line 10202
 $4 = $0 + 296 | 0; //@line 10203
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0; //@line 10204
 $6 = 60 - $5 | 0; //@line 10205
 SAFE_HEAP_STORE($0 + 304 >> 0 | 0, SAFE_HEAP_LOAD($1 + ($2 + -1) >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 do {
  if (!$6) {
   $$0 = $2; //@line 10214
   $$042 = $1; //@line 10214
   label = 5; //@line 10215
  } else {
   $$ = $6 >>> 0 > $2 >>> 0 ? $2 : $6; //@line 10218
   _memcpy((SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0) + 4 + $5 | 0, $1 | 0, $$ | 0) | 0; //@line 10221
   if ($6 >>> 0 < $2 >>> 0) {
    $$0 = $2 - $$ | 0; //@line 10226
    $$042 = $1 + $$ | 0; //@line 10226
    label = 5; //@line 10227
    break;
   } else {
    $storemerge = (SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0) + $2 | 0; //@line 10232
    break;
   }
  }
 } while (0);
 if ((label | 0) == 5) {
  $20 = $0 + 300 | 0; //@line 10238
  $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0; //@line 10239
  if (!$21) {
   $$041 = _parser_malloc($0, 64) | 0; //@line 10243
  } else {
   SAFE_HEAP_STORE($20 | 0, 0 | 0, 4);
   $$041 = $21; //@line 10246
  }
  SAFE_HEAP_STORE($$041 | 0, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0, 4);
  SAFE_HEAP_STORE($3 | 0, $$041 | 0, 4);
  _memcpy($$041 + 4 | 0, $$042 | 0, $$0 | 0) | 0; //@line 10252
  $storemerge = $$0; //@line 10253
 }
 SAFE_HEAP_STORE($4 | 0, $storemerge | 0, 4);
 return;
}
function _ecma_op_function_try_to_lazy_instantiate_property($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $19 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 10962
 STACKTOP = STACKTOP + 16 | 0; //@line 10963
 $2 = sp + 8 | 0; //@line 10964
 $3 = sp; //@line 10965
 do {
  if (_ecma_compare_ecma_string_to_magic_id($1, 56) | 0) {
   $5 = _ecma_op_create_object_object_noarg() | 0; //@line 10969
   _ecma_init_ecma_magic_string($2, 60); //@line 10970
   $6 = _ecma_create_named_data_property($5, $2, 20, 0) | 0; //@line 10971
   SAFE_HEAP_STORE($6 | 0, _ecma_make_object_value($0) | 0 | 0, 4);
   $8 = _ecma_create_named_data_property($0, $1, 16, $3) | 0; //@line 10974
   SAFE_HEAP_STORE($8 | 0, _ecma_make_object_value($5) | 0 | 0, 4);
   _ecma_deref_object($5); //@line 10977
   $$1 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0; //@line 10979
  } else {
   if (!(_ecma_compare_ecma_string_to_magic_id($1, 30) | 0)) {
    if (!(_ecma_compare_ecma_string_to_magic_id($1, 53) | 0)) {
     $$1 = 0; //@line 10985
     break;
    }
   }
   if (!((SAFE_HEAP_LOAD((SAFE_HEAP_LOAD($0 + 12 | 0, 4, 0) | 0 | 0) + 4 | 0, 2, 0) | 0) & 8)) {
    $$1 = 0; //@line 10996
   } else {
    $19 = _ecma_builtin_get(6) | 0; //@line 10998
    _ecma_create_named_accessor_property($0, $1, $19, $19, 0, $2) | 0; //@line 10999
    _ecma_deref_object($19); //@line 11000
    $$1 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 11002
   }
  }
 } while (0);
 STACKTOP = sp; //@line 11006
 return $$1 | 0; //@line 11006
}
function _ecma_op_strict_equality_compare($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $14 = 0, $18 = 0.0, $6 = 0, label = 0;
 if (_ecma_is_value_direct($0) | 0) {
  label = 5; //@line 6531
 } else {
  if (_ecma_is_value_direct($1) | 0) {
   label = 5; //@line 6535
  } else {
   if (_ecma_is_value_object($0) | 0) {
    label = 5; //@line 6539
   } else {
    if (_ecma_is_value_object($1) | 0) {
     label = 5; //@line 6543
    } else {
     label = 10; //@line 6545
    }
   }
  }
 }
 do {
  if ((label | 0) == 5) {
   $6 = _ecma_make_integer_value(0) | 0; //@line 6552
   if (($6 | 0) == ($0 | 0)) {
    if (_ecma_is_value_float_number($1) | 0) {
     label = 10; //@line 6557
     break;
    }
   }
   if (($6 | 0) == ($1 | 0)) {
    if (_ecma_is_value_float_number($0) | 0) {
     label = 10; //@line 6565
     break;
    }
   }
   $$0 = ($0 | 0) == ($1 | 0); //@line 6570
  }
 } while (0);
 do {
  if ((label | 0) == 10) {
   if (_ecma_is_value_string($0) | 0) {
    if (!(_ecma_is_value_string($1) | 0)) {
     $$0 = 0; //@line 6579
     break;
    }
    $14 = _ecma_get_string_from_value($0) | 0; //@line 6582
    $$0 = _ecma_compare_ecma_strings($14, _ecma_get_string_from_value($1) | 0) | 0; //@line 6585
    break;
   } else {
    if (!(_ecma_is_value_number($1) | 0)) {
     $$0 = 0; //@line 6590
     break;
    }
    $18 = +_ecma_get_number_from_value($0); //@line 6593
    $$0 = $18 == +_ecma_get_number_from_value($1); //@line 6596
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 6601
}
function _ecma_number_get_fraction_and_exponent($0, $1, $2) {
 $0 = +$0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$020 = 0, $$1 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $23 = 0, $25 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0;
 $3 = _ecma_number_get_biased_exponent_field($0) | 0; //@line 3103
 $4 = _ecma_number_get_fraction_field($0) | 0; //@line 3104
 $5 = tempRet0; //@line 3105
 if (!$3) {
  if (_ecma_number_is_zero($0) | 0) {
   $$1 = -1023; //@line 3110
   $25 = $4; //@line 3110
   $28 = $5; //@line 3110
  } else {
   if (0 == 0 & ($5 & 1048576 | 0) == 0) {
    $$020 = -1022; //@line 3117
    $12 = $4; //@line 3117
    $13 = $5; //@line 3117
    while (1) {
     $14 = _bitshift64Shl($12 | 0, $13 | 0, 1) | 0; //@line 3119
     $15 = tempRet0; //@line 3120
     $16 = $$020 + -1 | 0; //@line 3121
     if (0 == 0 & ($15 & 1048576 | 0) == 0) {
      $$020 = $16; //@line 3127
      $12 = $14; //@line 3127
      $13 = $15; //@line 3127
     } else {
      $$1 = $16; //@line 3129
      $25 = $14; //@line 3129
      $28 = $15; //@line 3129
      break;
     }
    }
   } else {
    $$1 = -1022; //@line 3134
    $25 = $4; //@line 3134
    $28 = $5; //@line 3134
   }
  }
 } else {
  _ecma_number_is_infinity($0) | 0; //@line 3138
  $$1 = $3 + -1023 | 0; //@line 3141
  $25 = $4; //@line 3141
  $28 = $5 | 1048576; //@line 3141
 }
 $23 = $1; //@line 3143
 SAFE_HEAP_STORE($23 | 0, $25 | 0, 4);
 SAFE_HEAP_STORE($23 + 4 | 0, $28 | 0, 4);
 SAFE_HEAP_STORE($2 | 0, $$1 | 0, 4);
 return 52; //@line 3150
}
function _ecma_builtin_function_helper_get_function_arguments($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$03138 = 0, $$03437 = 0, $$1 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $6 = 0, $9 = 0;
 L1 : do {
  if ($1 >>> 0 < 2) {
   $$1 = _ecma_make_string_value(_ecma_get_magic_string(0) | 0) | 0; //@line 3823
  } else {
   $6 = _ecma_op_to_string(SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0) | 0; //@line 3826
   if (($1 | 0) == 2 | ($6 | 0) == 24) {
    $$1 = $6; //@line 3831
   } else {
    $9 = $1 + -1 | 0; //@line 3833
    if ($9 >>> 0 > 1) {
     $$03138 = $6; //@line 3836
     $$03437 = 1; //@line 3836
     while (1) {
      $13 = _ecma_op_to_string(SAFE_HEAP_LOAD($0 + ($$03437 << 2) | 0, 4, 0) | 0 | 0) | 0; //@line 3840
      if (($13 | 0) == 24) {
       break;
      }
      $16 = _ecma_append_magic_string_to_string(_ecma_get_string_from_value($$03138) | 0, 2) | 0; //@line 3846
      $17 = _ecma_get_string_from_value($13) | 0; //@line 3847
      $18 = _ecma_concat_ecma_strings($16, $17) | 0; //@line 3848
      _ecma_deref_ecma_string($17); //@line 3849
      $19 = _ecma_make_string_value($18) | 0; //@line 3850
      $$03437 = $$03437 + 1 | 0; //@line 3851
      if ($$03437 >>> 0 >= $9 >>> 0) {
       $$1 = $19; //@line 3856
       break L1;
      } else {
       $$03138 = $19; //@line 3854
      }
     }
     _ecma_free_value($$03138); //@line 3860
     $$1 = 24; //@line 3861
    } else {
     $$1 = $6; //@line 3863
    }
   }
  }
 } while (0);
 return $$1 | 0; //@line 3868
}
function _ecma_op_general_object_default_value($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$03644 = 0, $$037 = 0, $$04249 = 0, $$4 = 0, $12 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, label = 0;
 if (!$1) {
  $3 = _ecma_object_class_is($0, 9) | 0; //@line 11750
  $$037 = $3 ? 2 : 1; //@line 11752
 } else {
  $$037 = $1; //@line 11754
 }
 $4 = ($$037 | 0) == 2; //@line 11756
 $5 = ($$037 | 0) == 1; //@line 11757
 $$04249 = 1; //@line 11758
 while (1) {
  $9 = _ecma_op_object_get_by_magic_id($0, $4 & ($$04249 | 0) == 1 | $5 & ($$04249 | 0) == 2 ? 48 : 40) | 0; //@line 11766
  if (($9 | 0) == 24) {
   $$4 = 24; //@line 11769
   break;
  }
  if (_ecma_op_is_callable($9) | 0) {
   $12 = _ecma_get_object_from_value($9) | 0; //@line 11774
   $14 = _ecma_op_function_call($12, _ecma_make_object_value($0) | 0, 0, 0) | 0; //@line 11776
   _ecma_free_value($9); //@line 11777
   if (($14 | 0) == 24) {
    $$4 = 24; //@line 11780
    break;
   } else {
    $$03644 = $14; //@line 11783
   }
  } else {
   _ecma_free_value($9); //@line 11786
   $$03644 = 8; //@line 11787
  }
  if (!(_ecma_is_value_empty($$03644) | 0)) {
   if (!(_ecma_is_value_object($$03644) | 0)) {
    $$4 = $$03644; //@line 11793
    break;
   }
  }
  _ecma_free_value($$03644); //@line 11797
  $$04249 = $$04249 + 1 | 0; //@line 11798
  if ($$04249 >>> 0 >= 3) {
   label = 11; //@line 11803
   break;
  }
 }
 if ((label | 0) == 11) {
  $$4 = _ecma_raise_type_error(4131) | 0; //@line 11809
 }
 return $$4 | 0; //@line 11811
}
function _ecma_bytecode_deref($0) {
 $0 = $0 | 0;
 var $$045 = 0, $$04648 = 0, $$047 = 0, $$pre$phiZ2D = 0, $1 = 0, $25 = 0, $26 = 0, $3 = 0, $33 = 0, $7 = 0;
 $1 = $0 + 2 | 0; //@line 7116
 $3 = (SAFE_HEAP_LOAD($1 | 0, 2, 0) | 0 | 0) + -1 << 16 >> 16; //@line 7118
 SAFE_HEAP_STORE($1 | 0, $3 | 0, 2);
 if (!($3 << 16 >> 16)) {
  $7 = SAFE_HEAP_LOAD($0 + 4 | 0, 2, 1) | 0 | 0; //@line 7124
  if (!($7 & 1)) {
   $$pre$phiZ2D = $0; //@line 7128
  } else {
   if (!($7 & 4)) {
    $$045 = SAFE_HEAP_LOAD($0 + 11 >> 0 | 0, 1, 1) | 0 | 0; //@line 7139
    $$047 = SAFE_HEAP_LOAD($0 + 10 >> 0 | 0, 1, 1) | 0 | 0; //@line 7139
    $26 = 2; //@line 7139
   } else {
    $$045 = SAFE_HEAP_LOAD($0 + 16 | 0, 2, 1) | 0 | 0; //@line 7147
    $$047 = SAFE_HEAP_LOAD($0 + 14 | 0, 2, 1) | 0 | 0; //@line 7147
    $26 = 3; //@line 7147
   }
   if ($$047 >>> 0 < $$045 >>> 0) {
    $25 = $0 + ($26 * 6 | 0) | 0; //@line 7151
    $$04648 = $$047; //@line 7152
    do {
     $33 = _jmem_decompress_pointer(SAFE_HEAP_LOAD($25 + ($$04648 << 1) | 0, 2, 1) | 0 | 0) | 0; //@line 7157
     if (($33 | 0) != ($0 | 0)) {
      _ecma_bytecode_deref($33); //@line 7160
     }
     $$04648 = $$04648 + 1 | 0; //@line 7162
    } while (($$04648 | 0) != ($$045 | 0));
   }
   _jmem_stats_free_byte_code_bytes((SAFE_HEAP_LOAD($0 | 0, 2, 1) | 0 | 0) << 3); //@line 7174
   $$pre$phiZ2D = $0; //@line 7175
  }
  _jmem_heap_free_block($0, (SAFE_HEAP_LOAD($$pre$phiZ2D | 0, 2, 1) | 0 | 0) << 3); //@line 7180
 }
 return;
}
function _ecma_lcache_insert($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$043 = 0, $$1 = 0, $18 = 0, $23 = 0, $25 = 0, $3 = 0, $8 = 0, label = 0;
 $3 = _jmem_compress_pointer($0) | 0; //@line 7219
 $8 = ((_ecma_string_get_property_name_hash(SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0, $1) | 0) ^ $3) & 127; //@line 7224
 $$043 = 0; //@line 7225
 while (1) {
  if (!(SAFE_HEAP_LOAD(536548 + ($8 << 4) + ($$043 << 3) + 4 | 0, 2, 0) | 0)) {
   $$1 = $$043; //@line 7231
   break;
  }
  $$043 = $$043 + 1 | 0; //@line 7234
  if ($$043 >>> 0 >= 2) {
   label = 4; //@line 7239
   break;
  }
 }
 if ((label | 0) == 4) {
  if (($$043 | 0) == 2) {
   SAFE_HEAP_STORE(536548 + ($8 << 4) + 12 | 0, 0 | 0, 2);
   _ecma_set_property_lcached(SAFE_HEAP_LOAD(536548 + ($8 << 4) + 8 | 0, 4, 0) | 0 | 0, 0); //@line 7250
   $18 = 536548 + ($8 << 4) | 0; //@line 7252
   $23 = SAFE_HEAP_LOAD($18 + 4 | 0, 4, 0) | 0 | 0; //@line 7257
   $25 = 536548 + ($8 << 4) + 8 | 0; //@line 7259
   SAFE_HEAP_STORE($25 | 0, SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0, 4);
   SAFE_HEAP_STORE($25 + 4 | 0, $23 | 0, 4);
   $$1 = 0; //@line 7265
  } else {
   $$1 = $$043; //@line 7267
  }
 }
 SAFE_HEAP_STORE(536548 + ($8 << 4) + ($$1 << 3) + 4 | 0, _jmem_compress_pointer($0) | 0 | 0, 2);
 SAFE_HEAP_STORE(536548 + ($8 << 4) + ($$1 << 3) + 6 | 0, $1 | 0, 2);
 SAFE_HEAP_STORE(536548 + ($8 << 4) + ($$1 << 3) | 0, $2 | 0, 4);
 _ecma_set_property_lcached($2, 1); //@line 7277
 return;
}
function _lexer_expect_identifier($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $8 = 0, $9 = 0;
 _lexer_skip_spaces($0); //@line 9350
 SAFE_HEAP_STORE($0 + 192 | 0, SAFE_HEAP_LOAD($0 + 224 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($0 + 196 | 0, SAFE_HEAP_LOAD($0 + 228 | 0, 4, 0) | 0 | 0, 4);
 $8 = $0 + 216 | 0; //@line 9359
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0; //@line 9360
 do {
  if ($9 >>> 0 < (SAFE_HEAP_LOAD($0 + 220 | 0, 4, 0) | 0 | 0) >>> 0) {
   if (!(_lit_char_is_identifier_start($9) | 0)) {
    if ((SAFE_HEAP_LOAD((SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0) >> 0 | 0, 1, 0) | 0 | 0) != 92) {
     break;
    }
   }
   _lexer_parse_identifier($0, $1 << 24 >> 24 != 1); //@line 9376
   if ((SAFE_HEAP_LOAD($0 + 188 >> 0 | 0, 1, 0) | 0 | 0) == 1) {
    _lexer_construct_literal_object($0, $0 + 200 | 0, $1); //@line 9382
    L7 : do {
     if (!($1 << 24 >> 24)) {
      if ((SAFE_HEAP_LOAD($0 + 168 | 0, 4, 0) | 0) & 1 | 0) {
       switch (SAFE_HEAP_LOAD($0 + 214 >> 0 | 0, 1, 0) | 0 | 0) {
       case 0:
        {
         break L7;
         break;
        }
       case 1:
        {
         $$0 = 30; //@line 9399
         break;
        }
       default:
        {
         $$0 = 31; //@line 9403
        }
       }
       _parser_raise_error($0, $$0); //@line 9406
      }
     }
    } while (0);
    SAFE_HEAP_STORE($0 + 206 >> 0 | 0, $1 | 0, 1);
    return;
   }
  }
 } while (0);
 _parser_raise_error($0, 51); //@line 9417
}
function _parser_parse_array_literal($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$015 = 0, $1 = 0, $2 = 0, $5 = 0, $6 = 0, label = 0;
 _parser_emit_cbc($0, 28); //@line 16189
 _lexer_next_token($0); //@line 16190
 $1 = $0 + 188 | 0; //@line 16191
 $2 = SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0; //@line 16192
 if ($2 << 24 >> 24 != 56) {
  $$015 = 0; //@line 16195
  $6 = $2; //@line 16195
  L2 : while (1) {
   $5 = $$015 + 1 | 0; //@line 16197
   L4 : do {
    if ($6 << 24 >> 24 == 60) {
     _parser_emit_cbc($0, 36); //@line 16201
     _lexer_next_token($0); //@line 16202
    } else {
     _parser_parse_expression($0, 4); //@line 16204
     switch (SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0) {
     case 56:
      {
       break L4;
       break;
      }
     case 60:
      {
       break;
      }
     default:
      {
       label = 9; //@line 16215
       break L2;
      }
     }
     _lexer_next_token($0); //@line 16219
    }
   } while (0);
   if ($5 >>> 0 > 63) {
    _parser_emit_cbc_call($0, 32, $5); //@line 16224
    $$0$be = 0; //@line 16225
   } else {
    $$0$be = $5; //@line 16227
   }
   $6 = SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0; //@line 16229
   if ($6 << 24 >> 24 == 56) {
    break;
   } else {
    $$015 = $$0$be; //@line 16234
   }
  }
  if ((label | 0) == 9) {
   _parser_raise_error($0, 49); //@line 16238
  }
  if ($$0$be | 0) {
   _parser_emit_cbc_call($0, 32, $$0$be); //@line 16243
  }
 }
 return;
}
function _parser_stack_pop($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $15 = 0, $18 = 0, $19 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0;
 $3 = $0 + 288 | 0; //@line 10265
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0; //@line 10266
 $5 = $0 + 296 | 0; //@line 10267
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0; //@line 10268
 $8 = ($1 | 0) != 0; //@line 10270
 do {
  if ($6 >>> 0 > $2 >>> 0) {
   $9 = $6 - $2 | 0; //@line 10273
   SAFE_HEAP_STORE($5 | 0, $9 | 0, 4);
   SAFE_HEAP_STORE($0 + 304 >> 0 | 0, SAFE_HEAP_LOAD($9 + -1 + ($4 + 4) >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   if ($8) {
    _memcpy($1 | 0, $4 + 4 + $9 | 0, $2 | 0) | 0; //@line 10282
   }
  } else {
   $15 = $2 - $6 | 0; //@line 10285
   if ($8) {
    _memcpy($1 + $15 | 0, $4 + 4 | 0, $6 | 0) | 0; //@line 10289
   }
   $18 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0; //@line 10291
   SAFE_HEAP_STORE($3 | 0, $18 | 0, 4);
   $19 = 60 - $15 | 0; //@line 10293
   SAFE_HEAP_STORE($5 | 0, $19 | 0, 4);
   SAFE_HEAP_STORE($0 + 304 >> 0 | 0, SAFE_HEAP_LOAD($19 + -1 + ($18 + 4) >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   if ($8 & ($15 | 0) != 0) {
    _memcpy($1 | 0, $18 + 4 + $19 | 0, $15 | 0) | 0; //@line 10304
   }
   $26 = $0 + 300 | 0; //@line 10306
   if (!(SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0)) {
    SAFE_HEAP_STORE($26 | 0, $4 | 0, 4);
    break;
   } else {
    _parser_free($4, 64); //@line 10313
    break;
   }
  }
 } while (0);
 return;
}
function _lit_read_code_unit_from_hex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$02336 = 0, $$024$lcssa = 0, $$02435 = 0, $$02734 = 0, $$1$in = 0, $$126 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0;
 L1 : do {
  if (!$1) {
   $$024$lcssa = 0; //@line 14985
   label = 10; //@line 14986
  } else {
   $$02336 = 0; //@line 14988
   $$02435 = 0; //@line 14988
   $$02734 = $0; //@line 14988
   while (1) {
    $4 = $$02435 << 4; //@line 14990
    $5 = $4 & 1048560; //@line 14991
    $6 = SAFE_HEAP_LOAD($$02734 >> 0 | 0, 1, 0) | 0 | 0; //@line 14992
    $7 = $6 & 255; //@line 14993
    do {
     if (($6 + -48 & 255) < 10) {
      $$1$in = $7 + 65488 & 65535 | $4 & 65520; //@line 15002
     } else {
      if (($6 + -97 & 255) < 6) {
       $$1$in = $7 + 65449 & 65535 | $4 & 65520; //@line 15011
       break;
      }
      if (($6 + -65 & 255) >= 6) {
       $$126 = 0; //@line 15017
       break L1;
      }
      $$1$in = $7 + 65481 | $5; //@line 15022
     }
    } while (0);
    $$02336 = $$02336 + 1 | 0; //@line 15026
    if ($$02336 >>> 0 >= $1 >>> 0) {
     break;
    } else {
     $$02435 = $$1$in; //@line 15029
     $$02734 = $$02734 + 1 | 0; //@line 15029
    }
   }
   $$024$lcssa = $$1$in & 65535; //@line 15035
   label = 10; //@line 15036
  }
 } while (0);
 if ((label | 0) == 10) {
  SAFE_HEAP_STORE($2 | 0, $$024$lcssa | 0, 2);
  $$126 = 1; //@line 15041
 }
 return $$126 | 0; //@line 15043
}
function _lit_is_ex_utf8_string_magic($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$042$be = 0, $$04256 = 0, $$047$be = 0, $$04755 = 0, $$5 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $8 = 0, $9 = 0;
 $2 = SAFE_HEAP_LOAD(134114 * 4 | 0, 4, 0) | 0 | 0; //@line 15204
 L1 : do {
  if (!$2) {
   $$5 = 0; //@line 15208
  } else {
   if ((_lit_get_magic_string_ex_size($2 + -1 | 0) | 0) >>> 0 < $1 >>> 0) {
    $$5 = $2; //@line 15214
   } else {
    $$04256 = 0; //@line 15216
    $$04755 = $2; //@line 15216
    while (1) {
     $8 = ($$04256 + $$04755 | 0) >>> 1; //@line 15219
     $9 = _lit_get_magic_string_ex_size($8) | 0; //@line 15220
     if (($9 | 0) == ($1 | 0)) {
      $12 = _memcmp(_lit_get_magic_string_ex_utf8($8) | 0, $0, $1) | 0; //@line 15224
      $14 = ($12 | 0) < 0; //@line 15226
      if (!$12) {
       $$5 = $8; //@line 15231
       break L1;
      } else {
       $$042$be = $14 ? $8 + 1 | 0 : $$04256; //@line 15234
       $$047$be = $14 ? $$04755 : $8; //@line 15234
      }
     } else {
      $16 = $9 >>> 0 < $1 >>> 0; //@line 15237
      $$042$be = $16 ? $8 + 1 | 0 : $$04256; //@line 15241
      $$047$be = $16 ? $$04755 : $8; //@line 15241
     }
     if ($$042$be >>> 0 < $$047$be >>> 0) {
      $$04256 = $$042$be; //@line 15245
      $$04755 = $$047$be; //@line 15245
     } else {
      $$5 = $2; //@line 15247
      break;
     }
    }
   }
  }
 } while (0);
 return $$5 | 0; //@line 15254
}
function _ecma_get_number($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $$sink = 0.0, $11 = 0, $13 = 0, label = 0;
 do {
  if (_ecma_is_value_integer_number($0) | 0) {
   $$sink = +(_ecma_get_integer_from_value($0) | 0); //@line 9839
   label = 14; //@line 9840
  } else {
   if (_ecma_is_value_float_number($0) | 0) {
    $$sink = +_ecma_get_float_from_value($0); //@line 9845
    label = 14; //@line 9846
    break;
   }
   if (_ecma_is_value_string($0) | 0) {
    $$sink = +_ecma_string_to_number(_ecma_get_string_from_value($0) | 0); //@line 9853
    label = 14; //@line 9854
    break;
   }
   if (_ecma_is_value_object($0) | 0) {
    $11 = _ecma_op_to_primitive($0, 1) | 0; //@line 9859
    if (($11 | 0) == 24) {
     $$1 = 24; //@line 9862
     break;
    }
    $13 = _ecma_get_number($11, $1) | 0; //@line 9865
    _ecma_fast_free_value($11); //@line 9866
    return $13 | 0; //@line 9867
   }
   if (_ecma_is_value_undefined($0) | 0) {
    $$sink = +_ecma_number_make_nan(); //@line 9872
    label = 14; //@line 9873
    break;
   }
   if (_ecma_is_value_null($0) | 0) {
    $$sink = 0.0; //@line 9878
    label = 14; //@line 9879
   } else {
    $$sink = +((_ecma_is_value_true($0) | 0) & 1); //@line 9883
    label = 14; //@line 9884
   }
  }
 } while (0);
 if ((label | 0) == 14) {
  SAFE_HEAP_STORE_D($1 | 0, +$$sink, 8);
  $$1 = 8; //@line 9890
 }
 return $$1 | 0; //@line 9892
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 3902
  $8 = $0; //@line 3902
  $9 = $1; //@line 3902
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 3904
   $$0914 = $$0914 + -1 | 0; //@line 3908
   SAFE_HEAP_STORE($$0914 >> 0 | 0, $10 & 255 | 48 | 0, 1);
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 3910
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 3918
   }
  }
  $$010$lcssa$off0 = $8; //@line 3923
  $$09$lcssa = $$0914; //@line 3923
 } else {
  $$010$lcssa$off0 = $0; //@line 3925
  $$09$lcssa = $2; //@line 3925
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 3929
 } else {
  $$012 = $$010$lcssa$off0; //@line 3931
  $$111 = $$09$lcssa; //@line 3931
  while (1) {
   $26 = $$111 + -1 | 0; //@line 3936
   SAFE_HEAP_STORE($26 >> 0 | 0, ($$012 >>> 0) % 10 | 0 | 48 | 0, 1);
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 3941
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 3944
    $$111 = $26; //@line 3944
   }
  }
 }
 return $$1$lcssa | 0; //@line 3948
}
function _lit_read_code_point_from_utf8($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$025$ph = 0, $$026$ph = 0, $$027 = 0, $$030 = 0, $$129 = 0, $22 = 0, $4 = 0, $storemerge = 0;
 $4 = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 1) | 0 | 0; //@line 15700
 L1 : do {
  if (!($4 & 128)) {
   $$027 = 1; //@line 15706
   $storemerge = $4 & 127; //@line 15706
  } else {
   do {
    if (($4 & 224 | 0) == 192) {
     $$025$ph = 2; //@line 15713
     $$026$ph = $4 & 31; //@line 15713
    } else {
     if (($4 & 240 | 0) == 224) {
      $$025$ph = 3; //@line 15719
      $$026$ph = $4 & 15; //@line 15719
      break;
     } else {
      if (($4 & 248 | 0) == 240) {
       $$025$ph = 4; //@line 15726
       $$026$ph = $4 & 7; //@line 15726
       break;
      } else {
       $$027 = 0; //@line 15729
       $storemerge = 0; //@line 15729
       break L1;
      }
     }
    }
   } while (0);
   $$030 = 1; //@line 15735
   $$129 = $$026$ph; //@line 15735
   while (1) {
    $22 = (SAFE_HEAP_LOAD($0 + $$030 >> 0 | 0, 1, 0) | 0) & 63 | $$129 << 6; //@line 15742
    $$030 = $$030 + 1 | 0; //@line 15743
    if (($$030 | 0) == ($$025$ph | 0)) {
     $$027 = $$025$ph; //@line 15746
     $storemerge = $22; //@line 15746
     break;
    } else {
     $$129 = $22; //@line 15749
    }
   }
  }
 } while (0);
 SAFE_HEAP_STORE($2 | 0, $storemerge | 0, 4);
 return $$027 | 0; //@line 15755
}
function _ecma_lcache_lookup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i = 0, $$02930 = 0, $$3$ph = 0, $10 = 0, $12 = 0, $2 = 0, $23 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0;
 $2 = _jmem_compress_pointer($0) | 0; //@line 7286
 $6 = ((_ecma_string_hash($1) | 0) ^ $2) & 127; //@line 7290
 $7 = 536548 + ($6 << 4) | 0; //@line 7291
 $8 = 536548 + ($6 << 4) + 16 | 0; //@line 7292
 $10 = (SAFE_HEAP_LOAD($1 | 0, 2, 0) | 0) & 7; //@line 7294
 if (($10 & 65535) < 3) {
  $12 = SAFE_HEAP_LOAD($1 + 4 | 0, 4, 0) | 0 | 0; //@line 7298
  if ($12 >>> 0 < 65536) {
   $$0 = $10 & 65535; //@line 7303
   $$0$i = $12 & 65535; //@line 7303
  } else {
   label = 4; //@line 7305
  }
 } else {
  label = 4; //@line 7308
 }
 if ((label | 0) == 4) {
  $$0 = 3; //@line 7312
  $$0$i = _jmem_compress_pointer($1) | 0; //@line 7312
 }
 $$02930 = $7; //@line 7314
 while (1) {
  if ((SAFE_HEAP_LOAD($$02930 + 4 | 0, 2, 0) | 0 | 0) == $2 << 16 >> 16) {
   if ((SAFE_HEAP_LOAD($$02930 + 6 | 0, 2, 0) | 0 | 0) == $$0$i << 16 >> 16) {
    $23 = SAFE_HEAP_LOAD($$02930 | 0, 4, 0) | 0 | 0; //@line 7324
    if (((SAFE_HEAP_LOAD($23 >> 0 | 0, 1, 1) | 0 | 0) >>> 6 | 0) == ($$0 | 0)) {
     $$3$ph = $23; //@line 7330
     break;
    }
   }
  }
  $$02930 = $$02930 + 8 | 0; //@line 7335
  if ($$02930 >>> 0 >= $8 >>> 0) {
   $$3$ph = 0; //@line 7340
   break;
  }
 }
 return $$3$ph | 0; //@line 7344
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 2260
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 2265
   label = 4; //@line 2266
  } else {
   $$01519 = $0; //@line 2268
   $23 = $1; //@line 2268
   while (1) {
    if (!(SAFE_HEAP_LOAD($$01519 >> 0 | 0, 1, 0) | 0)) {
     $$sink = $23; //@line 2273
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 2276
    $23 = $6; //@line 2277
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 2281
     label = 4; //@line 2282
     break;
    } else {
     $$01519 = $6; //@line 2285
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 2291
  while (1) {
   $10 = SAFE_HEAP_LOAD($$0 | 0, 4, 0) | 0 | 0; //@line 2293
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 2301
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 2309
  } else {
   $$pn = $$0; //@line 2311
   while (1) {
    $19 = $$pn + 1 | 0; //@line 2313
    if (!(SAFE_HEAP_LOAD($19 >> 0 | 0, 1, 0) | 0)) {
     $$1$lcssa = $19; //@line 2317
     break;
    } else {
     $$pn = $19; //@line 2320
    }
   }
  }
  $$sink = $$1$lcssa; //@line 2325
 }
 return $$sink - $1 | 0; //@line 2328
}
function _ecma_string_get_size($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$lcssa$i = 0, $$017$lcssa$i = 0, $$01720$i = 0, $$01819$i = 0, $10 = 0, $11 = 0, $8 = 0;
 switch ((SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 7) {
 case 3:
  {
   $$0 = SAFE_HEAP_LOAD($0 + 4 | 0, 2, 1) | 0 | 0; //@line 4929
   break;
  }
 case 4:
  {
   $$0 = SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0; //@line 4935
   break;
  }
 case 0:
  {
   $8 = SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0; //@line 4940
   if ($8 >>> 0 < 100) {
    $$0$lcssa$i = 1; //@line 4943
    $$017$lcssa$i = 1; //@line 4943
   } else {
    $$01720$i = 1; //@line 4945
    $$01819$i = 100; //@line 4945
    while (1) {
     $10 = $$01819$i * 100 | 0; //@line 4947
     $11 = $$01720$i + 2 | 0; //@line 4948
     if ($11 >>> 0 > 8 | $10 >>> 0 > $8 >>> 0) {
      $$0$lcssa$i = $$01819$i; //@line 4953
      $$017$lcssa$i = $11; //@line 4953
      break;
     } else {
      $$01720$i = $11; //@line 4956
      $$01819$i = $10; //@line 4956
     }
    }
   }
   $$0 = (($$0$lcssa$i * 10 | 0) >>> 0 <= $8 >>> 0 & 1) + $$017$lcssa$i | 0; //@line 4964
   break;
  }
 case 1:
  {
   $$0 = _lit_get_magic_string_size(SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0) | 0; //@line 4971
   break;
  }
 default:
  {
   $$0 = _lit_get_magic_string_ex_size(SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0) | 0; //@line 4978
  }
 }
 return $$0 | 0; //@line 4981
}
function _emscripten_snapshot_compiler_compile($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$1 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 130
 STACKTOP = STACKTOP + 16 | 0; //@line 131
 $6 = sp; //@line 132
 if (_jerry_is_valid_utf8_string($0, $1) | 0) {
  _jerry_init(0); //@line 135
  $9 = _jerry_parse($0, $1, $3) | 0; //@line 136
  SAFE_HEAP_STORE($6 | 0, $9 | 0, 4);
  if (_jerry_value_has_error_flag($9) | 0) {
   _jerry_value_clear_error_flag($6); //@line 140
   $12 = _jerry_value_to_string(SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0) | 0; //@line 142
   $13 = _jerry_get_utf8_string_size($12) | 0; //@line 143
   $15 = _malloc($13 + 1 | 0) | 0; //@line 145
   _jerry_string_to_utf8_char_buffer($12, $15, $13) | 0; //@line 146
   SAFE_HEAP_STORE($15 + $13 >> 0 | 0, 0 | 0, 1);
   _jerry_cleanup(); //@line 149
   _emscripten_asm_const_ii(1, $15 | 0) | 0; //@line 150
   _free($15); //@line 151
   $$0 = 0; //@line 152
  } else {
   $18 = _jerry_parse_and_save_snapshot($0, $1, $2, $3, $4, $5) | 0; //@line 154
   _jerry_cleanup(); //@line 155
   $$0 = $18; //@line 156
  }
  $$1 = $$0; //@line 158
 } else {
  _emscripten_asm_const_i(0) | 0; //@line 160
  $$1 = 0; //@line 161
 }
 STACKTOP = sp; //@line 163
 return $$1 | 0; //@line 163
}
function _lit_compare_utf8_strings_relational($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$026 = 0, $$027 = 0, $$028 = 0, $$2 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16155
 STACKTOP = STACKTOP + 16 | 0; //@line 16156
 $4 = sp + 2 | 0; //@line 16157
 $5 = sp; //@line 16158
 $6 = $0 + $1 | 0; //@line 16159
 $7 = $2 + $3 | 0; //@line 16160
 $$026 = 0; //@line 16161
 $$027 = $0; //@line 16161
 $$028 = $2; //@line 16161
 while (1) {
  $8 = $$027 >>> 0 < $6 >>> 0; //@line 16163
  $9 = $$028 >>> 0 < $7 >>> 0; //@line 16164
  if (!($9 & $8)) {
   label = 4; //@line 16167
   break;
  }
  $$027 = $$027 + (_lit_read_code_unit_from_utf8($$027, $4) | 0) | 0; //@line 16171
  $$028 = $$028 + (_lit_read_code_unit_from_utf8($$028, $5) | 0) | 0; //@line 16173
  $14 = SAFE_HEAP_LOAD($4 | 0, 2, 0) | 0 | 0; //@line 16174
  $15 = SAFE_HEAP_LOAD($5 | 0, 2, 0) | 0 | 0; //@line 16175
  $$026 = $$026 & ($14 & 65535) <= ($15 & 65535); //@line 16177
  if ($14 << 16 >> 16 != $15 << 16 >> 16) {
   label = 5; //@line 16182
   break;
  }
 }
 if ((label | 0) == 4) {
  $$2 = $9 & ($8 ^ 1); //@line 16189
 } else if ((label | 0) == 5) {
  $$2 = ($14 & 65535) < ($15 & 65535) | $$026; //@line 16194
 }
 STACKTOP = sp; //@line 16196
 return $$2 | 0; //@line 16196
}
function _ecma_op_arguments_object_define_own_property($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $13 = 0, $14 = 0, $17 = 0, $18 = 0, $28 = 0, $4 = 0, $6 = 0;
 $4 = _ecma_op_general_object_define_own_property($0, $1, $2, $3) | 0; //@line 11549
 do {
  if (($4 | 0) != 24) {
   $6 = _ecma_string_get_array_index($1) | 0; //@line 11553
   if (($6 | 0) != -1) {
    if ($6 >>> 0 < (SAFE_HEAP_LOAD($0 + 10 | 0, 2, 1) | 0 | 0) >>> 0) {
     $13 = $0 + 16 + ($6 << 1) | 0; //@line 11562
     $14 = SAFE_HEAP_LOAD($13 | 0, 2, 0) | 0 | 0; //@line 11563
     if ($14 << 16 >> 16) {
      $17 = _jmem_decompress_pointer($14 & 65535) | 0; //@line 11567
      $18 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 11568
      if (!($18 & 6)) {
       if (!($18 & 1)) {
        $28 = $18; //@line 11575
       } else {
        _ecma_op_set_mutable_binding(SAFE_HEAP_LOAD($0 + 12 | 0, 4, 0) | 0 | 0, $17, SAFE_HEAP_LOAD($2 + 4 | 0, 4, 0) | 0 | 0, 1) | 0; //@line 11581
        $28 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 11583
       }
       if (($28 & 24) != 8) {
        break;
       }
       _ecma_deref_ecma_string($17); //@line 11590
      } else {
       _ecma_deref_ecma_string($17); //@line 11592
      }
      SAFE_HEAP_STORE($13 | 0, 0 | 0, 2);
     }
    }
   }
  }
 } while (0);
 return $4 | 0; //@line 11600
}
function _parser_parse_function_expression($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0;
 $1 = $0 + 240 | 0; //@line 16052
 switch (SAFE_HEAP_LOAD($1 | 0, 2, 0) | 0 | 0) {
 case 40:
  {
   $3 = $0 + 232 | 0; //@line 16056
   $4 = SAFE_HEAP_LOAD($3 | 0, 2, 0) | 0 | 0; //@line 16057
   SAFE_HEAP_STORE($1 | 0, 0 | 0, 2);
   $5 = _lexer_construct_function_object($0, 14) | 0; //@line 16059
   SAFE_HEAP_STORE($1 | 0, 41 | 0, 2);
   SAFE_HEAP_STORE($3 | 0, $4 | 0, 2);
   SAFE_HEAP_STORE($0 + 234 | 0, $5 | 0, 2);
   break;
  }
 case 41:
  {
   $7 = $0 + 232 | 0; //@line 16067
   $8 = SAFE_HEAP_LOAD($7 | 0, 2, 0) | 0 | 0; //@line 16068
   $9 = $0 + 234 | 0; //@line 16069
   $10 = SAFE_HEAP_LOAD($9 | 0, 2, 0) | 0 | 0; //@line 16070
   SAFE_HEAP_STORE($1 | 0, 0 | 0, 2);
   $11 = _lexer_construct_function_object($0, 14) | 0; //@line 16072
   SAFE_HEAP_STORE($1 | 0, 42 | 0, 2);
   SAFE_HEAP_STORE($7 | 0, $8 | 0, 2);
   SAFE_HEAP_STORE($9 | 0, $10 | 0, 2);
   SAFE_HEAP_STORE($0 + 236 | 0, $11 | 0, 2);
   break;
  }
 default:
  {
   _parser_flush_cbc($0); //@line 16081
   _parser_emit_cbc_literal($0, 40, _lexer_construct_function_object($0, 14) | 0); //@line 16083
  }
 }
 SAFE_HEAP_STORE($0 + 238 >> 0 | 0, 3 | 0, 1);
 SAFE_HEAP_STORE($0 + 239 >> 0 | 0, 0 | 0, 1);
 return;
}
function _do_number_arithmetic($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $$09 = 0, $$1 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 13657
 STACKTOP = STACKTOP + 16 | 0; //@line 13658
 $3 = sp + 8 | 0; //@line 13659
 $4 = sp; //@line 13660
 $5 = _ecma_get_number($1, $3) | 0; //@line 13661
 if (_ecma_is_value_empty($5) | 0) {
  $7 = _ecma_get_number($2, $4) | 0; //@line 13664
  if (_ecma_is_value_empty($7) | 0) {
   switch ($0 | 0) {
   case 0:
    {
     $$0 = +(+SAFE_HEAP_LOAD_D($3 | 0, 8)) - +(+SAFE_HEAP_LOAD_D($4 | 0, 8)); //@line 13672
     break;
    }
   case 1:
    {
     $$0 = +(+SAFE_HEAP_LOAD_D($3 | 0, 8)) * +(+SAFE_HEAP_LOAD_D($4 | 0, 8)); //@line 13679
     break;
    }
   case 2:
    {
     $$0 = +(+SAFE_HEAP_LOAD_D($3 | 0, 8)) / +(+SAFE_HEAP_LOAD_D($4 | 0, 8)); //@line 13686
     break;
    }
   case 3:
    {
     $$0 = +_ecma_op_number_remainder(+(+SAFE_HEAP_LOAD_D($3 | 0, 8)), +(+SAFE_HEAP_LOAD_D($4 | 0, 8))); //@line 13693
     break;
    }
   default:
    {
     $$0 = 0.0; //@line 13697
    }
   }
   $$09 = _ecma_make_number_value($$0) | 0; //@line 13701
  } else {
   $$09 = $7; //@line 13703
  }
  $$1 = $$09; //@line 13705
 } else {
  $$1 = $5; //@line 13707
 }
 STACKTOP = sp; //@line 13709
 return $$1 | 0; //@line 13709
}
function _ecma_builtin_object_object_define_property($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $$3 = 0, $10 = 0, $12 = 0, $14 = 0, $3 = 0, $6 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 6243
 STACKTOP = STACKTOP + 16 | 0; //@line 6244
 $3 = sp; //@line 6245
 if (_ecma_is_value_object($0) | 0) {
  $6 = _ecma_get_object_from_value($0) | 0; //@line 6248
  $7 = _ecma_op_to_string($1) | 0; //@line 6249
  if (($7 | 0) == 24) {
   $$3 = 24; //@line 6252
  } else {
   $9 = _ecma_get_string_from_value($7) | 0; //@line 6254
   $10 = _ecma_op_to_property_descriptor($2, $3) | 0; //@line 6255
   if (($10 | 0) == 24) {
    $$1 = 24; //@line 6258
   } else {
    $12 = _ecma_op_object_define_own_property($6, $9, $3, 1) | 0; //@line 6260
    if (($12 | 0) == 24) {
     $$0 = 24; //@line 6263
    } else {
     $14 = _ecma_copy_value($0) | 0; //@line 6265
     _ecma_free_value($12); //@line 6266
     $$0 = $14; //@line 6267
    }
    _ecma_free_property_descriptor($3); //@line 6269
    _ecma_free_value($10); //@line 6270
    $$1 = $$0; //@line 6271
   }
   _ecma_free_value($7); //@line 6273
   $$3 = $$1; //@line 6274
  }
 } else {
  $$3 = _ecma_raise_type_error(6512) | 0; //@line 6278
 }
 STACKTOP = sp; //@line 6280
 return $$3 | 0; //@line 6280
}
function _ecma_new_ecma_string_from_number($0) {
 $0 = +$0;
 var $$0 = 0, $1 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $2 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 3658
 STACKTOP = STACKTOP + 64 | 0; //@line 3659
 $1 = sp; //@line 3660
 $2 = _ecma_number_to_uint32($0) | 0; //@line 3661
 do {
  if (+($2 >>> 0) == $0) {
   $$0 = _ecma_new_ecma_string_from_uint32($2) | 0; //@line 3667
  } else {
   if (_ecma_number_is_nan($0) | 0) {
    $$0 = _ecma_get_magic_string(6) | 0; //@line 3672
    break;
   }
   if (_ecma_number_is_infinity($0) | 0) {
    $9 = _ecma_number_is_negative($0) | 0; //@line 3677
    $$0 = _ecma_get_magic_string($9 ? 50 : 42) | 0; //@line 3680
    break;
   } else {
    $12 = _ecma_number_to_utf8_string($0, $1, 64) | 0; //@line 3683
    $14 = _ecma_alloc_string_buffer($12 + 8 | 0) | 0; //@line 3685
    SAFE_HEAP_STORE($14 | 0, 11 | 0, 2);
    SAFE_HEAP_STORE($14 + 2 | 0, _lit_utf8_string_calc_hash($1, $12) | 0 | 0, 2);
    $17 = $14 + 4 | 0; //@line 3690
    $18 = $12 & 65535; //@line 3691
    SAFE_HEAP_STORE($17 | 0, $18 | 0, 2);
    SAFE_HEAP_STORE($17 + 2 | 0, $18 | 0, 2);
    _memcpy($14 + 8 | 0, $1 | 0, $12 | 0) | 0; //@line 3696
    $$0 = $14; //@line 3697
    break;
   }
  }
 } while (0);
 STACKTOP = sp; //@line 3702
 return $$0 | 0; //@line 3702
}
function _ecma_builtin_object_prototype_dispatch_routine($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $17 = 0, $9 = 0;
 switch ($0 << 16 >> 16) {
 case 8:
  {
   $$0 = _ecma_builtin_object_prototype_object_to_string($1) | 0; //@line 5253
   break;
  }
 case 9:
  {
   $$0 = _ecma_builtin_object_prototype_object_value_of($1) | 0; //@line 5258
   break;
  }
 case 10:
  {
   $$0 = _ecma_builtin_object_prototype_object_to_locale_string($1) | 0; //@line 5263
   break;
  }
 case 11:
  {
   if (!$3) {
    $9 = 72; //@line 5269
   } else {
    $9 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 5272
   }
   $$0 = _ecma_builtin_object_prototype_object_has_own_property($1, $9) | 0; //@line 5275
   break;
  }
 case 12:
  {
   if (!$3) {
    $13 = 72; //@line 5281
   } else {
    $13 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 5284
   }
   $$0 = _ecma_builtin_object_prototype_object_is_prototype_of($1, $13) | 0; //@line 5287
   break;
  }
 case 13:
  {
   if (!$3) {
    $17 = 72; //@line 5293
   } else {
    $17 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 5296
   }
   $$0 = _ecma_builtin_object_prototype_object_property_is_enumerable($1, $17) | 0; //@line 5299
   break;
  }
 default:
  {}
 }
 return $$0 | 0; //@line 5306
}
function _ecma_builtin_object_object_is_sealed($0) {
 $0 = $0 | 0;
 var $$025 = 0, $$026 = 0, $$027 = 0, $11 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0;
 do {
  if (_ecma_is_value_object($0) | 0) {
   $3 = _ecma_get_object_from_value($0) | 0; //@line 5870
   if (_ecma_get_object_extensible($3) | 0) {
    $$025 = 40; //@line 5873
   } else {
    $5 = _ecma_op_object_get_property_names($3, 0, 0, 0) | 0; //@line 5875
    $6 = _ecma_collection_iterator_init($5) | 0; //@line 5876
    if (!$6) {
     _ecma_free_values_collection($5, 1); //@line 5879
    } else {
     $$026 = 1; //@line 5881
     $$027 = $6; //@line 5881
     do {
      $8 = _ecma_get_string_from_value(SAFE_HEAP_LOAD($$027 | 0, 4, 0) | 0 | 0) | 0; //@line 5884
      $$027 = _ecma_collection_iterator_next($$027) | 0; //@line 5885
      $11 = _ecma_is_property_configurable(_ecma_op_object_get_own_property($3, $8, 0, 0) | 0) | 0; //@line 5887
      $$026 = $11 ? 0 : $$026; //@line 5888
     } while (($$027 | 0) != 0 & ($11 ^ 1));
     _ecma_free_values_collection($5, 1); //@line 5900
     if (!($$026 & 1)) {
      $$025 = 40; //@line 5902
      break;
     }
    }
    $$025 = 56; //@line 5906
   }
  } else {
   $$025 = _ecma_raise_type_error(6512) | 0; //@line 5910
  }
 } while (0);
 return $$025 | 0; //@line 5913
}
function _ecma_op_function_has_instance($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$off0 = 0, $$028 = 0, $$1 = 0, $13 = 0, $8 = 0, $9 = 0;
 do {
  if ((_ecma_get_object_type($0) | 0) == 5) {
   $$1 = _ecma_op_object_has_instance(SAFE_HEAP_LOAD($0 + 8 | 0, 4, 0) | 0 | 0, $1) | 0; //@line 10631
  } else {
   if (_ecma_is_value_object($1) | 0) {
    $8 = _ecma_get_object_from_value($1) | 0; //@line 10635
    $9 = _ecma_op_object_get_by_magic_id($0, 56) | 0; //@line 10636
    if (($9 | 0) == 24) {
     $$1 = 24; //@line 10639
    } else {
     if (!(_ecma_is_value_object($9) | 0)) {
      _ecma_free_value($9); //@line 10643
      $$1 = _ecma_raise_type_error(3990) | 0; //@line 10645
      break;
     }
     $13 = _ecma_get_object_from_value($9) | 0; //@line 10648
     $$028 = $8; //@line 10649
     while (1) {
      $$028 = _ecma_get_object_prototype($$028) | 0; //@line 10651
      if (!$$028) {
       $$0$off0 = 0; //@line 10654
       break;
      }
      if (($$028 | 0) == ($13 | 0)) {
       $$0$off0 = 1; //@line 10659
       break;
      }
     }
     _ecma_deref_object($13); //@line 10665
     $$1 = _ecma_make_boolean_value($$0$off0) | 0; //@line 10667
    }
   } else {
    $$1 = 40; //@line 10670
   }
  }
 } while (0);
 return $$1 | 0; //@line 10674
}
function _ecma_free_property_descriptor($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $14 = 0, $17 = 0, $2 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 6994
 STACKTOP = STACKTOP + 16 | 0; //@line 6995
 $1 = sp; //@line 6996
 $2 = SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0 | 0; //@line 6997
 if (!($2 & 1)) {
  $8 = $2; //@line 7001
 } else {
  _ecma_free_value(SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0); //@line 7005
  $8 = SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0 | 0; //@line 7007
 }
 if (!($8 & 2)) {
  $14 = $8; //@line 7012
 } else {
  $11 = SAFE_HEAP_LOAD($0 + 8 | 0, 4, 0) | 0 | 0; //@line 7015
  if (!$11) {
   $14 = $8; //@line 7018
  } else {
   _ecma_deref_object($11); //@line 7020
   $14 = SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0 | 0; //@line 7022
  }
 }
 if ($14 & 4) {
  $17 = SAFE_HEAP_LOAD($0 + 12 | 0, 4, 0) | 0 | 0; //@line 7029
  if ($17 | 0) {
   _ecma_deref_object($17); //@line 7032
  }
 }
 _ecma_make_empty_property_descriptor($1); //@line 7035
 SAFE_HEAP_STORE($0 | 0, SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($0 + 4 | 0, SAFE_HEAP_LOAD($1 + 4 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($0 + 8 | 0, SAFE_HEAP_LOAD($1 + 8 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($0 + 12 | 0, SAFE_HEAP_LOAD($1 + 12 | 0, 4, 0) | 0 | 0, 4);
 STACKTOP = sp; //@line 7037
 return;
}
function _parser_set_branch_to_current_position($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $$125 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $27 = 0, $6 = 0;
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 13255
 if (SAFE_HEAP_LOAD($0 + 240 | 0, 2, 0) | 0 | 0) {
  _parser_flush_cbc($0); //@line 13260
 }
 $6 = $0 + 168 | 0; //@line 13262
 SAFE_HEAP_STORE($6 | 0, (SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0) & -65537 | 0, 4);
 $12 = SAFE_HEAP_LOAD($1 + 4 | 0, 4, 0) | 0 | 0; //@line 13269
 $14 = (SAFE_HEAP_LOAD($0 + 260 | 0, 4, 0) | 0 | 0) - ($12 >>> 8) | 0; //@line 13271
 $15 = $12 & 127; //@line 13272
 $18 = $15 + 1 | 0; //@line 13275
 SAFE_HEAP_STORE($2 + 4 + $15 >> 0 | 0, $14 >>> 16 | 0, 1);
 if ($18 >>> 0 > 59) {
  $21 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 13280
  SAFE_HEAP_STORE($21 + 4 >> 0 | 0, $14 >>> 8 | 0, 1);
  $$1 = $21; //@line 13285
  $$125 = 1; //@line 13285
 } else {
  $27 = $15 + 2 | 0; //@line 13289
  SAFE_HEAP_STORE($2 + 4 + $18 >> 0 | 0, $14 >>> 8 | 0, 1);
  if ($27 >>> 0 > 59) {
   $$1 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 13295
   $$125 = 0; //@line 13295
  } else {
   $$1 = $2; //@line 13297
   $$125 = $27; //@line 13297
  }
 }
 SAFE_HEAP_STORE($$1 + 4 + $$125 >> 0 | 0, $14 | 0, 1);
 return;
}
function _parser_raise_error($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$012 = 0, $$byval_copy = 0, $4 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 16374
 STACKTOP = STACKTOP + 16 | 0; //@line 16375
 $$byval_copy = sp; //@line 16376
 $$011 = SAFE_HEAP_LOAD($0 + 176 | 0, 4, 0) | 0 | 0; //@line 16378
 if ($$011 | 0) {
  $4 = $0 + 264 | 0; //@line 16381
  $$012 = $$011; //@line 16382
  do {
   _parser_cbc_stream_free($$012 + 28 | 0); //@line 16385
   _parser_free_literals($4); //@line 16386
   $6 = $$012 + 44 | 0; //@line 16387
   SAFE_HEAP_STORE($4 | 0, SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0, 4);
   SAFE_HEAP_STORE($4 + 4 | 0, SAFE_HEAP_LOAD($6 + 4 | 0, 4, 0) | 0 | 0, 4);
   SAFE_HEAP_STORE($4 + 8 | 0, SAFE_HEAP_LOAD($6 + 8 | 0, 4, 0) | 0 | 0, 4);
   $7 = $$012 + 12 | 0; //@line 16389
   if (SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0) {
    SAFE_HEAP_STORE($$byval_copy | 0, SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0, 4);
    SAFE_HEAP_STORE($$byval_copy + 4 | 0, SAFE_HEAP_LOAD($7 + 4 | 0, 4, 0) | 0 | 0, 4);
    _parser_free_jumps($$byval_copy); //@line 16394
   }
   $$012 = SAFE_HEAP_LOAD($$012 + 8 | 0, 4, 0) | 0 | 0; //@line 16397
  } while (($$012 | 0) != 0);
 }
 SAFE_HEAP_STORE($0 + 156 | 0, $1 | 0, 4);
 _longjmp($0 | 0, 1); //@line 16408
}
function _parser_emit_two_bytes($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$sink = 0, $15 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0;
 $3 = $0 + 248 | 0; //@line 12798
 $4 = $0 + 256 | 0; //@line 12799
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0; //@line 12800
 $6 = $5 + 2 | 0; //@line 12801
 do {
  if ($6 >>> 0 < 61) {
   $9 = SAFE_HEAP_LOAD($0 + 252 | 0, 4, 0) | 0 | 0; //@line 12806
   SAFE_HEAP_STORE($9 + 4 + $5 >> 0 | 0, $1 | 0, 1);
   SAFE_HEAP_STORE($5 + 1 + ($9 + 4) >> 0 | 0, $2 | 0, 1);
   $$sink = $6; //@line 12812
  } else {
   if ($5 >>> 0 > 59) {
    _parser_cbc_stream_alloc_page($0, $3); //@line 12816
    $15 = SAFE_HEAP_LOAD($0 + 252 | 0, 4, 0) | 0 | 0; //@line 12818
    SAFE_HEAP_STORE($15 + 4 >> 0 | 0, $1 | 0, 1);
    SAFE_HEAP_STORE($15 + 5 >> 0 | 0, $2 | 0, 1);
    $$sink = 2; //@line 12823
    break;
   } else {
    $18 = $0 + 252 | 0; //@line 12826
    SAFE_HEAP_STORE((SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0) + 63 >> 0 | 0, $1 | 0, 1);
    _parser_cbc_stream_alloc_page($0, $3); //@line 12830
    SAFE_HEAP_STORE((SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0) + 4 >> 0 | 0, $2 | 0, 1);
    $$sink = 1; //@line 12834
    break;
   }
  }
 } while (0);
 SAFE_HEAP_STORE($4 | 0, $$sink | 0, 4);
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 5128
 while (1) {
  if ((SAFE_HEAP_LOAD(10178 + $$016 >> 0 | 0, 1, 1) | 0 | 0) == ($0 | 0)) {
   label = 2; //@line 5135
   break;
  }
  $7 = $$016 + 1 | 0; //@line 5138
  if (($7 | 0) == 87) {
   $$01214 = 10266; //@line 5141
   $$115 = 87; //@line 5141
   label = 5; //@line 5142
   break;
  } else {
   $$016 = $7; //@line 5145
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 10266; //@line 5151
  } else {
   $$01214 = 10266; //@line 5153
   $$115 = $$016; //@line 5153
   label = 5; //@line 5154
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 5159
   $$113 = $$01214; //@line 5160
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 5164
   } while ((SAFE_HEAP_LOAD($$113$looptemp >> 0 | 0, 1, 0) | 0 | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 5171
   if (!$$115) {
    $$012$lcssa = $$113; //@line 5174
    break;
   } else {
    $$01214 = $$113; //@line 5177
    label = 5; //@line 5178
   }
  }
 }
 return ___lctrans($$012$lcssa, SAFE_HEAP_LOAD($1 + 20 | 0, 4, 0) | 0 | 0) | 0; //@line 5185
}
function _ecma_string_copy_to_cesu8_buffer($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $6 = 0, $9 = 0;
 switch ((SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 7) {
 case 3:
  {
   $6 = SAFE_HEAP_LOAD($0 + 4 | 0, 2, 1) | 0 | 0; //@line 4240
   _memcpy($1 | 0, $0 + 8 | 0, $6 | 0) | 0; //@line 4242
   $$0 = $6; //@line 4243
   break;
  }
 case 4:
  {
   $9 = SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0; //@line 4248
   _memcpy($1 | 0, $0 + 12 | 0, $9 | 0) | 0; //@line 4250
   $$0 = $9; //@line 4251
   break;
  }
 case 0:
  {
   $$0 = _ecma_uint32_to_utf8_string(SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0, $1, $2) | 0; //@line 4258
   break;
  }
 case 1:
  {
   $15 = SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0; //@line 4263
   $16 = _lit_get_magic_string_size($15) | 0; //@line 4264
   _memcpy($1 | 0, _lit_get_magic_string_utf8($15) | 0, $16 | 0) | 0; //@line 4266
   $$0 = $16; //@line 4267
   break;
  }
 default:
  {
   $19 = SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0; //@line 4272
   $20 = _lit_get_magic_string_ex_size($19) | 0; //@line 4273
   _memcpy($1 | 0, _lit_get_magic_string_ex_utf8($19) | 0, $20 | 0) | 0; //@line 4275
   $$0 = $20; //@line 4276
  }
 }
 return $$0 | 0; //@line 4279
}
function _parser_update_backward_branch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$016$lcssa = 0, $$01619 = 0, $$017$lcssa = 0, $$01718 = 0, $$020 = 0, $$1 = 0, $10 = 0, $11 = 0, $3 = 0, $9 = 0;
 $3 = $2 & 255; //@line 18527
 if ($1 >>> 0 > 59) {
  $$01619 = $3; //@line 18530
  $$01718 = $1; //@line 18530
  $$020 = $0; //@line 18530
  while (1) {
   $9 = ((SAFE_HEAP_LOAD($$020 + 63 >> 0 | 0, 1, 0) | 0) & 127) + $$01619 | 0; //@line 18536
   $10 = $$01718 + -60 | 0; //@line 18537
   $11 = SAFE_HEAP_LOAD($$020 | 0, 4, 0) | 0 | 0; //@line 18538
   if ($10 >>> 0 > 59) {
    $$01619 = $9; //@line 18541
    $$01718 = $10; //@line 18541
    $$020 = $11; //@line 18541
   } else {
    $$0$lcssa = $11; //@line 18543
    $$016$lcssa = $9; //@line 18543
    $$017$lcssa = $10; //@line 18543
    break;
   }
  }
 } else {
  $$0$lcssa = $0; //@line 18548
  $$016$lcssa = $3; //@line 18548
  $$017$lcssa = $1; //@line 18548
 }
 if (!$$017$lcssa) {
  $$1 = $$016$lcssa; //@line 18552
 } else {
  $$1 = ((SAFE_HEAP_LOAD($$0$lcssa + 63 >> 0 | 0, 1, 0) | 0) & 127) + $$016$lcssa - ((SAFE_HEAP_LOAD(59 - $$017$lcssa + ($$0$lcssa + 4) >> 0 | 0, 1, 0) | 0) & 127) | 0; //@line 18565
 }
 return $$1 | 0; //@line 18567
}
function _parser_parse_with_statement_end($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $2 = 0, $4 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12402
 STACKTOP = STACKTOP + 16 | 0; //@line 12403
 $1 = sp + 8 | 0; //@line 12404
 $2 = sp; //@line 12405
 _parser_stack_pop_uint8($0); //@line 12406
 _parser_stack_pop($0, $1, 8); //@line 12407
 _parser_stack_iterator_init($0, $0 + 180 | 0); //@line 12409
 _parser_flush_cbc($0); //@line 12410
 $4 = $0 + 172 | 0; //@line 12411
 SAFE_HEAP_STORE($4 | 0, (SAFE_HEAP_LOAD($4 | 0, 2, 1) | 0 | 0) + 65534 | 0, 2);
 _parser_emit_cbc($0, 16); //@line 12417
 _parser_set_branch_to_current_position($0, $1); //@line 12418
 _parser_stack_iterator_init($0, $2); //@line 12419
 L1 : while (1) {
  $9 = _parser_stack_iterator_read_uint8($2) | 0; //@line 12421
  switch ($9 << 24 >> 24) {
  case 0:
   {
    label = 3; //@line 12424
    break L1;
    break;
   }
  case 11:
   {
    break L1;
    break;
   }
  default:
   {}
  }
  _parser_stack_iterator_skip($2, _parser_statement_length($9) | 0); //@line 12436
 }
 if ((label | 0) == 3) {
  $10 = $0 + 168 | 0; //@line 12439
  SAFE_HEAP_STORE($10 | 0, (SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0) & -4097 | 0, 4);
 }
 STACKTOP = sp; //@line 12444
 return;
}
function _ecma_builtin_dispatch_call($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $5 = 0, $8 = 0;
 $5 = SAFE_HEAP_LOAD($0 + 10 | 0, 2, 0) | 0 | 0; //@line 9167
 $8 = SAFE_HEAP_LOAD($0 + 8 >> 0 | 0, 1, 0) | 0 | 0; //@line 9170
 L1 : do {
  if (($5 & 65535) > 7) {
   $$0 = _ecma_builtin_dispatch_routine($8 & 255, $5, $1, $2, $3) | 0; //@line 9175
  } else {
   switch ($8 << 24 >> 24) {
   case 7:
   case 5:
   case 0:
    {
     $$0 = 8; //@line 9179
     break L1;
     break;
    }
   case 1:
    {
     $$0 = _ecma_builtin_object_dispatch_call($2, $3) | 0; //@line 9185
     break L1;
     break;
    }
   case 2:
    {
     $$0 = _ecma_builtin_function_prototype_dispatch_call($2, $3) | 0; //@line 9191
     break L1;
     break;
    }
   case 3:
    {
     $$0 = _ecma_builtin_function_dispatch_call($2, $3) | 0; //@line 9197
     break L1;
     break;
    }
   case 4:
    {
     $$0 = _ecma_builtin_error_dispatch_call($2, $3) | 0; //@line 9203
     break L1;
     break;
    }
   case 6:
    {
     $$0 = _ecma_builtin_type_error_thrower_dispatch_call($2, $3) | 0; //@line 9209
     break L1;
     break;
    }
   default:
    {}
   }
  }
 } while (0);
 return $$0 | 0; //@line 9219
}
function _opfunc_construct($0) {
 $0 = $0 | 0;
 var $$032 = 0, $$033 = 0, $$034 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0;
 $2 = SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0; //@line 2863
 $3 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0; //@line 2864
 if (($3 & 255) > 61) {
  $$032 = ($3 & 255) + -62 | 0; //@line 2869
 } else {
  $$032 = SAFE_HEAP_LOAD($2 + 1 >> 0 | 0, 1, 1) | 0 | 0; //@line 2874
 }
 $10 = $0 + 16 | 0; //@line 2876
 $13 = (SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0) + (0 - $$032 << 2) | 0; //@line 2879
 $14 = $13 + -4 | 0; //@line 2880
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0; //@line 2881
 if (_ecma_is_constructor($15) | 0) {
  $$033 = _ecma_op_function_construct(_ecma_get_object_from_value($15) | 0, $13, $$032) | 0; //@line 2886
 } else {
  $$033 = _ecma_raise_type_error(6002) | 0; //@line 2889
 }
 if ($$032 | 0) {
  $$034 = 0; //@line 2893
  do {
   _ecma_fast_free_value(SAFE_HEAP_LOAD($13 + ($$034 << 2) | 0, 4, 0) | 0 | 0); //@line 2897
   $$034 = $$034 + 1 | 0; //@line 2898
  } while (($$034 | 0) != ($$032 | 0));
 }
 _ecma_free_value(SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0); //@line 2908
 SAFE_HEAP_STORE($14 | 0, $$033 | 0, 4);
 SAFE_HEAP_STORE($10 | 0, $13 | 0, 4);
 return;
}
function _ecma_op_function_construct_simple_or_external($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$037 = 0, $$1 = 0, $$2 = 0, $11 = 0, $3 = 0, $8 = 0, $9 = 0;
 $3 = _ecma_op_object_get_by_magic_id($0, 56) | 0; //@line 10917
 if (($3 | 0) == 24) {
  $$2 = 24; //@line 10920
 } else {
  if (_ecma_is_value_object($3) | 0) {
   $$037 = _ecma_create_object(_ecma_get_object_from_value($3) | 0, 0, 0) | 0; //@line 10926
  } else {
   $8 = _ecma_builtin_get(0) | 0; //@line 10928
   $9 = _ecma_create_object($8, 0, 0) | 0; //@line 10929
   _ecma_deref_object($8); //@line 10930
   $$037 = $9; //@line 10931
  }
  $11 = _ecma_op_function_call($0, _ecma_make_object_value($$037) | 0, $1, $2) | 0; //@line 10934
  if (($11 | 0) == 24) {
   $$1 = 24; //@line 10937
  } else {
   if (_ecma_is_value_object($11) | 0) {
    $$0 = _ecma_copy_value($11) | 0; //@line 10942
   } else {
    _ecma_ref_object($$037); //@line 10944
    $$0 = _ecma_make_object_value($$037) | 0; //@line 10946
   }
   _ecma_free_value($11); //@line 10948
   $$1 = $$0; //@line 10949
  }
  _ecma_deref_object($$037); //@line 10951
  _ecma_free_value($3); //@line 10952
  $$2 = $$1; //@line 10953
 }
 return $$2 | 0; //@line 10955
}
function _ecma_string_compare_to_property_name($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $14 = 0, $22 = 0, $4 = 0;
 $4 = ($0 & 255) >>> 6; //@line 4614
 do {
  if (($4 | 0) == 3) {
   $14 = _jmem_decompress_pointer($1 & 65535) | 0; //@line 4619
   if (($14 | 0) == ($2 | 0)) {
    $$0 = 1; //@line 4622
   } else {
    if ((SAFE_HEAP_LOAD($14 + 2 | 0, 2, 0) | 0 | 0) == (SAFE_HEAP_LOAD($2 + 2 | 0, 2, 0) | 0 | 0)) {
     $22 = (SAFE_HEAP_LOAD($14 | 0, 2, 0) | 0) & 7; //@line 4631
     if ($22 << 16 >> 16 == ((SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0) & 7)) {
      if (($22 & 65535) < 3) {
       $$0 = (SAFE_HEAP_LOAD($14 + 4 | 0, 4, 0) | 0 | 0) == (SAFE_HEAP_LOAD($2 + 4 | 0, 4, 0) | 0 | 0); //@line 4643
       break;
      } else {
       $$0 = _ecma_compare_ecma_strings_longpath($14, $2) | 0; //@line 4647
       break;
      }
     } else {
      $$0 = 0; //@line 4651
     }
    } else {
     $$0 = 0; //@line 4654
    }
   }
  } else {
   if (((SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0) & 7 | 0) == ($4 | 0)) {
    $$0 = (SAFE_HEAP_LOAD($2 + 4 | 0, 4, 0) | 0 | 0) == ($1 & 65535 | 0); //@line 4667
   } else {
    $$0 = 0; //@line 4669
   }
  }
 } while (0);
 return $$0 | 0; //@line 4673
}
function _parser_list_iterator_next($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $1 = $0 + 4 | 0; //@line 9975
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 9976
 do {
  if (!$2) {
   $$0 = 0; //@line 9980
  } else {
   $4 = $0 + 8 | 0; //@line 9982
   $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0; //@line 9983
   $6 = $2 + 4 + $5 | 0; //@line 9984
   $7 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0; //@line 9985
   $10 = (SAFE_HEAP_LOAD($7 + 16 | 0, 4, 0) | 0 | 0) + $5 | 0; //@line 9988
   SAFE_HEAP_STORE($4 | 0, $10 | 0, 4);
   $11 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 9990
   if (!$11) {
    if ($10 >>> 0 < (SAFE_HEAP_LOAD($7 + 8 | 0, 4, 0) | 0 | 0) >>> 0) {
     $$0 = $6; //@line 9997
     break;
    }
    SAFE_HEAP_STORE($1 | 0, 0 | 0, 4);
    SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
    $$0 = $6; //@line 10002
    break;
   } else {
    if ($10 >>> 0 < (SAFE_HEAP_LOAD($7 + 12 | 0, 4, 0) | 0 | 0) >>> 0) {
     $$0 = $6; //@line 10009
     break;
    }
    SAFE_HEAP_STORE($1 | 0, $11 | 0, 4);
    SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
    $$0 = $6; //@line 10014
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 10019
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, label = 0;
 $1 = $0 + 20 | 0; //@line 5571
 $3 = $0 + 28 | 0; //@line 5573
 if ((SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) >>> 0 > (SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0) >>> 0) {
  FUNCTION_TABLE_iiii[(SAFE_FT_MASK(SAFE_HEAP_LOAD($0 + 36 | 0, 4, 0) | 0 | 0, 3 | 0) | 0) & 3]($0, 0, 0) | 0; //@line 5579
  if (!(SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0)) {
   $$0 = -1; //@line 5583
  } else {
   label = 3; //@line 5585
  }
 } else {
  label = 3; //@line 5588
 }
 if ((label | 0) == 3) {
  $10 = $0 + 4 | 0; //@line 5591
  $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0; //@line 5592
  $12 = $0 + 8 | 0; //@line 5593
  $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0; //@line 5594
  if ($11 >>> 0 < $13 >>> 0) {
   FUNCTION_TABLE_iiii[(SAFE_FT_MASK(SAFE_HEAP_LOAD($0 + 40 | 0, 4, 0) | 0 | 0, 3 | 0) | 0) & 3]($0, $11 - $13 | 0, 1) | 0; //@line 5602
  }
  SAFE_HEAP_STORE($0 + 16 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE($1 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE($12 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE($10 | 0, 0 | 0, 4);
  $$0 = 0; //@line 5610
 }
 return $$0 | 0; //@line 5612
}
function _ecma_string_copy_to_utf8_buffer($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $17 = 0, $18 = 0, $21 = 0;
 switch ((SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 7) {
 case 3:
  {
   $$0 = _lit_convert_cesu8_string_to_utf8_string($0 + 8 | 0, SAFE_HEAP_LOAD($0 + 4 | 0, 2, 1) | 0 | 0, $1, $2) | 0; //@line 4323
   break;
  }
 case 4:
  {
   $$0 = _lit_convert_cesu8_string_to_utf8_string($0 + 12 | 0, SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0, $1, $2) | 0; //@line 4331
   break;
  }
 case 0:
  {
   $$0 = _ecma_uint32_to_utf8_string(SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0, $1, $2) | 0; //@line 4338
   break;
  }
 case 1:
  {
   $17 = SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0; //@line 4343
   $18 = _lit_get_magic_string_size($17) | 0; //@line 4344
   _memcpy($1 | 0, _lit_get_magic_string_utf8($17) | 0, $18 | 0) | 0; //@line 4346
   $$0 = $18; //@line 4347
   break;
  }
 default:
  {
   $21 = SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0; //@line 4352
   $$0 = _lit_convert_cesu8_string_to_utf8_string(_lit_get_magic_string_ex_utf8($21) | 0, _lit_get_magic_string_ex_size($21) | 0, $1, $2) | 0; //@line 4356
  }
 }
 return $$0 | 0; //@line 4359
}
function _parser_stack_push_uint8($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $11 = 0, $12 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = $0 + 288 | 0; //@line 10050
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 10051
 $4 = $0 + 296 | 0; //@line 10052
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0; //@line 10053
 $7 = $3; //@line 10055
 if ($5 >>> 0 > 59) {
  $8 = $0 + 300 | 0; //@line 10057
  $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0; //@line 10058
  if (!$9) {
   $11 = _parser_malloc($0, 64) | 0; //@line 10061
   $$0 = $11; //@line 10063
   $12 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 10063
  } else {
   SAFE_HEAP_STORE($8 | 0, 0 | 0, 4);
   $$0 = $9; //@line 10066
   $12 = $7; //@line 10066
  }
  SAFE_HEAP_STORE($$0 | 0, $12 | 0, 4);
  SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE($2 | 0, $$0 | 0, 4);
  $$1 = $$0; //@line 10071
  $14 = 0; //@line 10071
 } else {
  $$1 = $3; //@line 10073
  $14 = $5; //@line 10073
 }
 SAFE_HEAP_STORE($4 | 0, $14 + 1 | 0, 4);
 SAFE_HEAP_STORE($$1 + 4 + $14 >> 0 | 0, $1 | 0, 1);
 SAFE_HEAP_STORE($0 + 304 >> 0 | 0, $1 | 0, 1);
 return;
}
function _opfunc_set_accessor($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $16 = 0, $17 = 0, $21 = 0, $4 = 0, $6 = 0, $7 = 0, label = 0;
 $4 = _ecma_get_object_from_value($1) | 0; //@line 14091
 $6 = _ecma_get_string_from_value(_ecma_op_to_string($2) | 0) | 0; //@line 14093
 $7 = _ecma_find_named_property($4, $6) | 0; //@line 14094
 do {
  if (!$7) {
   label = 4; //@line 14098
  } else {
   if (((SAFE_HEAP_LOAD($7 >> 0 | 0, 1, 0) | 0) & 3) != 2) {
    _ecma_delete_property($4, $7 + 7 & -4); //@line 14108
    label = 4; //@line 14109
    break;
   }
   $17 = _ecma_get_object_from_value($3) | 0; //@line 14112
   $21 = $7 + 7 & -4; //@line 14116
   if ($0) {
    _ecma_set_named_accessor_property_getter($4, $21, $17); //@line 14118
    break;
   } else {
    _ecma_set_named_accessor_property_setter($4, $21, $17); //@line 14121
    break;
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $16 = _ecma_get_object_from_value($3) | 0; //@line 14127
  _ecma_create_named_accessor_property($4, $6, $0 ? $16 : 0, $0 ? 0 : $16, 12, 0) | 0; //@line 14130
 }
 _ecma_deref_ecma_string($6); //@line 14132
 return;
}
function _opfunc_for_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$2 = 0, $11 = 0, $16 = 0, $4 = 0, $6 = 0, $7 = 0;
 if (_ecma_is_value_undefined($0) | 0) {
  $$2 = 0; //@line 14203
 } else {
  if (_ecma_is_value_null($0) | 0) {
   $$2 = 0; //@line 14207
  } else {
   $4 = _ecma_op_to_object($0) | 0; //@line 14209
   if (($4 | 0) == 24) {
    $$2 = 0; //@line 14212
   } else {
    $6 = _ecma_get_object_from_value($4) | 0; //@line 14214
    $7 = _ecma_op_object_get_property_names($6, 0, 1, 1) | 0; //@line 14215
    if (!(SAFE_HEAP_LOAD($7 + 4 | 0, 4, 0) | 0)) {
     $$0 = 0; //@line 14220
    } else {
     $11 = SAFE_HEAP_LOAD($7 | 0, 2, 0) | 0 | 0; //@line 14222
     if (!($11 << 16 >> 16)) {
      $16 = 0; //@line 14225
     } else {
      $16 = _jmem_decompress_pointer($11 & 65535) | 0; //@line 14229
     }
     _ecma_ref_object($6); //@line 14231
     SAFE_HEAP_STORE($1 | 0, _ecma_make_object_value($6) | 0 | 0, 4);
     $$0 = $16; //@line 14234
    }
    _jmem_heap_free_block($7, 8); //@line 14236
    _ecma_free_value($4); //@line 14237
    $$2 = $$0; //@line 14238
   }
  }
 }
 return $$2 | 0; //@line 14242
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 SAFE_HEAP_STORE_D(tempDoublePtr | 0, +$0, 8);
 $2 = SAFE_HEAP_LOAD(tempDoublePtr | 0, 4, 0) | 0 | 0; //@line 4959
 $3 = SAFE_HEAP_LOAD(tempDoublePtr + 4 | 0, 4, 0) | 0 | 0; //@line 4960
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 4961
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 4970
    $$016 = $9; //@line 4973
    $storemerge = (SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + -64 | 0; //@line 4973
   } else {
    $$016 = $0; //@line 4975
    $storemerge = 0; //@line 4975
   }
   SAFE_HEAP_STORE($1 | 0, $storemerge | 0, 4);
   $$0 = $$016; //@line 4978
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 4982
   break;
  }
 default:
  {
   SAFE_HEAP_STORE($1 | 0, ($4 & 2047) + -1022 | 0, 4);
   SAFE_HEAP_STORE(tempDoublePtr | 0, $2 | 0, 4);
   SAFE_HEAP_STORE(tempDoublePtr + 4 | 0, $3 & -2146435073 | 1071644672 | 0, 4);
   $$0 = +(+SAFE_HEAP_LOAD_D(tempDoublePtr | 0, 8)); //@line 4992
  }
 }
 return +$$0;
}
function _parser_list_append($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $13 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = $1 + 4 | 0; //@line 9896
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 9897
 $4 = $1 + 8 | 0; //@line 9898
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0; //@line 9899
 $6 = $1 + 16 | 0; //@line 9900
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0; //@line 9901
 $10 = SAFE_HEAP_LOAD($1 + 12 | 0, 4, 0) | 0 | 0; //@line 9904
 if (($7 + $5 | 0) >>> 0 > $10 >>> 0) {
  $13 = _parser_malloc($0, $10 + 4 | 0) | 0; //@line 9908
  SAFE_HEAP_STORE($13 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
  $14 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 9911
  SAFE_HEAP_STORE((($14 | 0) == 0 ? $1 : $14) | 0, $13 | 0, 4);
  SAFE_HEAP_STORE($2 | 0, $13 | 0, 4);
  $$0 = $13; //@line 9917
  $17 = 0; //@line 9917
  $19 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0; //@line 9917
 } else {
  $$0 = $3; //@line 9919
  $17 = $5; //@line 9919
  $19 = $7; //@line 9919
 }
 SAFE_HEAP_STORE($4 | 0, $19 + $17 | 0, 4);
 return $$0 + 4 + $17 | 0; //@line 9924
}
function _lit_get_utf8_size_of_cesu8_string($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$013$lcssa = 0, $$01316 = 0, $$01415 = 0, $$017 = 0, $$1 = 0, $12 = 0, $2 = 0, sp = 0, $$017$looptemp = 0;
 sp = STACKTOP; //@line 15616
 STACKTOP = STACKTOP + 16 | 0; //@line 15617
 $2 = sp; //@line 15618
 if (!$1) {
  $$013$lcssa = 0; //@line 15621
 } else {
  $$01316 = $1; //@line 15623
  $$01415 = 0; //@line 15623
  $$017 = 0; //@line 15623
  while (1) {
   $$01415 = (_lit_read_code_unit_from_utf8($0 + $$01415 | 0, $2) | 0) + $$01415 | 0; //@line 15627
   $$017$looptemp = $$017;
   $$017 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 15628
   if (_lit_is_code_point_utf16_low_surrogate($$017 & 65535) | 0) {
    $12 = _lit_is_code_point_utf16_high_surrogate($$017$looptemp & 65535) | 0; //@line 15634
    $$1 = $12 ? $$01316 + -2 | 0 : $$01316; //@line 15636
   } else {
    $$1 = $$01316; //@line 15638
   }
   if ($$01415 >>> 0 >= $1 >>> 0) {
    $$013$lcssa = $$1; //@line 15644
    break;
   } else {
    $$01316 = $$1; //@line 15642
   }
  }
 }
 STACKTOP = sp; //@line 15649
 return $$013$lcssa | 0; //@line 15649
}
function _ecma_builtin_object_object_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$026 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $2 = 0, $3 = 0, $6 = 0, $9 = 0;
 $2 = _ecma_is_value_object($0) | 0; //@line 6059
 $3 = _ecma_is_value_null($0) | 0; //@line 6060
 if ($2 | $3) {
  if ($3) {
   $$026 = 0; //@line 6064
  } else {
   $$026 = _ecma_get_object_from_value($0) | 0; //@line 6067
  }
  $6 = _ecma_op_create_object_object_noarg_and_set_prototype($$026) | 0; //@line 6069
  if (_ecma_is_value_undefined($1) | 0) {
   $$1 = 8; //@line 6072
  } else {
   $9 = _ecma_builtin_object_object_define_properties(_ecma_make_object_value($6) | 0, $1) | 0; //@line 6075
   if (($9 | 0) == 24) {
    $$1 = 24; //@line 6078
   } else {
    _ecma_free_value($9); //@line 6080
    $$1 = 8; //@line 6081
   }
  }
  if (_ecma_is_value_empty($$1) | 0) {
   $$2 = _ecma_copy_value(_ecma_make_object_value($6) | 0) | 0; //@line 6088
  } else {
   $$2 = $$1; //@line 6090
  }
  _ecma_deref_object($6); //@line 6092
  $$3 = $$2; //@line 6093
 } else {
  $$3 = _ecma_raise_type_error(6512) | 0; //@line 6096
 }
 return $$3 | 0; //@line 6098
}
function _ecma_number_trunc($0) {
 $0 = +$0;
 var $$1 = 0.0, $1 = 0, $11 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0.0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 3288
 STACKTOP = STACKTOP + 16 | 0; //@line 3289
 $1 = sp; //@line 3290
 $2 = sp + 8 | 0; //@line 3291
 _ecma_number_get_fraction_and_exponent($0, $1, $2) | 0; //@line 3292
 $4 = (_ecma_number_get_sign_field($0) | 0) != 0; //@line 3294
 $5 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 3295
 if (($5 | 0) < 0) {
  $$1 = 0.0; //@line 3298
 } else {
  if (($5 | 0) < 52) {
   $9 = _bitshift64Shl(-1, -1, 52 - $5 | 0) | 0; //@line 3303
   $11 = $1; //@line 3305
   $17 = (SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0) & $9; //@line 3311
   $18 = (SAFE_HEAP_LOAD($11 + 4 | 0, 4, 0) | 0) & tempRet0; //@line 3312
   $19 = $1; //@line 3313
   SAFE_HEAP_STORE($19 | 0, $17 | 0, 4);
   SAFE_HEAP_STORE($19 + 4 | 0, $18 | 0, 4);
   $23 = +_ecma_number_make_normal_positive_from_fraction_and_exponent($17, $18, $5); //@line 3319
   $$1 = $4 ? -$23 : $23; //@line 3322
  } else {
   $$1 = $0; //@line 3324
  }
 }
 STACKTOP = sp; //@line 3327
 return +$$1;
}
function _ecma_op_to_number($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$1 = 0, $11 = 0, $9 = 0;
 do {
  if (_ecma_is_value_integer_number($0) | 0) {
   $$1 = $0; //@line 9780
  } else {
   if (_ecma_is_value_float_number($0) | 0) {
    $$1 = _ecma_copy_value($0) | 0; //@line 9785
    break;
   }
   if (_ecma_is_value_string($0) | 0) {
    $$1 = _ecma_make_number_value(+_ecma_string_to_number(_ecma_get_string_from_value($0) | 0)) | 0; //@line 9793
    break;
   }
   if (_ecma_is_value_object($0) | 0) {
    $9 = _ecma_op_to_primitive($0, 1) | 0; //@line 9798
    if (($9 | 0) == 24) {
     $$1 = 24; //@line 9801
     break;
    }
    $11 = _ecma_op_to_number($9) | 0; //@line 9804
    _ecma_fast_free_value($9); //@line 9805
    return $11 | 0; //@line 9806
   }
   if (_ecma_is_value_undefined($0) | 0) {
    $$1 = _ecma_make_nan_value() | 0; //@line 9811
    break;
   }
   if (_ecma_is_value_null($0) | 0) {
    $$0 = 0; //@line 9816
   } else {
    $$0 = (_ecma_is_value_true($0) | 0) & 1; //@line 9820
   }
   $$1 = _ecma_make_integer_value($$0) | 0; //@line 9823
  }
 } while (0);
 return $$1 | 0; //@line 9826
}
function _parser_parse_if_statement_end($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 12155
 STACKTOP = STACKTOP + 32 | 0; //@line 12156
 $1 = sp + 16 | 0; //@line 12157
 $2 = sp + 8 | 0; //@line 12158
 $3 = sp; //@line 12159
 if ((SAFE_HEAP_LOAD($0 + 188 >> 0 | 0, 1, 0) | 0 | 0) == 64) {
  _parser_stack_change_last_uint8($0, 4); //@line 12164
  _parser_stack_iterator_init($0, $3); //@line 12165
  _parser_stack_iterator_skip($3, 1); //@line 12166
  _parser_stack_iterator_read($3, $1, 8); //@line 12167
  _parser_emit_cbc_forward_branch($0, 1, $2); //@line 12168
  _parser_set_branch_to_current_position($0, $1); //@line 12169
  _parser_stack_iterator_write($3, $2, 8); //@line 12170
  _lexer_next_token($0); //@line 12171
  $$0 = 1; //@line 12172
 } else {
  _parser_stack_pop_uint8($0); //@line 12174
  _parser_stack_pop($0, $1, 8); //@line 12175
  _parser_stack_iterator_init($0, $0 + 180 | 0); //@line 12177
  _parser_set_branch_to_current_position($0, $1); //@line 12178
  $$0 = 0; //@line 12179
 }
 STACKTOP = sp; //@line 12181
 return $$0 | 0; //@line 12181
}
function _ecma_string_to_number($0) {
 $0 = $0 | 0;
 var $$0$off0 = 0, $$013 = 0, $$014 = 0.0, $$1 = 0.0, $1 = 0, $10 = 0, $12 = 0.0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 4089
 STACKTOP = STACKTOP + 16 | 0; //@line 4090
 $1 = sp; //@line 4091
 if (!((SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 7)) {
  $$1 = +((SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0) >>> 0); //@line 4099
 } else {
  $7 = _ecma_string_get_chars($0, $1, 0) | 0; //@line 4101
  $9 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 4103
  if (!$7) {
   $10 = _jmem_heap_alloc_block($9) | 0; //@line 4105
   _ecma_string_copy_to_cesu8_buffer($0, $10, $9) | 0; //@line 4106
   $$0$off0 = 1; //@line 4107
   $$013 = $10; //@line 4107
  } else {
   $$0$off0 = 0; //@line 4109
   $$013 = $7; //@line 4109
  }
  if (!$9) {
   $$014 = 0.0; //@line 4113
  } else {
   $12 = +_ecma_utf8_string_to_number($$013, $9); //@line 4115
   if ($$0$off0) {
    _jmem_heap_free_block($$013, $9); //@line 4117
    $$014 = $12; //@line 4118
   } else {
    $$014 = $12; //@line 4120
   }
  }
  $$1 = $$014; //@line 4123
 }
 STACKTOP = sp; //@line 4125
 return +$$1;
}
function _lit_code_point_to_utf8($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $15 = 0, $17 = 0, $5 = 0, $8 = 0;
 do {
  if ($0 >>> 0 < 128) {
   SAFE_HEAP_STORE($1 >> 0 | 0, $0 | 0, 1);
   $$0 = 1; //@line 16022
  } else {
   $5 = $0 >>> 6; //@line 16025
   $8 = ($0 & 63 | 128) & 255; //@line 16028
   if ($0 >>> 0 < 2048) {
    SAFE_HEAP_STORE($1 >> 0 | 0, $5 & 31 | 192 | 0, 1);
    SAFE_HEAP_STORE($1 + 1 >> 0 | 0, $8 | 0, 1);
    $$0 = 2; //@line 16036
    break;
   }
   $15 = $0 >>> 12; //@line 16041
   $17 = ($5 & 63 | 128) & 255; //@line 16043
   if ($0 >>> 0 < 65536) {
    SAFE_HEAP_STORE($1 >> 0 | 0, $15 & 15 | 224 | 0, 1);
    SAFE_HEAP_STORE($1 + 1 >> 0 | 0, $17 | 0, 1);
    SAFE_HEAP_STORE($1 + 2 >> 0 | 0, $8 | 0, 1);
    $$0 = 3; //@line 16053
    break;
   } else {
    SAFE_HEAP_STORE($1 >> 0 | 0, $0 >>> 18 & 7 | 240 | 0, 1);
    SAFE_HEAP_STORE($1 + 1 >> 0 | 0, $15 & 63 | 128 | 0, 1);
    SAFE_HEAP_STORE($1 + 2 >> 0 | 0, $17 | 0, 1);
    SAFE_HEAP_STORE($1 + 3 >> 0 | 0, $8 | 0, 1);
    $$0 = 4; //@line 16070
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 16075
}
function _ecma_string_get_char_at_pos($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 5075
 STACKTOP = STACKTOP + 16 | 0; //@line 5076
 $2 = sp; //@line 5077
 $3 = sp + 4 | 0; //@line 5078
 $4 = _ecma_string_get_chars($0, $2, $3) | 0; //@line 5079
 do {
  if (!$4) {
   $13 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 5083
   $14 = _jmem_heap_alloc_block($13) | 0; //@line 5084
   _ecma_string_copy_to_cesu8_buffer($0, $14, $13) | 0; //@line 5085
   $17 = SAFE_HEAP_LOAD($14 + $1 >> 0 | 0, 1, 1) | 0 | 0; //@line 5088
   if (!$14) {
    $$0 = $17; //@line 5091
   } else {
    _jmem_heap_free_block($14, $13); //@line 5093
    $$0 = $17; //@line 5094
   }
  } else {
   if (!(SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 0) | 0)) {
    $$0 = _lit_utf8_string_code_unit_at($4, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0, $1) | 0; //@line 5102
    break;
   } else {
    $$0 = SAFE_HEAP_LOAD($4 + $1 >> 0 | 0, 1, 1) | 0 | 0; //@line 5108
    break;
   }
  }
 } while (0);
 STACKTOP = sp; //@line 5113
 return $$0 | 0; //@line 5113
}
function _parser_stack_pop_uint8($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $2 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0;
 $1 = $0 + 288 | 0; //@line 10088
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 10089
 $3 = $0 + 296 | 0; //@line 10090
 $5 = (SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0) + -1 | 0; //@line 10092
 SAFE_HEAP_STORE($3 | 0, $5 | 0, 4);
 do {
  if (!$5) {
   $7 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 10097
   SAFE_HEAP_STORE($1 | 0, $7 | 0, 4);
   SAFE_HEAP_STORE($3 | 0, 60 | 0, 4);
   $8 = $0 + 300 | 0; //@line 10100
   if (!(SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0)) {
    SAFE_HEAP_STORE($8 | 0, $2 | 0, 4);
    $$0 = $7; //@line 10106
    $13 = 60; //@line 10106
    break;
   } else {
    _parser_free($2, 64); //@line 10109
    $$0 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 10112
    $13 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0; //@line 10112
    break;
   }
  } else {
   $$0 = $2; //@line 10116
   $13 = $5; //@line 10116
  }
 } while (0);
 SAFE_HEAP_STORE($0 + 304 >> 0 | 0, SAFE_HEAP_LOAD($13 + -1 + ($$0 + 4) >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 return;
}
function _ecma_builtin_init_object($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$sink = 0, $11 = 0, $12 = 0, $17 = 0, $7 = 0, $9 = 0;
 $7 = ($2 | 0) == 1 | ($2 | 0) == 4 ? 24 : 16; //@line 8674
 $9 = (_ecma_builtin_get_property_count($0) | 0) >>> 0 > 32; //@line 8676
 $11 = _ecma_create_object($1, $9 ? $7 + 8 | 0 : $7, $2) | 0; //@line 8679
 if (!$3) {
  _ecma_set_object_extensible($11, 0); //@line 8681
 }
 _ecma_set_object_is_builtin($11); //@line 8683
 switch ($2 | 0) {
 case 1:
 case 4:
  {
   $$sink = 2; //@line 8686
   break;
  }
 default:
  {
   $$sink = 1; //@line 8690
  }
 }
 $12 = $11 + ($$sink << 3) | 0; //@line 8693
 SAFE_HEAP_STORE($12 >> 0 | 0, $0 | 0, 1);
 SAFE_HEAP_STORE($11 + ($$sink << 3) + 2 | 0, $0 | 0, 2);
 SAFE_HEAP_STORE($11 + ($$sink << 3) + 4 | 0, 0 | 0, 4);
 $17 = $12 + 1 | 0; //@line 8701
 if ($9) {
  SAFE_HEAP_STORE($17 >> 0 | 0, 32 | 0, 1);
  SAFE_HEAP_STORE($12 + 8 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE($12 + 12 | 0, 0 | 0, 4);
 } else {
  SAFE_HEAP_STORE($17 >> 0 | 0, 0 | 0, 1);
 }
 return $11 | 0; //@line 8711
}
function _vm_op_delete_prop($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $$2 = 0, $$4 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0;
 if (_ecma_is_value_undefined($0) | 0) {
  $$4 = 56; //@line 14143
 } else {
  $4 = _ecma_op_check_object_coercible($0) | 0; //@line 14145
  if (($4 | 0) == 24) {
   $$4 = 24; //@line 14148
  } else {
   $6 = _ecma_op_to_string($1) | 0; //@line 14150
   if (($6 | 0) == 24) {
    $$2 = 24; //@line 14153
   } else {
    $8 = _ecma_get_string_from_value($6) | 0; //@line 14155
    $9 = _ecma_op_to_object($0) | 0; //@line 14156
    if (($9 | 0) == 24) {
     $$1 = 24; //@line 14159
    } else {
     $12 = _ecma_op_object_delete(_ecma_get_object_from_value($9) | 0, $8, $2) | 0; //@line 14162
     if (($12 | 0) != 24) {
      _ecma_free_value($12); //@line 14165
     }
     _ecma_free_value($9); //@line 14167
     $$1 = $12; //@line 14168
    }
    _ecma_free_value($6); //@line 14170
    $$2 = $$1; //@line 14171
   }
   _ecma_free_value($4); //@line 14173
   $$4 = $$2; //@line 14174
  }
 }
 return $$4 | 0; //@line 14177
}
function _lexer_hex_to_character($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$sink1 = 0, $$sink2 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, label = 0;
 $$0 = 0; //@line 6936
 $$018 = $2; //@line 6936
 $$019 = $1; //@line 6936
 while (1) {
  $4 = SAFE_HEAP_LOAD($$019 >> 0 | 0, 1, 0) | 0 | 0; //@line 6939
  $$019 = $$019 + 1 | 0; //@line 6938
  $5 = $4 & 255; //@line 6940
  $6 = $$0 << 4; //@line 6941
  if (($4 + -48 & 255) < 10) {
   $$sink1 = $5; //@line 6945
   $$sink2 = -48; //@line 6945
  } else {
   $8 = $5 | 32; //@line 6947
   if (($8 + -97 | 0) >>> 0 < 6) {
    $$sink1 = $8; //@line 6951
    $$sink2 = -87; //@line 6951
   } else {
    label = 4; //@line 6953
    break;
   }
  }
  $$0 = $6 + $$sink2 + $$sink1 | 0; //@line 6958
  if (($$018 | 0) <= 1) {
   label = 6; //@line 6964
   break;
  } else {
   $$018 = $$018 + -1 | 0; //@line 6962
  }
 }
 if ((label | 0) == 4) {
  _parser_raise_error($0, 8); //@line 6969
 } else if ((label | 0) == 6) {
  return $$0 & 65535 | 0; //@line 6974
 }
 return 0; //@line 6976
}
function _ecma_op_function_list_lazy_property_names($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $15 = 0, $17 = 0, $4 = 0, $5 = 0, $7 = 0;
 $4 = $1 ? $3 : $2; //@line 11091
 $5 = _ecma_new_ecma_length_string() | 0; //@line 11092
 _ecma_append_to_values_collection($4, _ecma_make_string_value($5) | 0, 1); //@line 11094
 _ecma_deref_ecma_string($5); //@line 11095
 $7 = _ecma_get_magic_string(56) | 0; //@line 11096
 _ecma_append_to_values_collection($4, _ecma_make_string_value($7) | 0, 1); //@line 11098
 _ecma_deref_ecma_string($7); //@line 11099
 if ((SAFE_HEAP_LOAD((SAFE_HEAP_LOAD($0 + 12 | 0, 4, 0) | 0 | 0) + 4 | 0, 2, 0) | 0) & 8) {
  $15 = _ecma_get_magic_string(30) | 0; //@line 11107
  _ecma_append_to_values_collection($4, _ecma_make_string_value($15) | 0, 1); //@line 11109
  _ecma_deref_ecma_string($15); //@line 11110
  $17 = _ecma_get_magic_string(53) | 0; //@line 11111
  _ecma_append_to_values_collection($4, _ecma_make_string_value($17) | 0, 1); //@line 11113
  _ecma_deref_ecma_string($17); //@line 11114
 }
 return;
}
function _ecma_gc_mark_property($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $9 = 0, $trunc = 0;
 $trunc = SAFE_HEAP_LOAD($0 + $1 >> 0 | 0, 1, 0) | 0 | 0; //@line 1415
 L1 : do {
  switch ($trunc & 3) {
  case 1:
   {
    if (($trunc & -64) << 24 >> 24 == 64) {
     if ((SAFE_HEAP_LOAD($0 + 12 + ($1 << 1) | 0, 2, 1) | 0 | 0) > 79) {
      break L1;
     }
    }
    $9 = SAFE_HEAP_LOAD($0 + 4 + ($1 << 2) | 0, 4, 0) | 0 | 0; //@line 1431
    if (_ecma_is_value_object($9) | 0) {
     _ecma_gc_set_object_visited(_ecma_get_object_from_value($9) | 0); //@line 1435
    }
    break;
   }
  case 2:
   {
    $12 = $0 + 4 + ($1 << 2) | 0; //@line 1440
    $13 = _ecma_get_named_accessor_property_getter($12) | 0; //@line 1441
    $14 = _ecma_get_named_accessor_property_setter($12) | 0; //@line 1442
    if ($13 | 0) {
     _ecma_gc_set_object_visited($13); //@line 1445
    }
    if ($14 | 0) {
     _ecma_gc_set_object_visited($14); //@line 1449
    }
    break;
   }
  case 0:
   {
    break;
   }
  default:
   {}
  }
 } while (0);
 return;
}
function _vm_run_eval($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$019 = 0, $$1 = 0, $10 = 0, $16 = 0, $17 = 0, $5 = 0;
 if ($1) {
  $5 = _ecma_copy_value(SAFE_HEAP_LOAD((SAFE_HEAP_LOAD(134107 * 4 | 0, 4, 0) | 0 | 0) + 32 | 0, 4, 0) | 0 | 0) | 0; //@line 3102
  $$0 = $5; //@line 3106
  $$019 = SAFE_HEAP_LOAD((SAFE_HEAP_LOAD(134107 * 4 | 0, 4, 0) | 0 | 0) + 24 | 0, 4, 0) | 0 | 0; //@line 3106
 } else {
  $10 = _ecma_make_object_value(_ecma_builtin_get(7) | 0) | 0; //@line 3109
  $$0 = $10; //@line 3111
  $$019 = _ecma_get_global_environment() | 0; //@line 3111
 }
 _ecma_ref_object($$019); //@line 3113
 if (!((SAFE_HEAP_LOAD($0 + 4 | 0, 2, 0) | 0) & 8)) {
  $$1 = $$019; //@line 3119
 } else {
  $16 = _ecma_create_decl_lex_env($$019) | 0; //@line 3121
  _ecma_deref_object($$019); //@line 3122
  $$1 = $16; //@line 3123
 }
 $17 = _vm_run($0, $$0, $$1, 1, 0, 0) | 0; //@line 3125
 _ecma_deref_object($$1); //@line 3126
 _ecma_free_value($$0); //@line 3127
 _ecma_bytecode_deref($0); //@line 3128
 return $17 | 0; //@line 3129
}
function _ecma_builtin_function_prototype_dispatch_routine($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $6 = 0;
 switch ($0 << 16 >> 16) {
 case 8:
  {
   $$0 = _ecma_builtin_function_prototype_object_to_string($1) | 0; //@line 3390
   break;
  }
 case 9:
  {
   if (!$3) {
    $10 = 72; //@line 3396
    $11 = 72; //@line 3396
   } else {
    $6 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 3398
    if (($3 | 0) == 1) {
     $10 = $6; //@line 3401
     $11 = 72; //@line 3401
    } else {
     $10 = $6; //@line 3405
     $11 = SAFE_HEAP_LOAD($2 + 4 | 0, 4, 0) | 0 | 0; //@line 3405
    }
   }
   $$0 = _ecma_builtin_function_prototype_object_apply($1, $10, $11) | 0; //@line 3409
   break;
  }
 case 10:
  {
   $$0 = _ecma_builtin_function_prototype_object_call($1, $2, $3) | 0; //@line 3414
   break;
  }
 case 11:
  {
   $$0 = _ecma_builtin_function_prototype_object_bind($1, $2, $3) | 0; //@line 3419
   break;
  }
 default:
  {}
 }
 return $$0 | 0; //@line 3426
}
function _ecma_free_values_collection($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$017 = 0, $2 = 0, $5 = 0, $7 = 0, $$0$looptemp = 0;
 $2 = SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0 | 0; //@line 5778
 if (!($2 << 16 >> 16)) {
  _jmem_heap_free_block($0, 8); //@line 5781
 } else {
  $5 = _jmem_decompress_pointer($2 & 65535) | 0; //@line 5784
  _jmem_heap_free_block($0, 8); //@line 5785
  if ($5 | 0) {
   $$0 = $5; //@line 5788
   do {
    $$017 = $$0; //@line 5791
    $7 = SAFE_HEAP_LOAD($$0 | 0, 4, 0) | 0 | 0; //@line 5791
    do {
     if ($1) {
      _ecma_free_value($7); //@line 5794
     } else {
      _ecma_free_value_if_not_object($7); //@line 5796
     }
     $$017 = $$017 + 4 | 0; //@line 5798
     $7 = SAFE_HEAP_LOAD($$017 | 0, 4, 0) | 0 | 0; //@line 5799
    } while (!(_ecma_is_value_collection_chunk($7) | 0));
    $$0$looptemp = $$0;
    $$0 = _ecma_get_collection_chunk_from_value($7) | 0; //@line 5807
    _jmem_heap_free_block($$0$looptemp, 24); //@line 5808
   } while (($$0 | 0) != 0);
  }
 }
 return;
}
function _parser_update_forward_branch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$010$lcssa = 0, $$01011 = 0, $$013 = 0, $$09$lcssa = 0, $$0912 = 0, $10 = 0, $8 = 0, $9 = 0;
 if ($1 >>> 0 > 60) {
  $$01011 = $1; //@line 18490
  $$013 = 0; //@line 18490
  $$0912 = $0; //@line 18490
  while (1) {
   $8 = ((SAFE_HEAP_LOAD($$0912 + 63 >> 0 | 0, 1, 0) | 0) & 127) + $$013 | 0; //@line 18496
   $9 = $$01011 + -60 | 0; //@line 18497
   $10 = SAFE_HEAP_LOAD($$0912 | 0, 4, 0) | 0 | 0; //@line 18498
   if ($9 >>> 0 > 60) {
    $$01011 = $9; //@line 18501
    $$013 = $8; //@line 18501
    $$0912 = $10; //@line 18501
   } else {
    $$0$lcssa = $8; //@line 18503
    $$010$lcssa = $9; //@line 18503
    $$09$lcssa = $10; //@line 18503
    break;
   }
  }
 } else {
  $$0$lcssa = 0; //@line 18508
  $$010$lcssa = $1; //@line 18508
  $$09$lcssa = $0; //@line 18508
 }
 return $$0$lcssa - ($2 & 255) + ((SAFE_HEAP_LOAD($$010$lcssa + -1 + ($$09$lcssa + 4) >> 0 | 0, 1, 0) | 0) & 127) | 0; //@line 18518
}
function _search_char_in_interval_array($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$02532 = 0, $$02831 = 0, $$2 = 0, $10 = 0, $18 = 0, $4 = 0, $8 = 0;
 $4 = $0 & 65535; //@line 14775
 L1 : do {
  if (($3 | 0) < 1) {
   $$2 = 0; //@line 14779
  } else {
   $$02532 = 0; //@line 14782
   $$02831 = $3 + -1 | 0; //@line 14782
   while (1) {
    $8 = ($$02532 + $$02831 | 0) / 2 | 0; //@line 14785
    $10 = SAFE_HEAP_LOAD($1 + ($8 << 1) | 0, 2, 0) | 0 | 0; //@line 14787
    if (($10 & 65535) <= ($0 & 65535)) {
     if ($4 >>> 0 <= ((SAFE_HEAP_LOAD($2 + $8 >> 0 | 0, 1, 1) | 0 | 0) + ($10 & 65535) | 0) >>> 0) {
      $$2 = 1; //@line 14797
      break L1;
     }
    }
    $18 = ($10 & 65535) < ($0 & 65535); //@line 14801
    $$02831 = $18 ? $$02831 : $8 + -1 | 0; //@line 14804
    $$02532 = $18 ? $8 + 1 | 0 : $$02532; //@line 14805
    if (($$02532 | 0) > ($$02831 | 0)) {
     $$2 = 0; //@line 14808
     break;
    }
   }
  }
 } while (0);
 return $$2 | 0; //@line 14816
}
function _ecma_op_get_value_object_base($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$035 = 0, $$036 = 0, $$037 = 0, $$14042 = 0, $5 = 0, $8 = 0;
 if (_ecma_is_value_object($0) | 0) {
  $$035 = _ecma_op_object_get(_ecma_get_object_from_value($0) | 0, $1) | 0; //@line 6710
 } else {
  $5 = _ecma_op_to_object($0) | 0; //@line 6712
  if (($5 | 0) == 24) {
   $$035 = 24; //@line 6715
  } else {
   $$036 = 128; //@line 6718
   $$037 = _ecma_get_object_from_value($5) | 0; //@line 6718
   while (1) {
    $8 = _ecma_op_object_find_own($0, $$037, $1) | 0; //@line 6720
    if (_ecma_is_value_found($8) | 0) {
     $$14042 = $8; //@line 6723
     break;
    }
    $$036 = $$036 + -1 | 0; //@line 6726
    if (!$$036) {
     $$14042 = 72; //@line 6729
     break;
    }
    $$037 = _ecma_get_object_prototype($$037) | 0; //@line 6732
    if (!$$037) {
     $$14042 = 72; //@line 6735
     break;
    }
   }
   _ecma_free_value($5); //@line 6741
   $$035 = $$14042; //@line 6742
  }
 }
 return $$035 | 0; //@line 6745
}
function _parser_parse_case_statement($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 11592
 STACKTOP = STACKTOP + 48 | 0; //@line 11593
 $1 = sp + 32 | 0; //@line 11594
 $2 = sp + 16 | 0; //@line 11595
 if (((SAFE_HEAP_LOAD($0 + 304 >> 0 | 0, 1, 0) | 0 | 0) + -5 & 255) < 2) {
  _parser_scan_until($0, sp, 59); //@line 11602
  _lexer_next_token($0); //@line 11603
  _parser_stack_iterator_init($0, $1); //@line 11604
  _parser_stack_iterator_skip($1, 5); //@line 11605
  _parser_stack_iterator_read($1, $2, 12); //@line 11606
  $6 = $2 + 8 | 0; //@line 11607
  $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0; //@line 11608
  SAFE_HEAP_STORE($6 | 0, SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0, 4);
  _parser_stack_iterator_write($1, $2, 12); //@line 11611
  _parser_set_branch_to_current_position($0, $7 + 4 | 0); //@line 11613
  _parser_free($7, 12); //@line 11614
  STACKTOP = sp; //@line 11615
  return;
 } else {
  _parser_raise_error($0, 38); //@line 11617
 }
}
function _ecma_builtin_object_object_get_own_property_descriptor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$026 = 0, $10 = 0, $2 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 6024
 STACKTOP = STACKTOP + 16 | 0; //@line 6025
 $2 = sp; //@line 6026
 if (_ecma_is_value_object($0) | 0) {
  $5 = _ecma_get_object_from_value($0) | 0; //@line 6029
  $6 = _ecma_op_to_string($1) | 0; //@line 6030
  if (($6 | 0) == 24) {
   $$0 = 24; //@line 6033
  } else {
   if (_ecma_op_object_get_own_property_descriptor($5, _ecma_get_string_from_value($6) | 0, $2) | 0) {
    $10 = _ecma_op_from_property_descriptor($2) | 0; //@line 6038
    _ecma_free_property_descriptor($2); //@line 6039
    $$026 = _ecma_make_object_value($10) | 0; //@line 6041
   } else {
    $$026 = 72; //@line 6043
   }
   _ecma_free_value($6); //@line 6045
   $$0 = $$026; //@line 6046
  }
 } else {
  $$0 = _ecma_raise_type_error(6512) | 0; //@line 6050
 }
 STACKTOP = sp; //@line 6052
 return $$0 | 0; //@line 6052
}
function _ecma_op_arguments_object_delete($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $3 = 0, $6 = 0;
 $3 = _ecma_op_general_object_delete($0, $1, $2) | 0; //@line 11608
 if (($3 | 0) == 24) {
  $$0 = 24; //@line 11611
 } else {
  if (_ecma_is_value_true($3) | 0) {
   $6 = _ecma_string_get_array_index($1) | 0; //@line 11615
   if (($6 | 0) == -1) {
    $$0 = 56; //@line 11618
   } else {
    if ($6 >>> 0 < (SAFE_HEAP_LOAD($0 + 10 | 0, 2, 1) | 0 | 0) >>> 0) {
     $13 = $0 + 16 + ($6 << 1) | 0; //@line 11626
     $14 = SAFE_HEAP_LOAD($13 | 0, 2, 0) | 0 | 0; //@line 11627
     if (!($14 << 16 >> 16)) {
      $$0 = 56; //@line 11630
     } else {
      _ecma_deref_ecma_string(_jmem_decompress_pointer($14 & 65535) | 0); //@line 11634
      SAFE_HEAP_STORE($13 | 0, 0 | 0, 2);
      $$0 = 56; //@line 11636
     }
    } else {
     $$0 = 56; //@line 11639
    }
   }
  } else {
   $$0 = $3; //@line 11643
  }
 }
 return $$0 | 0; //@line 11646
}
function _ecma_op_eval($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$018 = 0, $10 = 0, $12 = 0, $14 = 0, $3 = 0, $4 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 10321
 STACKTOP = STACKTOP + 16 | 0; //@line 10322
 $3 = sp; //@line 10323
 $4 = _ecma_string_get_size($0) | 0; //@line 10324
 if (!$4) {
  $$018 = 72; //@line 10327
 } else {
  $6 = _ecma_string_get_chars($0, $3, 0) | 0; //@line 10329
  if (!$6) {
   $10 = _jmem_heap_alloc_block(SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0) | 0; //@line 10333
   _ecma_string_to_utf8_bytes($0, $10, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0); //@line 10335
   $12 = _ecma_op_eval_chars_buffer($10, $4, $1, $2) | 0; //@line 10336
   _jmem_heap_free_block($10, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0); //@line 10338
   $14 = $12; //@line 10339
  } else {
   $14 = _ecma_op_eval_chars_buffer($6, $4, $1, $2) | 0; //@line 10342
  }
  $$018 = $14; //@line 10344
 }
 STACKTOP = sp; //@line 10346
 return $$018 | 0; //@line 10346
}
function _ecma_builtin_helper_object_get_properties($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02627 = 0, $$028 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0;
 $2 = _ecma_op_create_array_object(0, 0, 0) | 0; //@line 8474
 $3 = _ecma_get_object_from_value($2) | 0; //@line 8475
 $4 = _ecma_op_object_get_property_names($0, 0, $1, 0) | 0; //@line 8476
 $5 = _ecma_collection_iterator_init($4) | 0; //@line 8477
 if ($5 | 0) {
  $$02627 = $5; //@line 8480
  $$028 = 0; //@line 8480
  while (1) {
   $7 = _ecma_new_ecma_string_from_uint32($$028) | 0; //@line 8482
   _ecma_builtin_helper_def_prop($3, $7, SAFE_HEAP_LOAD($$02627 | 0, 4, 0) | 0 | 0, 1, 1, 1, 0) | 0; //@line 8484
   _ecma_deref_ecma_string($7); //@line 8485
   $$02627 = _ecma_collection_iterator_next($$02627) | 0; //@line 8486
   if (!$$02627) {
    break;
   } else {
    $$028 = $$028 + 1 | 0; //@line 8492
   }
  }
 }
 _ecma_free_values_collection($4, 1); //@line 8496
 return $2 | 0; //@line 8497
}
function _jmem_heap_gc_and_alloc_block($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$024 = 0, $$2 = 0, $11 = 0, $7 = 0;
 L1 : do {
  if (!$0) {
   $$2 = 0; //@line 14131
  } else {
   if (((SAFE_HEAP_LOAD(134111 * 4 | 0, 4, 0) | 0 | 0) + $0 | 0) >>> 0 >= (SAFE_HEAP_LOAD(134112 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
    _jmem_run_free_unused_memory_callbacks(0); //@line 14138
   }
   $7 = _jmem_heap_alloc_block_internal($0) | 0; //@line 14140
   if (!$7) {
    $$024 = 0; //@line 14143
    do {
     _jmem_run_free_unused_memory_callbacks($$024); //@line 14145
     $11 = _jmem_heap_alloc_block_internal($0) | 0; //@line 14146
     $$024 = $$024 + 1 | 0; //@line 14148
     if ($11 | 0) {
      $$2 = $11; //@line 14150
      break L1;
     }
    } while ($$024 >>> 0 < 2);
    if ($1) {
     $$2 = 0; //@line 14161
    } else {
     _jerry_fatal(10); //@line 14163
    }
   } else {
    $$2 = $7; //@line 14167
   }
  }
 } while (0);
 return $$2 | 0; //@line 14171
}
function _parser_stack_pop_uint16($0) {
 $0 = $0 | 0;
 var $$pn$in = 0, $1 = 0, $12 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0;
 $1 = $0 + 304 | 0; //@line 10164
 $3 = SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 1) | 0 | 0; //@line 10166
 $4 = $0 + 296 | 0; //@line 10167
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0; //@line 10168
 if ($5 >>> 0 > 2) {
  $8 = SAFE_HEAP_LOAD($0 + 288 | 0, 4, 0) | 0 | 0; //@line 10172
  $9 = $5 + -2 | 0; //@line 10173
  $12 = SAFE_HEAP_LOAD($8 + 4 + $9 >> 0 | 0, 1, 1) | 0 | 0; //@line 10176
  SAFE_HEAP_STORE($1 >> 0 | 0, SAFE_HEAP_LOAD($5 + -3 + ($8 + 4) >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($4 | 0, $9 | 0, 4);
  $$pn$in = $12; //@line 10182
 } else {
  _parser_stack_pop_uint8($0); //@line 10184
  $17 = SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 1) | 0 | 0; //@line 10186
  _parser_stack_pop_uint8($0); //@line 10187
  $$pn$in = $17; //@line 10188
 }
 return ($$pn$in << 8 | $3) & 65535 | 0; //@line 10193
}
function _ecma_builtin_object_prototype_object_property_is_enumerable($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = _ecma_op_to_string($1) | 0; //@line 5418
 if (($2 | 0) == 24) {
  $$2 = 24; //@line 5421
 } else {
  $4 = _ecma_op_to_object($0) | 0; //@line 5423
  if (($4 | 0) == 24) {
   $$1 = 24; //@line 5426
  } else {
   $6 = _ecma_get_string_from_value($2) | 0; //@line 5428
   $8 = _ecma_op_object_get_own_property(_ecma_get_object_from_value($4) | 0, $6, 0, 0) | 0; //@line 5430
   switch ($8 << 24 >> 24) {
   case 4:
   case 0:
    {
     $$0 = 40; //@line 5433
     break;
    }
   default:
    {
     $$0 = _ecma_make_boolean_value(_ecma_is_property_enumerable($8) | 0) | 0; //@line 5439
    }
   }
   _ecma_free_value($4); //@line 5442
   $$1 = $$0; //@line 5443
  }
  _ecma_free_value($2); //@line 5445
  $$2 = $$1; //@line 5446
 }
 return $$2 | 0; //@line 5448
}
function _parser_push_result($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $13 = 0, $2 = 0;
 $1 = $0 + 240 | 0; //@line 15617
 $2 = SAFE_HEAP_LOAD($1 | 0, 2, 0) | 0 | 0; //@line 15618
 if (($2 + -214 & 65535) < 22) {
  SAFE_HEAP_STORE($1 | 0, ($2 & 65535) + 67 | 0, 2);
  _parser_flush_cbc($0); //@line 15626
 } else {
  if (($2 + -151 & 65535) < 85) {
   switch ($2 << 16 >> 16) {
   case 169:
   case 163:
    {
     $10 = $0 + 174 | 0; //@line 15635
     $11 = SAFE_HEAP_LOAD($10 | 0, 2, 0) | 0 | 0; //@line 15636
     if ((SAFE_HEAP_LOAD($0 + 172 | 0, 2, 1) | 0 | 0) >= ($11 & 65535)) {
      $13 = $11 + 1 << 16 >> 16; //@line 15639
      SAFE_HEAP_STORE($10 | 0, $13 | 0, 2);
      if (($13 & 65535) > 1024) {
       _parser_raise_error($0, 4); //@line 15643
      }
     }
     break;
    }
   default:
    {}
   }
   SAFE_HEAP_STORE($1 | 0, $2 + 1 << 16 >> 16 | 0, 2);
   _parser_flush_cbc($0); //@line 15654
  }
 }
 return;
}
function _lit_is_utf8_string_magic($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$023 = 0, $$026 = 0, $$3 = 0, $11 = 0, $13 = 0, $4 = 0, $9 = 0;
 L1 : do {
  if ((_lit_get_magic_string_size(75) | 0) >>> 0 < $1 >>> 0) {
   $$3 = 82; //@line 15103
  } else {
   $4 = _lit_get_magic_string_size_block_start($1) | 0; //@line 15105
   $$023 = $4; //@line 15108
   $$026 = _lit_get_magic_string_size_block_start($1 + 1 | 0) | 0; //@line 15108
   while (1) {
    if ($$023 >>> 0 >= $$026 >>> 0) {
     $$3 = 82; //@line 15112
     break L1;
    }
    $9 = ($$023 + $$026 | 0) >>> 1; //@line 15116
    $11 = _memcmp(_lit_get_magic_string_utf8($9) | 0, $0, $1) | 0; //@line 15118
    $13 = ($11 | 0) > 0; //@line 15120
    if (!$11) {
     $$3 = $9; //@line 15125
     break;
    } else {
     $$023 = $13 ? $$023 : $9 + 1 | 0; //@line 15128
     $$026 = $13 ? $9 : $$026; //@line 15128
    }
   }
  }
 } while (0);
 return $$3 | 0; //@line 15133
}
function _ecma_create_named_accessor_property($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$sink = 0, $$sink3 = 0, $13 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 6284
 STACKTOP = STACKTOP + 16 | 0; //@line 6285
 $$byval_copy = sp + 4 | 0; //@line 6286
 $6 = sp; //@line 6287
 $7 = $4 | 2; //@line 6288
 if (!$2) {
  $$sink = 0; //@line 6291
 } else {
  $$sink = _jmem_compress_pointer($2) | 0; //@line 6294
 }
 SAFE_HEAP_STORE($6 | 0, $$sink | 0, 2);
 if (!$3) {
  $$sink3 = 0; //@line 6299
 } else {
  $$sink3 = _jmem_compress_pointer($3) | 0; //@line 6302
 }
 SAFE_HEAP_STORE($6 + 2 | 0, $$sink3 | 0, 2);
 SAFE_HEAP_STORE($$byval_copy | 0, SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0, 4);
 $13 = _ecma_create_property($0, $1, $7, $$byval_copy, $5) | 0; //@line 6307
 STACKTOP = sp; //@line 6308
 return $13 | 0; //@line 6308
}
function _parser_parse_while_statement_start($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 11328
 STACKTOP = STACKTOP + 32 | 0; //@line 11329
 $1 = sp + 4 | 0; //@line 11330
 $2 = sp; //@line 11331
 _lexer_next_token($0); //@line 11332
 if ((SAFE_HEAP_LOAD($0 + 188 >> 0 | 0, 1, 0) | 0 | 0) == 52) {
  _parser_emit_cbc_forward_branch($0, 1, $1); //@line 11337
  SAFE_HEAP_STORE($1 + 24 | 0, SAFE_HEAP_LOAD($0 + 260 | 0, 4, 0) | 0 | 0, 4);
  _parser_scan_until($0, $1 + 8 | 0, 55); //@line 11343
  _lexer_next_token($0); //@line 11344
  SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
  _parser_stack_push($0, $1, 28); //@line 11346
  _parser_stack_push($0, $2, 4); //@line 11347
  _parser_stack_push_uint8($0, 8); //@line 11348
  _parser_stack_iterator_init($0, $0 + 180 | 0); //@line 11350
  STACKTOP = sp; //@line 11351
  return;
 } else {
  _parser_raise_error($0, 39); //@line 11353
 }
}
function _realloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $11 = 0, $14 = 0, $17 = 0, $22 = 0;
 if (!$0) {
  $$1 = _malloc($1) | 0; //@line 807
  return $$1 | 0; //@line 808
 }
 if ($1 >>> 0 > 4294967231) {
  SAFE_HEAP_STORE(___errno_location() | 0 | 0, 12 | 0, 4);
  $$1 = 0; //@line 814
  return $$1 | 0; //@line 815
 }
 $11 = _try_realloc_chunk($0 + -8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8) | 0; //@line 822
 if ($11 | 0) {
  $$1 = $11 + 8 | 0; //@line 826
  return $$1 | 0; //@line 827
 }
 $14 = _malloc($1) | 0; //@line 829
 if (!$14) {
  $$1 = 0; //@line 832
  return $$1 | 0; //@line 833
 }
 $17 = SAFE_HEAP_LOAD($0 + -4 | 0, 4, 0) | 0 | 0; //@line 836
 $22 = ($17 & -8) - (($17 & 3 | 0) == 0 ? 8 : 4) | 0; //@line 841
 _memcpy($14 | 0, $0 | 0, ($22 >>> 0 < $1 >>> 0 ? $22 : $1) | 0) | 0; //@line 844
 _free($0); //@line 845
 $$1 = $14; //@line 846
 return $$1 | 0; //@line 847
}
function _saveSetjmp(env, label, table, size) {
 env = env | 0;
 label = label | 0;
 table = table | 0;
 size = size | 0;
 var i = 0;
 setjmpId = setjmpId + 1 | 0; //@line 6047
 SAFE_HEAP_STORE(env | 0, setjmpId | 0, 4); //@line 6048
 while ((i | 0) < (size | 0)) {
  if (!(SAFE_HEAP_LOAD(table + (i << 3) | 0, 4, 0) | 0)) {
   SAFE_HEAP_STORE(table + (i << 3) | 0, setjmpId | 0, 4); //@line 6051
   SAFE_HEAP_STORE(table + ((i << 3) + 4) | 0, label | 0, 4); //@line 6052
   SAFE_HEAP_STORE(table + ((i << 3) + 8) | 0, 0, 4); //@line 6054
   tempRet0 = size; //@line 6055
   return table | 0; //@line 6056
  }
  i = i + 1 | 0; //@line 6058
 }
 size = size * 2 | 0; //@line 6061
 table = _realloc(table | 0, 8 * (size + 1 | 0) | 0) | 0; //@line 6062
 table = _saveSetjmp(env | 0, label | 0, table | 0, size | 0) | 0; //@line 6063
 tempRet0 = size; //@line 6064
 return table | 0; //@line 6065
}
function _parser_emit_cbc_push_number($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $17 = 0, $18 = 0, $3 = 0, $7 = 0;
 $3 = SAFE_HEAP_LOAD($0 + 212 | 0, 2, 0) | 0 | 0; //@line 12928
 if (SAFE_HEAP_LOAD($0 + 240 | 0, 2, 0) | 0 | 0) {
  _parser_flush_cbc($0); //@line 12933
 }
 $7 = $0 + 172 | 0; //@line 12935
 SAFE_HEAP_STORE($7 | 0, (SAFE_HEAP_LOAD($7 | 0, 2, 0) | 0 | 0) + 1 << 16 >> 16 | 0, 2);
 _parser_emit_two_bytes($0, $1 ? 51 : 50, ($3 & 65535) + 255 & 255); //@line 12943
 $14 = $0 + 260 | 0; //@line 12944
 SAFE_HEAP_STORE($14 | 0, (SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0) + 2 | 0, 4);
 $17 = SAFE_HEAP_LOAD($7 | 0, 2, 0) | 0 | 0; //@line 12948
 $18 = $0 + 174 | 0; //@line 12949
 if (($17 & 65535) > (SAFE_HEAP_LOAD($18 | 0, 2, 1) | 0 | 0)) {
  SAFE_HEAP_STORE($18 | 0, $17 | 0, 2);
  if (($17 & 65535) > 1024) {
   _parser_raise_error($0, 4); //@line 12956
  }
 }
 return;
}
function _lit_read_code_unit_from_utf8($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$022 = 0, $$024 = 0, $$026 = 0, $$125 = 0, $15 = 0, $3 = 0, $8 = 0, $storemerge$in = 0;
 $3 = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 1) | 0 | 0; //@line 15658
 if (!($3 & 128)) {
  $$024 = 1; //@line 15663
  $storemerge$in = $3 & 127; //@line 15663
 } else {
  $8 = ($3 & 224 | 0) == 192; //@line 15666
  $$022 = $8 ? 2 : 3; //@line 15668
  $$026 = 1; //@line 15670
  $$125 = ($8 ? 31 : 15) & $3; //@line 15670
  while (1) {
   $15 = (SAFE_HEAP_LOAD($0 + $$026 >> 0 | 0, 1, 0) | 0) & 63 | $$125 << 6; //@line 15677
   $$026 = $$026 + 1 | 0; //@line 15678
   if (($$026 | 0) == ($$022 | 0)) {
    $$024 = $$022; //@line 15681
    $storemerge$in = $15; //@line 15681
    break;
   } else {
    $$125 = $15; //@line 15684
   }
  }
 }
 SAFE_HEAP_STORE($1 | 0, $storemerge$in | 0, 2);
 return $$024 | 0; //@line 15690
}
function _ecma_op_create_string_object($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $$122 = 0, $5 = 0, $8 = 0, $9 = 0, label = 0;
 if (!$1) {
  $$122 = _ecma_new_ecma_string_from_magic_string_id(0) | 0; //@line 13869
  label = 5; //@line 13870
 } else {
  $5 = _ecma_op_to_string(SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0) | 0; //@line 13873
  if (($5 | 0) == 24) {
   $$1 = 24; //@line 13876
  } else {
   $$122 = _ecma_get_string_from_value($5) | 0; //@line 13879
   label = 5; //@line 13880
  }
 }
 if ((label | 0) == 5) {
  $8 = _ecma_builtin_get(0) | 0; //@line 13884
  $9 = _ecma_create_object($8, 16, 1) | 0; //@line 13885
  _ecma_deref_object($8); //@line 13886
  SAFE_HEAP_STORE($9 + 8 | 0, 28 | 0, 2);
  SAFE_HEAP_STORE($9 + 12 | 0, _ecma_make_string_value($$122) | 0 | 0, 4);
  $$1 = _ecma_make_object_value($9) | 0; //@line 13893
 }
 return $$1 | 0; //@line 13895
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0; //@line 2374
 $3 = SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0; //@line 2375
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 2380
  $$lcssa8 = $2; //@line 2380
 } else {
  $$011 = $1; //@line 2382
  $$0710 = $0; //@line 2382
  do {
   $$0710 = $$0710 + 1 | 0; //@line 2384
   $$011 = $$011 + 1 | 0; //@line 2385
   $8 = SAFE_HEAP_LOAD($$0710 >> 0 | 0, 1, 0) | 0 | 0; //@line 2386
   $9 = SAFE_HEAP_LOAD($$011 >> 0 | 0, 1, 0) | 0 | 0; //@line 2387
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 2392
  $$lcssa8 = $8; //@line 2392
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 2402
}
function _ecma_op_number_remainder($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $$0 = 0.0, label = 0;
 do {
  if (_ecma_number_is_nan($0) | 0) {
   label = 5; //@line 14558
  } else {
   if (_ecma_number_is_nan($1) | 0) {
    label = 5; //@line 14562
   } else {
    if (_ecma_number_is_infinity($0) | 0) {
     label = 5; //@line 14566
    } else {
     if (_ecma_number_is_zero($1) | 0) {
      label = 5; //@line 14570
     } else {
      if (_ecma_number_is_infinity($1) | 0) {
       $$0 = $0; //@line 14574
      } else {
       if (_ecma_number_is_zero($0) | 0) {
        if (!(_ecma_number_is_zero($1) | 0)) {
         $$0 = $0; //@line 14580
         break;
        }
       }
       $$0 = +_ecma_number_calc_remainder($0, $1); //@line 14585
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 5) {
  $$0 = +_ecma_number_make_nan(); //@line 14594
 }
 return +$$0;
}
function _ecma_free_string_list($0) {
 $0 = $0 | 0;
 var $$01617 = 0, $$018 = 0, $11 = 0, $2 = 0, $5 = 0;
 L1 : do {
  if ($0 | 0) {
   $$018 = $0; //@line 7403
   while (1) {
    $$01617 = 0; //@line 7405
    do {
     $5 = SAFE_HEAP_LOAD($$018 + 2 + ($$01617 << 1) | 0, 2, 0) | 0 | 0; //@line 7408
     if ($5 << 16 >> 16) {
      _ecma_deref_ecma_string(_jmem_decompress_pointer($5 & 65535) | 0); //@line 7413
     }
     $$01617 = $$01617 + 1 | 0; //@line 7415
    } while (($$01617 | 0) != 3);
    $2 = SAFE_HEAP_LOAD($$018 | 0, 2, 0) | 0 | 0; //@line 7423
    if (!($2 << 16 >> 16)) {
     break;
    }
    $11 = _jmem_decompress_pointer($2 & 65535) | 0; //@line 7429
    _jmem_pools_free($$018, 8); //@line 7430
    if (!$11) {
     break L1;
    } else {
     $$018 = $11; //@line 7435
    }
   }
   _jmem_pools_free($$018, 8); //@line 7438
  }
 } while (0);
 return;
}
function _parser_list_get($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$lcssa = 0, $$011$lcssa = 0, $$01113 = 0, $$012 = 0, $$014 = 0, $3 = 0, $5 = 0;
 $3 = SAFE_HEAP_LOAD($0 + 20 | 0, 4, 0) | 0 | 0; //@line 9932
 $$012 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0; //@line 9933
 if ($3 >>> 0 > $1 >>> 0) {
  $$0$lcssa = $$012; //@line 9936
  $$011$lcssa = $1; //@line 9936
 } else {
  $$01113 = $1; //@line 9938
  $$014 = $$012; //@line 9938
  while (1) {
   $5 = $$01113 - $3 | 0; //@line 9940
   $$0 = SAFE_HEAP_LOAD($$014 | 0, 4, 0) | 0 | 0; //@line 9941
   if ($5 >>> 0 < $3 >>> 0) {
    $$0$lcssa = $$0; //@line 9944
    $$011$lcssa = $5; //@line 9944
    break;
   } else {
    $$01113 = $5; //@line 9947
    $$014 = $$0; //@line 9947
   }
  }
 }
 return (Math_imul(SAFE_HEAP_LOAD($0 + 16 | 0, 4, 0) | 0 | 0, $$011$lcssa) | 0) + ($$0$lcssa + 4) | 0; //@line 9955
}
function _ecma_op_string_list_lazy_property_names($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$031 = 0, $10 = 0, $12 = 0, $4 = 0, $8 = 0;
 $4 = $1 ? $3 : $2; //@line 13904
 $8 = _ecma_string_get_length(_ecma_get_string_from_value(SAFE_HEAP_LOAD($0 + 12 | 0, 4, 0) | 0 | 0) | 0) | 0; //@line 13908
 if ($8 | 0) {
  $$031 = 0; //@line 13911
  do {
   $12 = _ecma_new_ecma_string_from_uint32($$031) | 0; //@line 13913
   _ecma_append_to_values_collection($2, _ecma_make_string_value($12) | 0, 1); //@line 13915
   _ecma_deref_ecma_string($12); //@line 13916
   $$031 = $$031 + 1 | 0; //@line 13917
  } while (($$031 | 0) != ($8 | 0));
 }
 $10 = _ecma_new_ecma_length_string() | 0; //@line 13926
 _ecma_append_to_values_collection($4, _ecma_make_string_value($10) | 0, 1); //@line 13928
 _ecma_deref_ecma_string($10); //@line 13929
 return;
}
function _ecma_free_property($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $13 = 0, $16 = 0, $4 = 0;
 $4 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 1) | 0 | 0; //@line 6443
 do {
  if (($4 & 3 | 0) == 1) {
   if (($1 & -2) << 16 >> 16 == 80 & ($4 & 192 | 0) == 64) {
    _ecma_free_native_pointer($2); //@line 6454
    break;
   } else {
    _ecma_free_value_if_not_object(SAFE_HEAP_LOAD($2 + 7 & -4 | 0, 4, 0) | 0 | 0); //@line 6462
    break;
   }
  }
 } while (0);
 $13 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0; //@line 6467
 if (!($13 & 32)) {
  $16 = $13; //@line 6471
 } else {
  _ecma_lcache_invalidate($0, $1, $2); //@line 6473
  $16 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0; //@line 6475
 }
 if (($16 & 255) > 191) {
  _ecma_deref_ecma_string(_jmem_decompress_pointer($1 & 65535) | 0); //@line 6481
 }
 SAFE_HEAP_STORE($2 >> 0 | 0, 0 | 0, 1);
 return;
}
function _ecma_op_set_mutable_binding($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$2 = 0, $6 = 0, label = 0;
 do {
  if ((_ecma_get_lex_env_type($0) | 0) == 13) {
   $6 = _ecma_find_named_property($0, $1) | 0; //@line 11236
   if (_ecma_is_property_writable(SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0) | 0) {
    _ecma_named_data_property_assign_value($0, $6 + 7 & -4, $2); //@line 11244
    label = 7; //@line 11245
    break;
   }
   if ($3) {
    $$2 = _ecma_raise_type_error(4007) | 0; //@line 11250
   } else {
    label = 7; //@line 11252
   }
  } else {
   if ((_ecma_op_object_put(_ecma_get_lex_env_binding_object($0) | 0, $1, $2, $3) | 0) == 24) {
    $$2 = 24; //@line 11259
   } else {
    label = 7; //@line 11261
   }
  }
 } while (0);
 if ((label | 0) == 7) {
  $$2 = 8; //@line 11266
 }
 return $$2 | 0; //@line 11268
}
function _jerry_cleanup() {
 var $$in1011 = 0, $0 = 0, $5 = 0, $$in1011$looptemp = 0;
 $0 = SAFE_HEAP_LOAD(134108 * 4 | 0, 4, 0) | 0 | 0; //@line 510
 if ($0 | 0) {
  $$in1011 = $0; //@line 513
  do {
   $$in1011$looptemp = $$in1011;
   $$in1011 = SAFE_HEAP_LOAD($$in1011 | 0, 4, 0) | 0 | 0; //@line 515
   $5 = $$in1011$looptemp + 4 | 0; //@line 516
   FUNCTION_TABLE_vi[(SAFE_FT_MASK(SAFE_HEAP_LOAD((SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0) + 4 | 0, 4, 0) | 0 | 0, 15 | 0) | 0) & 15]($$in1011$looptemp + 8 | 0); //@line 521
   _jmem_heap_free_block($$in1011$looptemp, (SAFE_HEAP_LOAD((SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0) + 8 | 0, 4, 0) | 0 | 0) + 8 | 0); //@line 526
  } while (($$in1011 | 0) != 0);
 }
 _ecma_finalize(); //@line 535
 _jmem_finalize(); //@line 536
 SAFE_HEAP_STORE(134116 * 4 | 0, (SAFE_HEAP_LOAD(134116 * 4 | 0, 4, 0) | 0) & -2 | 0, 4);
 return;
}
function _ecma_op_to_object($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP; //@line 9972
 STACKTOP = STACKTOP + 16 | 0; //@line 9973
 $1 = sp; //@line 9974
 SAFE_HEAP_STORE($1 | 0, $0 | 0, 4);
 do {
  if (_ecma_is_value_number($0) | 0) {
   $$0 = _ecma_op_create_number_object($0) | 0; //@line 9980
  } else {
   if (_ecma_is_value_string($0) | 0) {
    $$0 = _ecma_op_create_string_object($1, 1) | 0; //@line 9985
    break;
   }
   if (_ecma_is_value_object($0) | 0) {
    $$0 = _ecma_copy_value($0) | 0; //@line 9991
    break;
   }
   if (!(_ecma_is_value_undefined($0) | 0)) {
    if (!(_ecma_is_value_null($0) | 0)) {
     $$0 = _ecma_op_create_boolean_object($0) | 0; //@line 9999
     break;
    }
   }
   $$0 = _ecma_raise_type_error(3897) | 0; //@line 10004
  }
 } while (0);
 STACKTOP = sp; //@line 10007
 return $$0 | 0; //@line 10007
}
function _ecma_builtin_dispatch_routine($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0;
 switch ($0 | 0) {
 case 0:
  {
   $$0 = _ecma_builtin_object_prototype_dispatch_routine($1, $2, $3, $4) | 0; //@line 9232
   break;
  }
 case 1:
  {
   $$0 = _ecma_builtin_object_dispatch_routine($1, $2, $3, $4) | 0; //@line 9237
   break;
  }
 case 2:
  {
   $$0 = _ecma_builtin_function_prototype_dispatch_routine($1, $2, $3, $4) | 0; //@line 9242
   break;
  }
 case 3:
  {
   break;
  }
 case 4:
  {
   break;
  }
 case 5:
  {
   $$0 = _ecma_builtin_error_prototype_dispatch_routine($1, $2, $3, $4) | 0; //@line 9255
   break;
  }
 case 6:
  {
   break;
  }
 case 7:
  {
   $$0 = _ecma_builtin_global_dispatch_routine($1, $2, $3, $4) | 0; //@line 9264
   break;
  }
 default:
  {}
 }
 return $$0 | 0; //@line 9271
}
function _ecma_builtin_make_function_object_for_routine($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0;
 $3 = _ecma_builtin_get(2) | 0; //@line 9027
 $5 = (_ecma_builtin_get_property_count($0) | 0) >>> 0 > 32; //@line 9029
 $6 = _ecma_create_object($3, $5 ? 24 : 16, 2) | 0; //@line 9031
 _ecma_deref_object($3); //@line 9032
 _ecma_set_object_is_builtin($6); //@line 9033
 $8 = $6 + 8 | 0; //@line 9035
 SAFE_HEAP_STORE($8 >> 0 | 0, $0 | 0, 1);
 SAFE_HEAP_STORE($6 + 10 | 0, $1 | 0, 2);
 $10 = $6 + 12 | 0; //@line 9039
 SAFE_HEAP_STORE($10 | 0, 0 | 0, 4);
 if ($5) {
  SAFE_HEAP_STORE($10 + 4 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE($10 + 8 | 0, 0 | 0, 4);
  $$0 = $2 | 32; //@line 9047
 } else {
  $$0 = $2; //@line 9049
 }
 SAFE_HEAP_STORE($8 + 1 >> 0 | 0, $$0 | 0, 1);
 return $6 | 0; //@line 9053
}
function _ecma_free_unused_memory($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $3 = 0;
 $2 = SAFE_HEAP_LOAD(134116 * 4 | 0, 4, 0) | 0 | 0; //@line 1468
 if (!$0) {
  $3 = SAFE_HEAP_LOAD(536468 | 0, 1, 0) | 0 | 0; //@line 1470
  if ($3 << 24 >> 24) {
   SAFE_HEAP_STORE(536468 | 0, $3 + -1 << 24 >> 24 | 0, 1);
  }
  SAFE_HEAP_STORE(134116 * 4 | 0, $2 & -5 | 0, 4);
  if ((SAFE_HEAP_LOAD(134110 * 4 | 0, 4, 0) | 0) << 4 >>> 0 > (SAFE_HEAP_LOAD(134109 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
   _ecma_gc_run(0); //@line 1483
  }
 } else {
  if (!($2 & 4)) {
   $13 = SAFE_HEAP_LOAD(536468 | 0, 1, 0) | 0 | 0; //@line 1489
   if (($13 & 255) < 4) {
    SAFE_HEAP_STORE(536468 | 0, $13 + 1 << 24 >> 24 | 0, 1);
    SAFE_HEAP_STORE(134116 * 4 | 0, $2 | 4 | 0, 4);
   }
  } else {
   SAFE_HEAP_STORE(536468 | 0, 4 | 0, 1);
  }
  _ecma_gc_run($0); //@line 1500
 }
 return;
}
function _parser_parse_var_statement($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $5 = 0, $8 = 0;
 $1 = $0 + 208 | 0; //@line 11016
 $2 = $0 + 188 | 0; //@line 11017
 $3 = $0 + 240 | 0; //@line 11018
 do {
  _lexer_expect_identifier($0, 0); //@line 11020
  $5 = (SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0) + 7 | 0; //@line 11022
  SAFE_HEAP_STORE($5 >> 0 | 0, SAFE_HEAP_LOAD($5 >> 0 | 0, 1, 0) | 0 | 1 | 0, 1);
  _parser_emit_cbc_literal_from_token($0, 40); //@line 11026
  _lexer_next_token($0); //@line 11027
  $8 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0; //@line 11028
  if ($8 << 24 >> 24 == 15) {
   _parser_parse_expression($0, 13); //@line 11031
   $10 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0; //@line 11033
  } else {
   SAFE_HEAP_STORE($3 | 0, 0 | 0, 2);
   $10 = $8; //@line 11036
  }
 } while ($10 << 24 >> 24 == 60);
 return;
}
function _ecma_op_put_value_lex_env_base($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $7 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6753
 STACKTOP = STACKTOP + 16 | 0; //@line 6754
 $vararg_buffer = sp; //@line 6755
 do {
  if (!$0) {
   if ($2) {
    SAFE_HEAP_STORE($vararg_buffer | 0, _ecma_make_string_value($1) | 0 | 0, 4);
    $$0 = _ecma_raise_standard_error_with_format(3, 6539, $vararg_buffer) | 0; //@line 6763
    break;
   } else {
    $7 = _ecma_builtin_get(7) | 0; //@line 6766
    _ecma_op_object_put($7, $1, $3, 0) | 0; //@line 6767
    _ecma_deref_object($7); //@line 6768
    $$0 = 8; //@line 6769
    break;
   }
  } else {
   $$0 = _ecma_op_set_mutable_binding($0, $1, $3, $2) | 0; //@line 6774
  }
 } while (0);
 STACKTOP = sp; //@line 6777
 return $$0 | 0; //@line 6777
}
function _ecma_op_object_get_by_magic_id($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016 = 0, $$018 = 0, $$2 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 12734
 STACKTOP = STACKTOP + 16 | 0; //@line 12735
 $2 = sp; //@line 12736
 _ecma_init_ecma_magic_string($2, $1); //@line 12737
 $3 = _ecma_make_object_value($0) | 0; //@line 12738
 $$016 = $0; //@line 12739
 $$018 = 128; //@line 12739
 while (1) {
  $4 = _ecma_op_object_find_own($3, $$016, $2) | 0; //@line 12741
  if (_ecma_is_value_found($4) | 0) {
   $$2 = $4; //@line 12744
   break;
  }
  $$018 = $$018 + -1 | 0; //@line 12747
  if (!$$018) {
   $$2 = 72; //@line 12750
   break;
  }
  $$016 = _ecma_get_object_prototype($$016) | 0; //@line 12753
  if (!$$016) {
   $$2 = 72; //@line 12756
   break;
  }
 }
 STACKTOP = sp; //@line 12762
 return $$2 | 0; //@line 12762
}
function _ecma_lcache_invalidate($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$02123 = 0, $$024 = 0, $10 = 0, $3 = 0, label = 0;
 $3 = _jmem_compress_pointer($0) | 0; //@line 7352
 $$02123 = 536548 + ((((_ecma_string_get_property_name_hash(SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0, $1) | 0) ^ $3) & 127) << 4) | 0; //@line 7359
 $$024 = 0; //@line 7359
 while (1) {
  $10 = $$02123 + 4 | 0; //@line 7361
  if (SAFE_HEAP_LOAD($10 | 0, 2, 0) | 0 | 0) {
   if ((SAFE_HEAP_LOAD($$02123 | 0, 4, 0) | 0 | 0) == ($2 | 0)) {
    label = 4; //@line 7368
    break;
   }
  }
  $$024 = $$024 + 1 | 0; //@line 7373
  if ($$024 >>> 0 >= 2) {
   break;
  } else {
   $$02123 = $$02123 + 8 | 0; //@line 7376
  }
 }
 if ((label | 0) == 4) {
  SAFE_HEAP_STORE($10 | 0, 0 | 0, 2);
  _ecma_set_property_lcached($2, 0); //@line 7383
 }
 return;
}
function _lexer_construct_function_object($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $11 = 0, $12 = 0, $14 = 0, $2 = 0;
 $2 = $0 + 246 | 0; //@line 9307
 if ((SAFE_HEAP_LOAD($2 | 0, 2, 1) | 0 | 0) > 32766) {
  _parser_raise_error($0, 2); //@line 9311
 } else {
  $$ = ((SAFE_HEAP_LOAD($0 + 168 | 0, 4, 0) | 0) & 12288 | 0) == 0 ? $1 : $1 | 8192; //@line 9319
  $11 = _parser_list_append($0, $0 + 264 | 0) | 0; //@line 9321
  $12 = $11 + 6 | 0; //@line 9322
  SAFE_HEAP_STORE($12 >> 0 | 0, 5 | 0, 1);
  SAFE_HEAP_STORE($11 + 7 >> 0 | 0, 0 | 0, 1);
  $14 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0; //@line 9326
  SAFE_HEAP_STORE($2 | 0, $14 + 1 << 16 >> 16 | 0, 2);
  SAFE_HEAP_STORE($11 | 0, _parser_parse_function($0, $$) | 0 | 0, 4);
  SAFE_HEAP_STORE($12 >> 0 | 0, 3 | 0, 1);
  return $14 | 0; //@line 9332
 }
 return 0; //@line 9334
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 2075
 STACKTOP = STACKTOP + 32 | 0; //@line 2076
 $vararg_buffer = sp; //@line 2077
 $3 = sp + 20 | 0; //@line 2078
 SAFE_HEAP_STORE($vararg_buffer | 0, SAFE_HEAP_LOAD($0 + 60 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($vararg_buffer + 4 | 0, 0 | 0, 4);
 SAFE_HEAP_STORE($vararg_buffer + 8 | 0, $1 | 0, 4);
 SAFE_HEAP_STORE($vararg_buffer + 12 | 0, $3 | 0, 4);
 SAFE_HEAP_STORE($vararg_buffer + 16 | 0, $2 | 0, 4);
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  SAFE_HEAP_STORE($3 | 0, -1 | 0, 4);
  $10 = -1; //@line 2096
 } else {
  $10 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0; //@line 2099
 }
 STACKTOP = sp; //@line 2101
 return $10 | 0; //@line 2101
}
function _getint($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$06 = 0, $1 = 0, $5 = 0, $7 = 0, $isdigittmp4 = 0, $isdigittmp7 = 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0; //@line 3507
 $isdigittmp4 = (SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0) + -48 | 0; //@line 3510
 if ($isdigittmp4 >>> 0 < 10) {
  $$06 = 0; //@line 3513
  $7 = $1; //@line 3513
  $isdigittmp7 = $isdigittmp4; //@line 3513
  while (1) {
   $5 = $isdigittmp7 + ($$06 * 10 | 0) | 0; //@line 3516
   $7 = $7 + 1 | 0; //@line 3517
   SAFE_HEAP_STORE($0 | 0, $7 | 0, 4);
   $isdigittmp7 = (SAFE_HEAP_LOAD($7 >> 0 | 0, 1, 0) | 0 | 0) + -48 | 0; //@line 3521
   if ($isdigittmp7 >>> 0 >= 10) {
    $$0$lcssa = $5; //@line 3526
    break;
   } else {
    $$06 = $5; //@line 3524
   }
  }
 } else {
  $$0$lcssa = 0; //@line 3531
 }
 return $$0$lcssa | 0; //@line 3533
}
function _ecma_op_to_boolean($0) {
 $0 = $0 | 0;
 var $$0 = 0, $7 = 0.0;
 do {
  if (_ecma_is_value_simple($0) | 0) {
   $$0 = _ecma_is_value_true($0) | 0; //@line 9735
  } else {
   if (_ecma_is_value_integer_number($0) | 0) {
    $$0 = (_ecma_make_integer_value(0) | 0) != ($0 | 0); //@line 9741
    break;
   }
   if (_ecma_is_value_float_number($0) | 0) {
    $7 = +_ecma_get_float_from_value($0); //@line 9746
    if (_ecma_number_is_nan($7) | 0) {
     $$0 = 0; //@line 9749
     break;
    }
    $$0 = (_ecma_number_is_zero($7) | 0) ^ 1; //@line 9754
    break;
   } else {
    if (!(_ecma_is_value_string($0) | 0)) {
     $$0 = 1; //@line 9759
     break;
    }
    $$0 = (_ecma_string_is_empty(_ecma_get_string_from_value($0) | 0) | 0) ^ 1; //@line 9765
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 9770
}
function _parser_stack_push_uint16($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $2 = 0, $3 = 0, $7 = 0, $9 = 0;
 $2 = $0 + 296 | 0; //@line 10131
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 10132
 $7 = ($1 & 65535) >>> 8 & 255; //@line 10136
 if (($3 + 2 | 0) >>> 0 < 61) {
  $9 = SAFE_HEAP_LOAD($0 + 288 | 0, 4, 0) | 0 | 0; //@line 10139
  SAFE_HEAP_STORE($2 | 0, $3 + 1 | 0, 4);
  SAFE_HEAP_STORE($9 + 4 + $3 >> 0 | 0, $7 | 0, 1);
  $12 = $1 & 255; //@line 10144
  $13 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 10145
  SAFE_HEAP_STORE($2 | 0, $13 + 1 | 0, 4);
  SAFE_HEAP_STORE($9 + 4 + $13 >> 0 | 0, $12 | 0, 1);
  SAFE_HEAP_STORE($0 + 304 >> 0 | 0, $12 | 0, 1);
 } else {
  _parser_stack_push_uint8($0, $7); //@line 10153
  _parser_stack_push_uint8($0, $1 & 255); //@line 10155
 }
 return;
}
function _ecma_builtin_dispatch_construct($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 switch (SAFE_HEAP_LOAD($0 + 8 >> 0 | 0, 1, 0) | 0 | 0) {
 case 7:
 case 5:
 case 0:
  {
   $$0 = 8; //@line 9283
   break;
  }
 case 1:
  {
   $$0 = _ecma_builtin_object_dispatch_construct($1, $2) | 0; //@line 9288
   break;
  }
 case 2:
  {
   $$0 = _ecma_builtin_function_prototype_dispatch_construct($1, $2) | 0; //@line 9293
   break;
  }
 case 3:
  {
   $$0 = _ecma_builtin_function_dispatch_construct($1, $2) | 0; //@line 9298
   break;
  }
 case 4:
  {
   $$0 = _ecma_builtin_error_dispatch_construct($1, $2) | 0; //@line 9303
   break;
  }
 case 6:
  {
   $$0 = _ecma_builtin_type_error_thrower_dispatch_construct($1, $2) | 0; //@line 9308
   break;
  }
 default:
  {}
 }
 return $$0 | 0; //@line 9315
}
function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do {
  if (!$2) {
   $14 = 0; //@line 2339
  } else {
   $$01318 = $0; //@line 2341
   $$01417 = $2; //@line 2341
   $$019 = $1; //@line 2341
   while (1) {
    $4 = SAFE_HEAP_LOAD($$01318 >> 0 | 0, 1, 0) | 0 | 0; //@line 2343
    $5 = SAFE_HEAP_LOAD($$019 >> 0 | 0, 1, 0) | 0 | 0; //@line 2344
    if ($4 << 24 >> 24 != $5 << 24 >> 24) {
     break;
    }
    $$01417 = $$01417 + -1 | 0; //@line 2349
    if (!$$01417) {
     $14 = 0; //@line 2354
     break L1;
    } else {
     $$01318 = $$01318 + 1 | 0; //@line 2357
     $$019 = $$019 + 1 | 0; //@line 2357
    }
   }
   $14 = ($4 & 255) - ($5 & 255) | 0; //@line 2363
  }
 } while (0);
 return $14 | 0; //@line 2366
}
function _ecma_op_general_object_delete($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 11713
 STACKTOP = STACKTOP + 16 | 0; //@line 11714
 $3 = sp; //@line 11715
 $4 = _ecma_op_object_get_own_property($0, $1, $3, 0) | 0; //@line 11716
 L1 : do {
  switch ($4 << 24 >> 24) {
  case 4:
  case 0:
   {
    $$0 = 56; //@line 11720
    break;
   }
  default:
   {
    if (_ecma_is_property_configurable($4) | 0) {
     _ecma_delete_property($0, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0); //@line 11727
     $$0 = 56; //@line 11728
     break L1;
    }
    if ($2) {
     $$0 = _ecma_raise_type_error(4097) | 0; //@line 11733
    } else {
     $$0 = 40; //@line 11735
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 11740
 return $$0 | 0; //@line 11740
}
function _ecma_deref_ecma_string($0) {
 $0 = $0 | 0;
 var $3 = 0;
 $3 = (SAFE_HEAP_LOAD($0 | 0, 2, 1) | 0 | 0) + 65528 | 0; //@line 3886
 SAFE_HEAP_STORE($0 | 0, $3 | 0, 2);
 L1 : do {
  if (($3 & 65528) >>> 0 <= 7) {
   switch ($3 & 7) {
   case 3:
    {
     _ecma_dealloc_string_buffer($0, (SAFE_HEAP_LOAD($0 + 4 | 0, 2, 1) | 0 | 0) + 8 | 0); //@line 3901
     break L1;
     break;
    }
   case 4:
    {
     _ecma_dealloc_string_buffer($0, (SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0) + 12 | 0); //@line 3909
     break L1;
     break;
    }
   case 2:
   case 1:
   case 0:
    {
     break;
    }
   case 5:
    {
     _ecma_fast_free_value(SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0); //@line 3919
     break;
    }
   default:
    {}
   }
   _ecma_dealloc_string($0); //@line 3926
  }
 } while (0);
 return;
}
function _ecma_builtin_helper_error_dispatch_call($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $4 = 0, $6 = 0, label = 0;
 if (!$2) {
  label = 5; //@line 5216
 } else {
  $4 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 5218
  if (_ecma_is_value_undefined($4) | 0) {
   label = 5; //@line 5221
  } else {
   $6 = _ecma_op_to_string($4) | 0; //@line 5223
   if (($6 | 0) == 24) {
    $$0 = 24; //@line 5226
   } else {
    $10 = _ecma_make_object_value(_ecma_new_standard_error_with_message($0, _ecma_get_string_from_value($6) | 0) | 0) | 0; //@line 5230
    _ecma_free_value($6); //@line 5231
    $$0 = $10; //@line 5232
   }
  }
 }
 if ((label | 0) == 5) {
  $$0 = _ecma_make_object_value(_ecma_new_standard_error($0) | 0) | 0; //@line 5239
 }
 return $$0 | 0; //@line 5241
}
function _parser_scan_post_primary_expression($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 switch ($1 | 0) {
 case 57:
  {
   _lexer_scan_identifier($0, 0); //@line 16775
   $$0 = 1; //@line 16776
   break;
  }
 case 52:
  {
   _parser_stack_push_uint8($0, 1); //@line 16780
   SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
   $$0 = 1; //@line 16782
   break;
  }
 case 53:
  {
   _parser_stack_push_uint8($0, 5); //@line 16786
   SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
   $$0 = 1; //@line 16788
   break;
  }
 case 14:
 case 13:
  {
   if (!((SAFE_HEAP_LOAD($0 + 191 >> 0 | 0, 1, 0) | 0) & 1)) {
    SAFE_HEAP_STORE($2 | 0, 3 | 0, 4);
    $$0 = 1; //@line 16798
   } else {
    $$0 = 0; //@line 16800
   }
   break;
  }
 default:
  {
   $$0 = 0; //@line 16805
  }
 }
 return $$0 | 0; //@line 16808
}
function _pad_660($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $13 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 3967
 STACKTOP = STACKTOP + 256 | 0; //@line 3968
 $5 = sp; //@line 3969
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 3975
  _memset($5 | 0, $1 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 3978
  if ($9 >>> 0 > 255) {
   $13 = $2 - $3 | 0; //@line 3981
   $$011 = $9; //@line 3982
   do {
    _out($0, $5, 256); //@line 3984
    $$011 = $$011 + -256 | 0; //@line 3985
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $13 & 255; //@line 3994
  } else {
   $$0$lcssa = $9; //@line 3996
  }
  _out($0, $5, $$0$lcssa); //@line 3998
 }
 STACKTOP = sp; //@line 4000
 return;
}
function _ecma_compare_ecma_strings($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $9 = 0;
 do {
  if (($0 | 0) == ($1 | 0)) {
   $$1 = 1; //@line 4722
  } else {
   if ((SAFE_HEAP_LOAD($0 + 2 | 0, 2, 0) | 0 | 0) == (SAFE_HEAP_LOAD($1 + 2 | 0, 2, 0) | 0 | 0)) {
    $9 = (SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 7; //@line 4731
    if ($9 << 16 >> 16 == ((SAFE_HEAP_LOAD($1 | 0, 2, 0) | 0) & 7)) {
     if (($9 & 65535) < 3) {
      $$1 = (SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0) == (SAFE_HEAP_LOAD($1 + 4 | 0, 4, 0) | 0 | 0); //@line 4743
      break;
     } else {
      $$1 = _ecma_compare_ecma_strings_longpath($0, $1) | 0; //@line 4747
      break;
     }
    } else {
     $$1 = 0; //@line 4751
    }
   } else {
    $$1 = 0; //@line 4754
   }
  }
 } while (0);
 return $$1 | 0; //@line 4758
}
function _ecma_update_float_number($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $$0 = 0, $2 = 0, $4 = 0, label = 0;
 $2 = ~~$1; //@line 5641
 $4 = $0 & -8; //@line 5643
 do {
  if (+($2 | 0) == $1) {
   if (!$2) {
    SAFE_HEAP_STORE_D(tempDoublePtr | 0, +$1, 8);
    if (!((SAFE_HEAP_LOAD(tempDoublePtr | 0, 4, 0) | 0 | 0) == 0 & (SAFE_HEAP_LOAD(tempDoublePtr + 4 | 0, 4, 0) | 0 | 0) == 0)) {
     label = 6; //@line 5656
     break;
    }
   } else {
    if (($2 + 134217728 | 0) >>> 0 >= 268435456) {
     label = 6; //@line 5663
     break;
    }
   }
   _ecma_dealloc_number($4); //@line 5667
   $$0 = $2 << 4; //@line 5669
  } else {
   label = 6; //@line 5671
  }
 } while (0);
 if ((label | 0) == 6) {
  SAFE_HEAP_STORE_D($4 | 0, +$1, 8);
  $$0 = $0; //@line 5676
 }
 return $$0 | 0; //@line 5678
}
function _ecma_builtin_object_prototype_object_is_prototype_of($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$032 = 0, $3 = 0, $5 = 0, $6 = 0, $9 = 0;
 if (_ecma_is_value_object($1) | 0) {
  $3 = _ecma_op_to_object($0) | 0; //@line 5388
  if (($3 | 0) == 24) {
   $$0 = 24; //@line 5391
  } else {
   $5 = _ecma_get_object_from_value($3) | 0; //@line 5393
   $6 = _ecma_op_to_object($1) | 0; //@line 5394
   if (($6 | 0) == 24) {
    $$032 = 24; //@line 5397
   } else {
    $9 = _ecma_op_object_is_prototype_of($5, _ecma_get_object_from_value($6) | 0) | 0; //@line 5400
    _ecma_free_value($6); //@line 5402
    $$032 = $9 ? 56 : 40; //@line 5403
   }
   _ecma_free_value($3); //@line 5405
   $$0 = $$032; //@line 5406
  }
 } else {
  $$0 = 40; //@line 5409
 }
 return $$0 | 0; //@line 5411
}
function _lit_code_unit_to_utf8($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $7 = 0, $9 = 0;
 $2 = $0 & 65535; //@line 15930
 do {
  if (($0 & 65535) < 128) {
   SAFE_HEAP_STORE($1 >> 0 | 0, $0 | 0, 1);
   $$0 = 1; //@line 15936
  } else {
   $7 = $2 >>> 6; //@line 15940
   $9 = ($2 & 63 | 128) & 255; //@line 15942
   if (($0 & 65535) < 2048) {
    SAFE_HEAP_STORE($1 >> 0 | 0, $7 & 31 | 192 | 0, 1);
    SAFE_HEAP_STORE($1 + 1 >> 0 | 0, $9 | 0, 1);
    $$0 = 2; //@line 15950
    break;
   } else {
    SAFE_HEAP_STORE($1 >> 0 | 0, ($0 & 65535) >>> 12 & 255 | -32 | 0, 1);
    SAFE_HEAP_STORE($1 + 1 >> 0 | 0, $7 & 63 | 128 | 0, 1);
    SAFE_HEAP_STORE($1 + 2 >> 0 | 0, $9 | 0, 1);
    $$0 = 3; //@line 15964
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 15969
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 increment = increment + 15 & -16 | 0; //@line 6114
 oldDynamicTop = SAFE_HEAP_LOAD(DYNAMICTOP_PTR | 0, 4, 0) | 0 | 0; //@line 6115
 newDynamicTop = oldDynamicTop + increment | 0; //@line 6116
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 6120
  ___setErrNo(12); //@line 6121
  return -1;
 }
 SAFE_HEAP_STORE(DYNAMICTOP_PTR | 0, newDynamicTop | 0, 4);
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   SAFE_HEAP_STORE(DYNAMICTOP_PTR | 0, oldDynamicTop | 0, 4);
   ___setErrNo(12); //@line 6130
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 6134
}
function _lit_copy_magic_string_to_buffer($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$017$lcssa = 0, $$01722 = 0, $$01821 = 0, $$01920 = 0, $3 = 0;
 $3 = _lit_get_magic_string_size($0) | 0; //@line 15338
 if (!$3) {
  $$017$lcssa = $1; //@line 15341
 } else {
  $$01722 = $1; //@line 15344
  $$01821 = _lit_get_magic_string_utf8($0) | 0; //@line 15344
  $$01920 = $3; //@line 15344
  while (1) {
   $$01920 = $$01920 + -1 | 0; //@line 15346
   SAFE_HEAP_STORE($$01722 >> 0 | 0, SAFE_HEAP_LOAD($$01821 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   if (!$$01920) {
    break;
   } else {
    $$01722 = $$01722 + 1 | 0; //@line 15355
    $$01821 = $$01821 + 1 | 0; //@line 15355
   }
  }
  $$017$lcssa = $1 + $3 | 0; //@line 15359
 }
 return $$017$lcssa | 0; //@line 15361
}
function _ecma_compare_ecma_strings_longpath($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$020 = 0, $$021 = 0, $$022 = 0, $$023 = 0;
 if (((SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 7) == 3) {
  $$0 = SAFE_HEAP_LOAD($1 + 4 | 0, 2, 1) | 0 | 0; //@line 4693
  $$020 = SAFE_HEAP_LOAD($0 + 4 | 0, 2, 1) | 0 | 0; //@line 4693
  $$021 = $1 + 8 | 0; //@line 4693
  $$022 = $0 + 8 | 0; //@line 4693
 } else {
  $$0 = SAFE_HEAP_LOAD($1 + 4 | 0, 4, 0) | 0 | 0; //@line 4701
  $$020 = SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0; //@line 4701
  $$021 = $1 + 12 | 0; //@line 4701
  $$022 = $0 + 12 | 0; //@line 4701
 }
 if (($$020 | 0) == ($$0 | 0)) {
  $$023 = (_memcmp($$022, $$021, $$020) | 0) == 0; //@line 4707
 } else {
  $$023 = 0; //@line 4709
 }
 return $$023 | 0; //@line 4711
}
function _ecma_builtin_object_prototype_object_to_locale_string($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $1 = 0, $4 = 0;
 $1 = _ecma_op_to_object($0) | 0; //@line 5326
 if (($1 | 0) == 24) {
  $$2 = 24; //@line 5329
 } else {
  $4 = _ecma_op_object_get_by_magic_id(_ecma_get_object_from_value($1) | 0, 48) | 0; //@line 5332
  if (($4 | 0) == 24) {
   $$1 = 24; //@line 5335
  } else {
   if (_ecma_op_is_callable($4) | 0) {
    $$0 = _ecma_op_function_call(_ecma_get_object_from_value($4) | 0, $0, 0, 0) | 0; //@line 5341
   } else {
    $$0 = _ecma_raise_type_error(6471) | 0; //@line 5344
   }
   _ecma_free_value($4); //@line 5346
   $$1 = $$0; //@line 5347
  }
  _ecma_free_value($1); //@line 5349
  $$2 = $$1; //@line 5350
 }
 return $$2 | 0; //@line 5352
}
function _lit_char_to_utf8_bytes($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $11 = 0, $2 = 0, $8 = 0;
 $2 = $1 & 65535; //@line 14919
 do {
  if (!($2 & 65408)) {
   SAFE_HEAP_STORE($0 >> 0 | 0, $1 | 0, 1);
   $$0 = 1; //@line 14926
  } else {
   $8 = $2 >>> 6; //@line 14930
   $11 = ($2 & 63 | 128) & 255; //@line 14933
   if (!($2 & 63488)) {
    SAFE_HEAP_STORE($0 >> 0 | 0, $8 & 31 | 192 | 0, 1);
    SAFE_HEAP_STORE($0 + 1 >> 0 | 0, $11 | 0, 1);
    $$0 = 2; //@line 14941
    break;
   } else {
    SAFE_HEAP_STORE($0 >> 0 | 0, $2 >>> 12 | 224 | 0, 1);
    SAFE_HEAP_STORE($0 + 1 >> 0 | 0, $8 & 63 | 128 | 0, 1);
    SAFE_HEAP_STORE($0 + 2 >> 0 | 0, $11 | 0, 1);
    $$0 = 3; //@line 14955
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 14960
}
function _jerry_parse($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 547
 STACKTOP = STACKTOP + 16 | 0; //@line 548
 $3 = sp; //@line 549
 $4 = _parser_parse_script(0, 0, $0, $1, $2, $3) | 0; //@line 550
 if (($4 | 0) == 24) {
  $$0 = _ecma_create_error_reference_from_context() | 0; //@line 554
 } else {
  _ecma_free_value($4); //@line 556
  $7 = _ecma_get_global_environment() | 0; //@line 557
  $9 = _ecma_op_create_function_object($7, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0) | 0; //@line 559
  _ecma_bytecode_deref(SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0); //@line 561
  $$0 = _ecma_make_object_value($9) | 0; //@line 563
 }
 STACKTOP = sp; //@line 565
 return $$0 | 0; //@line 565
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 5435
 $3 = SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0; //@line 5437
 SAFE_HEAP_STORE($1 >> 0 | 0, $3 + 255 | $3 | 0, 1);
 $7 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0; //@line 5442
 if (!($7 & 8)) {
  SAFE_HEAP_STORE($0 + 8 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE($0 + 4 | 0, 0 | 0, 4);
  $14 = SAFE_HEAP_LOAD($0 + 44 | 0, 4, 0) | 0 | 0; //@line 5451
  SAFE_HEAP_STORE($0 + 28 | 0, $14 | 0, 4);
  SAFE_HEAP_STORE($0 + 20 | 0, $14 | 0, 4);
  SAFE_HEAP_STORE($0 + 16 | 0, $14 + (SAFE_HEAP_LOAD($0 + 48 | 0, 4, 0) | 0 | 0) | 0, 4);
  $$0 = 0; //@line 5461
 } else {
  SAFE_HEAP_STORE($0 | 0, $7 | 32 | 0, 4);
  $$0 = -1; //@line 5465
 }
 return $$0 | 0; //@line 5467
}
function _ecma_op_bound_function_list_lazy_property_names($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $6 = 0, $8 = 0;
 $3 = $0 ? $2 : $1; //@line 11137
 $4 = _ecma_new_ecma_length_string() | 0; //@line 11138
 _ecma_append_to_values_collection($3, _ecma_make_string_value($4) | 0, 1); //@line 11140
 _ecma_deref_ecma_string($4); //@line 11141
 $6 = _ecma_get_magic_string(30) | 0; //@line 11142
 _ecma_append_to_values_collection($3, _ecma_make_string_value($6) | 0, 1); //@line 11144
 _ecma_deref_ecma_string($6); //@line 11145
 $8 = _ecma_get_magic_string(53) | 0; //@line 11146
 _ecma_append_to_values_collection($3, _ecma_make_string_value($8) | 0, 1); //@line 11148
 _ecma_deref_ecma_string($8); //@line 11149
 return;
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 2042
 STACKTOP = STACKTOP + 32 | 0; //@line 2043
 $vararg_buffer = sp; //@line 2044
 SAFE_HEAP_STORE($0 + 36 | 0, 3 | 0, 4);
 if (!((SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0) & 64)) {
  SAFE_HEAP_STORE($vararg_buffer | 0, SAFE_HEAP_LOAD($0 + 60 | 0, 4, 0) | 0 | 0, 4);
  SAFE_HEAP_STORE($vararg_buffer + 4 | 0, 21523 | 0, 4);
  SAFE_HEAP_STORE($vararg_buffer + 8 | 0, sp + 16 | 0, 4);
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   SAFE_HEAP_STORE($0 + 75 >> 0 | 0, -1 | 0, 1);
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 2067
 STACKTOP = sp; //@line 2068
 return $14 | 0; //@line 2068
}
function _ecma_gc_free_native_pointer($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $14 = 0, $6 = 0, $8 = 0, $9 = 0;
 $6 = SAFE_HEAP_LOAD($0 + 7 & -4 | 0, 4, 0) | 0 | 0; //@line 1373
 $8 = $6 + 4 | 0; //@line 1375
 if (($1 | 0) == 80) {
  $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0; //@line 1377
  if ($9 | 0) {
   FUNCTION_TABLE_vi[(SAFE_FT_MASK($9 | 0, 15 | 0) | 0) & 15](SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0); //@line 1381
  }
 } else {
  $12 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0; //@line 1384
  if ($12 | 0) {
   $14 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0; //@line 1387
   if ($14 | 0) {
    FUNCTION_TABLE_vi[(SAFE_FT_MASK($14 | 0, 15 | 0) | 0) & 15](SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0); //@line 1391
   }
  }
 }
 return;
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 3828
 } else {
  $$056 = $2; //@line 3830
  $15 = $1; //@line 3830
  $8 = $0; //@line 3830
  while (1) {
   $14 = $$056 + -1 | 0; //@line 3838
   SAFE_HEAP_STORE($14 >> 0 | 0, SAFE_HEAP_LOAD(10160 + ($8 & 15) >> 0 | 0, 1, 1) | 0 | 0 | $3 | 0, 1);
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 3840
   $15 = tempRet0; //@line 3841
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 3846
    break;
   } else {
    $$056 = $14; //@line 3849
   }
  }
 }
 return $$05$lcssa | 0; //@line 3853
}
function _ecma_number_unpack($0, $1, $2, $3) {
 $0 = +$0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $16 = 0, $4 = 0, $5 = 0, $7 = 0;
 SAFE_HEAP_STORE_D(tempDoublePtr | 0, +$0, 8);
 $4 = SAFE_HEAP_LOAD(tempDoublePtr | 0, 4, 0) | 0 | 0; //@line 3021
 $5 = SAFE_HEAP_LOAD(tempDoublePtr + 4 | 0, 4, 0) | 0 | 0; //@line 3022
 if ($1 | 0) {
  $7 = _bitshift64Lshr($4 | 0, $5 | 0, 63) | 0; //@line 3025
  SAFE_HEAP_STORE($1 >> 0 | 0, $7 | 0, 1);
 }
 if ($2 | 0) {
  $11 = _bitshift64Lshr($4 | 0, $5 | 0, 52) | 0; //@line 3032
  SAFE_HEAP_STORE($2 | 0, $11 & 2047 | 0, 4);
 }
 if ($3 | 0) {
  $16 = $3; //@line 3040
  SAFE_HEAP_STORE($16 | 0, $4 | 0, 4);
  SAFE_HEAP_STORE($16 + 4 | 0, $5 & 1048575 | 0, 4);
 }
 return;
}
function _ecma_op_object_get_property($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$014 = 0, $$016 = 0, $$2 = 0, $4 = 0;
 $$014 = 128; //@line 12415
 $$016 = $0; //@line 12415
 L1 : while (1) {
  $4 = _ecma_op_object_get_own_property($$016, $1, $2, $3) | 0; //@line 12417
  switch ($4 << 24 >> 24) {
  case 4:
  case 0:
   {
    break;
   }
  default:
   {
    $$2 = $4; //@line 12423
    break L1;
   }
  }
  $$014 = $$014 + -1 | 0; //@line 12427
  if (($$014 | 0) == 0 | $4 << 24 >> 24 == 4) {
   $$2 = 0; //@line 12432
   break;
  }
  $$016 = _ecma_get_object_prototype($$016) | 0; //@line 12435
  if (!$$016) {
   $$2 = 0; //@line 12438
   break;
  }
 }
 return $$2 | 0; //@line 12444
}
function _ecma_builtin_object_prototype_object_has_own_property($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0;
 $2 = _ecma_op_to_string($1) | 0; //@line 5359
 if (($2 | 0) == 24) {
  $$1 = 24; //@line 5362
 } else {
  $4 = _ecma_op_to_object($0) | 0; //@line 5364
  if (($4 | 0) == 24) {
   $$0 = 24; //@line 5367
  } else {
   $6 = _ecma_get_string_from_value($2) | 0; //@line 5369
   $9 = _ecma_make_boolean_value(_ecma_op_object_has_own_property(_ecma_get_object_from_value($4) | 0, $6) | 0) | 0; //@line 5372
   _ecma_free_value($4); //@line 5373
   $$0 = $9; //@line 5374
  }
  _ecma_free_value($2); //@line 5376
  $$1 = $$0; //@line 5377
 }
 return $$1 | 0; //@line 5379
}
function _parser_parse_with_statement_start($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 11542
 STACKTOP = STACKTOP + 16 | 0; //@line 11543
 $1 = sp; //@line 11544
 $2 = $0 + 168 | 0; //@line 11545
 if (!((SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0) & 1)) {
  _parser_parse_enclosed_expr($0); //@line 11550
  SAFE_HEAP_STORE($2 | 0, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 5120 | 0, 4);
  _parser_emit_cbc_forward_branch($0, 257, $1); //@line 11554
  _parser_stack_push($0, $1, 8); //@line 11555
  _parser_stack_push_uint8($0, 11); //@line 11556
  _parser_stack_iterator_init($0, $0 + 180 | 0); //@line 11558
  STACKTOP = sp; //@line 11559
  return;
 } else {
  _parser_raise_error($0, 35); //@line 11561
 }
}
function _ecma_builtin_helper_def_prop($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $21 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 8508
 STACKTOP = STACKTOP + 16 | 0; //@line 8509
 $7 = sp; //@line 8510
 _ecma_make_empty_property_descriptor($7); //@line 8511
 $8 = SAFE_HEAP_LOAD($7 | 0, 2, 0) | 0 | 0; //@line 8512
 SAFE_HEAP_STORE($7 + 4 | 0, $2 | 0, 4);
 SAFE_HEAP_STORE($7 | 0, ($3 & 1) << 4 & 65535 | ($4 & 1) << 6 & 65535 | ($5 & 1) << 8 & 65535 | $8 & -506 | 169 | 0, 2);
 $21 = _ecma_op_object_define_own_property($0, $1, $7, $6) | 0; //@line 8527
 STACKTOP = sp; //@line 8528
 return $21 | 0; //@line 8528
}
function _lit_char_is_white_space($0) {
 $0 = $0 | 0;
 var $$0 = 0, $switch$tableidx = 0;
 L1 : do {
  if (($0 & 65535) < 128) {
   $switch$tableidx = $0 + -9 << 16 >> 16; //@line 14608
   if (($switch$tableidx & 65535) < 24) {
    return (8388621 >>> ($switch$tableidx & 65535) & 1 | 0) != 0 | 0; //@line 14617
   } else {
    $$0 = 0; //@line 14619
   }
  } else {
   switch ($0 << 16 >> 16) {
   case -257:
   case 160:
    {
     $$0 = 1; //@line 14624
     break L1;
     break;
    }
   default:
    {}
   }
   if (($0 + -8192 & 65535) < 12) {
    $$0 = 1; //@line 14634
   } else {
    $$0 = _search_char_in_char_array($0, 1528, 5) | 0; //@line 14637
   }
  }
 } while (0);
 return $$0 | 0; //@line 14641
}
function _vm_decode_branch_offset($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$09 = 0, $$1 = 0, $3 = 0, $5 = 0, label = 0;
 $3 = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 1) | 0 | 0; //@line 14519
 switch ($1 | 0) {
 case 3:
  {
   $5 = $0 + 1 | 0; //@line 14523
   $$0 = SAFE_HEAP_LOAD($5 >> 0 | 0, 1, 1) | 0 | 0 | $3 << 8; //@line 14527
   $$09 = $5; //@line 14527
   label = 3; //@line 14528
   break;
  }
 case 2:
  {
   $$0 = $3; //@line 14532
   $$09 = $0; //@line 14532
   label = 3; //@line 14533
   break;
  }
 default:
  {
   $$1 = $3; //@line 14537
  }
 }
 if ((label | 0) == 3) {
  $$1 = SAFE_HEAP_LOAD($$09 + 1 >> 0 | 0, 1, 1) | 0 | 0 | $$0 << 8; //@line 14546
 }
 return $$1 | 0; //@line 14548
}
function _jmem_heap_stat_alloc($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $7 = 0;
 $2 = $0 + 7 & -8; //@line 14303
 $5 = (SAFE_HEAP_LOAD(134119 * 4 | 0, 4, 0) | 0 | 0) + $2 | 0; //@line 14306
 SAFE_HEAP_STORE(134119 * 4 | 0, $5 | 0, 4);
 $7 = $2 - $0 + (SAFE_HEAP_LOAD(134121 * 4 | 0, 4, 0) | 0 | 0) | 0; //@line 14309
 SAFE_HEAP_STORE(134121 * 4 | 0, $7 | 0, 4);
 SAFE_HEAP_STORE(134133 * 4 | 0, (SAFE_HEAP_LOAD(134133 * 4 | 0, 4, 0) | 0 | 0) + 1 | 0, 4);
 if ($5 >>> 0 > (SAFE_HEAP_LOAD(134120 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
  SAFE_HEAP_STORE(134120 * 4 | 0, $5 | 0, 4);
 }
 if ($7 >>> 0 > (SAFE_HEAP_LOAD(134122 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
  SAFE_HEAP_STORE(134122 * 4 | 0, $7 | 0, 4);
 }
 return;
}
function _search_char_in_char_array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$021 = 0, $$024 = 0, $$2 = 0, $10 = 0, $6 = 0, $8 = 0;
 $$021 = 0; //@line 14650
 $$024 = $2 + -1 | 0; //@line 14650
 while (1) {
  if (($$021 | 0) > ($$024 | 0)) {
   $$2 = 0; //@line 14654
   break;
  }
  $6 = ($$021 + $$024 | 0) / 2 | 0; //@line 14658
  $8 = SAFE_HEAP_LOAD($1 + ($6 << 1) | 0, 2, 0) | 0 | 0; //@line 14660
  $10 = ($8 & 65535) > ($0 & 65535); //@line 14662
  if ($8 << 16 >> 16 == $0 << 16 >> 16) {
   $$2 = 1; //@line 14668
   break;
  } else {
   $$021 = $10 ? $$021 : $6 + 1 | 0; //@line 14671
   $$024 = $10 ? $6 + -1 | 0 : $$024; //@line 14671
  }
 }
 return $$2 | 0; //@line 14674
}
function _ecma_op_object_define_own_property($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$1 = 0;
 switch (_ecma_get_object_type($0) | 0) {
 case 5:
 case 3:
 case 2:
 case 1:
 case 0:
  {
   $$1 = _ecma_op_general_object_define_own_property($0, $1, $2, $3) | 0; //@line 13099
   break;
  }
 case 4:
  {
   $$1 = _ecma_op_array_object_define_own_property($0, $1, $2, $3) | 0; //@line 13104
   break;
  }
 case 6:
  {
   if (!(SAFE_HEAP_LOAD($0 + 8 >> 0 | 0, 1, 0) | 0)) {
    $$1 = _ecma_op_arguments_object_define_own_property($0, $1, $2, $3) | 0; //@line 13113
   } else {
    $$1 = 0; //@line 13115
   }
   break;
  }
 default:
  {}
 }
 return $$1 | 0; //@line 13123
}
function _parser_parse_default_statement($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 11568
 STACKTOP = STACKTOP + 32 | 0; //@line 11569
 $1 = sp + 16 | 0; //@line 11570
 $2 = sp; //@line 11571
 if (((SAFE_HEAP_LOAD($0 + 304 >> 0 | 0, 1, 0) | 0 | 0) + -5 & 255) < 2) {
  _lexer_next_token($0); //@line 11577
  _lexer_next_token($0); //@line 11578
  _parser_stack_iterator_init($0, $1); //@line 11579
  _parser_stack_iterator_skip($1, 5); //@line 11580
  _parser_stack_iterator_read($1, $2, 12); //@line 11581
  _parser_set_branch_to_current_position($0, $2); //@line 11582
  STACKTOP = sp; //@line 11583
  return;
 } else {
  _parser_raise_error($0, 37); //@line 11585
 }
}
function _ecma_number_to_uint32($0) {
 $0 = +$0;
 var $$0 = 0, $$023 = 0.0, $4 = 0, $6 = 0.0, $9 = 0;
 if (_ecma_number_is_nan($0) | 0) {
  $$0 = 0; //@line 2449
 } else {
  if (_ecma_number_is_zero($0) | 0) {
   $$0 = 0; //@line 2453
  } else {
   if (_ecma_number_is_infinity($0) | 0) {
    $$0 = 0; //@line 2457
   } else {
    $4 = _ecma_number_is_negative($0) | 0; //@line 2459
    $6 = $4 ? -$0 : $0; //@line 2461
    if (!($6 >= 4294967296.0)) {
     $$023 = $6; //@line 2464
    } else {
     $$023 = +_ecma_number_calc_remainder($6, 4294967296.0); //@line 2467
    }
    $9 = ~~$$023 >>> 0; //@line 2469
    $$0 = $4 ? 0 - $9 | 0 : $9; //@line 2472
   }
  }
 }
 return $$0 | 0; //@line 2476
}
function _opfunc_typeof($0) {
 $0 = $0 | 0;
 var $$sink = 0, $6 = 0;
 if (_ecma_is_value_undefined($0) | 0) {
  $$sink = 57; //@line 14053
 } else {
  if (_ecma_is_value_null($0) | 0) {
   $$sink = 35; //@line 14057
  } else {
   if (_ecma_is_value_boolean($0) | 0) {
    $$sink = 38; //@line 14061
   } else {
    if (_ecma_is_value_number($0) | 0) {
     $$sink = 34; //@line 14065
    } else {
     if (_ecma_is_value_string($0) | 0) {
      $$sink = 36; //@line 14069
     } else {
      $6 = _ecma_op_is_callable($0) | 0; //@line 14071
      $$sink = $6 ? 43 : 35; //@line 14073
     }
    }
   }
  }
 }
 return _ecma_make_string_value(_ecma_get_magic_string($$sink) | 0) | 0; //@line 14081
}
function _ecma_make_number_value($0) {
 $0 = +$0;
 var $$0 = 0, $1 = 0, label = 0;
 $1 = ~~$0; //@line 5314
 do {
  if (+($1 | 0) == $0) {
   if (!$1) {
    SAFE_HEAP_STORE_D(tempDoublePtr | 0, +$0, 8);
    if (!((SAFE_HEAP_LOAD(tempDoublePtr | 0, 4, 0) | 0 | 0) == 0 & (SAFE_HEAP_LOAD(tempDoublePtr + 4 | 0, 4, 0) | 0 | 0) == 0)) {
     label = 6; //@line 5327
     break;
    }
   } else {
    if (($1 + 134217728 | 0) >>> 0 >= 268435456) {
     label = 6; //@line 5334
     break;
    }
   }
   $$0 = $1 << 4; //@line 5339
  } else {
   label = 6; //@line 5341
  }
 } while (0);
 if ((label | 0) == 6) {
  $$0 = _ecma_create_float_number($0) | 0; //@line 5346
 }
 return $$0 | 0; //@line 5348
}
function _parser_emit_cbc_forward_branch_item($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $12 = 0, $3 = 0, $4 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 13060
 STACKTOP = STACKTOP + 16 | 0; //@line 13061
 $3 = sp; //@line 13062
 _parser_emit_cbc_forward_branch($0, $1, $3); //@line 13063
 $4 = _parser_malloc($0, 12) | 0; //@line 13064
 $6 = $3; //@line 13066
 $11 = SAFE_HEAP_LOAD($6 + 4 | 0, 4, 0) | 0 | 0; //@line 13071
 $12 = $4 + 4 | 0; //@line 13072
 SAFE_HEAP_STORE($12 | 0, SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($12 + 4 | 0, $11 | 0, 4);
 SAFE_HEAP_STORE($4 | 0, $2 | 0, 4);
 STACKTOP = sp; //@line 13079
 return $4 | 0; //@line 13079
}
function _ecma_string_to_property_name($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $4 = 0, label = 0;
 $2 = SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0 | 0; //@line 4472
 if (($2 & 7) < 3) {
  $4 = $0 + 4 | 0; //@line 4476
  if ((SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0) >>> 0 < 65536) {
   SAFE_HEAP_STORE($1 >> 0 | 0, ($2 & 255) << 6 | 0, 1);
   $$0 = (SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0) & 65535; //@line 4485
  } else {
   label = 4; //@line 4487
  }
 } else {
  label = 4; //@line 4490
 }
 if ((label | 0) == 4) {
  SAFE_HEAP_STORE($1 >> 0 | 0, -64 | 0, 1);
  _ecma_ref_ecma_string($0); //@line 4494
  $$0 = _jmem_compress_pointer($0) | 0; //@line 4496
 }
 return $$0 | 0; //@line 4498
}
function _jerry_string_to_utf8_char_buffer($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$1 = 0, $9 = 0;
 if (_ecma_is_value_error_reference($0) | 0) {
  $$0$i = SAFE_HEAP_LOAD((_ecma_get_error_reference_from_value($0) | 0) + 4 | 0, 4, 0) | 0 | 0; //@line 649
 } else {
  $$0$i = $0; //@line 651
 }
 if (($1 | 0) == 0 | (_ecma_is_value_string($$0$i) | 0) ^ 1) {
  $$1 = 0; //@line 658
 } else {
  $9 = _ecma_get_string_from_value($$0$i) | 0; //@line 660
  if ((_ecma_string_get_utf8_size($9) | 0) >>> 0 > $2 >>> 0) {
   $$1 = 0; //@line 664
  } else {
   $$1 = _ecma_string_copy_to_utf8_buffer($9, $1, $2) | 0; //@line 667
  }
 }
 return $$1 | 0; //@line 670
}
function _ecma_clear_error_reference($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $11 = 0, $2 = 0, $3 = 0, $6 = 0;
 $2 = _ecma_get_error_reference_from_value($0) | 0; //@line 7069
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 7070
 if ($1) {
  $6 = SAFE_HEAP_LOAD(134116 * 4 | 0, 4, 0) | 0 | 0; //@line 7074
  SAFE_HEAP_STORE(134116 * 4 | 0, ($3 & 1 | 0 ? $6 & -9 : $6 | 8) | 0, 4);
 }
 $11 = SAFE_HEAP_LOAD($2 + 4 | 0, 4, 0) | 0 | 0; //@line 7082
 if ($3 >>> 0 > 3) {
  SAFE_HEAP_STORE($2 | 0, $3 + -2 | 0, 4);
  $$0 = _ecma_copy_value($11) | 0; //@line 7087
 } else {
  _jmem_pools_free($2, 8); //@line 7089
  $$0 = $11; //@line 7090
 }
 return $$0 | 0; //@line 7092
}
function _ecma_op_create_mutable_binding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $5 = 0, label = 0;
 if ((_ecma_get_lex_env_type($0) | 0) == 13) {
  _ecma_create_named_data_property($0, $1, $2 ? 20 : 16, 0) | 0; //@line 11203
  label = 5; //@line 11204
 } else {
  $5 = _ecma_get_lex_env_binding_object($0) | 0; //@line 11206
  if (_ecma_get_object_extensible($5) | 0) {
   if ((_ecma_builtin_helper_def_prop($5, $1, 72, 1, 1, $2, 1) | 0) == 24) {
    $$1 = 24; //@line 11212
   } else {
    label = 5; //@line 11214
   }
  } else {
   $$1 = 8; //@line 11217
  }
 }
 if ((label | 0) == 5) {
  $$1 = 8; //@line 11221
 }
 return $$1 | 0; //@line 11223
}
function _ecma_append_magic_string_to_string($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $9 = 0, label = 0;
 if (!(SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0)) {
  if (((SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 7) == 1) {
   _ecma_deref_ecma_string($0); //@line 4069
   $$0 = _ecma_new_ecma_string_from_magic_string_id($1) | 0; //@line 4071
  } else {
   label = 4; //@line 4073
  }
 } else {
  label = 4; //@line 4076
 }
 if ((label | 0) == 4) {
  $9 = _lit_get_magic_string_utf8($1) | 0; //@line 4079
  $10 = _lit_get_magic_string_size($1) | 0; //@line 4080
  $$0 = _ecma_append_chars_to_string($0, $9, $10, $10) | 0; //@line 4082
 }
 return $$0 | 0; //@line 4084
}
function _parser_encode_literal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0;
 $3 = $1 & 65535; //@line 18575
 do {
  if (($1 & 65535) > ($2 & 65535)) {
   if ($2 << 16 >> 16 == 254) {
    SAFE_HEAP_STORE($0 >> 0 | 0, -1 | 0, 1);
    SAFE_HEAP_STORE($0 + 1 >> 0 | 0, $3 + 1 | 0, 1);
    $$0 = $0 + 2 | 0; //@line 18587
    break;
   } else {
    SAFE_HEAP_STORE($0 >> 0 | 0, $3 >>> 8 | 128 | 0, 1);
    SAFE_HEAP_STORE($0 + 1 >> 0 | 0, $1 | 0, 1);
    $$0 = $0 + 2 | 0; //@line 18598
    break;
   }
  } else {
   SAFE_HEAP_STORE($0 >> 0 | 0, $1 | 0, 1);
   $$0 = $0 + 1 | 0; //@line 18605
  }
 } while (0);
 return $$0 | 0; //@line 18608
}
function _ecma_is_constructor($0) {
 $0 = $0 | 0;
 var $$1 = 0, $2 = 0;
 L1 : do {
  if (_ecma_is_value_object($0) | 0) {
   $2 = _ecma_get_object_from_value($0) | 0; //@line 10571
   switch (_ecma_get_object_type($2) | 0) {
   case 3:
   case 5:
    {
     $$1 = 1; //@line 10575
     break L1;
     break;
    }
   case 2:
    {
     break;
    }
   default:
    {
     $$1 = 0; //@line 10583
     break L1;
    }
   }
   if (_ecma_get_object_is_builtin($2) | 0) {
    $$1 = (_ecma_builtin_function_is_routine($2) | 0) ^ 1; //@line 10591
   } else {
    $$1 = 1; //@line 10593
   }
  } else {
   $$1 = 0; //@line 10596
  }
 } while (0);
 return $$1 | 0; //@line 10599
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 3865
 } else {
  $$06 = $2; //@line 3867
  $11 = $1; //@line 3867
  $7 = $0; //@line 3867
  while (1) {
   $10 = $$06 + -1 | 0; //@line 3872
   SAFE_HEAP_STORE($10 >> 0 | 0, $7 & 7 | 48 | 0, 1);
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 3874
   $11 = tempRet0; //@line 3875
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 3880
    break;
   } else {
    $$06 = $10; //@line 3883
   }
  }
 }
 return $$0$lcssa | 0; //@line 3887
}
function _lit_utf8_string_hash_combine($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa = 0, $$01011 = 0, $$012 = 0, $10 = 0, $3 = 0;
 $3 = $0 & 65535; //@line 15847
 if (!$2) {
  $$010$lcssa = $3; //@line 15850
 } else {
  $$01011 = $3; //@line 15852
  $$012 = 0; //@line 15852
  while (1) {
   $10 = Math_imul((SAFE_HEAP_LOAD($1 + $$012 >> 0 | 0, 1, 1) | 0 | 0) ^ $$01011, 16777619) | 0; //@line 15858
   $$012 = $$012 + 1 | 0; //@line 15859
   if (($$012 | 0) == ($2 | 0)) {
    $$010$lcssa = $10; //@line 15862
    break;
   } else {
    $$01011 = $10; //@line 15865
   }
  }
 }
 return $$010$lcssa & 65535 | 0; //@line 15870
}
function SAFE_HEAP_LOAD(dest, bytes, unsigned) {
 dest = dest | 0;
 bytes = bytes | 0;
 unsigned = unsigned | 0;
 if ((dest | 0) <= 0) segfault(); //@line 72
 if ((dest + bytes | 0) > (HEAP32[DYNAMICTOP_PTR >> 2] | 0)) segfault(); //@line 73
 if ((bytes | 0) == 4) {
  if (dest & 3) alignfault(); //@line 75
  return HEAP32[dest >> 2] | 0; //@line 76
 } else if ((bytes | 0) == 1) {
  if (unsigned) {
   return HEAPU8[dest >> 0] | 0; //@line 79
  } else {
   return HEAP8[dest >> 0] | 0; //@line 81
  }
 }
 if (dest & 1) alignfault(); //@line 84
 if (unsigned) return HEAPU16[dest >> 1] | 0; //@line 85
 return HEAP16[dest >> 1] | 0; //@line 86
}
function _ecma_op_object_find($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016 = 0, $$018 = 0, $$2 = 0, $2 = 0, $3 = 0;
 $2 = _ecma_make_object_value($0) | 0; //@line 12673
 $$016 = $0; //@line 12674
 $$018 = 128; //@line 12674
 while (1) {
  $3 = _ecma_op_object_find_own($2, $$016, $1) | 0; //@line 12676
  if (_ecma_is_value_found($3) | 0) {
   $$2 = $3; //@line 12679
   break;
  }
  $$018 = $$018 + -1 | 0; //@line 12682
  if (!$$018) {
   $$2 = 120; //@line 12685
   break;
  }
  $$016 = _ecma_get_object_prototype($$016) | 0; //@line 12688
  if (!$$016) {
   $$2 = 120; //@line 12691
   break;
  }
 }
 return $$2 | 0; //@line 12697
}
function _lit_utf8_string_length($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$09$lcssa = 0, $$0910 = 0, $11 = 0, $5 = 0;
 if (!$1) {
  $$09$lcssa = 0; //@line 15586
 } else {
  $$011 = 0; //@line 15588
  $$0910 = 0; //@line 15588
  while (1) {
   $5 = SAFE_HEAP_LOAD($0 + $$011 >> 0 | 0, 1, 1) | 0 | 0; //@line 15592
   $$011 = (($5 & 128 | 0) == 0 ? 1 : ($5 & 224 | 0) == 192 ? 2 : 3) + $$011 | 0; //@line 15599
   $11 = $$0910 + 1 | 0; //@line 15600
   if ($$011 >>> 0 >= $1 >>> 0) {
    $$09$lcssa = $11; //@line 15605
    break;
   } else {
    $$0910 = $11; //@line 15603
   }
  }
 }
 return $$09$lcssa | 0; //@line 15610
}
function _ecma_string_from_property_name($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $9 = 0;
 switch (($0 & 255) >>> 6 & 3) {
 case 0:
  {
   $$0 = _ecma_new_ecma_string_from_uint32($1 & 65535) | 0; //@line 4511
   break;
  }
 case 1:
  {
   $$0 = _ecma_new_ecma_string_from_magic_string_id($1 & 65535) | 0; //@line 4517
   break;
  }
 case 2:
  {
   $$0 = _ecma_new_ecma_string_from_magic_string_ex_id($1 & 65535) | 0; //@line 4523
   break;
  }
 default:
  {
   $9 = _jmem_decompress_pointer($1 & 65535) | 0; //@line 4528
   _ecma_ref_ecma_string($9); //@line 4529
   $$0 = $9; //@line 4530
  }
 }
 return $$0 | 0; //@line 4533
}
function _ecma_op_object_get($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016 = 0, $$018 = 0, $$2 = 0, $2 = 0, $3 = 0;
 $2 = _ecma_make_object_value($0) | 0; //@line 12704
 $$016 = $0; //@line 12705
 $$018 = 128; //@line 12705
 while (1) {
  $3 = _ecma_op_object_find_own($2, $$016, $1) | 0; //@line 12707
  if (_ecma_is_value_found($3) | 0) {
   $$2 = $3; //@line 12710
   break;
  }
  $$018 = $$018 + -1 | 0; //@line 12713
  if (!$$018) {
   $$2 = 72; //@line 12716
   break;
  }
  $$016 = _ecma_get_object_prototype($$016) | 0; //@line 12719
  if (!$$016) {
   $$2 = 72; //@line 12722
   break;
  }
 }
 return $$2 | 0; //@line 12728
}
function _ecma_op_create_object_object_arg($0) {
 $0 = $0 | 0;
 var $$0 = 0, label = 0;
 if (_ecma_is_value_object($0) | 0) {
  label = 5; //@line 11681
 } else {
  if (_ecma_is_value_number($0) | 0) {
   label = 5; //@line 11685
  } else {
   if (_ecma_is_value_string($0) | 0) {
    label = 5; //@line 11689
   } else {
    if (_ecma_is_value_boolean($0) | 0) {
     label = 5; //@line 11693
    } else {
     $$0 = _ecma_make_object_value(_ecma_op_create_object_object_noarg() | 0) | 0; //@line 11697
    }
   }
  }
 }
 if ((label | 0) == 5) {
  $$0 = _ecma_op_to_object($0) | 0; //@line 11704
 }
 return $$0 | 0; //@line 11706
}
function _ecma_op_get_binding_value($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$015 = 0, $10 = 0, $9 = 0;
 if ((_ecma_get_lex_env_type($0) | 0) == 13) {
  $$015 = _ecma_copy_value(SAFE_HEAP_LOAD(_ecma_get_named_data_property($0, $1) | 0 | 0, 4, 0) | 0 | 0) | 0; //@line 11282
 } else {
  $9 = _ecma_op_object_find(_ecma_get_lex_env_binding_object($0) | 0, $1) | 0; //@line 11285
  $10 = _ecma_is_value_found($9) | 0; //@line 11286
  if ($10 | $2 ^ 1) {
   $$015 = $10 ? $9 : 72; //@line 11291
  } else {
   $$015 = _ecma_raise_reference_error(4030) | 0; //@line 11294
  }
 }
 return $$015 | 0; //@line 11297
}
function _ecma_builtin_global_object_is_finite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $2 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 4358
 STACKTOP = STACKTOP + 16 | 0; //@line 4359
 $1 = sp; //@line 4360
 $2 = _ecma_get_number($0, $1) | 0; //@line 4361
 if (_ecma_is_value_empty($2) | 0) {
  if (_ecma_number_is_nan(+(+SAFE_HEAP_LOAD_D($1 | 0, 8))) | 0) {
   $$0 = 40; //@line 4367
  } else {
   $7 = _ecma_number_is_infinity(+(+SAFE_HEAP_LOAD_D($1 | 0, 8))) | 0; //@line 4370
   $$0 = $7 ? 40 : 56; //@line 4372
  }
 } else {
  $$0 = $2; //@line 4375
 }
 STACKTOP = sp; //@line 4377
 return $$0 | 0; //@line 4377
}
function _ecma_op_delete_binding($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $4 = 0;
 if ((_ecma_get_lex_env_type($0) | 0) == 13) {
  $4 = _ecma_find_named_property($0, $1) | 0; //@line 11307
  if (!$4) {
   $$0 = 56; //@line 11310
  } else {
   if (_ecma_is_property_configurable(SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0 | 0) | 0) {
    _ecma_delete_property($0, $4 + 7 & -4); //@line 11319
    $$0 = 56; //@line 11320
   } else {
    $$0 = 40; //@line 11322
   }
  }
 } else {
  $$0 = _ecma_op_object_delete(_ecma_get_lex_env_binding_object($0) | 0, $1, 0) | 0; //@line 11328
 }
 return $$0 | 0; //@line 11330
}
function _ecma_object_get_class_name($0) {
 $0 = $0 | 0;
 var $$1 = 0;
 switch (_ecma_get_object_type($0) | 0) {
 case 4:
  {
   $$1 = 19; //@line 13803
   break;
  }
 case 1:
  {
   $$1 = SAFE_HEAP_LOAD($0 + 8 | 0, 2, 1) | 0 | 0; //@line 13810
   break;
  }
 case 6:
  {
   $$1 = 51; //@line 13814
   break;
  }
 case 5:
 case 3:
 case 2:
  {
   $$1 = 41; //@line 13818
   break;
  }
 default:
  {
   if (_ecma_get_object_is_builtin($0) | 0) {
    $$1 = (SAFE_HEAP_LOAD($0 + 8 >> 0 | 0, 1, 0) | 0 | 0) == 5 ? 20 : 26; //@line 13828
   } else {
    $$1 = 26; //@line 13830
   }
  }
 }
 return $$1 | 0; //@line 13834
}
function _ecma_raise_standard_error($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $4 = 0, $5 = 0;
 if (!$1) {
  $$0 = _ecma_new_standard_error(0) | 0; //@line 10402
 } else {
  $4 = _ecma_new_ecma_string_from_utf8($1, _lit_zt_utf8_string_size($1) | 0) | 0; //@line 10405
  $5 = _ecma_new_standard_error_with_message(0, $4) | 0; //@line 10406
  _ecma_deref_ecma_string($4); //@line 10407
  $$0 = $5; //@line 10408
 }
 SAFE_HEAP_STORE(134113 * 4 | 0, _ecma_make_object_value($$0) | 0 | 0, 4);
 SAFE_HEAP_STORE(134116 * 4 | 0, SAFE_HEAP_LOAD(134116 * 4 | 0, 4, 0) | 0 | 8 | 0, 4);
 return 24; //@line 10415
}
function _parser_stack_iterator_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $6 = 0;
 $4 = SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0; //@line 10376
 $6 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0; //@line 10378
 if ($4 >>> 0 < $2 >>> 0) {
  $10 = $2 - $4 | 0; //@line 10380
  _memcpy($6 + 4 | 0, $1 + $10 | 0, $4 | 0) | 0; //@line 10383
  _memcpy((SAFE_HEAP_LOAD(SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0, 4, 0) | 0 | 0) + 64 + (0 - $10) | 0, $1 | 0, $10 | 0) | 0; //@line 10389
 } else {
  _memcpy($6 + 4 + $4 + (0 - $2) | 0, $1 | 0, $2 | 0) | 0; //@line 10394
 }
 return;
}
function _parser_stack_iterator_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $6 = 0;
 $4 = SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0; //@line 10347
 $6 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0; //@line 10349
 if ($4 >>> 0 < $2 >>> 0) {
  $10 = $2 - $4 | 0; //@line 10351
  _memcpy($1 + $10 | 0, $6 + 4 | 0, $4 | 0) | 0; //@line 10354
  _memcpy($1 | 0, (SAFE_HEAP_LOAD(SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0, 4, 0) | 0 | 0) + 64 + (0 - $10) | 0, $10 | 0) | 0; //@line 10360
 } else {
  _memcpy($1 | 0, $6 + 4 + $4 + (0 - $2) | 0, $2 | 0) | 0; //@line 10365
 }
 return;
}
function _opfunc_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $4 = 0, $6 = 0, $9 = 0;
 if (_ecma_is_value_object($1) | 0) {
  $4 = _ecma_op_to_string($0) | 0; //@line 14003
  if (($4 | 0) == 24) {
   $$1 = 24; //@line 14006
  } else {
   $6 = _ecma_get_string_from_value($4) | 0; //@line 14008
   $9 = _ecma_make_boolean_value(_ecma_op_object_has_property(_ecma_get_object_from_value($1) | 0, $6) | 0) | 0; //@line 14011
   _ecma_free_value($4); //@line 14012
   $$1 = $9; //@line 14013
  }
 } else {
  $$1 = _ecma_raise_type_error(9574) | 0; //@line 14017
 }
 return $$1 | 0; //@line 14019
}
function _ecma_op_object_has_instance($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, label = 0;
 $2 = _ecma_get_object_type($0) | 0; //@line 13229
 L1 : do {
  if (_ecma_is_normal_or_arrow_function($2) | 0) {
   label = 3; //@line 13233
  } else {
   switch ($2 | 0) {
   case 3:
   case 5:
    {
     label = 3; //@line 13237
     break L1;
     break;
    }
   default:
    {}
   }
   $$0 = _ecma_raise_type_error(4174) | 0; //@line 13245
  }
 } while (0);
 if ((label | 0) == 3) {
  $$0 = _ecma_op_function_has_instance($0, $1) | 0; //@line 13250
 }
 return $$0 | 0; //@line 13252
}
function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest; //@line 6212
  src = src + num | 0; //@line 6213
  dest = dest + num | 0; //@line 6214
  while ((num | 0) > 0) {
   dest = dest - 1 | 0; //@line 6216
   src = src - 1 | 0; //@line 6217
   num = num - 1 | 0; //@line 6218
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 1, 0) | 0, 1); //@line 6219
  }
  dest = ret; //@line 6221
 } else {
  _memcpy(dest, src, num) | 0; //@line 6223
 }
 return dest | 0; //@line 6225
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 6101
 $y_sroa_0_0_extract_trunc = $b$0; //@line 6102
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 6103
 $1$1 = tempRet0; //@line 6104
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 6106
}
function _ecma_uint32_to_utf8_string($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$018 = 0, $12 = 0, $3 = 0;
 $3 = $1 + $2 | 0; //@line 2418
 $$0 = $0; //@line 2419
 $$018 = $3; //@line 2419
 while (1) {
  $$018 = $$018 + -1 | 0; //@line 2421
  SAFE_HEAP_STORE($$018 >> 0 | 0, ($$0 >>> 0) % 10 | 0 | 48 | 0, 1);
  if ($$0 >>> 0 <= 9) {
   break;
  } else {
   $$0 = ($$0 >>> 0) / 10 | 0; //@line 2429
  }
 }
 $12 = $3 - $$018 | 0; //@line 2436
 if (($$018 | 0) != ($1 | 0)) {
  _memmove($1 | 0, $$018 | 0, $12 | 0) | 0; //@line 2439
 }
 return $12 | 0; //@line 2441
}
function _ecma_builtin_function_prototype_object_call($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $5 = 0;
 do {
  if (_ecma_op_is_callable($0) | 0) {
   $5 = _ecma_get_object_from_value($0) | 0; //@line 3581
   if (!$2) {
    $$1 = _ecma_op_function_call($5, 72, 0, 0) | 0; //@line 3585
    break;
   } else {
    $$1 = _ecma_op_function_call($5, SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0, $1 + 4 | 0, $2 + -1 | 0) | 0; //@line 3592
    break;
   }
  } else {
   $$1 = _ecma_raise_type_error(6161) | 0; //@line 3597
  }
 } while (0);
 return $$1 | 0; //@line 3600
}
function _ecma_create_named_data_property($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 6145
 STACKTOP = STACKTOP + 16 | 0; //@line 6146
 $$byval_copy = sp + 4 | 0; //@line 6147
 $4 = sp; //@line 6148
 $5 = $2 | 1; //@line 6149
 SAFE_HEAP_STORE($4 | 0, 72 | 0, 4);
 SAFE_HEAP_STORE($$byval_copy | 0, SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0, 4);
 $6 = _ecma_create_property($0, $1, $5, $$byval_copy, $3) | 0; //@line 6152
 STACKTOP = sp; //@line 6153
 return $6 | 0; //@line 6153
}
function _ecma_value_assign_value($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0; //@line 5558
 do {
  if (($2 | 0) != ($1 | 0)) {
   if (!($2 | $1)) {
    SAFE_HEAP_STORE($0 | 0, $1 | 0, 4);
    break;
   }
   if (($1 & 7 | 0) == 1 & ($2 & 7 | 0) == 1) {
    SAFE_HEAP_STORE_D($2 & -8 | 0, +(+(+SAFE_HEAP_LOAD_D($1 & -8 | 0, 8))), 8);
    break;
   } else {
    _ecma_free_value_if_not_object($2); //@line 5582
    SAFE_HEAP_STORE($0 | 0, _ecma_copy_value_if_not_object($1) | 0 | 0, 4);
    break;
   }
  }
 } while (0);
 return;
}
function _ecma_builtin_object_dispatch_call($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, label = 0;
 if (!$1) {
  label = 4; //@line 6289
 } else {
  $3 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0; //@line 6291
  if (_ecma_is_value_undefined($3) | 0) {
   label = 4; //@line 6294
  } else {
   if (_ecma_is_value_null($3) | 0) {
    label = 4; //@line 6298
   } else {
    $$0 = _ecma_op_to_object($3) | 0; //@line 6301
   }
  }
 }
 if ((label | 0) == 4) {
  $$0 = _ecma_builtin_object_dispatch_construct($0, $1) | 0; //@line 6307
 }
 return $$0 | 0; //@line 6309
}
function _lit_char_is_identifier_start($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$sink = 0, $1 = 0, label = 0;
 $1 = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0; //@line 14711
 if ($1 << 24 >> 24 > -1) {
  $$sink = $1 & 255; //@line 14715
  label = 5; //@line 14716
 } else {
  if (($1 & -8) << 24 >> 24 == -16) {
   $$0 = 0; //@line 14721
  } else {
   $$sink = _lit_utf8_peek_next($0) | 0; //@line 14724
   label = 5; //@line 14725
  }
 }
 if ((label | 0) == 5) {
  $$0 = _lit_char_is_identifier_start_character($$sink) | 0; //@line 14730
 }
 return $$0 | 0; //@line 14732
}
function _ecma_op_get_value_lex_env_base($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6686
 STACKTOP = STACKTOP + 16 | 0; //@line 6687
 $vararg_buffer = sp; //@line 6688
 if (!$0) {
  SAFE_HEAP_STORE($vararg_buffer | 0, _ecma_make_string_value($1) | 0 | 0, 4);
  $$0 = _ecma_raise_standard_error_with_format(3, 6539, $vararg_buffer) | 0; //@line 6694
 } else {
  $$0 = _ecma_op_get_binding_value($0, $1, $2) | 0; //@line 6697
 }
 STACKTOP = sp; //@line 6699
 return $$0 | 0; //@line 6699
}
function _lit_char_is_identifier_part($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$sink = 0, $1 = 0, label = 0;
 $1 = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0; //@line 14822
 if ($1 << 24 >> 24 > -1) {
  $$sink = $1 & 255; //@line 14826
  label = 5; //@line 14827
 } else {
  if (($1 & -8) << 24 >> 24 == -16) {
   $$0 = 0; //@line 14832
  } else {
   $$sink = _lit_utf8_peek_next($0) | 0; //@line 14835
   label = 5; //@line 14836
  }
 }
 if ((label | 0) == 5) {
  $$0 = _lit_char_is_identifier_part_character($$sink) | 0; //@line 14841
 }
 return $$0 | 0; //@line 14843
}
function _lit_utf8_string_calc_hash($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$010$lcssa$i = 0, $$01011$i = 0, $$012$i = 0;
 if (!$1) {
  $$010$lcssa$i = -25147; //@line 15879
 } else {
  $$01011$i = 40389; //@line 15881
  $$012$i = 0; //@line 15881
  do {
   $$01011$i = Math_imul((SAFE_HEAP_LOAD($0 + $$012$i >> 0 | 0, 1, 1) | 0 | 0) ^ $$01011$i, 16777619) | 0; //@line 15887
   $$012$i = $$012$i + 1 | 0; //@line 15888
  } while (($$012$i | 0) != ($1 | 0));
  $$010$lcssa$i = $$01011$i & 65535; //@line 15897
 }
 return $$010$lcssa$i | 0; //@line 15899
}
function _lit_utf8_string_code_unit_at($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 15906
 STACKTOP = STACKTOP + 16 | 0; //@line 15907
 $3 = sp; //@line 15908
 $$0 = $0; //@line 15909
 $$04 = $2; //@line 15909
 while (1) {
  $$0 = $$0 + (_lit_read_code_unit_from_utf8($$0, $3) | 0) | 0; //@line 15912
  if (!$$04) {
   break;
  } else {
   $$04 = $$04 + -1 | 0; //@line 15918
  }
 }
 STACKTOP = sp; //@line 15922
 return SAFE_HEAP_LOAD($3 | 0, 2, 0) | 0 | 0; //@line 15922
}
function _ecma_create_object($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$sink = 0;
 if (!$1) {
  $$0 = _ecma_alloc_object() | 0; //@line 5939
 } else {
  $$0 = _ecma_alloc_extended_object($1) | 0; //@line 5942
 }
 SAFE_HEAP_STORE($$0 | 0, $2 | 32 | 0, 2);
 _ecma_init_gc_info($$0); //@line 5947
 SAFE_HEAP_STORE($$0 + 4 | 0, 0 | 0, 2);
 if (!$0) {
  $$sink = 0; //@line 5952
 } else {
  $$sink = _jmem_compress_pointer($0) | 0; //@line 5955
 }
 SAFE_HEAP_STORE($$0 + 6 | 0, $$sink | 0, 2);
 return $$0 | 0; //@line 5959
}
function _parser_free_literals($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 18613
 STACKTOP = STACKTOP + 16 | 0; //@line 18614
 $1 = sp; //@line 18615
 _parser_list_iterator_init($0, $1); //@line 18616
 $2 = _parser_list_iterator_next($1) | 0; //@line 18617
 if ($2 | 0) {
  $4 = $2; //@line 18620
  do {
   _util_free_literal($4); //@line 18622
   $4 = _parser_list_iterator_next($1) | 0; //@line 18623
  } while (($4 | 0) != 0);
 }
 _parser_list_free($0); //@line 18632
 STACKTOP = sp; //@line 18633
 return;
}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 6086
 $2 = $b & 65535; //@line 6087
 $3 = Math_imul($2, $1) | 0; //@line 6088
 $6 = $a >>> 16; //@line 6089
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 6090
 $11 = $b >>> 16; //@line 6091
 $12 = Math_imul($11, $1) | 0; //@line 6092
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 6093
}
function _ecma_op_external_function_try_to_lazy_instantiate_property($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 11012
 STACKTOP = STACKTOP + 16 | 0; //@line 11013
 $2 = sp; //@line 11014
 if (_ecma_compare_ecma_string_to_magic_id($1, 56) | 0) {
  SAFE_HEAP_STORE(_ecma_create_named_data_property($0, $1, 16, $2) | 0 | 0, 72 | 0, 4);
  $$0 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 11020
 } else {
  $$0 = 0; //@line 11022
 }
 STACKTOP = sp; //@line 11024
 return $$0 | 0; //@line 11024
}
function _parser_emit_cbc_literal_from_token($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = $0 + 240 | 0; //@line 12882
 if (SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0) {
  _parser_flush_cbc($0); //@line 12886
 }
 SAFE_HEAP_STORE($2 | 0, $1 | 0, 2);
 SAFE_HEAP_STORE($0 + 232 | 0, SAFE_HEAP_LOAD($0 + 212 | 0, 2, 0) | 0 | 0 | 0, 2);
 SAFE_HEAP_STORE($0 + 238 >> 0 | 0, SAFE_HEAP_LOAD($0 + 206 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($0 + 239 >> 0 | 0, SAFE_HEAP_LOAD($0 + 214 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 return;
}
function _opfunc_unary_operation($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $3 = 0, $5 = 0.0, sp = 0;
 sp = STACKTOP; //@line 13833
 STACKTOP = STACKTOP + 16 | 0; //@line 13834
 $2 = sp; //@line 13835
 $3 = _ecma_get_number($0, $2) | 0; //@line 13836
 if (_ecma_is_value_empty($3) | 0) {
  $5 = +(+SAFE_HEAP_LOAD_D($2 | 0, 8)); //@line 13839
  $$0 = _ecma_make_number_value($1 ? $5 : -$5) | 0; //@line 13843
 } else {
  $$0 = $3; //@line 13845
 }
 STACKTOP = sp; //@line 13847
 return $$0 | 0; //@line 13847
}
function _ecma_string_get_property_index($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $4 = 0;
 switch (($0 & 255) >>> 6 & 3) {
 case 0:
  {
   $$0 = $1 & 65535; //@line 4582
   break;
  }
 case 3:
  {
   $4 = _jmem_decompress_pointer($1 & 65535) | 0; //@line 4587
   if (!((SAFE_HEAP_LOAD($4 | 0, 2, 0) | 0) & 7)) {
    $$0 = SAFE_HEAP_LOAD($4 + 4 | 0, 4, 0) | 0 | 0; //@line 4594
   } else {
    $$0 = -1; //@line 4596
   }
   break;
  }
 default:
  {
   $$0 = -1; //@line 4601
  }
 }
 return $$0 | 0; //@line 4604
}
function _ecma_op_create_number_object($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $3 = 0, $4 = 0;
 $1 = _ecma_op_to_number($0) | 0; //@line 11368
 if (($1 | 0) == 24) {
  $$0 = 24; //@line 11371
 } else {
  $3 = _ecma_builtin_get(0) | 0; //@line 11373
  $4 = _ecma_create_object($3, 16, 1) | 0; //@line 11374
  _ecma_deref_object($3); //@line 11375
  SAFE_HEAP_STORE($4 + 8 | 0, 25 | 0, 2);
  SAFE_HEAP_STORE($4 + 12 | 0, $1 | 0, 4);
  $$0 = _ecma_make_object_value($4) | 0; //@line 11381
 }
 return $$0 | 0; //@line 11383
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = SAFE_HEAP_LOAD(cttz_i8 + (x & 255) | 0, 1, 0) | 0; //@line 5731
 if ((ret | 0) < 8) return ret | 0; //@line 5732
 ret = SAFE_HEAP_LOAD(cttz_i8 + (x >> 8 & 255) | 0, 1, 0) | 0; //@line 5733
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 5734
 ret = SAFE_HEAP_LOAD(cttz_i8 + (x >> 16 & 255) | 0, 1, 0) | 0; //@line 5735
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 5736
 return (SAFE_HEAP_LOAD(cttz_i8 + (x >>> 24) | 0, 1, 0) | 0) + 24 | 0; //@line 5737
}
function _lit_char_is_line_terminator($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0;
 if ($0 << 16 >> 16 < 8232) {
  switch ($0 << 16 >> 16) {
  case 13:
  case 10:
   {
    $1 = 1; //@line 14684
    break;
   }
  default:
   {
    label = 2; //@line 14688
   }
  }
 } else {
  switch ($0 << 16 >> 16) {
  case 8233:
  case 8232:
   {
    $1 = 1; //@line 14694
    break;
   }
  default:
   {
    label = 2; //@line 14698
   }
  }
 }
 if ((label | 0) == 2) {
  $1 = 0; //@line 14703
 }
 return $1 | 0; //@line 14705
}
function _parser_set_breaks_to_current_position($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$08 = 0, $$08$looptemp = 0;
 if ($1 | 0) {
  $$08 = $1; //@line 13312
  do {
   $$08$looptemp = $$08;
   $$08 = SAFE_HEAP_LOAD($$08 | 0, 4, 0) | 0 | 0; //@line 13314
   if (!((SAFE_HEAP_LOAD($$08$looptemp + 8 | 0, 4, 0) | 0) & 128)) {
    _parser_set_branch_to_current_position($0, $$08$looptemp + 4 | 0); //@line 13321
   }
   _parser_free($$08$looptemp, 12); //@line 13323
  } while (($$08 | 0) != 0);
 }
 return;
}
function SAFE_HEAP_STORE(dest, value, bytes) {
 dest = dest | 0;
 value = value | 0;
 bytes = bytes | 0;
 if ((dest | 0) <= 0) segfault(); //@line 42
 if ((dest + bytes | 0) > (HEAP32[DYNAMICTOP_PTR >> 2] | 0)) segfault(); //@line 43
 if ((bytes | 0) == 4) {
  if (dest & 3) alignfault(); //@line 45
  HEAP32[dest >> 2] = value; //@line 46
 } else if ((bytes | 0) == 1) {
  HEAP8[dest >> 0] = value; //@line 48
 } else {
  if (dest & 1) alignfault(); //@line 50
  HEAP16[dest >> 1] = value; //@line 51
 }
}
function _lexer_check_colon($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $5 = 0;
 _lexer_skip_spaces($0); //@line 8566
 $1 = $0 + 191 | 0; //@line 8567
 SAFE_HEAP_STORE($1 >> 0 | 0, SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 2 | 0, 1);
 $5 = SAFE_HEAP_LOAD($0 + 216 | 0, 4, 0) | 0 | 0; //@line 8572
 if ($5 >>> 0 < (SAFE_HEAP_LOAD($0 + 220 | 0, 4, 0) | 0 | 0) >>> 0) {
  $11 = (SAFE_HEAP_LOAD($5 >> 0 | 0, 1, 0) | 0 | 0) == 58; //@line 8579
 } else {
  $11 = 0; //@line 8581
 }
 return $11 | 0; //@line 8583
}
function _ecma_builtin_global_object_is_nan($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 4340
 STACKTOP = STACKTOP + 16 | 0; //@line 4341
 $1 = sp; //@line 4342
 $2 = _ecma_get_number($0, $1) | 0; //@line 4343
 if (_ecma_is_value_empty($2) | 0) {
  $5 = _ecma_number_is_nan(+(+SAFE_HEAP_LOAD_D($1 | 0, 8))) | 0; //@line 4347
  $$0 = $5 ? 56 : 40; //@line 4349
 } else {
  $$0 = $2; //@line 4351
 }
 STACKTOP = sp; //@line 4353
 return $$0 | 0; //@line 4353
}
function _ecma_create_object_lex_env($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$sink = 0, $3 = 0;
 $3 = _ecma_alloc_object() | 0; //@line 5987
 SAFE_HEAP_STORE($3 | 0, ($2 ? 31 : 30) | 0, 2);
 _ecma_init_gc_info($3); //@line 5990
 SAFE_HEAP_STORE($3 + 4 | 0, _jmem_compress_pointer($1) | 0 | 0, 2);
 if (!$0) {
  $$sink = 0; //@line 5996
 } else {
  $$sink = _jmem_compress_pointer($0) | 0; //@line 5999
 }
 SAFE_HEAP_STORE($3 + 6 | 0, $$sink | 0, 2);
 return $3 | 0; //@line 6003
}
function _ecma_builtin_object_object_get_prototype_of($0) {
 $0 = $0 | 0;
 var $$1 = 0, $4 = 0, $6 = 0;
 if (_ecma_is_value_object($0) | 0) {
  $4 = _ecma_get_object_prototype(_ecma_get_object_from_value($0) | 0) | 0; //@line 5667
  if (!$4) {
   $$1 = 88; //@line 5670
  } else {
   $6 = _ecma_make_object_value($4) | 0; //@line 5672
   _ecma_ref_object($4); //@line 5673
   $$1 = $6; //@line 5674
  }
 } else {
  $$1 = _ecma_raise_type_error(6512) | 0; //@line 5678
 }
 return $$1 | 0; //@line 5680
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 6031
 STACKTOP = STACKTOP + 16 | 0; //@line 6032
 $rem = __stackBase__ | 0; //@line 6033
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 6034
 STACKTOP = __stackBase__; //@line 6035
 return (tempRet0 = SAFE_HEAP_LOAD($rem + 4 | 0, 4, 0) | 0 | 0, SAFE_HEAP_LOAD($rem | 0, 4, 0) | 0 | 0) | 0; //@line 6036
}
function _parser_parse_enclosed_expr($0) {
 $0 = $0 | 0;
 var $1 = 0;
 _lexer_next_token($0); //@line 12516
 $1 = $0 + 188 | 0; //@line 12517
 if ((SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0) != 52) {
  _parser_raise_error($0, 39); //@line 12521
 }
 _lexer_next_token($0); //@line 12524
 _parser_parse_expression($0, 0); //@line 12525
 if ((SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0) == 55) {
  _lexer_next_token($0); //@line 12529
  return;
 } else {
  _parser_raise_error($0, 41); //@line 12532
 }
}
function _ecma_op_object_delete($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, label = 0;
 if ((_ecma_get_object_type($0) | 0) == 6) {
  if (!(SAFE_HEAP_LOAD($0 + 8 >> 0 | 0, 1, 0) | 0)) {
   $$1 = _ecma_op_arguments_object_delete($0, $1, $2) | 0; //@line 13067
  } else {
   label = 4; //@line 13069
  }
 } else {
  label = 4; //@line 13072
 }
 if ((label | 0) == 4) {
  $$1 = _ecma_op_general_object_delete($0, $1, $2) | 0; //@line 13076
 }
 return $$1 | 0; //@line 13078
}
function _lit_char_is_identifier_part_character($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if (($0 & 65535) < 128) {
  if ((($0 | 32) + -97 & 65535) < 26) {
   $$0 = 1; //@line 14855
  } else {
   return $0 << 16 >> 16 == 95 | ($0 << 16 >> 16 == 36 | ($0 + -48 & 65535) < 10) | 0; //@line 14863
  }
 } else {
  if (_lit_char_is_unicode_letter($0) | 0) {
   $$0 = 1; //@line 14868
  } else {
   $$0 = _lit_char_is_unicode_non_letter_ident_part($0) | 0; //@line 14871
  }
 }
 return $$0 | 0; //@line 14874
}
function _ecma_copy_value($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 switch ($0 & 7) {
 case 0:
  {
   $$0 = $0; //@line 5494
   break;
  }
 case 1:
  {
   $$0 = _ecma_create_float_number(+(+SAFE_HEAP_LOAD_D($0 & -8 | 0, 8))) | 0; //@line 5502
   break;
  }
 case 2:
  {
   _ecma_ref_ecma_string($0 & -8); //@line 5508
   $$0 = $0; //@line 5509
   break;
  }
 case 3:
  {
   _ecma_ref_object($0 & -8); //@line 5515
   $$0 = $0; //@line 5516
   break;
  }
 default:
  {}
 }
 return $$0 | 0; //@line 5523
}
function _opfunc_relation($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010 = 0, $4 = 0, $6 = 0;
 $4 = _ecma_op_abstract_relational_compare($0, $1, $2) | 0; //@line 13956
 if (($4 | 0) == 24) {
  $$010 = 24; //@line 13959
 } else {
  $6 = _ecma_is_value_undefined($4) | 0; //@line 13961
  if ($6 | $3 ^ 1) {
   $$010 = $6 ? 40 : $4; //@line 13966
  } else {
   $$010 = _ecma_invert_boolean_value($4) | 0; //@line 13969
  }
 }
 return $$010 | 0; //@line 13972
}
function _ecma_op_resolve_reference_base($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$07 = 0, $$08 = 0;
 L1 : do {
  if (!$0) {
   $$07 = 0; //@line 6787
  } else {
   $$08 = $0; //@line 6789
   while (1) {
    if (_ecma_op_has_binding($$08, $1) | 0) {
     $$07 = $$08; //@line 6793
     break L1;
    }
    $$08 = _ecma_get_lex_env_outer_reference($$08) | 0; //@line 6796
    if (!$$08) {
     $$07 = 0; //@line 6799
     break;
    }
   }
  }
 } while (0);
 return $$07 | 0; //@line 6807
}
function _ecma_op_eval_chars_buffer($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 10354
 STACKTOP = STACKTOP + 16 | 0; //@line 10355
 $4 = sp; //@line 10356
 if ((_parser_parse_script(0, 0, $0, $1, $2 & $3, $4) | 0) == 24) {
  $$0 = 24; //@line 10361
 } else {
  $$0 = _vm_run_eval(SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0, $2) | 0; //@line 10365
 }
 STACKTOP = sp; //@line 10367
 return $$0 | 0; //@line 10367
}
function _ecma_number_pack($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = _bitshift64Shl($0 & 1 | 0, 0, 63) | 0; //@line 2977
 $6 = tempRet0; //@line 2978
 $7 = _bitshift64Shl($1 | 0, 0, 52) | 0; //@line 2979
 $12 = $6 | $3 | tempRet0; //@line 2984
 SAFE_HEAP_STORE(tempDoublePtr | 0, $5 | $2 | $7 | 0, 4);
 SAFE_HEAP_STORE(tempDoublePtr + 4 | 0, $12 | 0, 4);
 return +(+(+SAFE_HEAP_LOAD_D(tempDoublePtr | 0, 8)));
}
function _parser_parse_if_statement_start($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP; //@line 11163
 STACKTOP = STACKTOP + 16 | 0; //@line 11164
 $1 = sp; //@line 11165
 _parser_parse_enclosed_expr($0); //@line 11166
 _parser_emit_cbc_forward_branch($0, 17, $1); //@line 11167
 _parser_stack_push($0, $1, 8); //@line 11168
 _parser_stack_push_uint8($0, 3); //@line 11169
 _parser_stack_iterator_init($0, $0 + 180 | 0); //@line 11171
 STACKTOP = sp; //@line 11172
 return;
}
function _ecma_builtin_global_object_eval($0) {
 $0 = $0 | 0;
 var $$0$off0 = 0, $$08 = 0, $1 = 0;
 $1 = _vm_is_direct_eval_form_call() | 0; //@line 4007
 if ($1) {
  $$0$off0 = _vm_is_strict_mode() | 0; //@line 4010
 } else {
  $$0$off0 = 0; //@line 4012
 }
 if (_ecma_is_value_string($0) | 0) {
  $$08 = _ecma_op_eval(_ecma_get_string_from_value($0) | 0, $1, $$0$off0) | 0; //@line 4018
 } else {
  $$08 = _ecma_copy_value($0) | 0; //@line 4021
 }
 return $$08 | 0; //@line 4023
}
function _jerry_get_utf8_string_size($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$i = 0;
 if (_ecma_is_value_error_reference($0) | 0) {
  $$0$i = SAFE_HEAP_LOAD((_ecma_get_error_reference_from_value($0) | 0) + 4 | 0, 4, 0) | 0 | 0; //@line 624
 } else {
  $$0$i = $0; //@line 626
 }
 if (_ecma_is_value_string($$0$i) | 0) {
  $$0 = _ecma_string_get_utf8_size(_ecma_get_string_from_value($$0$i) | 0) | 0; //@line 632
 } else {
  $$0 = 0; //@line 634
 }
 return $$0 | 0; //@line 636
}
function _ecma_new_standard_error_with_message($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = _ecma_new_standard_error(0) | 0; //@line 10385
 $3 = _ecma_get_magic_string(39) | 0; //@line 10386
 $4 = _ecma_create_named_data_property($2, $3, 20, 0) | 0; //@line 10387
 _ecma_deref_ecma_string($3); //@line 10388
 _ecma_ref_ecma_string($1); //@line 10389
 SAFE_HEAP_STORE($4 | 0, _ecma_make_string_value($1) | 0 | 0, 4);
 return $2 | 0; //@line 10392
}
function _util_free_literal($0) {
 $0 = $0 | 0;
 switch (SAFE_HEAP_LOAD($0 + 6 >> 0 | 0, 1, 0) | 0 | 0) {
 case 1:
 case 0:
  {
   if (!((SAFE_HEAP_LOAD($0 + 7 >> 0 | 0, 1, 0) | 0) & 64)) {
    _jmem_heap_free_block(SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0, SAFE_HEAP_LOAD($0 + 4 | 0, 2, 1) | 0 | 0); //@line 6915
   }
   break;
  }
 case 4:
 case 3:
  {
   _ecma_bytecode_deref(SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0); //@line 6921
   break;
  }
 default:
  {}
 }
 return;
}
function _jerry_port_log($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP; //@line 17165
 STACKTOP = STACKTOP + 16 | 0; //@line 17166
 $2 = sp; //@line 17167
 if ((SAFE_HEAP_LOAD(134649 * 4 | 0, 4, 0) | 0 | 0) >>> 0 >= $0 >>> 0) {
  SAFE_HEAP_STORE($2 | 0, $varargs | 0, 4);
  _vfprintf(SAFE_HEAP_LOAD(350 * 4 | 0, 4, 0) | 0 | 0, $1, $2) | 0; //@line 17173
 }
 STACKTOP = sp; //@line 17175
 return;
}
function _parser_stack_iterator_skip($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $5 = 0;
 $2 = $0 + 4 | 0; //@line 10325
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 10326
 $5 = $3 - $1 | 0; //@line 10328
 if ($3 >>> 0 > $1 >>> 0) {
  SAFE_HEAP_STORE($2 | 0, $5 | 0, 4);
 } else {
  SAFE_HEAP_STORE($2 | 0, $5 + 60 | 0, 4);
  SAFE_HEAP_STORE($0 | 0, SAFE_HEAP_LOAD(SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0, 4, 0) | 0 | 0, 4);
 }
 return;
}
function _opfunc_instanceof($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $5 = 0;
 if (_ecma_is_value_object($1) | 0) {
  $5 = _ecma_op_object_has_instance(_ecma_get_object_from_value($1) | 0, $0) | 0; //@line 13982
  if (($5 | 0) == 24) {
   $$1 = 24; //@line 13985
  } else {
   _ecma_free_value($5); //@line 13987
   $$1 = $5; //@line 13988
  }
 } else {
  $$1 = _ecma_raise_type_error(9532) | 0; //@line 13992
 }
 return $$1 | 0; //@line 13994
}
function _ecma_divide_high_prec_by_10($0) {
 $0 = $0 | 0;
 var $1 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0;
 $1 = +(+SAFE_HEAP_LOAD_D($0 | 0, 8)); //@line 2926
 $2 = $1 / 10.0; //@line 2927
 $3 = $0 + 8 | 0; //@line 2928
 $11 = +(+SAFE_HEAP_LOAD_D($3 | 0, 8)) / 10.0 + ($1 - $2 * 8.0 - $2 * 2.0) / 10.0; //@line 2936
 $12 = $2 + $11; //@line 2937
 SAFE_HEAP_STORE_D($0 | 0, +$12, 8);
 SAFE_HEAP_STORE_D($3 | 0, +($11 + ($2 - $12)), 8);
 return;
}
function _lit_code_point_to_cesu8($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0;
 if ($0 >>> 0 < 65536) {
  $$0 = _lit_code_unit_to_utf8($0 & 65535, $1) | 0; //@line 15980
 } else {
  $6 = _lit_code_unit_to_utf8(_convert_code_point_to_high_surrogate($0) | 0, $1) | 0; //@line 15983
  $$0 = (_lit_code_unit_to_utf8(_convert_code_point_to_low_surrogate($0) | 0, $1 + $6 | 0) | 0) + $6 | 0; //@line 15988
 }
 return $$0 | 0; //@line 15990
}
function _ecma_init_gc_info($0) {
 $0 = $0 | 0;
 SAFE_HEAP_STORE(134109 * 4 | 0, (SAFE_HEAP_LOAD(134109 * 4 | 0, 4, 0) | 0 | 0) + 1 | 0, 4);
 SAFE_HEAP_STORE(134110 * 4 | 0, (SAFE_HEAP_LOAD(134110 * 4 | 0, 4, 0) | 0 | 0) + 1 | 0, 4);
 SAFE_HEAP_STORE($0 | 0, SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0 | 64 | 0, 2);
 _ecma_gc_set_object_next($0, SAFE_HEAP_LOAD(134098 * 4 | 0, 4, 0) | 0 | 0); //@line 694
 SAFE_HEAP_STORE(134098 * 4 | 0, $0 | 0, 4);
 return;
}
function _jmem_pools_collect_empty() {
 var $$in78 = 0, $0 = 0, $$in78$looptemp = 0;
 $0 = SAFE_HEAP_LOAD(134100 * 4 | 0, 4, 0) | 0 | 0; //@line 14550
 SAFE_HEAP_STORE(134100 * 4 | 0, 0 | 0, 4);
 if ($0 | 0) {
  $$in78 = $0; //@line 14554
  do {
   $$in78$looptemp = $$in78;
   $$in78 = SAFE_HEAP_LOAD($$in78 | 0, 4, 0) | 0 | 0; //@line 14556
   _jmem_heap_free_block($$in78$looptemp, 8); //@line 14557
  } while (($$in78 | 0) != 0);
 }
 return;
}
function _ecma_op_implicit_this_value($0) {
 $0 = $0 | 0;
 var $$0 = 0, $4 = 0;
 if ((_ecma_get_lex_env_type($0) | 0) == 13) {
  $$0 = 72; //@line 11339
 } else {
  if (_ecma_get_lex_env_provide_this($0) | 0) {
   $4 = _ecma_get_lex_env_binding_object($0) | 0; //@line 11343
   _ecma_ref_object($4); //@line 11344
   $$0 = _ecma_make_object_value($4) | 0; //@line 11346
  } else {
   $$0 = 72; //@line 11348
  }
 }
 return $$0 | 0; //@line 11351
}
function _ecma_integer_multiply($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink = 0;
 do {
  if (!($0 + -1 & $0)) {
   $$sink = $1 << (_llvm_cttz_i32($0 | 0) | 0); //@line 3362
  } else {
   if (!($1 + -1 & $1)) {
    $$sink = $0 << (_llvm_cttz_i32($1 | 0) | 0); //@line 3370
    break;
   } else {
    $$sink = Math_imul($1, $0) | 0; //@line 3374
    break;
   }
  }
 } while (0);
 return _ecma_make_integer_value($$sink) | 0; //@line 3380
}
function _lit_utf8_read_next($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 15793
 STACKTOP = STACKTOP + 16 | 0; //@line 15794
 $1 = sp; //@line 15795
 $3 = _lit_read_code_unit_from_utf8(SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0, $1) | 0; //@line 15797
 SAFE_HEAP_STORE($0 | 0, (SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0) + $3 | 0, 4);
 STACKTOP = sp; //@line 15802
 return SAFE_HEAP_LOAD($1 | 0, 2, 0) | 0 | 0; //@line 15802
}
function _ecma_op_create_boolean_object($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = _ecma_op_to_boolean($0) | 0; //@line 6358
 $2 = _ecma_builtin_get(0) | 0; //@line 6359
 $3 = _ecma_create_object($2, 16, 1) | 0; //@line 6360
 _ecma_deref_object($2); //@line 6361
 SAFE_HEAP_STORE($3 + 8 | 0, 37 | 0, 2);
 SAFE_HEAP_STORE($3 + 12 | 0, _ecma_make_boolean_value($1) | 0 | 0, 4);
 return _ecma_make_object_value($3) | 0; //@line 6368
}
function _lit_read_prev_code_unit_from_utf8($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 15761
 STACKTOP = STACKTOP + 16 | 0; //@line 15762
 $2 = sp; //@line 15763
 SAFE_HEAP_STORE($2 | 0, $0 | 0, 4);
 _lit_utf8_decr($2); //@line 15765
 $4 = _lit_read_code_unit_from_utf8(SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0, $1) | 0; //@line 15767
 STACKTOP = sp; //@line 15768
 return $4 | 0; //@line 15768
}
function SAFE_HEAP_STORE_D(dest, value, bytes) {
 dest = dest | 0;
 value = +value;
 bytes = bytes | 0;
 if ((dest | 0) <= 0) segfault(); //@line 58
 if ((dest + bytes | 0) > (HEAP32[DYNAMICTOP_PTR >> 2] | 0)) segfault(); //@line 59
 if ((bytes | 0) == 8) {
  if (dest & 7) alignfault(); //@line 61
  HEAPF64[dest >> 3] = value; //@line 62
 } else {
  if (dest & 3) alignfault(); //@line 64
  HEAPF32[dest >> 2] = value; //@line 65
 }
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 2026
 STACKTOP = STACKTOP + 16 | 0; //@line 2027
 $vararg_buffer = sp; //@line 2028
 SAFE_HEAP_STORE($vararg_buffer | 0, _dummy_732(SAFE_HEAP_LOAD($0 + 60 | 0, 4, 0) | 0 | 0) | 0 | 0, 4);
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 2034
 STACKTOP = sp; //@line 2035
 return $5 | 0; //@line 2035
}
function _ecma_builtin_get($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0;
 $1 = 536360 + ($0 << 2) | 0; //@line 8534
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 8535
 if (!$2) {
  _ecma_instantiate_builtin($0); //@line 8538
  $4 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 8540
 } else {
  $4 = $2; //@line 8542
 }
 _ecma_ref_object($4); //@line 8544
 return SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 8546
}
function _parser_cbc_stream_alloc_page($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $4 = 0, $5 = 0;
 $2 = _parser_malloc($0, 64) | 0; //@line 9841
 SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
 SAFE_HEAP_STORE($1 + 8 | 0, 0 | 0, 4);
 $4 = $1 + 4 | 0; //@line 9845
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0; //@line 9846
 SAFE_HEAP_STORE((($5 | 0) == 0 ? $1 : $5) | 0, $2 | 0, 4);
 SAFE_HEAP_STORE($4 | 0, $2 | 0, 4);
 return;
}
function _ecma_create_decl_lex_env($0) {
 $0 = $0 | 0;
 var $$sink = 0, $1 = 0;
 $1 = _ecma_alloc_object() | 0; //@line 5965
 SAFE_HEAP_STORE($1 | 0, 29 | 0, 2);
 _ecma_init_gc_info($1); //@line 5967
 SAFE_HEAP_STORE($1 + 4 | 0, 0 | 0, 2);
 if (!$0) {
  $$sink = 0; //@line 5972
 } else {
  $$sink = _jmem_compress_pointer($0) | 0; //@line 5975
 }
 SAFE_HEAP_STORE($1 + 6 | 0, $$sink | 0, 2);
 return $1 | 0; //@line 5979
}
function _ecma_string_get_property_name_hash($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 switch (($0 & 255) >>> 6 & 3) {
 case 2:
  {
   $$0 = ($1 & 65535) + 82 & 65535; //@line 4547
   break;
  }
 case 3:
  {
   $$0 = SAFE_HEAP_LOAD((_jmem_decompress_pointer($1 & 65535) | 0) + 2 | 0, 2, 0) | 0 | 0; //@line 4555
   break;
  }
 default:
  {
   $$0 = $1; //@line 4559
  }
 }
 return $$0 | 0; //@line 4562
}
function _ecma_number_get_fraction_field($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 3083
 STACKTOP = STACKTOP + 16 | 0; //@line 3084
 $1 = sp; //@line 3085
 _ecma_number_unpack($0, 0, 0, $1); //@line 3086
 $2 = $1; //@line 3087
 tempRet0 = SAFE_HEAP_LOAD($2 + 4 | 0, 4, 0) | 0 | 0; //@line 3093
 STACKTOP = sp; //@line 3094
 return SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0; //@line 3094
}
function _parser_data_free($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$in89 = 0, $2 = 0, $$in89$looptemp = 0;
 $2 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0; //@line 9819
 if ($2 | 0) {
  $$in89 = $2; //@line 9822
  do {
   $$in89$looptemp = $$in89;
   $$in89 = SAFE_HEAP_LOAD($$in89 | 0, 4, 0) | 0 | 0; //@line 9824
   _parser_free($$in89$looptemp, $1); //@line 9825
  } while (($$in89 | 0) != 0);
 }
 return;
}
function _parser_emit_cbc_literal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = $0 + 240 | 0; //@line 12862
 if (SAFE_HEAP_LOAD($3 | 0, 2, 0) | 0 | 0) {
  _parser_flush_cbc($0); //@line 12866
 }
 SAFE_HEAP_STORE($3 | 0, $1 | 0, 2);
 SAFE_HEAP_STORE($0 + 232 | 0, $2 | 0, 2);
 SAFE_HEAP_STORE($0 + 238 >> 0 | 0, 5 | 0, 1);
 SAFE_HEAP_STORE($0 + 239 >> 0 | 0, 0 | 0, 1);
 return;
}
function _testSetjmp(id, table, size) {
 id = id | 0;
 table = table | 0;
 size = size | 0;
 var i = 0, curr = 0;
 while ((i | 0) < (size | 0)) {
  curr = SAFE_HEAP_LOAD(table + (i << 3) | 0, 4, 0) | 0; //@line 6073
  if (!curr) break;
  if ((curr | 0) == (id | 0)) {
   return SAFE_HEAP_LOAD(table + ((i << 3) + 4) | 0, 4, 0) | 0; //@line 6076
  }
  i = i + 1 | 0; //@line 6078
 }
 return 0; //@line 6080
}
function _parser_set_continues_to_current_position($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$05 = 0;
 if ($1 | 0) {
  $$05 = $1; //@line 13341
  do {
   if ((SAFE_HEAP_LOAD($$05 + 8 | 0, 4, 0) | 0) & 128 | 0) {
    _parser_set_branch_to_current_position($0, $$05 + 4 | 0); //@line 13349
   }
   $$05 = SAFE_HEAP_LOAD($$05 | 0, 4, 0) | 0 | 0; //@line 13351
  } while (($$05 | 0) != 0);
 }
 return;
}
function _ecma_object_class_is($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, label = 0;
 if ((_ecma_get_object_type($0) | 0) == 1) {
  if ((SAFE_HEAP_LOAD($0 + 8 | 0, 2, 1) | 0 | 0 | 0) == ($1 | 0)) {
   $$1 = 1; //@line 13849
  } else {
   label = 3; //@line 13851
  }
 } else {
  label = 3; //@line 13854
 }
 if ((label | 0) == 3) {
  $$1 = 0; //@line 13857
 }
 return $$1 | 0; //@line 13859
}
function _ecma_op_create_function_object($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = _ecma_builtin_get(2) | 0; //@line 10606
 $3 = _ecma_create_object($2, 16, 2) | 0; //@line 10607
 _ecma_deref_object($2); //@line 10608
 SAFE_HEAP_STORE($3 + 8 | 0, $0 | 0, 4);
 SAFE_HEAP_STORE($3 + 12 | 0, $1 | 0, 4);
 _ecma_bytecode_ref($1); //@line 10615
 return $3 | 0; //@line 10616
}
function _jmem_heap_stat_free($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = $0 + 7 & -8; //@line 14449
 SAFE_HEAP_STORE(134134 * 4 | 0, (SAFE_HEAP_LOAD(134134 * 4 | 0, 4, 0) | 0 | 0) + 1 | 0, 4);
 SAFE_HEAP_STORE(134119 * 4 | 0, (SAFE_HEAP_LOAD(134119 * 4 | 0, 4, 0) | 0 | 0) - $2 | 0, 4);
 SAFE_HEAP_STORE(134121 * 4 | 0, $0 - $2 + (SAFE_HEAP_LOAD(134121 * 4 | 0, 4, 0) | 0 | 0) | 0, 4);
 return;
}
function _ecma_op_check_object_coercible($0) {
 $0 = $0 | 0;
 var $$0 = 0, label = 0;
 if (_ecma_is_value_undefined($0) | 0) {
  label = 3; //@line 9595
 } else {
  if (_ecma_is_value_null($0) | 0) {
   label = 3; //@line 9599
  } else {
   $$0 = 8; //@line 9601
  }
 }
 if ((label | 0) == 3) {
  $$0 = _ecma_raise_type_error(3897) | 0; //@line 9606
 }
 return $$0 | 0; //@line 9608
}
function _parser_set_range($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 SAFE_HEAP_STORE($0 + 216 | 0, SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($0 + 220 | 0, SAFE_HEAP_LOAD($1 + 4 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($0 + 224 | 0, SAFE_HEAP_LOAD($1 + 8 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($0 + 228 | 0, SAFE_HEAP_LOAD($1 + 12 | 0, 4, 0) | 0 | 0, 4);
 return;
}
function SAFE_HEAP_LOAD_D(dest, bytes) {
 dest = dest | 0;
 bytes = bytes | 0;
 if ((dest | 0) <= 0) segfault(); //@line 91
 if ((dest + bytes | 0) > (HEAP32[DYNAMICTOP_PTR >> 2] | 0)) segfault(); //@line 92
 if ((bytes | 0) == 8) {
  if (dest & 7) alignfault(); //@line 94
  return +HEAPF64[dest >> 3];
 }
 if (dest & 3) alignfault(); //@line 97
 return +HEAPF32[dest >> 2];
}
function _ecma_finalize_builtins() {
 var $$06 = 0, $0 = 0, $1 = 0;
 $$06 = 0; //@line 8748
 do {
  $0 = 536360 + ($$06 << 2) | 0; //@line 8750
  $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0; //@line 8751
  if ($1 | 0) {
   _ecma_deref_object($1); //@line 8754
   SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
  }
  $$06 = $$06 + 1 | 0; //@line 8757
 } while (($$06 | 0) != 8);
 return;
}
function _ecma_builtin_global_object_byte_to_hex($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $8 = 0;
 SAFE_HEAP_STORE($0 >> 0 | 0, 37 | 0, 1);
 $2 = $1 >>> 4; //@line 4915
 SAFE_HEAP_STORE($0 + 1 >> 0 | 0, (($2 & 65534) >>> 0 > 9 ? 55 : 48) + $2 | 0, 1);
 $8 = $1 & 15; //@line 4923
 SAFE_HEAP_STORE($0 + 2 >> 0 | 0, ($8 >>> 0 > 9 ? 55 : 48) + $8 | 0, 1);
 return;
}
function _vm_op_delete_var($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, $4 = 0;
 $3 = _jmem_decompress_pointer($0 & 65535) | 0; //@line 14185
 $4 = _ecma_op_resolve_reference_base($1, $3) | 0; //@line 14186
 if (!$4) {
  $$0 = 56; //@line 14189
 } else {
  $$0 = _ecma_op_delete_binding($4, $3) | 0; //@line 14192
 }
 return $$0 | 0; //@line 14194
}
function _vm_var_decl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = $0 + 24 | 0; //@line 14026
 if (!(_ecma_op_has_binding(SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0, $1) | 0)) {
  _ecma_op_create_mutable_binding(SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0, $1, (SAFE_HEAP_LOAD($0 + 42 >> 0 | 0, 1, 0) | 0 | 0) != 0) | 0; //@line 14034
 }
 return 8; //@line 14036
}
function _parser_save_range($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 SAFE_HEAP_STORE($1 | 0, SAFE_HEAP_LOAD($0 + 216 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($1 + 4 | 0, $2 | 0, 4);
 SAFE_HEAP_STORE($1 + 8 | 0, SAFE_HEAP_LOAD($0 + 224 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($1 + 12 | 0, SAFE_HEAP_LOAD($0 + 228 | 0, 4, 0) | 0 | 0, 4);
 return;
}
function _ecma_op_object_is_prototype_of($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$05 = 0;
 $$0 = $1; //@line 13259
 while (1) {
  $$0 = _ecma_get_object_prototype($$0) | 0; //@line 13261
  if (!$$0) {
   $$05 = 0; //@line 13264
   break;
  }
  if (($$0 | 0) == ($0 | 0)) {
   $$05 = 1; //@line 13269
   break;
  }
 }
 return $$05 | 0; //@line 13275
}
function _ecma_collection_iterator_next($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $2 = 0;
 $1 = $0 + 4 | 0; //@line 5919
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 5920
 if (_ecma_is_value_collection_chunk($2) | 0) {
  $$0 = _ecma_get_collection_chunk_from_value($2) | 0; //@line 5924
 } else {
  $$0 = $1; //@line 5926
 }
 return $$0 | 0; //@line 5928
}
function _ecma_builtin_object_object_prevent_extensions($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if (_ecma_is_value_object($0) | 0) {
  _ecma_set_object_extensible(_ecma_get_object_from_value($0) | 0, 0); //@line 5853
  $$0 = _ecma_copy_value($0) | 0; //@line 5855
 } else {
  $$0 = _ecma_raise_type_error(6512) | 0; //@line 5858
 }
 return $$0 | 0; //@line 5860
}
function _ecma_builtin_get_property_count($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = SAFE_HEAP_LOAD(88 + ($0 << 2) | 0, 4, 0) | 0 | 0; //@line 8718
 $$0 = $2; //@line 8719
 while (1) {
  if ((SAFE_HEAP_LOAD($$0 | 0, 2, 0) | 0 | 0) == 82) {
   break;
  } else {
   $$0 = $$0 + 6 | 0; //@line 8727
  }
 }
 return ($$0 - $2 | 0) / 6 | 0 | 0; //@line 8734
}
function _parser_list_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $5 = 0;
 $4 = $1 + 3 & -4; //@line 9860
 $5 = Math_imul($4, $2) | 0; //@line 9861
 _parser_data_init($0, $5); //@line 9862
 SAFE_HEAP_STORE($0 + 12 | 0, $5 | 0, 4);
 SAFE_HEAP_STORE($0 + 16 | 0, $4 | 0, 4);
 SAFE_HEAP_STORE($0 + 20 | 0, $2 | 0, 4);
 return;
}
function _ecma_builtin_object_object_is_extensible($0) {
 $0 = $0 | 0;
 var $$0 = 0, $4 = 0;
 if (_ecma_is_value_object($0) | 0) {
  $4 = _ecma_get_object_extensible(_ecma_get_object_from_value($0) | 0) | 0; //@line 5996
  $$0 = $4 ? 56 : 40; //@line 5998
 } else {
  $$0 = _ecma_raise_type_error(6512) | 0; //@line 6001
 }
 return $$0 | 0; //@line 6003
}
function _ecma_property_hashmap_free($0) {
 $0 = $0 | 0;
 var $1 = 0, $6 = 0;
 $1 = _ecma_get_property_list($0) | 0; //@line 8125
 SAFE_HEAP_STORE($0 + 4 | 0, SAFE_HEAP_LOAD($1 + 2 | 0, 2, 0) | 0 | 0 | 0, 2);
 $6 = SAFE_HEAP_LOAD($1 + 4 | 0, 4, 0) | 0 | 0; //@line 8131
 _jmem_heap_free_block($1, ($6 << 1) + 16 + ($6 >>> 3) | 0); //@line 8136
 return;
}
function _jmem_heap_init() {
 SAFE_HEAP_STORE(134112 * 4 | 0, 8192 | 0, 4);
 SAFE_HEAP_STORE(3021 * 4 | 0, 524280 | 0, 4);
 SAFE_HEAP_STORE(3020 * 4 | 0, -1 | 0, 4);
 SAFE_HEAP_STORE(3019 * 4 | 0, 0 | 0, 4);
 SAFE_HEAP_STORE(3018 * 4 | 0, 12080 | 0, 4);
 SAFE_HEAP_STORE(134099 * 4 | 0, 12072 | 0, 4);
 _jmem_heap_stat_init(); //@line 14102
 return;
}
function _ecma_builtin_object_dispatch_construct($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = _ecma_make_object_value(_ecma_op_create_object_object_noarg() | 0) | 0; //@line 6320
 } else {
  $$0 = _ecma_op_create_object_object_arg(SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0) | 0; //@line 6324
 }
 return $$0 | 0; //@line 6326
}
function _jmem_pools_alloc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0;
 $1 = SAFE_HEAP_LOAD(134100 * 4 | 0, 4, 0) | 0 | 0; //@line 14572
 if (!$1) {
  $$0 = _jmem_heap_alloc_block(8) | 0; //@line 14576
 } else {
  SAFE_HEAP_STORE(134100 * 4 | 0, SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0, 4);
  $$0 = $1; //@line 14580
 }
 return $$0 | 0; //@line 14582
}
function _ecma_new_ecma_string_from_code_unit($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 3621
 STACKTOP = STACKTOP + 16 | 0; //@line 3622
 $1 = sp; //@line 3623
 $3 = _ecma_new_ecma_string_from_utf8($1, _lit_code_unit_to_utf8($0, $1) | 0) | 0; //@line 3625
 STACKTOP = sp; //@line 3626
 return $3 | 0; //@line 3626
}
function _ecma_op_has_binding($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if ((_ecma_get_lex_env_type($0) | 0) == 13) {
  $$0 = (_ecma_find_named_property($0, $1) | 0) != 0; //@line 11185
 } else {
  $$0 = _ecma_op_object_has_property(_ecma_get_lex_env_binding_object($0) | 0, $1) | 0; //@line 11189
 }
 return $$0 | 0; //@line 11191
}
function _ecma_op_array_list_lazy_property_names($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $5 = 0;
 $5 = _ecma_new_ecma_length_string() | 0; //@line 9583
 _ecma_append_to_values_collection($1 ? $3 : $2, _ecma_make_string_value($5) | 0, 1); //@line 9585
 _ecma_deref_ecma_string($5); //@line 9586
 return;
}
function _ecma_free_value($0) {
 $0 = $0 | 0;
 switch ($0 & 7) {
 case 0:
  {
   break;
  }
 case 1:
  {
   _ecma_dealloc_number($0 & -8); //@line 5615
   break;
  }
 case 2:
  {
   _ecma_deref_ecma_string($0 & -8); //@line 5621
   break;
  }
 case 3:
  {
   _ecma_deref_object($0 & -8); //@line 5627
   break;
  }
 default:
  {}
 }
 return;
}
function _jerry_value_to_string($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if (_ecma_is_value_error_reference($0) | 0) {
  _ecma_raise_type_error(3832) | 0; //@line 605
  $$0 = _ecma_create_error_reference_from_context() | 0; //@line 607
 } else {
  $$0 = _jerry_return(_ecma_op_to_string($0) | 0) | 0; //@line 611
 }
 return $$0 | 0; //@line 613
}
function _ecma_builtin_object_object_get_own_property_names($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if (_ecma_is_value_object($0) | 0) {
  $$0 = _ecma_builtin_helper_object_get_properties(_ecma_get_object_from_value($0) | 0, 0) | 0; //@line 5690
 } else {
  $$0 = _ecma_raise_type_error(6512) | 0; //@line 5693
 }
 return $$0 | 0; //@line 5695
}
function _ecma_op_external_function_list_lazy_property_names($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0;
 $4 = _ecma_get_magic_string(56) | 0; //@line 11125
 _ecma_append_to_values_collection($0 ? $2 : $1, _ecma_make_string_value($4) | 0, 1); //@line 11127
 _ecma_deref_ecma_string($4); //@line 11128
 return;
}
function _jmem_stats_allocate_byte_code_bytes($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = (SAFE_HEAP_LOAD(134123 * 4 | 0, 4, 0) | 0 | 0) + $0 | 0; //@line 14006
 SAFE_HEAP_STORE(134123 * 4 | 0, $2 | 0, 4);
 if ($2 >>> 0 >= (SAFE_HEAP_LOAD(134124 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
  SAFE_HEAP_STORE(134124 * 4 | 0, $2 | 0, 4);
 }
 return;
}
function _ecma_collection_iterator_init($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 5899
 } else {
  if (!(SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0)) {
   $$0 = 0; //@line 5905
  } else {
   $$0 = _jmem_decompress_pointer(SAFE_HEAP_LOAD($0 | 0, 2, 1) | 0 | 0) | 0; //@line 5910
  }
 }
 return $$0 | 0; //@line 5913
}
function _jmem_stats_allocate_property_bytes($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = (SAFE_HEAP_LOAD(134129 * 4 | 0, 4, 0) | 0 | 0) + $0 | 0; //@line 14075
 SAFE_HEAP_STORE(134129 * 4 | 0, $2 | 0, 4);
 if ($2 >>> 0 >= (SAFE_HEAP_LOAD(134130 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
  SAFE_HEAP_STORE(134130 * 4 | 0, $2 | 0, 4);
 }
 return;
}
function _jmem_stats_allocate_string_bytes($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = (SAFE_HEAP_LOAD(134125 * 4 | 0, 4, 0) | 0 | 0) + $0 | 0; //@line 14029
 SAFE_HEAP_STORE(134125 * 4 | 0, $2 | 0, 4);
 if ($2 >>> 0 >= (SAFE_HEAP_LOAD(134126 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
  SAFE_HEAP_STORE(134126 * 4 | 0, $2 | 0, 4);
 }
 return;
}
function _jmem_stats_allocate_object_bytes($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = (SAFE_HEAP_LOAD(134127 * 4 | 0, 4, 0) | 0 | 0) + $0 | 0; //@line 14052
 SAFE_HEAP_STORE(134127 * 4 | 0, $2 | 0, 4);
 if ($2 >>> 0 >= (SAFE_HEAP_LOAD(134128 * 4 | 0, 4, 0) | 0 | 0) >>> 0) {
  SAFE_HEAP_STORE(134128 * 4 | 0, $2 | 0, 4);
 }
 return;
}
function _lit_utf8_peek_prev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP; //@line 15817
 STACKTOP = STACKTOP + 16 | 0; //@line 15818
 $1 = sp; //@line 15819
 _lit_read_prev_code_unit_from_utf8($0, $1) | 0; //@line 15820
 STACKTOP = sp; //@line 15822
 return SAFE_HEAP_LOAD($1 | 0, 2, 0) | 0 | 0; //@line 15822
}
function _ecma_op_is_callable($0) {
 $0 = $0 | 0;
 var $$0 = 0, $3 = 0;
 if (_ecma_is_value_object($0) | 0) {
  $3 = _ecma_get_object_type(_ecma_get_object_from_value($0) | 0) | 0; //@line 10553
  $$0 = ($3 | 0) == 5 | ($3 | 1 | 0) == 3; //@line 10558
 } else {
  $$0 = 0; //@line 10560
 }
 return $$0 | 0; //@line 10562
}
function _ecma_builtin_object_object_keys($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if (_ecma_is_value_object($0) | 0) {
  $$0 = _ecma_builtin_helper_object_get_properties(_ecma_get_object_from_value($0) | 0, 1) | 0; //@line 6013
 } else {
  $$0 = _ecma_raise_type_error(6512) | 0; //@line 6016
 }
 return $$0 | 0; //@line 6018
}
function _ecma_number_calc_remainder($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $5 = 0.0, $8 = 0;
 $5 = $0 - +_ecma_number_trunc($0 / $1) * $1; //@line 3337
 if (_ecma_number_is_zero($5) | 0) {
  $8 = (_ecma_number_get_sign_field($0) | 0) != 0; //@line 3341
  return +($8 ? -$5 : $5);
 } else {
  return +$5;
 }
 return +0.0;
}
function _ecma_number_get_biased_exponent_field($0) {
 $0 = +$0;
 var $1 = 0, sp = 0;
 sp = STACKTOP; //@line 3073
 STACKTOP = STACKTOP + 16 | 0; //@line 3074
 $1 = sp; //@line 3075
 _ecma_number_unpack($0, 0, $1, 0); //@line 3076
 STACKTOP = sp; //@line 3078
 return SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0; //@line 3078
}
function _lit_utf8_peek_next($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP; //@line 15807
 STACKTOP = STACKTOP + 16 | 0; //@line 15808
 $1 = sp; //@line 15809
 _lit_read_code_unit_from_utf8($0, $1) | 0; //@line 15810
 STACKTOP = sp; //@line 15812
 return SAFE_HEAP_LOAD($1 | 0, 2, 0) | 0 | 0; //@line 15812
}
function _ecma_number_get_sign_field($0) {
 $0 = +$0;
 var $1 = 0, sp = 0;
 sp = STACKTOP; //@line 3006
 STACKTOP = STACKTOP + 16 | 0; //@line 3007
 $1 = sp; //@line 3008
 _ecma_number_unpack($0, $1, 0, 0); //@line 3009
 STACKTOP = sp; //@line 3012
 return SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 1) | 0 | 0 | 0; //@line 3012
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 6019
  return low << bits; //@line 6020
 }
 tempRet0 = low << bits - 32; //@line 6022
 return 0; //@line 6023
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 6008
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 6009
 }
 tempRet0 = 0; //@line 6011
 return high >>> bits - 32 | 0; //@line 6012
}
function _parser_emit_cbc_call($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = $0 + 240 | 0; //@line 12909
 if (SAFE_HEAP_LOAD($3 | 0, 2, 0) | 0 | 0) {
  _parser_flush_cbc($0); //@line 12913
 }
 SAFE_HEAP_STORE($3 | 0, $1 | 0, 2);
 SAFE_HEAP_STORE($0 + 234 | 0, $2 | 0, 2);
 return;
}
function _ecma_builtin_function_prototype_object_to_string($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if (_ecma_op_is_callable($0) | 0) {
  $$0 = _ecma_make_string_value(_ecma_get_magic_string(75) | 0) | 0; //@line 3436
 } else {
  $$0 = _ecma_raise_type_error(6161) | 0; //@line 3439
 }
 return $$0 | 0; //@line 3441
}
function _ecma_op_to_primitive($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (_ecma_is_value_object($0) | 0) {
  $$0 = _ecma_op_object_default_value(_ecma_get_object_from_value($0) | 0, $1) | 0; //@line 9720
 } else {
  $$0 = _ecma_copy_value($0) | 0; //@line 9723
 }
 return $$0 | 0; //@line 9725
}
function _ecma_get_named_accessor_property_setter($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0;
 $2 = SAFE_HEAP_LOAD($0 + 2 | 0, 2, 0) | 0 | 0; //@line 6861
 if (!($2 << 16 >> 16)) {
  $6 = 0; //@line 6864
 } else {
  $6 = _jmem_decompress_pointer($2 & 65535) | 0; //@line 6868
 }
 return $6 | 0; //@line 6870
}
function _ecma_init() {
 _ecma_lcache_init(); //@line 7187
 _ecma_init_global_lex_env(); //@line 7188
 _jmem_register_free_unused_memory_callback(1); //@line 7189
 SAFE_HEAP_STORE(536468 | 0, 0 | 0, 1);
 SAFE_HEAP_STORE(134116 * 4 | 0, (SAFE_HEAP_LOAD(134116 * 4 | 0, 4, 0) | 0) & -5 | 0, 4);
 return;
}
function _lit_char_is_identifier_start_character($0) {
 $0 = $0 | 0;
 if (($0 & 65535) < 128) {
  return $0 << 16 >> 16 == 95 | ($0 << 16 >> 16 == 36 | (($0 | 32) + -97 & 65535) < 26) | 0; //@line 14747
 } else {
  return _lit_char_is_unicode_letter($0) | 0; //@line 14750
 }
 return 0; //@line 14752
}
function _ecma_get_named_accessor_property_getter($0) {
 $0 = $0 | 0;
 var $1 = 0, $5 = 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0 | 0; //@line 6845
 if (!($1 << 16 >> 16)) {
  $5 = 0; //@line 6848
 } else {
  $5 = _jmem_decompress_pointer($1 & 65535) | 0; //@line 6852
 }
 return $5 | 0; //@line 6854
}
function _jmem_run_free_unused_memory_callbacks($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD(134101 * 4 | 0, 4, 0) | 0 | 0; //@line 13993
 if ($1 | 0) {
  FUNCTION_TABLE_vi[(SAFE_FT_MASK($1 | 0, 15 | 0) | 0) & 15]($0); //@line 13996
 }
 _jmem_pools_collect_empty(); //@line 13998
 return;
}
function _ecma_get_lex_env_outer_reference($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0;
 $2 = SAFE_HEAP_LOAD($0 + 6 | 0, 2, 0) | 0 | 0; //@line 6094
 if (!($2 << 16 >> 16)) {
  $6 = 0; //@line 6097
 } else {
  $6 = _jmem_decompress_pointer($2 & 65535) | 0; //@line 6101
 }
 return $6 | 0; //@line 6103
}
function _ecma_bytecode_ref($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = $0 + 2 | 0; //@line 7098
 $2 = SAFE_HEAP_LOAD($1 | 0, 2, 0) | 0 | 0; //@line 7099
 if ($2 << 16 >> 16 == -1) {
  _jerry_fatal(12); //@line 7102
 } else {
  SAFE_HEAP_STORE($1 | 0, $2 + 1 << 16 >> 16 | 0, 2);
  return;
 }
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 5202
 } else {
  $$0 = ___mo_lookup(SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0, SAFE_HEAP_LOAD($1 + 4 | 0, 4, 0) | 0 | 0, $0) | 0; //@line 5208
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 5212
}
function _ecma_compare_ecma_string_to_magic_id($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $8 = 0;
 if ((SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0) == ($1 | 0)) {
  $8 = ((SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 7) == 1; //@line 4444
 } else {
  $8 = 0; //@line 4446
 }
 return $8 | 0; //@line 4448
}
function _lit_utf8_incr($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0; //@line 15828
 $3 = SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 1) | 0 | 0; //@line 15830
 SAFE_HEAP_STORE($0 | 0, $1 + (($3 & 128 | 0) == 0 ? 1 : ($3 & 224 | 0) == 192 ? 2 : 3) | 0, 4);
 return;
}
function _ecma_get_object_prototype($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0;
 $2 = SAFE_HEAP_LOAD($0 + 6 | 0, 2, 0) | 0 | 0; //@line 6051
 if (!($2 << 16 >> 16)) {
  $6 = 0; //@line 6054
 } else {
  $6 = _jmem_decompress_pointer($2 & 65535) | 0; //@line 6058
 }
 return $6 | 0; //@line 6060
}
function _ecma_create_error_reference($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _jmem_pools_alloc(8) | 0; //@line 7044
 SAFE_HEAP_STORE($2 | 0, ($1 ^ 1) & 1 | 2 | 0, 4);
 SAFE_HEAP_STORE($2 + 4 | 0, $0 | 0, 4);
 return _ecma_make_error_reference_value($2) | 0; //@line 7052
}
function _ecma_get_property_list($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0;
 $2 = SAFE_HEAP_LOAD($0 + 4 | 0, 2, 0) | 0 | 0; //@line 6110
 if (!($2 << 16 >> 16)) {
  $6 = 0; //@line 6113
 } else {
  $6 = _jmem_decompress_pointer($2 & 65535) | 0; //@line 6117
 }
 return $6 | 0; //@line 6119
}
function _lit_utf8_decr($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 $$0 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0; //@line 15775
 do {
  $$0 = $$0 + -1 | 0; //@line 15777
 } while (((SAFE_HEAP_LOAD($$0 >> 0 | 0, 1, 0) | 0) & -64) << 24 >> 24 == -128);
 SAFE_HEAP_STORE($0 | 0, $$0 | 0, 4);
 return;
}
function _ecma_new_standard_error($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = _ecma_builtin_get(5) | 0; //@line 10373
 $2 = _ecma_create_object($1, 16, 1) | 0; //@line 10374
 _ecma_deref_object($1); //@line 10375
 SAFE_HEAP_STORE($2 + 8 | 0, 20 | 0, 2);
 return $2 | 0; //@line 10378
}
function _ecma_set_named_accessor_property_setter($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$sink = 0;
 if (!$2) {
  $$sink = 0; //@line 6896
 } else {
  $$sink = _jmem_compress_pointer($2) | 0; //@line 6899
 }
 SAFE_HEAP_STORE($1 + 2 | 0, $$sink | 0, 2);
 return;
}
function _ecma_gc_get_object_next($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0;
 $2 = SAFE_HEAP_LOAD($0 + 2 | 0, 2, 0) | 0 | 0; //@line 957
 if (!($2 << 16 >> 16)) {
  $6 = 0; //@line 960
 } else {
  $6 = _jmem_decompress_pointer($2 & 65535) | 0; //@line 964
 }
 return $6 | 0; //@line 966
}
function _vm_construct_literal_object($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _jmem_decompress_pointer($1 & 65535) | 0; //@line 2919
 return _ecma_make_object_value(_ecma_op_create_function_object(SAFE_HEAP_LOAD($0 + 24 | 0, 4, 0) | 0 | 0, $3) | 0) | 0; //@line 2924
}
function _lit_char_is_unicode_non_letter_ident_part($0) {
 $0 = $0 | 0;
 var $3 = 0;
 if (_search_char_in_interval_array($0, 2328, 5068, 181) | 0) {
  $3 = 1; //@line 14882
 } else {
  $3 = _search_char_in_char_array($0, 2690, 39) | 0; //@line 14885
 }
 return $3 | 0; //@line 14887
}
function _ecma_number_is_infinity($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0;
 $1 = _ecma_number_get_biased_exponent_field($0) | 0; //@line 3060
 $2 = _ecma_number_get_fraction_field($0) | 0; //@line 3061
 return ($1 | 0) == 2047 & (($2 | 0) == 0 & (tempRet0 | 0) == 0) | 0; //@line 3068
}
function _ecma_set_named_accessor_property_getter($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$sink = 0;
 if (!$2) {
  $$sink = 0; //@line 6880
 } else {
  $$sink = _jmem_compress_pointer($2) | 0; //@line 6883
 }
 SAFE_HEAP_STORE($1 | 0, $$sink | 0, 2);
 return;
}
function ___DOUBLE_BITS_661($0) {
 $0 = +$0;
 var $1 = 0;
 SAFE_HEAP_STORE_D(tempDoublePtr | 0, +$0, 8);
 $1 = SAFE_HEAP_LOAD(tempDoublePtr | 0, 4, 0) | 0 | 0; //@line 4940
 tempRet0 = SAFE_HEAP_LOAD(tempDoublePtr + 4 | 0, 4, 0) | 0 | 0; //@line 4942
 return $1 | 0; //@line 4943
}
function ___DOUBLE_BITS_317($0) {
 $0 = +$0;
 var $1 = 0;
 SAFE_HEAP_STORE_D(tempDoublePtr | 0, +$0, 8);
 $1 = SAFE_HEAP_LOAD(tempDoublePtr | 0, 4, 0) | 0 | 0; //@line 5701
 tempRet0 = SAFE_HEAP_LOAD(tempDoublePtr + 4 | 0, 4, 0) | 0 | 0; //@line 5703
 return $1 | 0; //@line 5704
}
function _parser_stack_change_last_uint8($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 SAFE_HEAP_STORE((SAFE_HEAP_LOAD($0 + 296 | 0, 4, 0) | 0 | 0) + -1 + ((SAFE_HEAP_LOAD($0 + 288 | 0, 4, 0) | 0 | 0) + 4) >> 0 | 0, $1 | 0, 1);
 SAFE_HEAP_STORE($0 + 304 >> 0 | 0, $1 | 0, 1);
 return;
}
function _jerry_init($0) {
 $0 = $0 | 0;
 _memset(536360, 0, 188) | 0; //@line 498
 SAFE_HEAP_STORE(134115 * 4 | 0, $0 | 0, 4);
 SAFE_HEAP_STORE(134116 * 4 | 0, SAFE_HEAP_LOAD(134116 * 4 | 0, 4, 0) | 0 | 1 | 0, 4);
 _jmem_init(); //@line 503
 _ecma_init(); //@line 504
 return;
}
function runPostSets() {}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 5712
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 5713
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 5714
}
function _lit_char_is_unicode_letter($0) {
 $0 = $0 | 0;
 var $3 = 0;
 if (_search_char_in_interval_array($0, 1538, 4762, 306) | 0) {
  $3 = 1; //@line 14760
 } else {
  $3 = _search_char_in_char_array($0, 2150, 89) | 0; //@line 14763
 }
 return $3 | 0; //@line 14765
}
function _ecma_op_create_object_object_noarg() {
 var $0 = 0, $1 = 0;
 $0 = _ecma_builtin_get(0) | 0; //@line 11663
 $1 = _ecma_op_create_object_object_noarg_and_set_prototype($0) | 0; //@line 11664
 _ecma_deref_object($0); //@line 11665
 return $1 | 0; //@line 11666
}
function _ecma_new_ecma_string_from_uint32($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = _ecma_alloc_string() | 0; //@line 3559
 SAFE_HEAP_STORE($1 | 0, 8 | 0, 2);
 SAFE_HEAP_STORE($1 + 2 | 0, $0 | 0, 2);
 SAFE_HEAP_STORE($1 + 4 | 0, $0 | 0, 4);
 return $1 | 0; //@line 3566
}
function _ecma_op_create_immutable_binding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = _ecma_create_named_data_property($0, $1, 0, 0) | 0; //@line 11359
 SAFE_HEAP_STORE($3 | 0, _ecma_copy_value_if_not_object($2) | 0 | 0, 4);
 return;
}
function _ecma_finalize() {
 _jmem_unregister_free_unused_memory_callback(1); //@line 7199
 _ecma_finalize_global_lex_env(); //@line 7200
 _ecma_finalize_builtins(); //@line 7201
 _ecma_gc_run(0); //@line 7202
 _ecma_finalize_lit_storage(); //@line 7203
 return;
}
function _parser_malloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _jmem_heap_alloc_block_null_on_error($1) | 0; //@line 9747
 if (!$2) {
  _parser_raise_error($0, 1); //@line 9750
 } else {
  return $2 | 0; //@line 9753
 }
 return 0; //@line 9755
}
function _jerry_value_clear_error_flag($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0; //@line 591
 if (_ecma_is_value_error_reference($1) | 0) {
  SAFE_HEAP_STORE($0 | 0, _ecma_clear_error_reference($1, 0) | 0 | 0, 4);
 }
 return;
}
function _ecma_ref_ecma_string($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0 | 0; //@line 4043
 if (($1 & 65535) < 65528) {
  SAFE_HEAP_STORE($0 | 0, ($1 & 65535) + 8 | 0, 2);
  return;
 } else {
  _jerry_fatal(12); //@line 4052
 }
}
function _parser_malloc_local($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _jmem_heap_alloc_block($1) | 0; //@line 9770
 if (!$2) {
  _parser_raise_error($0, 1); //@line 9773
 } else {
  return $2 | 0; //@line 9776
 }
 return 0; //@line 9778
}
function _ecma_string_is_length($0) {
 $0 = $0 | 0;
 var $7 = 0;
 if ((SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0) == 33) {
  $7 = ((SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 7) == 1; //@line 4461
 } else {
  $7 = 0; //@line 4463
 }
 return $7 | 0; //@line 4465
}
function _ecma_string_get_array_index($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if (!((SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 7)) {
  $$0 = SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0; //@line 4300
 } else {
  $$0 = -1; //@line 4302
 }
 return $$0 | 0; //@line 4304
}
function _ecma_ref_object($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0 | 0; //@line 718
 if (($1 & 65535) < 65472) {
  SAFE_HEAP_STORE($0 | 0, ($1 & 65535) + 64 | 0, 2);
  return;
 } else {
  _jerry_fatal(12); //@line 727
 }
}
function _ecma_get_string_magic($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if (((SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 7) == 1) {
  $$0 = SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0; //@line 5125
 } else {
  $$0 = 82; //@line 5127
 }
 return $$0 | 0; //@line 5129
}
function _ecma_make_int32_value($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if (($0 + 134217728 | 0) >>> 0 < 268435456) {
  $$0 = $0 << 4; //@line 5358
 } else {
  $$0 = _ecma_create_float_number(+($0 | 0)) | 0; //@line 5362
 }
 return $$0 | 0; //@line 5364
}
function _ecma_gc_set_object_next($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink = 0;
 if (!$1) {
  $$sink = 0; //@line 705
 } else {
  $$sink = _jmem_compress_pointer($1) | 0; //@line 708
 }
 SAFE_HEAP_STORE($0 + 2 | 0, $$sink | 0, 2);
 return;
}
function _jerry_parse_and_save_snapshot($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return _jerry_parse_and_save_snapshot_with_args($0, $1, 0, 0, $2, $3, $4, $5) | 0; //@line 175
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[(SAFE_FT_MASK(index | 0, 0 | 0) | 0) & 0](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 6271
}
function _parser_emit_cbc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = $0 + 240 | 0; //@line 12847
 if (SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0) {
  _parser_flush_cbc($0); //@line 12851
 }
 SAFE_HEAP_STORE($2 | 0, $1 | 0, 2);
 return;
}
function _ecma_string_is_empty($0) {
 $0 = $0 | 0;
 var $7 = 0;
 if (!(SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0)) {
  $7 = ((SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 7) == 1; //@line 3942
 } else {
  $7 = 0; //@line 3944
 }
 return $7 | 0; //@line 3946
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  SAFE_HEAP_STORE(___errno_location() | 0 | 0, 0 - $0 | 0, 4);
  $$0 = -1; //@line 2112
 } else {
  $$0 = $0; //@line 2114
 }
 return $$0 | 0; //@line 2116
}
function _parser_stack_free($0) {
 $0 = $0 | 0;
 var $3 = 0;
 _parser_data_free($0 + 288 | 0, 64); //@line 10036
 $3 = SAFE_HEAP_LOAD($0 + 300 | 0, 4, 0) | 0 | 0; //@line 10038
 if ($3 | 0) {
  _parser_free($3, 64); //@line 10041
 }
 return;
}
function _jerry_port_fatal($0) {
 $0 = $0 | 0;
 switch ($0 | 0) {
 case 0:
 case 10:
  {
   break;
  }
 default:
  {
   if (_jerry_port_default_is_abort_on_fail() | 0) {
    _abort(); //@line 17152
   }
  }
 }
 _exit($0 | 0); //@line 17157
}
function _parser_stack_iterator_init($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 SAFE_HEAP_STORE($1 | 0, SAFE_HEAP_LOAD($0 + 288 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($1 + 4 | 0, SAFE_HEAP_LOAD($0 + 296 | 0, 4, 0) | 0 | 0, 4);
 return;
}
function _ecma_op_object_has_own_property($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _ecma_op_object_get_own_property($0, $1, 0, 0) | 0; //@line 12451
 return $2 << 24 >> 24 != 4 & $2 << 24 >> 24 != 0 | 0; //@line 12455
}
function _ecma_make_uint32_value($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 < 134217728) {
  $$0 = $0 << 4; //@line 5373
 } else {
  $$0 = _ecma_create_float_number(+($0 >>> 0)) | 0; //@line 5377
 }
 return $$0 | 0; //@line 5379
}
function _ecma_make_empty_property_descriptor($0) {
 $0 = $0 | 0;
 SAFE_HEAP_STORE($0 | 0, 0 | 0, 2);
 SAFE_HEAP_STORE($0 + 4 | 0, 72 | 0, 4);
 SAFE_HEAP_STORE($0 + 8 | 0, 0 | 0, 4);
 SAFE_HEAP_STORE($0 + 12 | 0, 0 | 0, 4);
 return;
}
function _ecma_set_property_configurable_attr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 1) | 0 | 0; //@line 6955
 SAFE_HEAP_STORE($0 >> 0 | 0, ($1 ? $3 | 4 : $3 & 251) | 0, 1);
 return;
}
function _ecma_new_ecma_string_from_magic_string_ex_id($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = _ecma_alloc_string() | 0; //@line 3579
 _ecma_init_ecma_string_from_magic_string_ex_id($1, $0); //@line 3580
 return $1 | 0; //@line 3581
}
function _parser_list_iterator_init($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 SAFE_HEAP_STORE($1 | 0, $0 | 0, 4);
 SAFE_HEAP_STORE($1 + 4 | 0, SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE($1 + 8 | 0, 0 | 0, 4);
 return;
}
function _ecma_set_property_enumerable_attr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 1) | 0 | 0; //@line 6941
 SAFE_HEAP_STORE($0 >> 0 | 0, ($1 ? $3 | 8 : $3 & 247) | 0, 1);
 return;
}
function _ecma_init_global_lex_env() {
 var $0 = 0;
 $0 = _ecma_builtin_get(7) | 0; //@line 11155
 SAFE_HEAP_STORE(134106 * 4 | 0, _ecma_create_object_lex_env(0, $0, 0) | 0 | 0, 4);
 _ecma_deref_object($0); //@line 11158
 return;
}
function _ecma_set_property_writable_attr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 1) | 0 | 0; //@line 6919
 SAFE_HEAP_STORE($0 >> 0 | 0, ($1 ? $3 | 16 : $3 & 239) | 0, 1);
 return;
}
function _ecma_init_ecma_string_from_magic_string_ex_id($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 SAFE_HEAP_STORE($0 | 0, 10 | 0, 2);
 SAFE_HEAP_STORE($0 + 2 | 0, $1 + 82 | 0, 2);
 SAFE_HEAP_STORE($0 + 4 | 0, $1 | 0, 4);
 return;
}
function _ecma_new_ecma_string_from_magic_string_id($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = _ecma_alloc_string() | 0; //@line 3601
 _ecma_init_ecma_string_from_magic_string_id($1, $0); //@line 3602
 return $1 | 0; //@line 3603
}
function _ecma_set_property_lcached($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 1) | 0 | 0; //@line 6969
 SAFE_HEAP_STORE($0 >> 0 | 0, ($1 ? $3 | 32 : $3 & 223) | 0, 1);
 return;
}
function _parser_stack_iterator_read_uint8($0) {
 $0 = $0 | 0;
 return SAFE_HEAP_LOAD((SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0) + -1 + ((SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0) + 4) >> 0 | 0, 1, 0) | 0 | 0; //@line 12456
}
function _ecma_init_ecma_string_from_magic_string_id($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 SAFE_HEAP_STORE($0 | 0, 9 | 0, 2);
 SAFE_HEAP_STORE($0 + 2 | 0, $1 | 0, 2);
 SAFE_HEAP_STORE($0 + 4 | 0, $1 | 0, 4);
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[(SAFE_FT_MASK(index | 0, 3 | 0) | 0) & 3](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 6236
}
function _ecma_finalize_lit_storage() {
 _ecma_free_string_list(SAFE_HEAP_LOAD(134104 * 4 | 0, 4, 0) | 0 | 0); //@line 7391
 _ecma_free_string_list(SAFE_HEAP_LOAD(134105 * 4 | 0, 4, 0) | 0 | 0); //@line 7393
 return;
}
function _ecma_set_object_extensible($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = SAFE_HEAP_LOAD($0 | 0, 2, 1) | 0 | 0; //@line 6029
 SAFE_HEAP_STORE($0 | 0, ($1 ? $3 | 32 : $3 & 65503) | 0, 2);
 return;
}
function _jerry_return($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if (($0 | 0) == 24) {
  $$0 = _ecma_create_error_reference_from_context() | 0; //@line 574
 } else {
  $$0 = $0; //@line 576
 }
 return $$0 | 0; //@line 578
}
function _ecma_get_number_from_value($0) {
 $0 = $0 | 0;
 var $$0 = 0.0;
 if (!($0 & 15)) {
  $$0 = +($0 >> 4 | 0); //@line 5438
 } else {
  $$0 = +(+SAFE_HEAP_LOAD_D($0 & -8 | 0, 8)); //@line 5443
 }
 return +$$0;
}
function _ecma_create_error_reference_from_context() {
 return _ecma_create_error_reference(SAFE_HEAP_LOAD(134113 * 4 | 0, 4, 0) | 0 | 0, ((SAFE_HEAP_LOAD(134116 * 4 | 0, 4, 0) | 0) & 8 | 0) != 0) | 0; //@line 7062
}
function _ecma_copy_value_if_not_object($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if (($0 & 7 | 0) == 3) {
  $$0 = $0; //@line 5546
 } else {
  $$0 = _ecma_copy_value($0) | 0; //@line 5549
 }
 return $$0 | 0; //@line 5551
}
function _ecma_init_ecma_string_from_uint32($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 SAFE_HEAP_STORE($0 | 0, 8 | 0, 2);
 SAFE_HEAP_STORE($0 + 2 | 0, $1 | 0, 2);
 SAFE_HEAP_STORE($0 + 4 | 0, $1 | 0, 4);
 return;
}
function _ecma_gc_set_object_visited($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0 | 0; //@line 1401
 if (($1 & 65535) < 64) {
  SAFE_HEAP_STORE($0 | 0, $1 | 64 | 0, 2);
 }
 return;
}
function _ecma_builtin_error_prototype_dispatch_routine($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return _ecma_builtin_error_prototype_object_to_string($1) | 0; //@line 3250
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[(SAFE_FT_MASK(index | 0, 1 | 0) | 0) & 1](a1 | 0, a2 | 0, a3 | 0); //@line 6264
}
function _lit_char_is_hex_digit($0) {
 $0 = $0 | 0;
 if (($0 + -48 & 65535) < 10) {
  return 1; //@line 14904
 } else {
  return (($0 | 32) + -97 & 65535) < 6 | 0; //@line 14909
 }
 return 0; //@line 14911
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 5724
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 5726
}
function SAFE_FT_MASK(value, mask) {
 value = value | 0;
 mask = mask | 0;
 var ret = 0;
 ret = value & mask; //@line 104
 if ((ret | 0) != (value | 0)) ftfault(); //@line 105
 return ret | 0; //@line 106
}
function _ecma_init_ecma_magic_string($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 SAFE_HEAP_STORE($0 | 0, 9 | 0, 2);
 SAFE_HEAP_STORE($0 + 2 | 0, $1 | 0, 2);
 SAFE_HEAP_STORE($0 + 4 | 0, $1 | 0, 4);
 return;
}
function _ecma_builtin_global_object_character_is_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((SAFE_HEAP_LOAD($1 + ($0 >>> 3) >> 0 | 0, 1, 1) | 0 | 0) & 1 << ($0 & 7) | 0) != 0 | 0; //@line 4907
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 return ret | 0; //@line 8
}
function _lit_convert_surrogate_pair_to_code_point($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((($0 & 65535) << 10) + 10485760 & 67107840) + 65536 | ($1 & 65535) + 9216 & 65535 | 0; //@line 16146
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 4009
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 4012
 }
 return $$0 | 0; //@line 4014
}
function _ecma_number_make_normal_positive_from_fraction_and_exponent($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return +(+_ecma_number_pack(0, $2 + 1023 | 0, $0, $1 & -1048577));
}
function _ecma_fast_copy_value($0) {
 $0 = $0 | 0;
 var $4 = 0;
 if (!($0 & 7)) {
  $4 = $0; //@line 5532
 } else {
  $4 = _ecma_copy_value($0) | 0; //@line 5535
 }
 return $4 | 0; //@line 5537
}
function _jmem_pools_free($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 SAFE_HEAP_STORE($0 | 0, SAFE_HEAP_LOAD(134100 * 4 | 0, 4, 0) | 0 | 0, 4);
 SAFE_HEAP_STORE(134100 * 4 | 0, $0 | 0, 4);
 return;
}
function _ecma_reject($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0) {
  $$0 = _ecma_raise_type_error(4074) | 0; //@line 11654
 } else {
  $$0 = 40; //@line 11656
 }
 return $$0 | 0; //@line 11658
}
function _parser_data_init($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
 SAFE_HEAP_STORE($0 + 4 | 0, 0 | 0, 4);
 SAFE_HEAP_STORE($0 + 8 | 0, $1 | 0, 4);
 return;
}
function _lit_char_get_utf8_length($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 & 65535; //@line 14966
 return (($1 & 65408 | 0) == 0 ? 1 : ($1 & 63488 | 0) == 0 ? 2 : 3) | 0; //@line 14973
}
function _ecma_builtin_make_function_object_for_setter_accessor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _ecma_builtin_make_function_object_for_routine($0, $1, 1) | 0; //@line 9069
}
function _ecma_builtin_make_function_object_for_getter_accessor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _ecma_builtin_make_function_object_for_routine($0, $1, 0) | 0; //@line 9061
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 5953
}
function _vm_is_strict_mode() {
 return ((SAFE_HEAP_LOAD((SAFE_HEAP_LOAD(SAFE_HEAP_LOAD(134107 * 4 | 0, 4, 0) | 0 | 0, 4, 0) | 0 | 0) + 4 | 0, 2, 0) | 0) & 8) != 0 | 0; //@line 3140
}
function _ecma_new_ecma_length_string() {
 var $0 = 0;
 $0 = _ecma_alloc_string() | 0; //@line 3707
 _ecma_init_ecma_magic_string($0, 33); //@line 3708
 return $0 | 0; //@line 3709
}
function _ecma_dealloc_extended_object($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 _jmem_stats_free_object_bytes($1); //@line 3191
 _jmem_heap_free_block($0, $1); //@line 3192
 return;
}
function _ecma_create_float_number($0) {
 $0 = +$0;
 var $1 = 0;
 $1 = _ecma_alloc_number() | 0; //@line 5304
 SAFE_HEAP_STORE_D($1 | 0, +$0, 8);
 return $1 | 1 | 0; //@line 5308
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[(SAFE_FT_MASK(index | 0, 3 | 0) | 0) & 3](a1 | 0, a2 | 0); //@line 6250
}
function _ecma_dealloc_string_buffer($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 _jmem_stats_free_string_bytes($1); //@line 3223
 _jmem_heap_free_block($0, $1); //@line 3224
 return;
}
function _ecma_finalize_global_lex_env() {
 _ecma_deref_object(SAFE_HEAP_LOAD(134106 * 4 | 0, 4, 0) | 0 | 0); //@line 11165
 SAFE_HEAP_STORE(134106 * 4 | 0, 0 | 0, 4);
 return;
}
function _out($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!((SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0) & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 3499
 }
 return;
}
function _lit_get_magic_string_ex_utf8($0) {
 $0 = $0 | 0;
 return SAFE_HEAP_LOAD((SAFE_HEAP_LOAD(134102 * 4 | 0, 4, 0) | 0 | 0) + ($0 << 2) | 0, 4, 0) | 0 | 0; //@line 15083
}
function _lit_get_magic_string_ex_size($0) {
 $0 = $0 | 0;
 return SAFE_HEAP_LOAD((SAFE_HEAP_LOAD(134103 * 4 | 0, 4, 0) | 0 | 0) + ($0 << 2) | 0, 4, 0) | 0 | 0; //@line 15092
}
function _jmem_finalize() {
 _jmem_pools_finalize(); //@line 13941
 if ((SAFE_HEAP_LOAD(134115 * 4 | 0, 4, 0) | 0) & 4 | 0) {
  _jmem_stats_print(); //@line 13946
 }
 return;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 20
 STACK_MAX = stackMax; //@line 21
}
function _ecma_op_object_has_property($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (_ecma_op_object_get_property($0, $1, 0, 0) | 0) << 24 >> 24 != 0 | 0; //@line 12464
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 5338
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 5340
}
function _ecma_string_to_utf8_bytes($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _ecma_string_copy_to_cesu8_buffer($0, $1, $2) | 0; //@line 4287
 return;
}
function _jmem_stats_free_byte_code_bytes($0) {
 $0 = $0 | 0;
 SAFE_HEAP_STORE(134123 * 4 | 0, (SAFE_HEAP_LOAD(134123 * 4 | 0, 4, 0) | 0 | 0) - $0 | 0, 4);
 return;
}
function _jmem_stats_free_property_bytes($0) {
 $0 = $0 | 0;
 SAFE_HEAP_STORE(134129 * 4 | 0, (SAFE_HEAP_LOAD(134129 * 4 | 0, 4, 0) | 0 | 0) - $0 | 0, 4);
 return;
}
function _ecma_alloc_extended_object($0) {
 $0 = $0 | 0;
 _jmem_stats_allocate_object_bytes($0); //@line 3182
 return _jmem_heap_alloc_block($0) | 0; //@line 3184
}
function _jmem_stats_free_string_bytes($0) {
 $0 = $0 | 0;
 SAFE_HEAP_STORE(134125 * 4 | 0, (SAFE_HEAP_LOAD(134125 * 4 | 0, 4, 0) | 0 | 0) - $0 | 0, 4);
 return;
}
function _jmem_stats_free_object_bytes($0) {
 $0 = $0 | 0;
 SAFE_HEAP_STORE(134127 * 4 | 0, (SAFE_HEAP_LOAD(134127 * 4 | 0, 4, 0) | 0 | 0) - $0 | 0, 4);
 return;
}
function _ecma_dealloc_property_pair($0) {
 $0 = $0 | 0;
 _jmem_stats_free_property_bytes(16); //@line 3238
 _jmem_heap_free_block($0, 16); //@line 3239
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 28
  threwValue = value; //@line 29
 }
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[(SAFE_FT_MASK(index | 0, 3 | 0) | 0) & 3](a1 | 0) | 0; //@line 6257
}
function _ecma_named_data_property_assign_value($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _ecma_value_assign_value($1, $2); //@line 6838
 return;
}
function _ecma_alloc_string_buffer($0) {
 $0 = $0 | 0;
 _jmem_stats_allocate_string_bytes($0); //@line 3214
 return _jmem_heap_alloc_block($0) | 0; //@line 3216
}
function _ecma_builtin_global_object_encode_uri_component($0) {
 $0 = $0 | 0;
 return _ecma_builtin_global_object_encode_uri_helper($0, 6289) | 0; //@line 4405
}
function _ecma_builtin_global_object_decode_uri_component($0) {
 $0 = $0 | 0;
 return _ecma_builtin_global_object_decode_uri_helper($0, 6289) | 0; //@line 4391
}
function _ecma_builtin_function_dispatch_call($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _ecma_builtin_function_dispatch_construct($0, $1) | 0; //@line 3719
}
function _ecma_builtin_error_dispatch_call($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _ecma_builtin_helper_error_dispatch_call(0, $0, $1) | 0; //@line 3370
}
function _ecma_builtin_type_error_thrower_dispatch_routine($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return 0; //@line 6336
}
function _ecma_builtin_type_error_thrower_dispatch_construct($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _ecma_raise_type_error(539172) | 0; //@line 6352
}
function _ecma_get_lex_env_binding_object($0) {
 $0 = $0 | 0;
 return _jmem_decompress_pointer(SAFE_HEAP_LOAD($0 + 4 | 0, 2, 1) | 0 | 0) | 0; //@line 6137
}
function _ecma_builtin_function_prototype_dispatch_construct($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _ecma_raise_type_error(6246) | 0; //@line 3701
}
function _ecma_builtin_error_dispatch_construct($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _ecma_builtin_error_dispatch_call($0, $1) | 0; //@line 3378
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[(SAFE_FT_MASK(index | 0, 15 | 0) | 0) & 15](a1 | 0); //@line 6243
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, SAFE_HEAP_LOAD((___pthread_self_812() | 0) + 188 | 0, 4, 0) | 0 | 0) | 0; //@line 3958
}
function _ecma_get_named_data_property($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (_ecma_find_named_property($0, $1) | 0) + 7 & -4 | 0; //@line 6433
}
function _parser_stack_init($0) {
 $0 = $0 | 0;
 _parser_data_init($0 + 288 | 0, 60); //@line 10026
 SAFE_HEAP_STORE($0 + 300 | 0, 0 | 0, 4);
 return;
}
function _ecma_free_native_pointer($0) {
 $0 = $0 | 0;
 _jmem_heap_free_block(SAFE_HEAP_LOAD($0 + 7 & -4 | 0, 4, 0) | 0 | 0, 8); //@line 2953
 return;
}
function _ecma_builtin_type_error_thrower_dispatch_call($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _ecma_raise_type_error(539172) | 0; //@line 6344
}
function _ecma_op_object_default_value($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _ecma_op_general_object_default_value($0, $1) | 0; //@line 13086
}
function _ecma_builtin_global_object_encode_uri($0) {
 $0 = $0 | 0;
 return _ecma_builtin_global_object_encode_uri_helper($0, 6337) | 0; //@line 4398
}
function _ecma_builtin_global_object_decode_uri($0) {
 $0 = $0 | 0;
 return _ecma_builtin_global_object_decode_uri_helper($0, 6337) | 0; //@line 4384
}
function _ecma_builtin_function_dispatch_routine($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return 0; //@line 3711
}
function _ecma_alloc_property_pair() {
 _jmem_stats_allocate_property_bytes(16); //@line 3230
 return _jmem_heap_alloc_block(16) | 0; //@line 3232
}
function _parser_list_free($0) {
 $0 = $0 | 0;
 _parser_data_free($0, (SAFE_HEAP_LOAD($0 + 12 | 0, 4, 0) | 0 | 0) + 4 | 0); //@line 9878
 return;
}
function _ecma_dealloc_string($0) {
 $0 = $0 | 0;
 _jmem_stats_free_string_bytes(8); //@line 3206
 _jmem_pools_free($0, 8); //@line 3207
 return;
}
function _ecma_dealloc_object($0) {
 $0 = $0 | 0;
 _jmem_stats_free_object_bytes(8); //@line 3174
 _jmem_pools_free($0, 8); //@line 3175
 return;
}
function _parser_statement_length($0) {
 $0 = $0 | 0;
 return SAFE_HEAP_LOAD(7178 + (($0 & 255) + -1) >> 0 | 0, 1, 1) | 0 | 0 | 0; //@line 12467
}
function _ecma_builtin_object_prototype_object_to_string($0) {
 $0 = $0 | 0;
 return _ecma_builtin_helper_object_to_string($0) | 0; //@line 5313
}
function _ecma_builtin_error_dispatch_routine($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return 0; //@line 3362
}
function _jmem_heap_stat_alloc_iter() {
 SAFE_HEAP_STORE(134135 * 4 | 0, (SAFE_HEAP_LOAD(134135 * 4 | 0, 4, 0) | 0 | 0) + 1 | 0, 4);
 return;
}
function _ecma_number_to_decimal($0, $1, $2) {
 $0 = +$0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _ecma_errol0_dtoa($0, $1, $2) | 0; //@line 2492
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 6229
}
function _lit_get_magic_string_size_block_start($0) {
 $0 = $0 | 0;
 return SAFE_HEAP_LOAD(424 + ($0 << 2) | 0, 4, 0) | 0 | 0; //@line 15074
}
function _jmem_heap_stat_free_iter() {
 SAFE_HEAP_STORE(134136 * 4 | 0, (SAFE_HEAP_LOAD(134136 * 4 | 0, 4, 0) | 0 | 0) + 1 | 0, 4);
 return;
}
function _ecma_op_create_object_object_noarg_and_set_prototype($0) {
 $0 = $0 | 0;
 return _ecma_create_object($0, 0, 0) | 0; //@line 11673
}
function _jmem_heap_stat_nonskip() {
 SAFE_HEAP_STORE(134132 * 4 | 0, (SAFE_HEAP_LOAD(134132 * 4 | 0, 4, 0) | 0 | 0) + 1 | 0, 4);
 return;
}
function _convert_code_point_to_high_surrogate($0) {
 $0 = $0 | 0;
 return (($0 + 16711680 | 0) >>> 10 | 55296) & 65535 | 0; //@line 16000
}
function _ecma_set_object_is_builtin($0) {
 $0 = $0 | 0;
 SAFE_HEAP_STORE($0 | 0, SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0 | 16 | 0, 2);
 return;
}
function _ecma_deref_object($0) {
 $0 = $0 | 0;
 SAFE_HEAP_STORE($0 | 0, (SAFE_HEAP_LOAD($0 | 0, 2, 1) | 0 | 0) + 65472 | 0, 2);
 return;
}
function _parser_list_reset($0) {
 $0 = $0 | 0;
 _parser_data_init($0, SAFE_HEAP_LOAD($0 + 12 | 0, 4, 0) | 0 | 0); //@line 9887
 return;
}
function _ecma_raise_reference_error($0) {
 $0 = $0 | 0;
 _ecma_raise_standard_error(0, $0) | 0; //@line 10522
 return 24; //@line 10523
}
function _ecma_builtin_function_is_routine($0) {
 $0 = $0 | 0;
 return (SAFE_HEAP_LOAD($0 + 10 | 0, 2, 1) | 0 | 0) > 7 | 0; //@line 8743
}
function _opfunc_logical_not($0) {
 $0 = $0 | 0;
 return _ecma_make_boolean_value((_ecma_op_to_boolean($0) | 0) ^ 1) | 0; //@line 14045
}
function _jmem_heap_stat_skip() {
 SAFE_HEAP_STORE(134131 * 4 | 0, (SAFE_HEAP_LOAD(134131 * 4 | 0, 4, 0) | 0 | 0) + 1 | 0, 4);
 return;
}
function _ecma_free_value_if_not_object($0) {
 $0 = $0 | 0;
 if (($0 & 7 | 0) != 3) {
  _ecma_free_value($0); //@line 5598
 }
 return;
}
function b5(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(5); //@line 6290
 return 0; //@line 6290
}
function _opfunc_equality($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _ecma_op_abstract_equality_compare($0, $1) | 0; //@line 13947
}
function _jerry_is_valid_utf8_string($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _lit_is_valid_utf8_string($0, $1) | 0; //@line 678
}
function _ecma_raise_range_error($0) {
 $0 = $0 | 0;
 _ecma_raise_standard_error(0, $0) | 0; //@line 10515
 return 24; //@line 10516
}
function _lit_get_magic_string_size($0) {
 $0 = $0 | 0;
 return SAFE_HEAP_LOAD(5903 + $0 >> 0 | 0, 1, 1) | 0 | 0 | 0; //@line 15066
}
function _ecma_raise_type_error($0) {
 $0 = $0 | 0;
 _ecma_raise_standard_error(0, $0) | 0; //@line 10529
 return 24; //@line 10530
}
function _ecma_are_values_integer_numbers($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (($1 | $0) & 15 | 0) == 0 | 0; //@line 5220
}
function _ecma_raise_uri_error($0) {
 $0 = $0 | 0;
 _ecma_raise_standard_error(0, $0) | 0; //@line 10536
 return 24; //@line 10537
}
function _ecma_is_lexical_environment($0) {
 $0 = $0 | 0;
 return ((SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 31) > 28 | 0; //@line 6012
}
function _ecma_get_magic_string_ex($0) {
 $0 = $0 | 0;
 return _ecma_new_ecma_string_from_magic_string_ex_id($0) | 0; //@line 3573
}
function _ecma_alloc_string() {
 _jmem_stats_allocate_string_bytes(8); //@line 3198
 return _jmem_pools_alloc(8) | 0; //@line 3200
}
function _ecma_alloc_object() {
 _jmem_stats_allocate_object_bytes(8); //@line 3166
 return _jmem_pools_alloc(8) | 0; //@line 3168
}
function _jmem_heap_alloc_block_null_on_error($0) {
 $0 = $0 | 0;
 return _jmem_heap_gc_and_alloc_block($0, 1) | 0; //@line 14331
}
function _ecma_get_object_is_builtin($0) {
 $0 = $0 | 0;
 return ((SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 16) != 0 | 0; //@line 6069
}
function _ecma_get_object_extensible($0) {
 $0 = $0 | 0;
 return ((SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 32) != 0 | 0; //@line 6021
}
function _lit_get_magic_string_utf8($0) {
 $0 = $0 | 0;
 return SAFE_HEAP_LOAD(120 + ($0 << 2) | 0, 4, 0) | 0 | 0; //@line 15057
}
function _jmem_unregister_free_unused_memory_callback($0) {
 $0 = $0 | 0;
 SAFE_HEAP_STORE(134101 * 4 | 0, 0 | 0, 4);
 return;
}
function _vm_is_direct_eval_form_call() {
 return ((SAFE_HEAP_LOAD(134116 * 4 | 0, 4, 0) | 0) & 2 | 0) != 0 | 0; //@line 3148
}
function _jmem_register_free_unused_memory_callback($0) {
 $0 = $0 | 0;
 SAFE_HEAP_STORE(134101 * 4 | 0, $0 | 0, 4);
 return;
}
function _jerry_port_default_is_abort_on_fail() {
 return (SAFE_HEAP_LOAD(539173 | 0, 1, 0) | 0 | 0) != 0 | 0; //@line 17139
}
function _ecma_get_magic_string($0) {
 $0 = $0 | 0;
 return _ecma_new_ecma_string_from_magic_string_id($0) | 0; //@line 3466
}
function _ecma_get_lex_env_provide_this($0) {
 $0 = $0 | 0;
 return (_ecma_get_lex_env_type($0) | 0) == 15 | 0; //@line 6127
}
function _ecma_gc_is_object_visited($0) {
 $0 = $0 | 0;
 return (SAFE_HEAP_LOAD($0 | 0, 2, 1) | 0 | 0) > 63 | 0; //@line 974
}
function _ecma_builtin_object_prototype_object_value_of($0) {
 $0 = $0 | 0;
 return _ecma_op_to_object($0) | 0; //@line 5320
}
function _lit_is_code_point_utf16_high_surrogate($0) {
 $0 = $0 | 0;
 return ($0 & -1024 | 0) == 55296 | 0; //@line 15570
}
function _lit_is_code_point_utf16_low_surrogate($0) {
 $0 = $0 | 0;
 return ($0 & -1024 | 0) == 56320 | 0; //@line 15562
}
function _lexer_construct_regexp_object($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 _parser_raise_error($0, 18); //@line 9341
}
function _convert_code_point_to_low_surrogate($0) {
 $0 = $0 | 0;
 return ($0 & 1023 | 56320) & 65535 | 0; //@line 16009
}
function _parser_free_local($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 _jmem_heap_free_block($0, $1); //@line 9785
 return;
}
function _ecma_number_is_negative($0) {
 $0 = +$0;
 return (_ecma_number_get_sign_field($0) | 0) != 0 | 0; //@line 3001
}
function _ecma_fast_free_value($0) {
 $0 = $0 | 0;
 if ($0 & 7 | 0) {
  _ecma_free_value($0); //@line 5687
 }
 return;
}
function _ecma_builtin_function_prototype_dispatch_call($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 72; //@line 3693
}
function _ecma_get_lex_env_type($0) {
 $0 = $0 | 0;
 return (SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 15 | 0; //@line 6087
}
function _jerry_value_has_error_flag($0) {
 $0 = $0 | 0;
 return _ecma_is_value_error_reference($0) | 0; //@line 585
}
function _ecma_get_object_type($0) {
 $0 = $0 | 0;
 return (SAFE_HEAP_LOAD($0 | 0, 2, 0) | 0) & 15 | 0; //@line 6044
}
function b0(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(0); //@line 6275
 return 0; //@line 6275
}
function _jmem_heap_alloc_block($0) {
 $0 = $0 | 0;
 return _jmem_heap_gc_and_alloc_block($0, 0) | 0; //@line 14121
}
function _ecma_is_value_number($0) {
 $0 = $0 | 0;
 return ($0 & 15 | 0) == 0 | ($0 & 7 | 0) == 1 | 0; //@line 5239
}
function _parser_free($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 _jmem_heap_free_block($0, $1); //@line 9762
 return;
}
function _lit_get_magic_string_ex_count() {
 return SAFE_HEAP_LOAD(134114 * 4 | 0, 4, 0) | 0 | 0; //@line 15049
}
function _ecma_make_nan_value() {
 return _ecma_create_float_number(+_ecma_number_make_nan()) | 0; //@line 5298
}
function _jmem_compress_pointer($0) {
 $0 = $0 | 0;
 return ($0 - 12072 | 0) >>> 3 & 65535 | 0; //@line 13964
}
function _ecma_string_hash($0) {
 $0 = $0 | 0;
 return SAFE_HEAP_LOAD($0 + 2 | 0, 2, 0) | 0 | 0; //@line 4570
}
function _ecma_get_global_environment() {
 return SAFE_HEAP_LOAD(134106 * 4 | 0, 4, 0) | 0 | 0; //@line 11173
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 5193
}
function _lit_char_is_decimal_digit($0) {
 $0 = $0 | 0;
 return ($0 + -48 & 65535) < 10 | 0; //@line 14895
}
function _ecma_is_value_collection_chunk($0) {
 $0 = $0 | 0;
 return ($0 & 7 | 0) == 7 | 0; //@line 5271
}
function _ecma_get_float_from_value($0) {
 $0 = $0 | 0;
 return +(+(+SAFE_HEAP_LOAD_D($0 & -8 | 0, 8)));
}
function setDynamicTop(value) {
 value = value | 0;
 SAFE_HEAP_STORE(DYNAMICTOP_PTR | 0, value | 0, 4);
}
function _ecma_is_value_integer_number($0) {
 $0 = $0 | 0;
 return ($0 & 15 | 0) == 0 | 0; //@line 5210
}
function _ecma_is_value_error_reference($0) {
 $0 = $0 | 0;
 return ($0 & 7 | 0) == 7 | 0; //@line 5263
}
function _ecma_is_normal_or_arrow_function($0) {
 $0 = $0 | 0;
 return ($0 | 0) == 2 | 0; //@line 10544
}
function _parser_cbc_stream_init($0) {
 $0 = $0 | 0;
 _parser_data_init($0, 60); //@line 9792
 return;
}
function _parser_cbc_stream_free($0) {
 $0 = $0 | 0;
 _parser_data_free($0, 64); //@line 9811
 return;
}
function _ecma_number_make_infinity($0) {
 $0 = $0 | 0;
 return +(+_ecma_number_pack($0, 2047, 0, 0));
}
function _ecma_number_to_int32($0) {
 $0 = +$0;
 return _ecma_number_to_uint32($0) | 0; //@line 2483
}
function _ecma_is_value_float_number($0) {
 $0 = $0 | 0;
 return ($0 & 7 | 0) == 1 | 0; //@line 5228
}
function _ecma_get_collection_chunk_from_value($0) {
 $0 = $0 | 0;
 return $0 & -8 | 0; //@line 5477
}
function _ecma_is_property_configurable($0) {
 $0 = $0 | 0;
 return ($0 & 4) != 0 | 0; //@line 6830
}
function _ecma_get_error_reference_from_value($0) {
 $0 = $0 | 0;
 return $0 & -8 | 0; //@line 5469
}
function _jmem_decompress_pointer($0) {
 $0 = $0 | 0;
 return ($0 << 3) + 12072 | 0; //@line 13973
}
function _ecma_is_value_boolean($0) {
 $0 = $0 | 0;
 return ($0 | 16 | 0) == 56 | 0; //@line 5174
}
function _ecma_is_property_enumerable($0) {
 $0 = $0 | 0;
 return ($0 & 8) != 0 | 0; //@line 6933
}
function _ecma_dealloc_number($0) {
 $0 = $0 | 0;
 _jmem_pools_free($0, 8); //@line 3160
 return;
}
function _ecma_is_value_array_hole($0) {
 $0 = $0 | 0;
 return ($0 | 0) == 104 | 0; //@line 5202
}
function _ecma_is_property_writable($0) {
 $0 = $0 | 0;
 return ($0 & 16) != 0 | 0; //@line 6911
}
function _ecma_make_collection_chunk_value($0) {
 $0 = $0 | 0;
 return $0 | 7 | 0; //@line 5411
}
function _ecma_is_value_simple($0) {
 $0 = $0 | 0;
 return ($0 & 15 | 0) == 8 | 0; //@line 5145
}
function _ecma_make_error_reference_value($0) {
 $0 = $0 | 0;
 return $0 | 7 | 0; //@line 5403
}
function _ecma_make_boolean_value($0) {
 $0 = $0 | 0;
 return ($0 ? 56 : 40) | 0; //@line 5284
}
function _ecma_is_value_undefined($0) {
 $0 = $0 | 0;
 return ($0 | 0) == 72 | 0; //@line 5159
}
function _ecma_is_value_string($0) {
 $0 = $0 | 0;
 return ($0 & 7 | 0) == 2 | 0; //@line 5247
}
function _ecma_is_value_object($0) {
 $0 = $0 | 0;
 return ($0 & 7 | 0) == 3 | 0; //@line 5255
}
function _ecma_is_value_direct($0) {
 $0 = $0 | 0;
 return ($0 & 7 | 0) == 0 | 0; //@line 5137
}
function _ecma_number_is_nan($0) {
 $0 = +$0;
 return $0 != $0 | 0.0 != 0.0 | 0; //@line 2961
}
function _lit_zt_utf8_string_size($0) {
 $0 = $0 | 0;
 return _strlen($0) | 0; //@line 15577
}
function b4(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(4); //@line 6287
}
function _jmem_heap_stat_init() {
 SAFE_HEAP_STORE(134118 * 4 | 0, 524280 | 0, 4);
 return;
}
function _ecma_is_value_found($0) {
 $0 = $0 | 0;
 return ($0 | 0) != 120 | 0; //@line 5195
}
function _ecma_get_integer_from_value($0) {
 $0 = $0 | 0;
 return $0 >> 4 | 0; //@line 5418
}
function _align_column_to_tab($0) {
 $0 = $0 | 0;
 return $0 + 7 & -8 | 1 | 0; //@line 7332
}
function _ecma_is_value_false($0) {
 $0 = $0 | 0;
 return ($0 | 0) == 40 | 0; //@line 5188
}
function _ecma_get_string_from_value($0) {
 $0 = $0 | 0;
 return $0 & -8 | 0; //@line 5453
}
function _ecma_get_object_from_value($0) {
 $0 = $0 | 0;
 return $0 & -8 | 0; //@line 5461
}
function _ecma_is_value_true($0) {
 $0 = $0 | 0;
 return ($0 | 0) == 56 | 0; //@line 5181
}
function _ecma_is_value_null($0) {
 $0 = $0 | 0;
 return ($0 | 0) == 88 | 0; //@line 5166
}
function _ecma_is_value_empty($0) {
 $0 = $0 | 0;
 return ($0 | 0) == 8 | 0; //@line 5152
}
function _ecma_invert_boolean_value($0) {
 $0 = $0 | 0;
 return $0 ^ 16 | 0; //@line 5484
}
function ___errno_location() {
 return (___pthread_self_815() | 0) + 64 | 0; //@line 2123
}
function _ecma_make_integer_value($0) {
 $0 = $0 | 0;
 return $0 << 4 | 0; //@line 5291
}
function _jmem_pools_finalize() {
 _jmem_pools_collect_empty(); //@line 14544
 return;
}
function _ecma_make_string_value($0) {
 $0 = $0 | 0;
 return $0 | 2 | 0; //@line 5387
}
function _ecma_make_object_value($0) {
 $0 = $0 | 0;
 return $0 | 3 | 0; //@line 5395
}
function ___ofl_lock() {
 ___lock(539160); //@line 5472
 return 539168; //@line 5473
}
function _ecma_lcache_init() {
 _memset(536548, 0, 2048) | 0; //@line 7209
 return;
}
function _ecma_number_is_zero($0) {
 $0 = +$0;
 return $0 == 0.0 | 0; //@line 3054
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 111
}
function _jmem_stats_print() {
 _jmem_heap_stats_print(); //@line 13953
 return;
}
function _ecma_number_make_nan() {
 return +(+_ecma_number_pack(0, 2047, 1, 0));
}
function b3(p0) {
 p0 = p0 | 0;
 abort(3); //@line 6284
 return 0; //@line 6284
}
function _jerry_fatal($0) {
 $0 = $0 | 0;
 _jerry_port_fatal($0); //@line 14598
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function _ecma_alloc_number() {
 return _jmem_pools_alloc(8) | 0; //@line 3154
}
function _emscripten_snapshot_compiler_get_version() {
 return 8; //@line 120
}
function _ecma_check_value_type_is_spec_defined($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_822() {
 return _pthread_self() | 0; //@line 5114
}
function ___pthread_self_815() {
 return _pthread_self() | 0; //@line 2129
}
function ___pthread_self_812() {
 return _pthread_self() | 0; //@line 5120
}
function b2(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(2); //@line 6281
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 15
}
function _emscripten_get_global_libc() {
 return 539096; //@line 2021
}
function _dummy_732($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 2253
}
function ___ofl_unlock() {
 ___unlock(539160); //@line 5478
 return;
}
function _jmem_init() {
 _jmem_heap_init(); //@line 13935
 return;
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 3481
}
function getTempRet0() {
 return tempRet0 | 0; //@line 114
}
function stackSave() {
 return STACKTOP | 0; //@line 11
}
function b1(p0) {
 p0 = p0 | 0;
 abort(1); //@line 6278
}
function _pthread_self() {
 return 1152; //@line 2134
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function _jmem_heap_finalize() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,___stdout_write,___stdio_seek,___stdio_write];
var FUNCTION_TABLE_vi = [b1,_ecma_free_unused_memory,_parser_cbc_stream_init,_parser_stack_init,_lexer_next_token,_parser_parse_statements,_parser_list_free,_parser_free_jumps,_parser_free_literals,_parser_cbc_stream_free,_parser_stack_free,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vii = [b2,_parser_stack_push_uint8,_parser_parse_function_arguments,_parser_free_local];
var FUNCTION_TABLE_ii = [b3,___stdio_close,_parser_post_processing,b3];
var FUNCTION_TABLE_viii = [b4,_parser_list_init];
var FUNCTION_TABLE_iiiii = [b5];

  return { stackSave: stackSave, _i64Subtract: _i64Subtract, _memset: _memset, setThrew: setThrew, dynCall_viii: dynCall_viii, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, dynCall_vi: dynCall_vi, _fflush: _fflush, _llvm_cttz_i32: _llvm_cttz_i32, _sbrk: _sbrk, _memcpy: _memcpy, ___errno_location: ___errno_location, ___muldi3: ___muldi3, dynCall_vii: dynCall_vii, ___uremdi3: ___uremdi3, stackAlloc: stackAlloc, getTempRet0: getTempRet0, setTempRet0: setTempRet0, _realloc: _realloc, _i64Add: _i64Add, dynCall_iiii: dynCall_iiii, setDynamicTop: setDynamicTop, _emscripten_get_global_libc: _emscripten_get_global_libc, dynCall_iiiii: dynCall_iiiii, dynCall_ii: dynCall_ii, ___udivdi3: ___udivdi3, _llvm_bswap_i32: _llvm_bswap_i32, _emscripten_snapshot_compiler_get_version: _emscripten_snapshot_compiler_get_version, _saveSetjmp: _saveSetjmp, _emscripten_snapshot_compiler_compile: _emscripten_snapshot_compiler_compile, _free: _free, runPostSets: runPostSets, establishStackSpace: establishStackSpace, _memmove: _memmove, stackRestore: stackRestore, _testSetjmp: _testSetjmp, _malloc: _malloc };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var stackSave = Module["stackSave"] = asm["stackSave"];
var setDynamicTop = Module["setDynamicTop"] = asm["setDynamicTop"];
var _memset = Module["_memset"] = asm["_memset"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _emscripten_snapshot_compiler_get_version = Module["_emscripten_snapshot_compiler_get_version"] = asm["_emscripten_snapshot_compiler_get_version"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _emscripten_snapshot_compiler_compile = Module["_emscripten_snapshot_compiler_compile"] = asm["_emscripten_snapshot_compiler_compile"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
;
Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];
Runtime.setDynamicTop = Module['setDynamicTop'];
Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];


// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;







/**
 * @constructor
 * @extends {Error}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();


    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}





// Copyright JS Foundation and other contributors, http://js.foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

var Module;
var ENVIRONMENT_IS_NODE;

(function(){
  Module.prototype.snapshotVersion = Module.ccall(
    'emscripten_snapshot_compiler_get_version', 'number');

  Module.inspect = Module.toString = function() {
    return Module.prototype.toString();
  };
})();

// Set module.exports or else expose constructor on global object:
if (typeof module !== 'undefined') {
  module.exports = Module;
} else {
  var global = (new Function('return this;'))();
  global.JerryScriptSnapshotCompiler = Module;
}

// When invoked as the main Node.js entry point, also expose a basic CLI:
if (ENVIRONMENT_IS_NODE && require.main === module) {
  function printUsageAndExit() {
    var path = require('path');
    var scriptFile = path.basename(__filename);
    console.log(
`Generates JerryScript snaphot file from JavaScript source file.

  ${scriptFile} [options] IN_FILE

OPTIONS:
  -o | --output    Snapshot output file path -- default is "snapshot.out"
  -s | --strict    Source should be interpreted in strict mode -- default is false
  -e | --eval      Code should be executed as eval() -- default is execute as global`);
    process.exit(-1);
  }

  // inputPath, isForGlobal, isStrict, outputPath
  var options = {
    inputPath: undefined,
    outputPath: 'snapshot.out',
    isForGlobal: true,
    isStrict: false,
  };

  var nextKey;
  process.argv.slice(1).forEach((val, index) => {
    switch (val) {
      case '-o':
      case '--output':
        nextKey = 'outputPath';
        break;
      case '-e':
      case '--eval':
        nextKey = '';
        options.isForGlobal = false;
        break;
      case '-s':
      case '--strict':
        options.isForGlobal = true;
        break;
      default:
        if (nextKey) {
          options[nextKey] = val;
          nextKey = undefined;
        } else {
          options.inputPath = val;
        }
    }
  });

  var fs = require('fs');
  if (!options.inputPath || !options.outputPath) {
    printUsageAndExit();
  }

  if (!fs.existsSync(options.inputPath)) {
    console.error(`Input file does not exist: ${options.inputPath}`);
    process.exit(-1);
  }

  var compiler = new Module();
  compiler.compileFile(
    options.inputPath, options.isForGlobal,
    options.isStrict, options.outputPath);
  process.exit(0);
}

})(); // IIFE that is started in pre.js

//# sourceMappingURL=jerryscript-snapshot-compiler.js.map